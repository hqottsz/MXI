-- Generated by Oracle SQL Developer Data Modeler 4.1.3.901
--   at:        2019-05-13 11:20:59 EDT
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g




CREATE OR REPLACE TYPE DeadlineRecord
AS
  OBJECT
  (
    DataTypeDbId NUMBER (10) ,
    DataTypeId   NUMBER (10) ,
    DomainTypeCd VARCHAR2 (8) ,
    DataTypeCd   VARCHAR2 (8) ,
    EngUnitCd    VARCHAR2 (8) ,
    DeviationQt FLOAT (22) ,
    MultiplierQt FLOAT (22) ,
    IntervalQt FLOAT (22) ,
    DeadlineDt         DATE ,
    ExtendedDeadlineDt DATE ,
    StartUsageQt FLOAT (22) ,
    CurrentUsageQt FLOAT (22) ,
    UsageRemainingQt FLOAT (22) ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE DistReqPickListTableRow
AS
  OBJECT
  (
    part_no_oem VARCHAR2 (40) ,
    part_name   VARCHAR2 (80) ,
    part_type   VARCHAR2 (8) ,
    part_unit   VARCHAR2 (8) ,
    hazmat      VARCHAR2 (8) ,
    from_loc    VARCHAR2 (4000) ,
    to_bin      VARCHAR2 (4000) ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE DistReqTableRow
AS
  OBJECT
  (
    dist_req_db_id NUMBER (10) ,
    dist_req_id    NUMBER (10) ,
    request_id     VARCHAR2 (80) ,
    to_warehouse   VARCHAR2 (2000) ,
    from_supplier  VARCHAR2 (2000) ,
    needed_qty FLOAT ,
    owner    VARCHAR2 (16) ,
    qty_unit VARCHAR2 (8) ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE FLEET_MTC_REC
AS
  OBJECT
  (
    task_name VARCHAR2 (200) ,
    work_type VARCHAR2 (4000) ,
    plan_1    NUMBER (1) ,
    plan_2    NUMBER (1) ,
    is_future NUMBER (1) ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE ForecastPeriod
AS
  OBJECT
  (
    in_StartDate DATE ,
    in_EndDate   DATE ,
    in_Rate      NUMBER ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE INVENTORYSTATUS
AS
  OBJECT
  (
    h_inv_db_id         NUMBER ,
    h_inv_id            NUMBER ,
    aircraft_bool       NUMBER (1) ,
    old_op_status_db_id NUMBER ,
    old_op_status_cd    VARCHAR2 (8) ,
    old_cond_db_id      NUMBER ,
    old_cond_cd         VARCHAR2 (8) ,
    new_op_status_db_id NUMBER ,
    new_op_status_cd    VARCHAR2 (8) ,
    new_cond_db_id      NUMBER ,
    new_cond_cd         VARCHAR2 (8) ,
    reason_for_change   VARCHAR2 (100) ,
    list_of_reasons     VARCHAR2 (200) ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE IntIntIntIntFloatTuple
AS
  OBJECT
  (
    element1 INTEGER ,
    element2 INTEGER ,
    element3 INTEGER ,
    element4 INTEGER ,
    element5 FLOAT ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE IntIntIntIntTuple
AS
  OBJECT
  (
    element1 INTEGER ,
    element2 INTEGER ,
    element3 INTEGER ,
    element4 INTEGER ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE IntIntIntTuple
AS
  OBJECT
  (
    element1 INTEGER ,
    element2 INTEGER ,
    element3 INTEGER ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE IntIntTuple
AS
  OBJECT
  (
    element1 INTEGER ,
    element2 INTEGER ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE MXCODEKEY
AS
  OBJECT
  (
    db_id NUMBER ,
    cd    VARCHAR2 (8) ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE PTROUTINEMANHOURS
AS
  OBJECT
  (
    planning_type_db_id NUMBER (10) ,
    planning_type_id    NUMBER (10) ,
    planning_type_cd    VARCHAR2 (80) ,
    manhours FLOAT (22) ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE StrStrStrStrFloatTuple
AS
  OBJECT
  (
    element1 VARCHAR2 (256) ,
    element2 VARCHAR2 (256) ,
    element3 VARCHAR2 (256) ,
    element4 VARCHAR2 (256) ,
    element5 FLOAT ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE StrStrStrStrTuple
AS
  OBJECT
  (
    element1 VARCHAR2 (256) ,
    element2 VARCHAR2 (256) ,
    element3 VARCHAR2 (256) ,
    element4 VARCHAR2 (256) ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE StrStrStrTuple
AS
  OBJECT
  (
    element1 VARCHAR2 (256) ,
    element2 VARCHAR2 (256) ,
    element3 VARCHAR2 (256) ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE StrStrTuple
AS
  OBJECT
  (
    element1 VARCHAR2 (256) ,
    element2 VARCHAR2 (256) ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE T_BUFF_DIFF_WP
AS
  OBJECT
  (
    wp_name       VARCHAR2 (80) ,
    plan_type_cd  VARCHAR2 (80) ,
    plan_1_2      VARCHAR2 (7) ,
    r_hours       NUMBER (6,1) ,
    nr_factor     NUMBER (6,1) ,
    nr_hours      NUMBER (6,1) ,
    tot_hours     NUMBER (6,1) ,
    ass_hrs       NUMBER (6,1) ,
    fill_pct      NUMBER (6,2) ,
    fill_pct_unit VARCHAR2 (3) ,
    is_future     NUMBER (1) ,
    wp_idx        NUMBER (10) ,
    tz_cd         VARCHAR2 (50) ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE T_NEW_RMVD_WP
AS
  OBJECT
  (
    wp_name    VARCHAR2 (80) ,
    start_dt   DATE ,
    end_dt     DATE ,
    loc_cd     VARCHAR2 (80) ,
    workscopes VARCHAR2 (4000) ,
    is_future  NUMBER (1) ,
    tz_cd      VARCHAR2 (50) ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE T_SCHED_DIFF_WP
AS
  OBJECT
  (
    wp_name         VARCHAR2 (80) ,
    plan_1_2        VARCHAR2 (7) ,
    event_status_cd VARCHAR2 (16) ,
    start_dt        DATE ,
    end_dt          DATE ,
    loc_cd          VARCHAR2 (80) ,
    workscopes      VARCHAR2 (4000) ,
    is_future       NUMBER (1) ,
    wp_key          VARCHAR2 (22) ,
    wp_idx          NUMBER (6) ,
    tz_cd           VARCHAR2 (50) ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE T_VENDOR_PRICE
AS
  OBJECT
  (
    part_vendor_price_db_id NUMBER (10) ,
    part_vendor_price_id    NUMBER (10) ,
    part_no_db_id           NUMBER (10) ,
    part_no_id              NUMBER (10) ,
    price_type_db_id        NUMBER (10) ,
    price_type_cd           VARCHAR2 (8) ,
    qty_unit_db_id          NUMBER (10) ,
    qty_unit_cd             VARCHAR2 (8) ,
    unit_price FLOAT ,
    lead_time FLOAT ,
    effective_to_dt DATE ,
    vendor_note     VARCHAR2 (4000) ,
    min_order_qty FLOAT ,
    discount_pct FLOAT ,
    contract_ref_sdesc VARCHAR2 (80) ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE UsageDeltaTuple
AS
  OBJECT
  (
    element1 RAW (16) ,
    element2 FLOAT ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE detail_financial_tx_rtyp
AS
  OBJECT
  (
    xaction_id      NUMBER (10) ,
    xaction_dt      DATE ,
    xaction_type_cd VARCHAR2 (16) ,
    xaction_ldesc   VARCHAR2 (4000) ,
    currency_cd     VARCHAR2 (8) ,
    account_cd      VARCHAR2 (80) ,
    account_type_cd VARCHAR2 (8) ,
    ext_key_sdesc   VARCHAR2 (80) ,
    credit_cost     NUMBER (15,5) ,
    debit_cost      NUMBER (15,5) ,
    tcode_cd        VARCHAR2 (80) ,
    po_number       VARCHAR2 (500) ,
    invoice_number  VARCHAR2 (500) ,
    part_no_oem     VARCHAR2 (40) ,
    serial_no_oem   VARCHAR2 (40) ,
    wo_ref_sdesc    VARCHAR2 (80) ,
    ac_reg_cd       VARCHAR2 (10) ,
    loc_cd          VARCHAR2 (2000) ,
    supply_loc_cd   VARCHAR2 (2000) ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE mxKey
AS
  OBJECT
  (
    db_id NUMBER ,
    id    NUMBER ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE summary_financial_tx_rtyp
AS
  OBJECT
  (
    account_cd       VARCHAR2 (80) ,
    account_type_cd  VARCHAR2 (8) ,
    credit_cost      NUMBER (15,5) ,
    debit_cost       NUMBER (15,5) ,
    tcode_cd         VARCHAR2 (80) ,
    ext_key_sdesc    VARCHAR2 (80) ,
    default_currency VARCHAR2 (8) ) NOT FINAL ;
  /

CREATE OR REPLACE TYPE DeadlineTable
IS
  TABLE OF DeadlineRecord ;
  /

CREATE OR REPLACE TYPE DistReqPickListTable
IS
  TABLE OF DistReqPickListTableRow ;
  /

CREATE OR REPLACE TYPE DistReqTable
IS
  TABLE OF DistReqTableRow ;
  /

CREATE OR REPLACE TYPE FLEET_MTC
IS
  TABLE OF FLEET_MTC_REC ;
  /

CREATE OR REPLACE TYPE FloatTable
IS
  TABLE OF FLOAT ;
  /

CREATE OR REPLACE TYPE ForecastPeriods
IS
  TABLE OF ForecastPeriod ;
  /

CREATE OR REPLACE TYPE INVENTORYSTATUSTABLE
IS
  TABLE OF INVENTORYSTATUS ;
  /

CREATE OR REPLACE TYPE IntIntIntIntFloatTable
IS
  TABLE OF IntIntIntIntFloatTuple ;
  /

CREATE OR REPLACE TYPE IntIntIntIntTable
IS
  TABLE OF IntIntIntIntTuple ;
  /

CREATE OR REPLACE TYPE IntIntIntTable
IS
  TABLE OF IntIntIntTuple ;
  /

CREATE OR REPLACE TYPE IntIntTable
IS
  TABLE OF IntIntTuple ;
  /

CREATE OR REPLACE TYPE IntegerTable
IS
  TABLE OF INTEGER ;
  /

CREATE OR REPLACE TYPE Raw16Table
IS
  TABLE OF RAW (16) ;
  /

CREATE OR REPLACE TYPE StrStrStrStrFloatTable
IS
  TABLE OF StrStrStrStrFloatTuple ;
  /

CREATE OR REPLACE TYPE StrStrStrStrTable
IS
  TABLE OF StrStrStrStrTuple ;
  /

CREATE OR REPLACE TYPE StrStrStrTable
IS
  TABLE OF StrStrStrTuple ;
  /

CREATE OR REPLACE TYPE StrStrTable
IS
  TABLE OF StrStrTuple ;
  /

CREATE OR REPLACE TYPE TAB_PTROUTINEMANHOURS
IS
  TABLE OF PTROUTINEMANHOURS ;
  /

CREATE OR REPLACE TYPE T_TAB_BUFF_DIFF
IS
  TABLE OF T_BUFF_DIFF_WP ;
  /

CREATE OR REPLACE TYPE T_TAB_NEWRMVD
IS
  TABLE OF T_NEW_RMVD_WP ;
  /

CREATE OR REPLACE TYPE T_TAB_SCHED_DIFF
IS
  TABLE OF T_SCHED_DIFF_WP ;
  /

CREATE OR REPLACE TYPE T_TAB_VENDOR_PRICE
IS
  TABLE OF T_VENDOR_PRICE ;
  /

CREATE OR REPLACE TYPE UsageDeltaTable
IS
  TABLE OF UsageDeltaTuple ;
  /

CREATE OR REPLACE TYPE Varchar2Table
IS
  TABLE OF VARCHAR2 (256) ;
  /

CREATE OR REPLACE TYPE detail_financial_tx_ttyp
IS
  TABLE OF detail_financial_tx_rtyp ;
  /

CREATE OR REPLACE TYPE mxKeyTable
IS
  TABLE OF mxKey ;
  /

CREATE OR REPLACE TYPE summary_financial_tx_ttyp
IS
  TABLE OF summary_financial_tx_rtyp ;
  /

CREATE TABLE ACFT_CAP_LEVELS
  (
    acft_no_db_id      NUMBER (10) NOT NULL ,
    acft_no_id         NUMBER (10) NOT NULL ,
    cap_db_id          NUMBER (10) NOT NULL ,
    cap_cd             VARCHAR2 (8) NOT NULL ,
    level_db_id        NUMBER (10) ,
    level_cd           VARCHAR2 (8) ,
    custom_level       NUMBER (10) ,
    config_level_db_id NUMBER (10) ,
    config_level_cd    VARCHAR2 (8) ,
    rstat_cd           NUMBER (3) NOT NULL ,
    revision_no        NUMBER (10) NOT NULL ,
    ctrl_db_id         NUMBER (10) NOT NULL ,
    creation_dt        DATE NOT NULL ,
    creation_db_id     NUMBER (10) NOT NULL ,
    revision_dt        DATE NOT NULL ,
    revision_db_id     NUMBER (10) NOT NULL ,
    revision_user      VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE ACFT_CAP_LEVELS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE ACFT_CAP_LEVELS ADD CHECK ( ctrl_db_id BETWEEN 0 AND 4294967295) ;
ALTER TABLE ACFT_CAP_LEVELS ADD CHECK ( creation_db_id BETWEEN 0 AND 4294967295) ;
ALTER TABLE ACFT_CAP_LEVELS ADD CHECK ( revision_db_id BETWEEN 0 AND 4294967295) ;
ALTER TABLE ACFT_CAP_LEVELS ADD CONSTRAINT PK_ACFT_CAP_LEVELS PRIMARY KEY ( acft_no_db_id, acft_no_id, cap_db_id, cap_cd ) ;


CREATE TABLE ACFT_GROUP
  (
    ID             NUMBER (10) NOT NULL ,
    NAME           VARCHAR2 (40) NOT NULL ,
    DESCRIPTION    VARCHAR2 (500) ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE ACFT_GROUP ADD CONSTRAINT PK_ACFT_GROUP PRIMARY KEY ( ID ) ;


CREATE TABLE ACFT_GROUP_ASSIGNMENT
  (
    ACFT_NO_DB_ID  NUMBER (10) NOT NULL ,
    ACFT_NO_ID     NUMBER (10) NOT NULL ,
    GROUP_ID       NUMBER (10) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
CREATE INDEX IX_ACFTGROUP_ACFTGROUPASS ON ACFT_GROUP_ASSIGNMENT
  (
    GROUP_ID ASC
  ) ;
ALTER TABLE ACFT_GROUP_ASSIGNMENT ADD CONSTRAINT PK_ACFT_GROUP_ASSIGNMENT PRIMARY KEY ( ACFT_NO_DB_ID, ACFT_NO_ID, GROUP_ID ) ;


CREATE TABLE AC_COND_SETTING
  (
    AC_COND_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    AC_COND_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    COND_SET_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    COND_SET_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE AC_COND_SETTING ADD CHECK ( AC_COND_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE AC_COND_SETTING ADD CHECK ( COND_SET_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE AC_COND_SETTING ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE AC_COND_SETTING ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE AC_COND_SETTING
IS
  '[EXTENDABLE] Maps the aircraft conditions (REF_AC_COND) to the condition settings (REF_COND_SET).' ;
ALTER TABLE AC_COND_SETTING ADD CONSTRAINT PK_AC_COND_SETTING PRIMARY KEY ( AC_COND_DB_ID, AC_COND_CD, COND_SET_DB_ID, COND_SET_CD ) ;


CREATE TABLE AEROBUY_INVOICE_CHARGES
  (
    PO_INVOICE_ALT_ID RAW (16) NOT NULL ,
    PACKING          NUMBER (12,2) ,
    SETUP            NUMBER (12,2) ,
    DIE_CHARGE       NUMBER (12,2) ,
    DOCUMENTATION    NUMBER (12,2) ,
    RETURN_CONTAINER NUMBER (12,2) ,
    TRANSPORTATION   NUMBER (12,2) ,
    MISCELLANEOUS    NUMBER (12,2) ,
    FEDERAL_EXCISE   NUMBER (12,2) ,
    FEES_MARKUP      NUMBER (12,2)
  ) ;
COMMENT ON TABLE AEROBUY_INVOICE_CHARGES
IS
  'Integration specific information relating to invoice charges' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_CHARGES.PO_INVOICE_ALT_ID
IS
  'Primary key is the ALT_ID of the PO_INVOICE' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_CHARGES.PACKING
IS
  'The Packing Charge of the invoice' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_CHARGES.SETUP
IS
  'The Setup/Cutting Charge of the invoice' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_CHARGES.DIE_CHARGE
IS
  'The Die Charge of the invoice' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_CHARGES.DOCUMENTATION
IS
  'The Documentation Charge of the invoice' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_CHARGES.RETURN_CONTAINER
IS
  'The Returnable Container Charge (refundable) of the invoice' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_CHARGES.TRANSPORTATION
IS
  'The Transportation Charge of the invoice' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_CHARGES.MISCELLANEOUS
IS
  'The Miscellaneous Charge of the invoice' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_CHARGES.FEDERAL_EXCISE
IS
  'The Federal Excise Tax Charge of the invoice' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_CHARGES.FEES_MARKUP
IS
  'The Fees/Markup Charge of the invoice' ;
ALTER TABLE AEROBUY_INVOICE_CHARGES ADD CONSTRAINT PK_AEROBUY_INVOICE_CHARGES PRIMARY KEY ( PO_INVOICE_ALT_ID ) ;


CREATE TABLE AEROBUY_INVOICE_INFO
  (
    PO_INVOICE_ALT_ID RAW (16) NOT NULL ,
    INVOICE_TYPE             VARCHAR2 (1) NOT NULL ,
    SHIP_TO_CODE             VARCHAR2 (5) NOT NULL ,
    PACKING_SHEET_NUMBER     VARCHAR2 (15) NOT NULL ,
    BILL_OF_LADING_NUMBER    VARCHAR2 (24) ,
    REFERENCE_INVOICE_NUMBER VARCHAR2 (25) ,
    HARMONIZED_TARIFF_CODE   VARCHAR2 (15)
  ) ;
COMMENT ON TABLE AEROBUY_INVOICE_INFO
IS
  'Integration specific information relating to invoices' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_INFO.PO_INVOICE_ALT_ID
IS
  'Primary key is the ALT_ID of the PO_INVOICE' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_INFO.INVOICE_TYPE
IS
  'Set to either ''C'' for credit or ''D'' for debit' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_INFO.SHIP_TO_CODE
IS
  'Ship-to-Code = Shipment field' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_INFO.PACKING_SHEET_NUMBER
IS
  'Packing Sheet Number- Shipment field' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_INFO.BILL_OF_LADING_NUMBER
IS
  'Bill of Lading Number - Shipment field' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_INFO.REFERENCE_INVOICE_NUMBER
IS
  'Should be provided in the Invoice Details. Placing in the External Reference field is an option, however the vendor may already be using it to store data.' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_INFO.HARMONIZED_TARIFF_CODE
IS
  'Specifically done for US customs purposes. Mostly for the accounts payable. ' ;
ALTER TABLE AEROBUY_INVOICE_INFO ADD CONSTRAINT PK_AEROBUY_INVOICE_INFO PRIMARY KEY ( PO_INVOICE_ALT_ID ) ;


CREATE TABLE AEROBUY_INVOICE_TAXES
  (
    PO_INVOICE_ALT_ID RAW (16) NOT NULL ,
    LOCAL_TAX        NUMBER (4,2) ,
    STATE_TAX        NUMBER (4,2) ,
    COUNTY_TAX       NUMBER (4,2) ,
    VAT_SALE         NUMBER (4,2) ,
    VAT_PURCHASE     NUMBER (4,2) ,
    VAT_CREDIT_LOAN  NUMBER (4,2) ,
    VAT_EXCHANGE     NUMBER (4,2) ,
    VAT_LEASE        NUMBER (4,2) ,
    VAT_PROVISIONING NUMBER (4,2) ,
    VAT_COMMISSIONS  NUMBER (4,2) ,
    VAT_EXEMPT       NUMBER (4,2)
  ) ;
COMMENT ON TABLE AEROBUY_INVOICE_TAXES
IS
  'Integration specific information relating to invoice taxes' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_TAXES.PO_INVOICE_ALT_ID
IS
  'Primary key is the ALT_ID of the PO_INVOICE' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_TAXES.LOCAL_TAX
IS
  'Local Sales Tax of the invoice' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_TAXES.STATE_TAX
IS
  'State Sales Tax of the invoice' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_TAXES.COUNTY_TAX
IS
  'County Sales Tax of the invoice' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_TAXES.VAT_SALE
IS
  'Value Added Tax Sale of the invoice' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_TAXES.VAT_PURCHASE
IS
  'Value Added Tax Purchase of the invoice' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_TAXES.VAT_CREDIT_LOAN
IS
  'Value Added Tax Credit Loans/Conditional Sales of the invoice' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_TAXES.VAT_EXCHANGE
IS
  'Value Added Tax Exchange of the invoice' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_TAXES.VAT_LEASE
IS
  'Value Added Tax Lease/Hire/Rental of the invoice' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_TAXES.VAT_PROVISIONING
IS
  'Value Added Tax Provisioning of the invoice' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_TAXES.VAT_COMMISSIONS
IS
  'Value Added Tax Sales/Commissions of the invoice' ;
  COMMENT ON COLUMN AEROBUY_INVOICE_TAXES.VAT_EXEMPT
IS
  'Value Added Tax Exempt of the invoice' ;
ALTER TABLE AEROBUY_INVOICE_TAXES ADD CONSTRAINT PK_AEROBUY_INVOICE_TAXES PRIMARY KEY ( PO_INVOICE_ALT_ID ) ;


CREATE TABLE ASB_ADAPTER_DEST_LOOKUP
  (
    NAMESPACE      VARCHAR2 (100) NOT NULL DEFERRABLE ,
    ROOT_NAME      VARCHAR2 (100) NOT NULL DEFERRABLE ,
    URL            VARCHAR2 (500) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ASB_ADAPTER_DEST_LOOKUP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ASB_ADAPTER_DEST_LOOKUP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN ASB_ADAPTER_DEST_LOOKUP.NAMESPACE
IS
  'Response root namespace for subscription' ;
  COMMENT ON COLUMN ASB_ADAPTER_DEST_LOOKUP.ROOT_NAME
IS
  'Response root name for subscription' ;
  COMMENT ON COLUMN ASB_ADAPTER_DEST_LOOKUP.URL
IS
  'URL of the web services that needs to be notified.' ;
  COMMENT ON COLUMN ASB_ADAPTER_DEST_LOOKUP.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ASB_ADAPTER_DEST_LOOKUP.CREATION_DT
IS
  'The database server?s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ASB_ADAPTER_DEST_LOOKUP.REVISION_DT
IS
  'The database server?s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ASB_ADAPTER_DEST_LOOKUP.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ASB_ADAPTER_DEST_LOOKUP.REVISION_USER
IS
  'The user that last modified the record. ' ;
ALTER TABLE ASB_ADAPTER_DEST_LOOKUP ADD CONSTRAINT PK_ASB_ADAPTER_DEST_LOOKUP PRIMARY KEY ( NAMESPACE, ROOT_NAME, URL ) ;


CREATE TABLE ASB_EXCEPTION_LOG
  (
    EXCEPTION_ID RAW (16) NOT NULL DEFERRABLE INITIALLY DEFERRED ,
    TRANSACTION_ID RAW (16) NOT NULL DEFERRABLE ,
    MESSAGE_ID RAW (16) NOT NULL DEFERRABLE ,
    EXCEPTION_DATE NUMBER (19) NOT NULL DEFERRABLE ,
    BODY_BLOB BLOB ,
    BINARY_BLOB BLOB ,
    RSTAT_CD NUMBER (3) DEFAULT 0 NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ASB_EXCEPTION_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
COMMENT ON TABLE ASB_EXCEPTION_LOG
IS
  'The ASB_NOTIFICATION_LOG table is for capturing logging errors that have occurred in a transaction.  Rather than storing exceptions and errors as attributes on the individual logging entries, this table is used to allow for multiple errors to be logged.' ;
  COMMENT ON COLUMN ASB_EXCEPTION_LOG.EXCEPTION_ID
IS
  'The unique message ID generated for this instance' ;
  COMMENT ON COLUMN ASB_EXCEPTION_LOG.TRANSACTION_ID
IS
  'The transaction the exception message applies to' ;
  COMMENT ON COLUMN ASB_EXCEPTION_LOG.MESSAGE_ID
IS
  'The unique message ID associated to the message that caused the exception' ;
  COMMENT ON COLUMN ASB_EXCEPTION_LOG.EXCEPTION_DATE
IS
  'The date the message was received in the ASB.  This is stored as a 64-bit long based on the Java date format for millisecond precision.' ;
  CREATE INDEX IX_FK_MIMRSTAT_ASBEXCEPTIONLOG ON ASB_EXCEPTION_LOG
    (
      RSTAT_CD ASC
    ) ;
ALTER TABLE ASB_EXCEPTION_LOG ADD CONSTRAINT PK_ASB_EXCEPTION_LOG PRIMARY KEY ( EXCEPTION_ID ) ;


CREATE TABLE ASB_INBOUND_LOG
  (
    MSG_ID RAW (16) NOT NULL DEFERRABLE ,
    TRANSACTION_ID RAW (16) NOT NULL DEFERRABLE ,
    EXTERNAL_ID VARCHAR2 (200) ,
    MSG_DATE    NUMBER (19) NOT NULL DEFERRABLE ,
    MSG_SOURCE  VARCHAR2 (600) NOT NULL DEFERRABLE ,
    BODY_BLOB BLOB ,
    BINARY_BLOB BLOB ,
    RSTAT_CD NUMBER (3) DEFAULT 0 NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ASB_INBOUND_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
COMMENT ON COLUMN ASB_INBOUND_LOG.MSG_ID
IS
  'The unique message ID generated for this instance' ;
  COMMENT ON COLUMN ASB_INBOUND_LOG.TRANSACTION_ID
IS
  'The transaction the inbound message applies to' ;
  COMMENT ON COLUMN ASB_INBOUND_LOG.EXTERNAL_ID
IS
  'The third-party client external id for identifying inbound messages by the external integration key.' ;
  COMMENT ON COLUMN ASB_INBOUND_LOG.MSG_DATE
IS
  'The date the message was received in the ASB.  This is stored as a 64-bit long based on the Java date format for millisecond precision.' ;
  COMMENT ON COLUMN ASB_INBOUND_LOG.MSG_SOURCE
IS
  'The source of the message.  This is a logging of where the inbound message came from; the source system should be represented here.' ;
  CREATE INDEX IX_FK_MIMRSTAT_ASBINBOUNDLOG ON ASB_INBOUND_LOG
    (
      RSTAT_CD ASC
    ) ;
ALTER TABLE ASB_INBOUND_LOG ADD CONSTRAINT PK_ASB_INBOUND_LOG PRIMARY KEY ( MSG_ID ) ;


CREATE TABLE ASB_NOTIFICATION_LOG
  (
    NOTIFICATION_ID RAW (16) NOT NULL DEFERRABLE ,
    TRANSACTION_ID RAW (16) NOT NULL DEFERRABLE ,
    NOTIFICATION_DATE   NUMBER (19) NOT NULL DEFERRABLE ,
    NOTIFICATION_SOURCE VARCHAR2 (200) NOT NULL DEFERRABLE ,
    BODY_BLOB BLOB ,
    BINARY_BLOB BLOB ,
    RSTAT_CD NUMBER (3) DEFAULT 0 NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ASB_NOTIFICATION_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
COMMENT ON COLUMN ASB_NOTIFICATION_LOG.NOTIFICATION_ID
IS
  'The unique message ID generated for this instance' ;
  COMMENT ON COLUMN ASB_NOTIFICATION_LOG.TRANSACTION_ID
IS
  'The transaction the notification message applies to' ;
  COMMENT ON COLUMN ASB_NOTIFICATION_LOG.NOTIFICATION_DATE
IS
  'The date the message was received in the ASB.  This is stored as a 64-bit long based on the Java date format for millisecond precision.' ;
  COMMENT ON COLUMN ASB_NOTIFICATION_LOG.NOTIFICATION_SOURCE
IS
  'The source of the Notification.  This should correspond to the instance of Maintenix that provided the Notification' ;
  CREATE INDEX IX_FK_MIMRSTAT_ASBNOTIFICATION ON ASB_NOTIFICATION_LOG
    (
      RSTAT_CD ASC
    ) ;
ALTER TABLE ASB_NOTIFICATION_LOG ADD CONSTRAINT PK_ASB_NOTIFICATION_LOG PRIMARY KEY ( NOTIFICATION_ID ) ;


CREATE TABLE ASB_OUTBOUND_LOG
  (
    MSG_ID RAW (16) NOT NULL DEFERRABLE ,
    TRANSACTION_ID RAW (16) NOT NULL DEFERRABLE ,
    MSG_DATE NUMBER (19) NOT NULL DEFERRABLE ,
    MSG_DEST VARCHAR2 (600) NOT NULL DEFERRABLE ,
    BODY_BLOB BLOB ,
    BINARY_BLOB BLOB ,
    RSTAT_CD NUMBER (3) DEFAULT 0 NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ASB_OUTBOUND_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
COMMENT ON COLUMN ASB_OUTBOUND_LOG.MSG_ID
IS
  'The unique message ID generated for this instance' ;
  COMMENT ON COLUMN ASB_OUTBOUND_LOG.TRANSACTION_ID
IS
  'The transaction the outbound message applies to' ;
  COMMENT ON COLUMN ASB_OUTBOUND_LOG.MSG_DATE
IS
  'The date the message was received in the ASB.  This is stored as a 64-bit long based on the Java date format for millisecond precision.' ;
  COMMENT ON COLUMN ASB_OUTBOUND_LOG.MSG_DEST
IS
  'The destination of the message.  This is a logging of where the outbound message was sent; the destination endpoint should be represented here.' ;
  CREATE INDEX IX_FK_MIMRSTAT_ASBOUTBOUNDLOG ON ASB_OUTBOUND_LOG
    (
      RSTAT_CD ASC
    ) ;
ALTER TABLE ASB_OUTBOUND_LOG ADD CONSTRAINT PK_ASB_OUTBOUND_LOG PRIMARY KEY ( MSG_ID ) ;


CREATE TABLE ASB_REQUEST_LOG
  (
    REQUEST_ID RAW (16) NOT NULL DEFERRABLE ,
    TRANSACTION_ID RAW (16) NOT NULL DEFERRABLE ,
    REQUEST_DATE NUMBER (19) NOT NULL DEFERRABLE ,
    REQUEST_DEST VARCHAR2 (200) NOT NULL DEFERRABLE ,
    BODY_BLOB BLOB ,
    BINARY_BLOB BLOB ,
    RSTAT_CD NUMBER (3) DEFAULT 0 NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ASB_REQUEST_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
COMMENT ON COLUMN ASB_REQUEST_LOG.REQUEST_ID
IS
  'The unique message ID generated for this instance' ;
  COMMENT ON COLUMN ASB_REQUEST_LOG.TRANSACTION_ID
IS
  'The transaction the request applies to' ;
  COMMENT ON COLUMN ASB_REQUEST_LOG.REQUEST_DATE
IS
  'The date the message was received in the ASB.  This is stored as a 64-bit long based on the Java date format for millisecond precision.' ;
  COMMENT ON COLUMN ASB_REQUEST_LOG.REQUEST_DEST
IS
  'The destination of the message.  This is a logging of where the request message was sent; the Maintenix installation should be represented here.' ;
  CREATE INDEX IX_FK_MIMRSTAT_ASBREQUESTLOG ON ASB_REQUEST_LOG
    (
      RSTAT_CD ASC
    ) ;
ALTER TABLE ASB_REQUEST_LOG ADD CONSTRAINT PK_ASB_REQUEST_LOG PRIMARY KEY ( REQUEST_ID ) ;


CREATE TABLE ASB_RESPONSE_LOG
  (
    RESPONSE_ID RAW (16) NOT NULL DEFERRABLE ,
    TRANSACTION_ID RAW (16) NOT NULL DEFERRABLE ,
    RESPONSE_DATE   NUMBER (19) NOT NULL DEFERRABLE ,
    RESPONSE_SOURCE VARCHAR2 (200) NOT NULL DEFERRABLE ,
    BODY_BLOB BLOB ,
    BINARY_BLOB BLOB ,
    RSTAT_CD NUMBER (3) DEFAULT 0 NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ASB_RESPONSE_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
COMMENT ON COLUMN ASB_RESPONSE_LOG.RESPONSE_ID
IS
  'The unique message ID generated for this instance' ;
  COMMENT ON COLUMN ASB_RESPONSE_LOG.TRANSACTION_ID
IS
  'The transaction the response applies to' ;
  COMMENT ON COLUMN ASB_RESPONSE_LOG.RESPONSE_DATE
IS
  'The date the message was received in the ASB.  This is stored as a 64-bit long based on the Java date format for millisecond precision.' ;
  COMMENT ON COLUMN ASB_RESPONSE_LOG.RESPONSE_SOURCE
IS
  'The source of the message.  This is a logging of where the response message came from; the Maintenix installation should be represented here.' ;
  CREATE INDEX IX_FK_MIMRSTAT_ASBRESPONSELOG ON ASB_RESPONSE_LOG
    (
      RSTAT_CD ASC
    ) ;
ALTER TABLE ASB_RESPONSE_LOG ADD CONSTRAINT PK_ASB_RESPONSE_LOG PRIMARY KEY ( RESPONSE_ID ) ;


CREATE TABLE ASB_TRANSACTION_LOG
  (
    TRANSACTION_ID RAW (16) NOT NULL DEFERRABLE ,
    CONVERSATION_ID RAW (16) NOT NULL DEFERRABLE ,
    MODULE    VARCHAR2 (100) NOT NULL DEFERRABLE ,
    MSG_TYPE  VARCHAR2 (20) NOT NULL DEFERRABLE ,
    SERVER    VARCHAR2 (100) NOT NULL DEFERRABLE ,
    SYNC_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD  NUMBER (3) DEFAULT 0 NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ASB_TRANSACTION_LOG ADD CHECK ( SYNC_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE ASB_TRANSACTION_LOG ADD CHECK ( RSTAT_CD  IN (0, 1, 2, 3)) DEFERRABLE ;
COMMENT ON COLUMN ASB_TRANSACTION_LOG.TRANSACTION_ID
IS
  'The unique identifier for the transaction' ;
  COMMENT ON COLUMN ASB_TRANSACTION_LOG.CONVERSATION_ID
IS
  'The unique identification for the conversation.  The conversation is used to link multiple transactions together.  If inbound messages are sent within the same EJB transaction, or are logically connected, the conversation is used to give a larger view of how transactions interact with each other.' ;
  COMMENT ON COLUMN ASB_TRANSACTION_LOG.MODULE
IS
  'The module that the transaction belongs to.  This is linked to the specific ASB Connector the messages were being processed for.' ;
  COMMENT ON COLUMN ASB_TRANSACTION_LOG.MSG_TYPE
IS
  'The message type is the specific message within a Connector that the transaction applies to.' ;
  COMMENT ON COLUMN ASB_TRANSACTION_LOG.SERVER
IS
  'The Server links to the instance of the ASB that processed the transaction.' ;
  COMMENT ON COLUMN ASB_TRANSACTION_LOG.SYNC_BOOL
IS
  'The Sync_bool indicates if the message to the ASB was sent synchronously (1) or asynchronously (0).' ;
  CREATE INDEX IX_FK_MIMRSTAT_ASBTRANSACTION ON ASB_TRANSACTION_LOG
    (
      RSTAT_CD ASC
    ) ;
ALTER TABLE ASB_TRANSACTION_LOG ADD CONSTRAINT PK_ASB_TRANSACTION_LOG PRIMARY KEY ( TRANSACTION_ID ) ;


CREATE TABLE ASSMBL_CAP_LEVELS
  (
    ASSMBL_DB_ID         NUMBER (10) NOT NULL ,
    ASSMBL_CD            VARCHAR2 (8) NOT NULL ,
    ACFT_CAP_DB_ID       NUMBER (10) NOT NULL ,
    ACFT_CAP_CD          VARCHAR2 (8) NOT NULL ,
    ACFT_CAP_LEVEL_DB_ID NUMBER (10) NOT NULL ,
    ACFT_CAP_LEVEL_CD    VARCHAR2 (8) NOT NULL ,
    RSTAT_CD             NUMBER (3) NOT NULL ,
    REVISION_NO          NUMBER (10) NOT NULL ,
    CTRL_DB_ID           NUMBER (10) NOT NULL ,
    CREATION_DT          DATE NOT NULL ,
    CREATION_DB_ID       NUMBER (10) NOT NULL ,
    REVISION_DT          DATE NOT NULL ,
    REVISION_DB_ID       NUMBER (10) NOT NULL ,
    REVISION_USER        VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE ASSMBL_CAP_LEVELS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE ASSMBL_CAP_LEVELS ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE ASSMBL_CAP_LEVELS ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE ASSMBL_CAP_LEVELS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE ASSMBL_CAP_LEVELS ADD CONSTRAINT PK_ASSMBL_CAP_LEVELS PRIMARY KEY ( ASSMBL_DB_ID, ASSMBL_CD, ACFT_CAP_DB_ID, ACFT_CAP_CD, ACFT_CAP_LEVEL_DB_ID, ACFT_CAP_LEVEL_CD ) ;


CREATE TABLE AUTO_RSRV_QUEUE
  (
    AUTO_RSRV_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    AUTO_RSRV_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID   NUMBER (10) ,
    PART_NO_ID      NUMBER (10) ,
    BOM_PART_DB_ID  NUMBER (10) ,
    BOM_PART_ID     NUMBER (10) ,
    SUP_LOC_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    SUP_LOC_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    TRY_COUNT       INTEGER ,
    EXECUTE_BOOL    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
                    TIMESTAMP DATE ,
    RESULT          VARCHAR2 (2000) ,
    FAILED_BOOL     NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE AUTO_RSRV_QUEUE ADD CHECK ( AUTO_RSRV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE AUTO_RSRV_QUEUE ADD CHECK ( AUTO_RSRV_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE AUTO_RSRV_QUEUE ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE AUTO_RSRV_QUEUE ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE AUTO_RSRV_QUEUE ADD CHECK ( BOM_PART_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE AUTO_RSRV_QUEUE ADD CHECK ( BOM_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE AUTO_RSRV_QUEUE ADD CHECK ( SUP_LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE AUTO_RSRV_QUEUE ADD CHECK ( SUP_LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE AUTO_RSRV_QUEUE ADD CHECK ( EXECUTE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE AUTO_RSRV_QUEUE ADD CHECK ( FAILED_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE AUTO_RSRV_QUEUE ADD CHECK ( RSTAT_CD     IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE AUTO_RSRV_QUEUE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN AUTO_RSRV_QUEUE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN AUTO_RSRV_QUEUE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN AUTO_RSRV_QUEUE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN AUTO_RSRV_QUEUE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EQPBOMPART_AUTORSRVQUEUE ON AUTO_RSRV_QUEUE
    (
      BOM_PART_DB_ID ASC ,
      BOM_PART_ID ASC
    ) ;
  CREATE INDEX IX_EQPRTNO_AUTORSRVQUEUE ON AUTO_RSRV_QUEUE
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVLOC_AUTORSRVQUEUE ON AUTO_RSRV_QUEUE
    (
      SUP_LOC_DB_ID ASC ,
      SUP_LOC_ID ASC
    ) ;
ALTER TABLE AUTO_RSRV_QUEUE ADD CONSTRAINT "pk_AUTO_RSRV_QUEUE" PRIMARY KEY ( AUTO_RSRV_DB_ID, AUTO_RSRV_ID ) ;


CREATE TABLE AXON_ASSOC_VALUE_ENTRY
  (
    id               NUMBER (38) NOT NULL ,
    associationKey   VARCHAR2 (255) ,
    associationValue VARCHAR2 (255) ,
    sagaId           VARCHAR2 (255) ,
    sagaType         VARCHAR2 (255)
  ) ;
CREATE INDEX IX_AXON_ASS_VAL_ENTRY_SAGA_ASS ON AXON_ASSOC_VALUE_ENTRY
  (
    sagaType ASC ,
    associationKey ASC ,
    associationValue ASC
  ) ;
CREATE INDEX IX_AXON_ASS_VAL_ENTRY_SAGA ON AXON_ASSOC_VALUE_ENTRY
  (
    sagaId ASC ,
    sagaType ASC
  ) ;
ALTER TABLE AXON_ASSOC_VALUE_ENTRY ADD CONSTRAINT PK_AXON_ASSOC_VAL_ENTRY PRIMARY KEY ( id ) ;


CREATE TABLE AXON_DOMAIN_EVENT_ENTRY
  (
    globalIndex         NUMBER (19) NOT NULL ,
    aggregateIdentifier VARCHAR2 (255) NOT NULL ,
    sequenceNumber      NUMBER (19) NOT NULL ,
    type                VARCHAR2 (255) ,
    eventIdentifier     VARCHAR2 (255) NOT NULL ,
    metaData BLOB ,
    payload BLOB NOT NULL ,
    payloadRevision VARCHAR2 (255) ,
    payloadType     VARCHAR2 (255) NOT NULL ,
                    TIMESTAMP VARCHAR2 (255) NOT NULL
  ) ;
ALTER TABLE AXON_DOMAIN_EVENT_ENTRY ADD CONSTRAINT PK_AXON_DOMAIN_EVENT_ENTRY PRIMARY KEY ( globalIndex ) ;
ALTER TABLE AXON_DOMAIN_EVENT_ENTRY ADD CONSTRAINT IX_AXON_DOM_EVT_AGG_IDSEQ_UNQ UNIQUE ( aggregateIdentifier , sequenceNumber ) ;
ALTER TABLE AXON_DOMAIN_EVENT_ENTRY ADD CONSTRAINT IX_AXON_DOM_EVT_EVENT_ID_UNQ UNIQUE ( eventIdentifier ) ;


CREATE TABLE AXON_SAGA_ENTRY
  (
    sagaId   VARCHAR2 (255) NOT NULL ,
    revision VARCHAR2 (255) ,
    sagaType VARCHAR2 (255) ,
    serializedSaga BLOB
  ) ;
ALTER TABLE AXON_SAGA_ENTRY ADD CONSTRAINT PK_AXON_SAGA_ENTRY PRIMARY KEY ( sagaId ) ;


CREATE TABLE AXON_SNAPSHOT_EVENT_ENTRY
  (
    aggregateIdentifier VARCHAR2 (255) NOT NULL ,
    sequenceNumber      NUMBER NOT NULL ,
    type                VARCHAR2 (255) NOT NULL ,
    eventIdentifier     VARCHAR2 (255) NOT NULL ,
    metaData BLOB ,
    payload BLOB NOT NULL ,
    payloadRevision VARCHAR2 (255) ,
    payloadType     VARCHAR2 (255) NOT NULL ,
                    TIMESTAMP VARCHAR2 (255) NOT NULL
  ) ;
ALTER TABLE AXON_SNAPSHOT_EVENT_ENTRY ADD CONSTRAINT PK_AXON_SNAPSHOT_EVENT_ENTRY PRIMARY KEY ( aggregateIdentifier, sequenceNumber, type ) ;
ALTER TABLE AXON_SNAPSHOT_EVENT_ENTRY ADD CONSTRAINT IX_AXON_SNAPSHOT_EVENT_ENTRY UNIQUE ( eventIdentifier ) ;


CREATE TABLE AXON_SUBSCRIPTION
  (
    subscriptionIdentifier VARCHAR2 (255) NOT NULL ,
    metaData BLOB ,
    payload BLOB ,
    payloadType        VARCHAR2 (255) ,
    queryName          VARCHAR2 (255) ,
    responseType       VARCHAR2 (255) ,
    updateResponseType VARCHAR2 (255) ,
                       TIMESTAMP VARCHAR2 (255) ,
    owner              VARCHAR2 (255)
  ) ;
CREATE INDEX IX_AXON_SUBSCRIPTION_OWNER ON AXON_SUBSCRIPTION
  ( owner ASC
  ) ;
ALTER TABLE AXON_SUBSCRIPTION ADD CONSTRAINT PK_AXON_SUBSCRIPTION PRIMARY KEY ( subscriptionIdentifier ) ;


CREATE TABLE AXON_SUBSCRIPTION_MESSAGE
  (
    messageIdentifier      VARCHAR2 (255) NOT NULL ,
    subscriptionIdentifier VARCHAR2 (255) NOT NULL ,
    metaData BLOB NOT NULL ,
    payload BLOB NOT NULL ,
    payloadType VARCHAR2 (255) NOT NULL
  ) ;
ALTER TABLE AXON_SUBSCRIPTION_MESSAGE ADD CONSTRAINT PK_AXON_SUBSCRIPTION_MESSAGE PRIMARY KEY ( messageIdentifier ) ;


CREATE TABLE AXON_TOKEN_ENTRY
  (
    processorName VARCHAR2 (255) NOT NULL ,
    segment       INTEGER NOT NULL ,
    token BLOB ,
    tokenType VARCHAR2 (255) ,
              TIMESTAMP VARCHAR2 (255) ,
    owner     VARCHAR2 (255)
  ) ;
ALTER TABLE AXON_TOKEN_ENTRY ADD CONSTRAINT PK_AXON_TOKEN_ENTRY PRIMARY KEY ( processorName, segment ) ;


CREATE TABLE BLT_REF_ERROR
  (
    REF_ERROR_CD      VARCHAR2 (30) NOT NULL DEFERRABLE ,
    REF_ERROR_NAME    VARCHAR2 (80) NOT NULL DEFERRABLE ,
    REF_ERROR_DESC    VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    REF_ERROR_TYPE_CD VARCHAR2 (30) NOT NULL DEFERRABLE ,
    CTRL_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_NO       NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE BLT_REF_ERROR ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE BLT_REF_ERROR ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE BLT_REF_ERROR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE BLT_REF_ERROR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE BLT_REF_ERROR
IS
  'The purpose of this table is to act as a reference for all errors that can occur against each workflow.' ;
  COMMENT ON COLUMN BLT_REF_ERROR.REF_ERROR_CD
IS
  'Primary key represented by the unique error code.' ;
  COMMENT ON COLUMN BLT_REF_ERROR.REF_ERROR_NAME
IS
  'Display version of the error code.' ;
  COMMENT ON COLUMN BLT_REF_ERROR.REF_ERROR_DESC
IS
  'Full error message associated with the error definition.' ;
  COMMENT ON COLUMN BLT_REF_ERROR.REF_ERROR_TYPE_CD
IS
  'The error type code that is associated with this error definition record.' ;
  COMMENT ON COLUMN BLT_REF_ERROR.CTRL_DB_ID
IS
  'The identifier of the database that owns the record' ;
  COMMENT ON COLUMN BLT_REF_ERROR.REVISION_NO
IS
  'A number incremented each time the record is modified' ;
  COMMENT ON COLUMN BLT_REF_ERROR.CREATION_DB_ID
IS
  'The data and time at which the record was inserted' ;
  COMMENT ON COLUMN BLT_REF_ERROR.RSTAT_CD
IS
  'Status of the record' ;
  COMMENT ON COLUMN BLT_REF_ERROR.CREATION_DT
IS
  'The data and time at which the record was inserted' ;
  COMMENT ON COLUMN BLT_REF_ERROR.REVISION_DT
IS
  'The data and time at which the record was last ' ;
  COMMENT ON COLUMN BLT_REF_ERROR.REVISION_DB_ID
IS
  'The data and time at which the record was last ' ;
  COMMENT ON COLUMN BLT_REF_ERROR.REVISION_USER
IS
  'The name of the user that last updated the record' ;
  CREATE INDEX IX_BLTREFERRORTYPE_BLTREFERROR ON BLT_REF_ERROR
    (
      REF_ERROR_TYPE_CD ASC
    ) ;
ALTER TABLE BLT_REF_ERROR ADD CONSTRAINT PK_BLT_REF_ERROR PRIMARY KEY ( REF_ERROR_CD ) ;


CREATE TABLE BLT_REF_ERROR_TYPE
  (
    REF_ERROR_TYPE_CD   VARCHAR2 (30) NOT NULL DEFERRABLE ,
    REF_ERROR_TYPE_NAME VARCHAR2 (80) NOT NULL DEFERRABLE ,
    REF_ERROR_SEVERITY  NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_NO         NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE BLT_REF_ERROR_TYPE ADD CHECK ( REF_ERROR_SEVERITY IN (1,2,3,4)) DEFERRABLE ;
ALTER TABLE BLT_REF_ERROR_TYPE ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE BLT_REF_ERROR_TYPE ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE BLT_REF_ERROR_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE BLT_REF_ERROR_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE BLT_REF_ERROR_TYPE
IS
  'The purpose of this table is to act as a reference for all errors types that can occur against each workflow' ;
  COMMENT ON COLUMN BLT_REF_ERROR_TYPE.REF_ERROR_TYPE_CD
IS
  'Primary key represented by the unique error type code.' ;
  COMMENT ON COLUMN BLT_REF_ERROR_TYPE.REF_ERROR_TYPE_NAME
IS
  'Display version of the error type code.' ;
  COMMENT ON COLUMN BLT_REF_ERROR_TYPE.REF_ERROR_SEVERITY
IS
  'Severity code of error for formulating priority of error message.' ;
  COMMENT ON COLUMN BLT_REF_ERROR_TYPE.CTRL_DB_ID
IS
  'The identifier of the database that owns the record' ;
  COMMENT ON COLUMN BLT_REF_ERROR_TYPE.REVISION_NO
IS
  'A number incremented each time the record is modified' ;
  COMMENT ON COLUMN BLT_REF_ERROR_TYPE.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record' ;
  COMMENT ON COLUMN BLT_REF_ERROR_TYPE.RSTAT_CD
IS
  'Status of the record' ;
  COMMENT ON COLUMN BLT_REF_ERROR_TYPE.CREATION_DT
IS
  'The data and time at which the record was inserted' ;
  COMMENT ON COLUMN BLT_REF_ERROR_TYPE.REVISION_DT
IS
  'The data and time at which the record was last updated' ;
  COMMENT ON COLUMN BLT_REF_ERROR_TYPE.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN BLT_REF_ERROR_TYPE.REVISION_USER
IS
  'The name of the user that last updated the record' ;
ALTER TABLE BLT_REF_ERROR_TYPE ADD CONSTRAINT PK_BLT_REF_ERROR_TYPE PRIMARY KEY ( REF_ERROR_TYPE_CD ) ;


CREATE TABLE BLT_REF_WF_CYCLE_STATUS
  (
    REF_WF_CYCLE_STATUS_CD   VARCHAR2 (8) NOT NULL DEFERRABLE ,
    REF_WF_CYCLE_STATUS_NAME VARCHAR2 (80) NOT NULL DEFERRABLE ,
    REF_WF_CYCLE_STATUS_DESC VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    CTRL_DB_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_NO              NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE BLT_REF_WF_CYCLE_STATUS ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE BLT_REF_WF_CYCLE_STATUS ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE BLT_REF_WF_CYCLE_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE BLT_REF_WF_CYCLE_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE BLT_REF_WF_CYCLE_STATUS
IS
  'Actuals Loader workflow log status - reference table for each possible record status at the workflow level.' ;
  COMMENT ON COLUMN BLT_REF_WF_CYCLE_STATUS.REF_WF_CYCLE_STATUS_CD
IS
  'Status code indicating status of current cycle record.' ;
  COMMENT ON COLUMN BLT_REF_WF_CYCLE_STATUS.REF_WF_CYCLE_STATUS_NAME
IS
  'Status name - extended version of the code for display purposes.' ;
  COMMENT ON COLUMN BLT_REF_WF_CYCLE_STATUS.REF_WF_CYCLE_STATUS_DESC
IS
  'Status description - full description of code.' ;
  COMMENT ON COLUMN BLT_REF_WF_CYCLE_STATUS.CTRL_DB_ID
IS
  'The identifier of the database that owns the record' ;
  COMMENT ON COLUMN BLT_REF_WF_CYCLE_STATUS.REVISION_NO
IS
  'A number incremented each time the record is modified' ;
  COMMENT ON COLUMN BLT_REF_WF_CYCLE_STATUS.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record' ;
  COMMENT ON COLUMN BLT_REF_WF_CYCLE_STATUS.RSTAT_CD
IS
  'Status of the record' ;
  COMMENT ON COLUMN BLT_REF_WF_CYCLE_STATUS.CREATION_DT
IS
  'The data and time at which the record was inserted' ;
  COMMENT ON COLUMN BLT_REF_WF_CYCLE_STATUS.REVISION_DT
IS
  'The data and time at which the record was last updated' ;
  COMMENT ON COLUMN BLT_REF_WF_CYCLE_STATUS.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN BLT_REF_WF_CYCLE_STATUS.REVISION_USER
IS
  'The name of the user that last updated the record' ;
ALTER TABLE BLT_REF_WF_CYCLE_STATUS ADD CONSTRAINT PK_BLT_REF_WF_CYCLE_STATUS PRIMARY KEY ( REF_WF_CYCLE_STATUS_CD ) ;


CREATE TABLE BLT_REF_WF_LOG_STATUS
  (
    REF_WF_LOG_STATUS_CD   VARCHAR2 (8) NOT NULL DEFERRABLE ,
    REF_WF_LOG_STATUS_NAME VARCHAR2 (80) NOT NULL DEFERRABLE ,
    REF_WF_LOG_STATUS_DESC VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    CTRL_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_NO            NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE BLT_REF_WF_LOG_STATUS ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE BLT_REF_WF_LOG_STATUS ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE BLT_REF_WF_LOG_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE BLT_REF_WF_LOG_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE BLT_REF_WF_LOG_STATUS
IS
  'Actuals Loader workflow record log statuses - reference table for each possible status at the record level' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_STATUS.REF_WF_LOG_STATUS_CD
IS
  'Status code indicating status of current workflow record.' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_STATUS.REF_WF_LOG_STATUS_NAME
IS
  'Status name - extended version of the code for display purposes.' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_STATUS.REF_WF_LOG_STATUS_DESC
IS
  'Status description - full description of code.' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_STATUS.CTRL_DB_ID
IS
  'The identifier of the database that owns the record' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_STATUS.REVISION_NO
IS
  'A number incremented each time the record is modified' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_STATUS.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_STATUS.RSTAT_CD
IS
  'Status of the record' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_STATUS.CREATION_DT
IS
  'The data and time at which the record was inserted' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_STATUS.REVISION_DT
IS
  'The data and time at which the record was last updated' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_STATUS.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_STATUS.REVISION_USER
IS
  'The name of the user that last updated the record' ;
ALTER TABLE BLT_REF_WF_LOG_STATUS ADD CONSTRAINT PK_BLT_REF_WF_LOG_STATUS PRIMARY KEY ( REF_WF_LOG_STATUS_CD ) ;


CREATE TABLE BLT_REF_WF_LOG_TYPE
  (
    REF_WF_LOG_TYPE_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    REF_WF_LOG_SUB_TYPE_CD VARCHAR2 (8) NOT NULL DEFERRABLE ,
    REF_WF_LOG_TYPE_NAME   VARCHAR2 (80) NOT NULL DEFERRABLE ,
    REF_WF_LOG_TYPE_DESC   VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    CTRL_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_NO            NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE BLT_REF_WF_LOG_TYPE ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE BLT_REF_WF_LOG_TYPE ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE BLT_REF_WF_LOG_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE BLT_REF_WF_LOG_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE BLT_REF_WF_LOG_TYPE
IS
  'Actuals Loader workflow type and subtypes' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_TYPE.REF_WF_LOG_TYPE_CD
IS
  'Type code indicating which workflow type is being run.' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_TYPE.REF_WF_LOG_SUB_TYPE_CD
IS
  'Type code indicating which workflow sub type is being run' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_TYPE.REF_WF_LOG_TYPE_NAME
IS
  'Type code name - extended version of the code for display purposes.' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_TYPE.REF_WF_LOG_TYPE_DESC
IS
  'Type code description - full description of code.' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_TYPE.CTRL_DB_ID
IS
  'The identifier of the database that owns the record' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_TYPE.REVISION_NO
IS
  'A number incremented each time the record is modified' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_TYPE.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_TYPE.RSTAT_CD
IS
  'Status of the record' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_TYPE.CREATION_DT
IS
  'The data and time at which the record was inserted' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_TYPE.REVISION_DT
IS
  'The data and time at which the record was last updated' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_TYPE.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN BLT_REF_WF_LOG_TYPE.REVISION_USER
IS
  'The name of the user that last updated the record' ;
ALTER TABLE BLT_REF_WF_LOG_TYPE ADD CONSTRAINT PK_BLT_REF_WF_LOG_TYPE PRIMARY KEY ( REF_WF_LOG_TYPE_CD, REF_WF_LOG_SUB_TYPE_CD ) ;


CREATE TABLE BLT_WF_CYCLE_LOG
  (
    WF_CYCLE_LOG_ID RAW (16) NOT NULL DEFERRABLE ,
    WF_CYCLE_CD            VARCHAR2 (16) NOT NULL DEFERRABLE ,
    REF_WF_CYCLE_STATUS_CD VARCHAR2 (8) NOT NULL DEFERRABLE ,
    WF_CYCLE_START_DT      DATE ,
    WF_CYCLE_END_DT        DATE ,
    WF_CYCLE_ERR_STATUS_CD VARCHAR2 (8) ,
    WF_CYCLE_ERR_MSG CLOB ,
    CTRL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_NO    NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE BLT_WF_CYCLE_LOG ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE BLT_WF_CYCLE_LOG ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE BLT_WF_CYCLE_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE BLT_WF_CYCLE_LOG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE BLT_WF_CYCLE_LOG
IS
  'The purpose of this table is to record each cycle of data loading activity. A cycle can include one or many workflows and is determined by the calling action' ;
  COMMENT ON COLUMN BLT_WF_CYCLE_LOG.WF_CYCLE_LOG_ID
IS
  'Primary key identifier (GUID)' ;
  COMMENT ON COLUMN BLT_WF_CYCLE_LOG.WF_CYCLE_CD
IS
  'Unique name of cycle run based off what action is being instantiated.' ;
  COMMENT ON COLUMN BLT_WF_CYCLE_LOG.REF_WF_CYCLE_STATUS_CD
IS
  'Status code indicating status of current cycle record.' ;
  COMMENT ON COLUMN BLT_WF_CYCLE_LOG.WF_CYCLE_START_DT
IS
  'Start date and time of cycle.' ;
  COMMENT ON COLUMN BLT_WF_CYCLE_LOG.WF_CYCLE_END_DT
IS
  'End date and time of cycle.' ;
  COMMENT ON COLUMN BLT_WF_CYCLE_LOG.WF_CYCLE_ERR_STATUS_CD
IS
  'Error status code of current cycle record.' ;
  COMMENT ON COLUMN BLT_WF_CYCLE_LOG.WF_CYCLE_ERR_MSG
IS
  'Error message output for cycle record.' ;
  COMMENT ON COLUMN BLT_WF_CYCLE_LOG.CTRL_DB_ID
IS
  'The identifier of the database that owns the record' ;
  COMMENT ON COLUMN BLT_WF_CYCLE_LOG.REVISION_NO
IS
  'A number incremented each time the record is modified' ;
  COMMENT ON COLUMN BLT_WF_CYCLE_LOG.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record' ;
  COMMENT ON COLUMN BLT_WF_CYCLE_LOG.RSTAT_CD
IS
  'Status of the record' ;
  COMMENT ON COLUMN BLT_WF_CYCLE_LOG.CREATION_DT
IS
  'The data and time at which the record was inserted' ;
  COMMENT ON COLUMN BLT_WF_CYCLE_LOG.REVISION_DT
IS
  'The data and time at which the record was last updated' ;
  COMMENT ON COLUMN BLT_WF_CYCLE_LOG.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN BLT_WF_CYCLE_LOG.REVISION_USER
IS
  'The name of the user that last updated the record' ;
CREATE UNIQUE INDEX IX_BLT_WF_CYCLE_LOG_NK ON BLT_WF_CYCLE_LOG ( WF_CYCLE_CD ASC ) ;
  CREATE INDEX IX_BLTREFWFCYCLESTATUS_LOG ON BLT_WF_CYCLE_LOG
    (
      REF_WF_CYCLE_STATUS_CD ASC
    ) ;
ALTER TABLE BLT_WF_CYCLE_LOG ADD CONSTRAINT PK_BLT_WF_CYCLE_LOG PRIMARY KEY ( WF_CYCLE_LOG_ID ) ;


CREATE TABLE BLT_WF_ERROR_LOG
  (
    WF_ERROR_LOG_ID RAW (16) NOT NULL DEFERRABLE ,
    WF_REC_LOG_ID RAW (16) NOT NULL DEFERRABLE ,
    WF_CYCLE_LOG_ID RAW (16) NOT NULL DEFERRABLE ,
    REF_ERROR_CD            VARCHAR2 (30) NOT NULL DEFERRABLE ,
    WF_ERROR_REC_IDENTIFIER VARCHAR2 (4000) NOT NULL DEFERRABLE
  ) ;
COMMENT ON TABLE BLT_WF_ERROR_LOG
IS
  'The purpose of this table is to log errors that occur against each workflow - the item failing should also be identifiable from this table.' ;
  COMMENT ON COLUMN BLT_WF_ERROR_LOG.WF_ERROR_LOG_ID
IS
  'Primary key identifier (GUID)' ;
  COMMENT ON COLUMN BLT_WF_ERROR_LOG.WF_ERROR_REC_IDENTIFIER
IS
  'Unique record identifier so that original record can be identified as to where the error originates.' ;
  CREATE INDEX IX_BLTWFERRORLOG_WFERRORRECIDE ON BLT_WF_ERROR_LOG
    (
      WF_ERROR_REC_IDENTIFIER ASC
    ) ;
  CREATE INDEX IX_BLTREFERROR_BLTWFERRORLOG ON BLT_WF_ERROR_LOG
    (
      REF_ERROR_CD ASC
    ) ;
  CREATE INDEX IX_BLTWFRECLOG_BLTWFERRORLOG ON BLT_WF_ERROR_LOG
    (
      WF_REC_LOG_ID ASC ,
      WF_CYCLE_LOG_ID ASC
    ) ;
ALTER TABLE BLT_WF_ERROR_LOG ADD CONSTRAINT PK_BLT_WF_ERROR_LOG PRIMARY KEY ( WF_ERROR_LOG_ID ) ;


CREATE TABLE BLT_WF_REC_LOG
  (
    WF_REC_LOG_ID RAW (16) NOT NULL DEFERRABLE ,
    WF_CYCLE_LOG_ID RAW (16) NOT NULL DEFERRABLE ,
    REF_WF_LOG_STATUS_CD   VARCHAR2 (8) NOT NULL DEFERRABLE ,
    REF_WF_LOG_TYPE_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    REF_WF_LOG_SUB_TYPE_CD VARCHAR2 (8) NOT NULL DEFERRABLE ,
    WF_LOG_REC_IDENTIFIER  VARCHAR2 (4000) ,
    WF_LOG_START_DT        DATE ,
    WF_LOG_END_DT          DATE ,
    WF_LOG_ERR_STATUS_CD   VARCHAR2 (8) ,
    WF_LOG_ERR_MSG CLOB
  ) ;
COMMENT ON TABLE BLT_WF_REC_LOG
IS
  'The purpose of this table is to record each workflow of data loading activity it records and implements the record status of each workflow item' ;
  COMMENT ON COLUMN BLT_WF_REC_LOG.WF_REC_LOG_ID
IS
  'Primary key identifier (GUID)' ;
  COMMENT ON COLUMN BLT_WF_REC_LOG.WF_CYCLE_LOG_ID
IS
  'Key identifier (FK) which contains the cycle the workflow belongs to.' ;
  COMMENT ON COLUMN BLT_WF_REC_LOG.REF_WF_LOG_STATUS_CD
IS
  'Status code indicating status of current workflow record.' ;
  COMMENT ON COLUMN BLT_WF_REC_LOG.REF_WF_LOG_TYPE_CD
IS
  'Type code indicating which workflow type is being run.' ;
  COMMENT ON COLUMN BLT_WF_REC_LOG.WF_LOG_REC_IDENTIFIER
IS
  'Identifier key that matches staging records with the workflow' ;
  COMMENT ON COLUMN BLT_WF_REC_LOG.WF_LOG_START_DT
IS
  'WF_LOG_START_DT Start date and time of workflow.' ;
  COMMENT ON COLUMN BLT_WF_REC_LOG.WF_LOG_END_DT
IS
  'End date and time of cycle.' ;
  COMMENT ON COLUMN BLT_WF_REC_LOG.WF_LOG_ERR_STATUS_CD
IS
  'Error Status code of current workflow record.' ;
  COMMENT ON COLUMN BLT_WF_REC_LOG.WF_LOG_ERR_MSG
IS
  'Error message field containing high level error detail if workflow fails.' ;
CREATE UNIQUE INDEX IX_WFLOGRECIDENTIFIER_INDX ON BLT_WF_REC_LOG
  (
    WF_LOG_REC_IDENTIFIER ASC
  )
  ;
  CREATE INDEX IX_BLTREFWFLOGTYPE_BLTWFRECLOG ON BLT_WF_REC_LOG
    (
      REF_WF_LOG_TYPE_CD ASC ,
      REF_WF_LOG_SUB_TYPE_CD ASC
    ) ;
  CREATE INDEX IX_BLTWFCYCLELOG_BLTWFRECLOG ON BLT_WF_REC_LOG
    (
      WF_CYCLE_LOG_ID ASC
    ) ;
  CREATE INDEX IX_BLTREFWFLOGSTATUS_BLTWFRECL ON BLT_WF_REC_LOG
    (
      REF_WF_LOG_STATUS_CD ASC
    ) ;
ALTER TABLE BLT_WF_REC_LOG ADD CONSTRAINT PK_BLT_WF_REC_LOG PRIMARY KEY ( WF_REC_LOG_ID, WF_CYCLE_LOG_ID ) ;


CREATE TABLE BULK_LOAD_ELEMENT
  (
    FILE_IMPORT_ID         NUMBER (10) NOT NULL ,
    FILE_IMPORT_DB_ID      NUMBER (10) NOT NULL ,
    FILE_ELEMENT           NUMBER (10) NOT NULL ,
    FILE_ACTION_TYPE_CD    VARCHAR2 (30) NOT NULL ,
    FILE_ACTION_TYPE_DB_ID NUMBER (10) NOT NULL ,
    STATUS_CD              VARCHAR2 (20) NOT NULL ,
    STATUS_DB_ID           NUMBER (10) NOT NULL ,
    ERROR_INFO             VARCHAR2 (4000) ,
    C0                     VARCHAR2 (4000) ,
    C1                     VARCHAR2 (4000) ,
    C2                     VARCHAR2 (4000) ,
    C3                     VARCHAR2 (4000) ,
    C4                     VARCHAR2 (4000) ,
    C5                     VARCHAR2 (4000) ,
    C6                     VARCHAR2 (4000) ,
    C7                     VARCHAR2 (4000) ,
    C8                     VARCHAR2 (4000) ,
    C9                     VARCHAR2 (4000) ,
    C10                    VARCHAR2 (4000) ,
    C11                    VARCHAR2 (4000) ,
    RSTAT_CD               NUMBER (3) NOT NULL ,
    REVISION_NO            NUMBER (10) NOT NULL ,
    CTRL_DB_ID             NUMBER (10) NOT NULL ,
    CREATION_DT            DATE NOT NULL ,
    REVISION_DT            DATE NOT NULL ,
    REVISION_DB_ID         NUMBER (10) NOT NULL ,
    REVISION_USER          VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE BULK_LOAD_ELEMENT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
COMMENT ON TABLE BULK_LOAD_ELEMENT
IS
  'Staging table where bulk data rows inserted and later processed by work item jobs.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.FILE_IMPORT_ID
IS
  'Unique id of the imported file. Foreign key reference to UTL_FILE_IMPORT.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.FILE_IMPORT_DB_ID
IS
  'Db id of the imported file. Foreign key reference to UTL_FILE_IMPORT.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.FILE_ELEMENT
IS
  'Row number of the imported row from file.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.FILE_ACTION_TYPE_CD
IS
  'Designated action type for the file. This will uniquely identify the action to be performed on the file content.  Foreign key reference to REF_BULK_LOAD_FILE_ACTION' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.FILE_ACTION_TYPE_DB_ID
IS
  'The file action type db id. Foreign key reference to REF_BULK_LOAD_FILE_ACTION' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.STATUS_CD
IS
  'Current state of the file being imported. Valid States are NEW/PROCESSING/ERROR/FINISHED. Foreign key reference to REF_BULK_LOAD_STATUS' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.STATUS_DB_ID
IS
  'The file action type db id. Foreign key reference to REF_BULK_LOAD_STATUS' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.ERROR_INFO
IS
  'Errors while processing data.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.C0
IS
  'Maps with the 1st component of the imported file.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.C1
IS
  'Maps with the 2nd component of the imported file.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.C2
IS
  'Maps with the 3rd component of the imported file.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.C3
IS
  'Maps with the 4th component of the imported file.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.C4
IS
  'Maps with the 5th component of the imported file.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.C5
IS
  'Maps with the 6th component of the imported file.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.C6
IS
  'Maps with the 7th component of the imported file.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.C7
IS
  'Maps with the 8th component of the imported file.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.C8
IS
  'Maps with the 9th component of the imported file.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.C9
IS
  'Maps with the 10th component of the imported file.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.C10
IS
  'Maps with the 11th component of the imported file.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.C11
IS
  'Maps with the 12th component of the imported file.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.CTRL_DB_ID
IS
  'The identifier of the database that owns the record. The meaning of this column may be specific to the entity.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN BULK_LOAD_ELEMENT.REVISION_USER
IS
  'The name of the user that last updated the record' ;
ALTER TABLE BULK_LOAD_ELEMENT ADD CONSTRAINT PK_BULK_LOAD_ELEMENT PRIMARY KEY ( FILE_IMPORT_ID, FILE_IMPORT_DB_ID, FILE_ELEMENT ) ;


CREATE TABLE CAPACITY_PATTERN
  (
    CAPACITY_PATTERN_DB_ID      NUMBER (10) NOT NULL ,
    CAPACITY_PATTERN_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    CAPACITY_PATTERN_CD         VARCHAR2 (80) NOT NULL ,
    CAPACITY_PATTERN_NAME       VARCHAR2 (240) NOT NULL DEFERRABLE ,
    CAPACITY_PATTERN_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    CAPACITY_PATTERN_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    CAPACITY_PATTERN_LDESC      VARCHAR2 (4000) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE CAPACITY_PATTERN ADD CHECK ( CAPACITY_PATTERN_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE CAPACITY_PATTERN ADD CHECK ( CAPACITY_PATTERN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN ADD CHECK ( CAPACITY_PATTERN_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE CAPACITY_PATTERN
IS
  'This entity represents a capacity pattern, which is either a 1 day or 7 day pattern of shifts.  For each day and shift, the user can record the expected number of resources per labor skill.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN.CAPACITY_PATTERN_DB_ID
IS
  'Primary key of the capacity pattern.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN.CAPACITY_PATTERN_ID
IS
  'Primary key of the capacity pattern.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN.CAPACITY_PATTERN_CD
IS
  'Unique code of the capacity pattern.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN.CAPACITY_PATTERN_NAME
IS
  'Descriptive name of the capacity pattern.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN.CAPACITY_PATTERN_TYPE_DB_ID
IS
  'FK to REF_CAPACITY_PATTERN_TYPE.  Indicates if the capacity pattern is daily or weekly.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN.CAPACITY_PATTERN_TYPE_CD
IS
  'FK to REF_CAPACITY_PATTERN_TYPE.  Indicates if the capacity pattern is daily or weekly.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN.CAPACITY_PATTERN_LDESC
IS
  'Detailed description of the capacity pattern.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE CAPACITY_PATTERN ADD CONSTRAINT PK_CAPACITY_PATTERN PRIMARY KEY ( CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID ) ;
ALTER TABLE CAPACITY_PATTERN ADD CONSTRAINT IX_CAPPATERNCD_UNQ UNIQUE ( CAPACITY_PATTERN_CD ) ;
ALTER TABLE CAPACITY_PATTERN ADD CONSTRAINT IX_CAPPATERNALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE CAPACITY_PATTERN_DAY
  (
    CAPACITY_PATTERN_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    CAPACITY_PATTERN_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    CAPACITY_PATTERN_DAY_ORD NUMBER (4) NOT NULL DEFERRABLE ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE CAPACITY_PATTERN_DAY ADD CHECK ( CAPACITY_PATTERN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN_DAY ADD CHECK ( CAPACITY_PATTERN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN_DAY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN_DAY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE CAPACITY_PATTERN_DAY
IS
  'This entity represents a day in a capacity pattern.  A capacity pattern is either a 1 or 7 day pattern of shifts.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY.CAPACITY_PATTERN_DB_ID
IS
  'FK to CAPACITY_PATTERN.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY.CAPACITY_PATTERN_ID
IS
  'FK to CAPACITY_PATTERN' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY.CAPACITY_PATTERN_DAY_ORD
IS
  'Primary key of capacity pattern day.  Represents a day in the capacity pattern.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_CP_CPDAY ON CAPACITY_PATTERN_DAY
    (
      CAPACITY_PATTERN_DB_ID ASC ,
      CAPACITY_PATTERN_ID ASC
    ) ;
ALTER TABLE CAPACITY_PATTERN_DAY ADD CONSTRAINT PK_CAPACITY_PATTERN_DAY PRIMARY KEY ( CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID, CAPACITY_PATTERN_DAY_ORD ) ;


CREATE TABLE CAPACITY_PATTERN_DAY_SHIFT
  (
    CAPACITY_PATTERN_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    CAPACITY_PATTERN_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    CAPACITY_PATTERN_DAY_ORD NUMBER (4) NOT NULL DEFERRABLE ,
    SHIFT_DB_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    SHIFT_ID                 NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE CAPACITY_PATTERN_DAY_SHIFT ADD CHECK ( CAPACITY_PATTERN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN_DAY_SHIFT ADD CHECK ( CAPACITY_PATTERN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN_DAY_SHIFT ADD CHECK ( SHIFT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN_DAY_SHIFT ADD CHECK ( SHIFT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN_DAY_SHIFT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN_DAY_SHIFT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE CAPACITY_PATTERN_DAY_SHIFT
IS
  'This entity represents shifts on a particular day of the capacity pattern.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SHIFT.CAPACITY_PATTERN_DB_ID
IS
  'FK to CAPACITY_PATTERN.  Represents capacity pattern to which the day-shift combination belongs to.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SHIFT.CAPACITY_PATTERN_ID
IS
  'FK to CAPACITY_PATTERN.  Represents capacity pattern to which the day shift combination belongs to.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SHIFT.CAPACITY_PATTERN_DAY_ORD
IS
  'FK to CAPACITY_PATTERN_DAY.  Represents the day to which the shift belong to.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SHIFT.SHIFT_DB_ID
IS
  'FK to SHIFT_SHIFT table.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SHIFT.SHIFT_ID
IS
  'FK to SHIFT_SHIFT table.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SHIFT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SHIFT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SHIFT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SHIFT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SHIFT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_SHIFTSHIFT_CPDAYSHIFT ON CAPACITY_PATTERN_DAY_SHIFT
    (
      SHIFT_DB_ID ASC ,
      SHIFT_ID ASC
    ) ;
  CREATE INDEX IX_CPDAY_CPDAYSHIFT ON CAPACITY_PATTERN_DAY_SHIFT
    (
      CAPACITY_PATTERN_DB_ID ASC ,
      CAPACITY_PATTERN_ID ASC ,
      CAPACITY_PATTERN_DAY_ORD ASC
    ) ;
ALTER TABLE CAPACITY_PATTERN_DAY_SHIFT ADD CONSTRAINT PK_CAPACITY_PATTERN_DAY_SHIFT PRIMARY KEY ( CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID, CAPACITY_PATTERN_DAY_ORD, SHIFT_DB_ID, SHIFT_ID ) ;


CREATE TABLE CAPACITY_PATTERN_DAY_SKILL
  (
    CAPACITY_PATTERN_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    CAPACITY_PATTERN_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    CAPACITY_PATTERN_DAY_ORD NUMBER (4) NOT NULL DEFERRABLE ,
    SHIFT_DB_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    SHIFT_ID                 NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_CD          VARCHAR2 (8) NOT NULL DEFERRABLE ,
    LIC_RESOURCE_QT FLOAT DEFAULT 0 NOT NULL DEFERRABLE ,
    UNLIC_RESOURCE_QT FLOAT DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE CAPACITY_PATTERN_DAY_SKILL ADD CHECK ( CAPACITY_PATTERN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN_DAY_SKILL ADD CHECK ( CAPACITY_PATTERN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN_DAY_SKILL ADD CHECK ( SHIFT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN_DAY_SKILL ADD CHECK ( SHIFT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN_DAY_SKILL ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN_DAY_SKILL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN_DAY_SKILL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE CAPACITY_PATTERN_DAY_SKILL
IS
  'This entity models the labor skills associated with each shift of a day in a capacity pattern.  The labor skills defined in CAPACITY_PATTERN_SKILL entity are applied for each shift of a day.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SKILL.CAPACITY_PATTERN_DB_ID
IS
  'FK to CAPACITY_PATTERN_DAY_SHIFT table.  Represent the Capacity pattern - Day - Shift combination for which the labor skill is applied.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SKILL.CAPACITY_PATTERN_ID
IS
  'FK to CAPACITY_PATTERN_DAY_SHIFT table.  Represent the Capacity pattern - Day - Shift combination for which the labor skill is applied.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SKILL.CAPACITY_PATTERN_DAY_ORD
IS
  'FK to CAPACITY_PATTERN_DAY_SHIFT table.  Represent the Capacity pattern - Day - Shift combination for which the labor skill is applied.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SKILL.SHIFT_DB_ID
IS
  'FK to CAPACITY_PATTERN_DAY_SHIFT table.  Represent the Capacity pattern - Day - Shift combination for which the labor skill is applied.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SKILL.SHIFT_ID
IS
  'FK to CAPACITY_PATTERN_DAY_SHIFT table.  Represent the Capacity pattern - Day - Shift combination for which the labor skill is applied.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SKILL.LABOUR_SKILL_DB_ID
IS
  'FK to REF_LABOUR_SKILL table.  Represents the labor skill applied to the capacity pattern - day - shift combination.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SKILL.LABOUR_SKILL_CD
IS
  'FK to REF_LABOUR_SKILL table.  Represents the labor skill applied to the capacity pattern - day - shift combination.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SKILL.LIC_RESOURCE_QT
IS
  'Represents number of licensed resources in a shift.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SKILL.UNLIC_RESOURCE_QT
IS
  'Represents number of unicensed resources in a shift.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SKILL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SKILL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SKILL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SKILL.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_DAY_SKILL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_CPDAYSHIFT_CPDAYSKILL ON CAPACITY_PATTERN_DAY_SKILL
    (
      CAPACITY_PATTERN_DB_ID ASC ,
      CAPACITY_PATTERN_ID ASC ,
      CAPACITY_PATTERN_DAY_ORD ASC ,
      SHIFT_DB_ID ASC ,
      SHIFT_ID ASC
    ) ;
ALTER TABLE CAPACITY_PATTERN_DAY_SKILL ADD CONSTRAINT PK_CAPACITY_PATTERN_DAY_SKILL PRIMARY KEY ( CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID, CAPACITY_PATTERN_DAY_ORD, SHIFT_DB_ID, SHIFT_ID, LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) ;


CREATE TABLE CAPACITY_PATTERN_SKILL
  (
    CAPACITY_PATTERN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    CAPACITY_PATTERN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_CD        VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE CAPACITY_PATTERN_SKILL ADD CHECK ( CAPACITY_PATTERN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN_SKILL ADD CHECK ( CAPACITY_PATTERN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN_SKILL ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN_SKILL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE CAPACITY_PATTERN_SKILL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE CAPACITY_PATTERN_SKILL
IS
  'This entity represents the skill associated to a capacity pattern.  This entity determines the labour skills that will be applied for each shift under the capacity pattern.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_SKILL.CAPACITY_PATTERN_DB_ID
IS
  'FK to CAPACITY_PATTERN table.  Represents capacity pattern for which the labour skill is defined.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_SKILL.CAPACITY_PATTERN_ID
IS
  'FK to CAPACITY_PATTERN table.  Represents capacity pattern for which the labour skill is defined.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_SKILL.LABOUR_SKILL_DB_ID
IS
  'FK to LABOUR_LABOUR.  Represents the labour skill that is applied to the capacity pattern.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_SKILL.LABOUR_SKILL_CD
IS
  'FK to LABOUR_LABOUR.  Represents the labour skill that is applied to the capacity pattern.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_SKILL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_SKILL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_SKILL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_SKILL.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN CAPACITY_PATTERN_SKILL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_CP_CPSKILL ON CAPACITY_PATTERN_SKILL
    (
      CAPACITY_PATTERN_DB_ID ASC ,
      CAPACITY_PATTERN_ID ASC
    ) ;
ALTER TABLE CAPACITY_PATTERN_SKILL ADD CONSTRAINT PK_CAPACITY_PATTERN_SKILL PRIMARY KEY ( CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID, LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) ;


CREATE TABLE CHARGE
  (
    CHARGE_ID RAW (16) NOT NULL ,
    CHARGE_CODE      VARCHAR2 (40) NOT NULL ,
    CHARGE_NAME      VARCHAR2 (4000) ,
    ACCOUNT_ID       NUMBER (10) ,
    ACCOUNT_DB_ID    NUMBER (10) ,
    RECOVERABLE_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ARCHIVE_BOOL     NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    EXTERNAL_ID      VARCHAR2 (40) ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO      NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE CHARGE ADD CHECK ( ACCOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CHARGE ADD CHECK ( ACCOUNT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CHARGE ADD CHECK ( RECOVERABLE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE CHARGE ADD CHECK ( ARCHIVE_BOOL     IN (0, 1)) DEFERRABLE ;
ALTER TABLE CHARGE ADD CHECK ( RSTAT_CD         IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE CHARGE ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CHARGE ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CHARGE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE CHARGE
IS
  'This table contains the structure of the financial Charge entities. Charges may be applied to Orders, Invoices, and RFQs.' ;
  COMMENT ON COLUMN CHARGE.CHARGE_ID
IS
  'PK: CHARGE' ;
  COMMENT ON COLUMN CHARGE.CHARGE_CODE
IS
  'Charge code (unique)' ;
  COMMENT ON COLUMN CHARGE.CHARGE_NAME
IS
  'Charge name' ;
  COMMENT ON COLUMN CHARGE.ACCOUNT_ID
IS
  'FK: Charge account
' ;
  COMMENT ON COLUMN CHARGE.ACCOUNT_DB_ID
IS
  'FK: Charge account' ;
  COMMENT ON COLUMN CHARGE.RECOVERABLE_BOOL
IS
  '"Recoverable" flag (used for external reference). Domain specific.' ;
  COMMENT ON COLUMN CHARGE.ARCHIVE_BOOL
IS
  'Indicates that this item is archived.' ;
  COMMENT ON COLUMN CHARGE.EXTERNAL_ID
IS
  '"External ID" (used for external reference). Domain specific.' ;
  COMMENT ON COLUMN CHARGE.REVISION_NO
IS
  'A number incremented each time the record is modified' ;
  COMMENT ON COLUMN CHARGE.CTRL_DB_ID
IS
  'The identifier of the database that owns the record' ;
  COMMENT ON COLUMN CHARGE.CREATION_DT
IS
  'The data and time at which the record was inserted ' ;
  COMMENT ON COLUMN CHARGE.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record' ;
  COMMENT ON COLUMN CHARGE.REVISION_DT
IS
  'The data and time at which the record was last updated' ;
  COMMENT ON COLUMN CHARGE.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN CHARGE.REVISION_USER
IS
  'The name of the user that last updated the record ' ;
  CREATE INDEX IX_FNCACCOUNT_CHARGE ON CHARGE
    (
      ACCOUNT_DB_ID ASC ,
      ACCOUNT_ID ASC
    ) ;
ALTER TABLE CHARGE ADD CONSTRAINT PK_CHARGE PRIMARY KEY ( CHARGE_ID ) ;
ALTER TABLE CHARGE ADD CONSTRAINT IX_CHARGECODE_UNQ UNIQUE ( CHARGE_CODE ) ;


CREATE TABLE CHARGE_LOG
  (
    CHARGE_ID RAW (16) NOT NULL DEFERRABLE ,
    CHARGE_LOG_ORDER   NUMBER NOT NULL DEFERRABLE ,
    CHARGE_LOG_MESSAGE VARCHAR2 (4000) ,
    CHARGE_LOG_DATE    DATE ,
    HR_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    HR_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO        NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE CHARGE_LOG ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CHARGE_LOG ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CHARGE_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE CHARGE_LOG ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CHARGE_LOG ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CHARGE_LOG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE CHARGE_LOG
IS
  'Historic records of the changes to the CHARGE table.' ;
  COMMENT ON COLUMN CHARGE_LOG.REVISION_NO
IS
  'A number incremented each time the record is modified ' ;
  COMMENT ON COLUMN CHARGE_LOG.CTRL_DB_ID
IS
  'The identifier of the database that owns the record' ;
  COMMENT ON COLUMN CHARGE_LOG.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record ' ;
  COMMENT ON COLUMN CHARGE_LOG.REVISION_DT
IS
  'The data and time at which the record was last updated ' ;
  COMMENT ON COLUMN CHARGE_LOG.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record ' ;
  COMMENT ON COLUMN CHARGE_LOG.REVISION_USER
IS
  'The name of the user that last updated the record ' ;
  CREATE INDEX IX_ORGHR_CHARGELOG ON CHARGE_LOG
    ( HR_DB_ID ASC , HR_ID ASC
    ) ;
  CREATE INDEX IX_CHARGE_CHARGELOG ON CHARGE_LOG
    ( CHARGE_ID ASC
    ) ;
ALTER TABLE CHARGE_LOG ADD CONSTRAINT PK_CHARGE_LOG PRIMARY KEY ( CHARGE_ID, CHARGE_LOG_ORDER ) ;


CREATE TABLE CHARGE_VENDOR
  (
    CHARGE_ID RAW (16) NOT NULL DEFERRABLE ,
    VENDOR_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    PO_TYPE_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    PO_TYPE_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO    NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE CHARGE_VENDOR ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CHARGE_VENDOR ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CHARGE_VENDOR ADD CHECK ( PO_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CHARGE_VENDOR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE CHARGE_VENDOR ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CHARGE_VENDOR ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CHARGE_VENDOR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE CHARGE_VENDOR
IS
  'This table specifies the relationship between Charges and Vendors, for each Order Type. These relationships are used to assist Order creation by automatically applying all defined Charges based on the Order''s Type and Vendor.' ;
  COMMENT ON COLUMN CHARGE_VENDOR.REVISION_NO
IS
  'A number incremented each time the record is modified ' ;
  COMMENT ON COLUMN CHARGE_VENDOR.CREATION_DT
IS
  'The data and time at which the record was inserted ' ;
  COMMENT ON COLUMN CHARGE_VENDOR.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record ' ;
  COMMENT ON COLUMN CHARGE_VENDOR.REVISION_DT
IS
  'The data and time at which the record was last updated ' ;
  COMMENT ON COLUMN CHARGE_VENDOR.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record ' ;
  COMMENT ON COLUMN CHARGE_VENDOR.REVISION_USER
IS
  'The name of the user that last updated the record ' ;
  CREATE INDEX IX_ORGVENDOR_CHARGEVENDOR ON CHARGE_VENDOR
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
  CREATE INDEX IX_CHARGE_CHARGEVENDOR ON CHARGE_VENDOR
    ( CHARGE_ID ASC
    ) ;
ALTER TABLE CHARGE_VENDOR ADD CONSTRAINT PK_CHARGE_VENDOR PRIMARY KEY ( CHARGE_ID, VENDOR_DB_ID, VENDOR_ID, PO_TYPE_DB_ID, PO_TYPE_CD ) ;


CREATE TABLE CLAIM
  (
    CLAIM_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    CLAIM_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    CONTACT_HR_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    CONTACT_HR_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    PAY_METHOD_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    PAY_METHOD_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    CREDIT_REF_SDESC    VARCHAR2 (80) ,
    TOTAL_REQUESTED_QT FLOAT ,
    TOTAL_RECOVERED_QT FLOAT ,
    CLAIM_NOTE VARCHAR2 (4000) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE CLAIM ADD CHECK ( CLAIM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM ADD CHECK ( CLAIM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM ADD CHECK ( WARRANTY_EVAL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM ADD CHECK ( WARRANTY_EVAL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM ADD CHECK ( CONTACT_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM ADD CHECK ( CONTACT_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM ADD CHECK ( PAY_METHOD_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE CLAIM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE CLAIM
IS
  'The claim table is the centralized top level table used to define a claim against a warranty evaluation within maintenix.' ;
  CREATE INDEX IX_INVINV_CLAIM ON CLAIM
    ( INV_NO_DB_ID ASC , INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_CLAIM ON CLAIM
    (
      CONTACT_HR_DB_ID ASC ,
      CONTACT_HR_ID ASC
    ) ;
  CREATE INDEX IX_ORGVENDOR_CLAIM ON CLAIM
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
  CREATE INDEX IX_WARRANTYEVAL_CLAIM ON CLAIM
    (
      WARRANTY_EVAL_DB_ID ASC ,
      WARRANTY_EVAL_ID ASC
    ) ;
ALTER TABLE CLAIM ADD CONSTRAINT PK_CLAIM PRIMARY KEY ( CLAIM_DB_ID, CLAIM_ID ) ;
ALTER TABLE CLAIM ADD CONSTRAINT IX_CLAIMALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE CLAIM_LABOUR_LINE
  (
    CLAIM_LABOUR_LINE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    CLAIM_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    CLAIM_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_CD         VARCHAR2 (8) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_TASK_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_LABOUR_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    LINE_LDESC              VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    CLAIM_QT FLOAT NOT NULL DEFERRABLE ,
    UNIT_PRICE           NUMBER (15,5) DEFAULT 0.00 NOT NULL DEFERRABLE ,
    LINE_PRICE           NUMBER (15,5) NOT NULL DEFERRABLE ,
    REJECT_WARRANTY_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    NOTE                 VARCHAR2 (4000) ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE CLAIM_LABOUR_LINE ADD CHECK ( CLAIM_LABOUR_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_LABOUR_LINE ADD CHECK ( CLAIM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_LABOUR_LINE ADD CHECK ( CLAIM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_LABOUR_LINE ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_LABOUR_LINE ADD CHECK ( WARRANTY_EVAL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_LABOUR_LINE ADD CHECK ( WARRANTY_EVAL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_LABOUR_LINE ADD CHECK ( WARRANTY_EVAL_TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_LABOUR_LINE ADD CHECK ( WARRANTY_EVAL_LABOUR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_LABOUR_LINE ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_LABOUR_LINE ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_LABOUR_LINE ADD CHECK ( REJECT_WARRANTY_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE CLAIM_LABOUR_LINE ADD CHECK ( RSTAT_CD             IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE CLAIM_LABOUR_LINE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE CLAIM_LABOUR_LINE
IS
  'this table defines labour that has or will be claimed for against work that was covered under warranty' ;
  COMMENT ON COLUMN CLAIM_LABOUR_LINE.CLAIM_LABOUR_LINE_ID
IS
  'PRIMARY KEY OF CLAIM LABOUR LINE ID - FROM SEQUENCE' ;
  COMMENT ON COLUMN CLAIM_LABOUR_LINE.LINE_LDESC
IS
  'REF_LABOUR_SKILL.LABOUR_SKILL_CD (DESC_SDESC) ' ;
  COMMENT ON COLUMN CLAIM_LABOUR_LINE.CLAIM_QT
IS
  'WARRANTY_EVAL_LABOUR.ACTUAL_HR  ' ;
  COMMENT ON COLUMN CLAIM_LABOUR_LINE.UNIT_PRICE
IS
  'REF_LABOUR_SKILL.EST_HOURLY_COST. Default 0.00' ;
  COMMENT ON COLUMN CLAIM_LABOUR_LINE.LINE_PRICE
IS
  'CLAIM_QT * UNIT_PRICE' ;
  COMMENT ON COLUMN CLAIM_LABOUR_LINE.REJECT_WARRANTY_BOOL
IS
  'USED TO DEFINE IF THIS LINE HAS BEEN REJECTED DURRING CLAIM PROCESS' ;
  COMMENT ON COLUMN CLAIM_LABOUR_LINE.NOTE
IS
  'note for a labour line associate with a claim' ;
  CREATE INDEX IX_SCHEDSTASK_CLAIMLABOURLINE ON CLAIM_LABOUR_LINE
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_WAREVALLAB_CLMLABLINE ON CLAIM_LABOUR_LINE
    (
      WARRANTY_EVAL_DB_ID ASC ,
      WARRANTY_EVAL_ID ASC ,
      WARRANTY_EVAL_TASK_ID ASC ,
      WARRANTY_EVAL_LABOUR_ID ASC
    ) ;
  CREATE INDEX IX_CLAIM_CLMLABLINE ON CLAIM_LABOUR_LINE
    (
      CLAIM_DB_ID ASC ,
      CLAIM_ID ASC
    ) ;
ALTER TABLE CLAIM_LABOUR_LINE ADD CONSTRAINT PK_CLAIM_LABOUR_LINE PRIMARY KEY ( CLAIM_LABOUR_LINE_ID, CLAIM_DB_ID, CLAIM_ID ) ;


CREATE TABLE CLAIM_PART_LINE
  (
    CLAIM_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    CLAIM_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    CLAIM_PART_LINE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_TASK_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_PART_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID          NUMBER (10) ,
    INV_NO_ID             NUMBER (10) ,
    LINE_LDESC            VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    CLAIM_QT FLOAT NOT NULL DEFERRABLE ,
    UNIT_PRICE           NUMBER (15,5) NOT NULL DEFERRABLE ,
    LINE_PRICE           NUMBER (15,5) NOT NULL DEFERRABLE ,
    REJECT_WARRANTY_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    NOTE                 VARCHAR2 (4000) ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE CLAIM_PART_LINE ADD CHECK ( CLAIM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_PART_LINE ADD CHECK ( CLAIM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_PART_LINE ADD CHECK ( CLAIM_PART_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_PART_LINE ADD CHECK ( WARRANTY_EVAL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_PART_LINE ADD CHECK ( WARRANTY_EVAL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_PART_LINE ADD CHECK ( WARRANTY_EVAL_TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_PART_LINE ADD CHECK ( WARRANTY_EVAL_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_PART_LINE ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_PART_LINE ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_PART_LINE ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_PART_LINE ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_PART_LINE ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_PART_LINE ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE CLAIM_PART_LINE ADD CHECK ( REJECT_WARRANTY_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE CLAIM_PART_LINE ADD CHECK ( RSTAT_CD             IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE CLAIM_PART_LINE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE CLAIM_PART_LINE
IS
  'This table defines a part that has been or will be claimed for against a warranty.' ;
  COMMENT ON COLUMN CLAIM_PART_LINE.CLAIM_PART_LINE_ID
IS
  'PRIMARY KEY OF A CLAIM LINE ' ;
  COMMENT ON COLUMN CLAIM_PART_LINE.LINE_LDESC
IS
  'COPIED FROM INV_INV_SERIAL_NO_OEM' ;
  COMMENT ON COLUMN CLAIM_PART_LINE.CLAIM_QT
IS
  'Copied from warranty evaluation SCHED_RMVD_PART.RMVD_QT  ' ;
  COMMENT ON COLUMN CLAIM_PART_LINE.UNIT_PRICE
IS
  'EQP_PART_NO.AVG_UNIT_PRICE. Default 0.00' ;
  COMMENT ON COLUMN CLAIM_PART_LINE.LINE_PRICE
IS
  'CLAIM_QT * UNIT_PRICE' ;
  COMMENT ON COLUMN CLAIM_PART_LINE.REJECT_WARRANTY_BOOL
IS
  'DEFINES IF THIS LINE HAS BEEN REJECTED FOR A CLAIM' ;
  COMMENT ON COLUMN CLAIM_PART_LINE.NOTE
IS
  'note for a labour line associate with a claim' ;
  CREATE INDEX IX_EQPPARTNO_CLAIMPARTLINE ON CLAIM_PART_LINE
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVINV_CLAIMPARTLINE ON CLAIM_PART_LINE
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDSTASK_CLAIMPARTLINE ON CLAIM_PART_LINE
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_WAREVALPRT_CLMPRTLINE ON CLAIM_PART_LINE
    (
      WARRANTY_EVAL_DB_ID ASC ,
      WARRANTY_EVAL_ID ASC ,
      WARRANTY_EVAL_TASK_ID ASC ,
      WARRANTY_EVAL_PART_ID ASC
    ) ;
  CREATE INDEX IX_CLAIM_CLAIMPARTLINE ON CLAIM_PART_LINE
    (
      CLAIM_DB_ID ASC ,
      CLAIM_ID ASC
    ) ;
ALTER TABLE CLAIM_PART_LINE ADD CONSTRAINT PK_CLAIM_PART_LINE PRIMARY KEY ( CLAIM_DB_ID, CLAIM_ID, CLAIM_PART_LINE_ID ) ;


CREATE TABLE COR_BLOB_APR
  (
    BLOB_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_DATA BLOB NOT NULL DEFERRABLE ,
    ORIG_CREATION_DT DATE DEFAULT SYSDATE NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE COR_BLOB_APR ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_APR ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_APR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE COR_BLOB_APR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_APR ADD CONSTRAINT PK_COR_BLOB_APR PRIMARY KEY ( BLOB_DB_ID, BLOB_ID ) ;


CREATE TABLE COR_BLOB_AUG
  (
    BLOB_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_DATA BLOB NOT NULL DEFERRABLE ,
    ORIG_CREATION_DT DATE DEFAULT SYSDATE NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE COR_BLOB_AUG ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_AUG ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_AUG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE COR_BLOB_AUG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_AUG ADD CONSTRAINT PK_COR_BLOB_AUG PRIMARY KEY ( BLOB_DB_ID, BLOB_ID ) ;


CREATE TABLE COR_BLOB_DATA
  (
    BLOB_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_DATA BLOB NOT NULL DEFERRABLE ,
    ORIG_CREATION_DT DATE DEFAULT SYSDATE NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE COR_BLOB_DATA ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_DATA ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_DATA ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE COR_BLOB_DATA ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_DATA ADD CONSTRAINT PK_COR_BLOB_DATA PRIMARY KEY ( BLOB_DB_ID, BLOB_ID ) ;


CREATE TABLE COR_BLOB_DEC
  (
    BLOB_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_DATA BLOB NOT NULL DEFERRABLE ,
    ORIG_CREATION_DT DATE DEFAULT SYSDATE NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE COR_BLOB_DEC ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_DEC ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_DEC ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE COR_BLOB_DEC ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_DEC ADD CONSTRAINT PK_COR_BLOB_DEC PRIMARY KEY ( BLOB_DB_ID, BLOB_ID ) ;


CREATE TABLE COR_BLOB_FEB
  (
    BLOB_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_DATA BLOB NOT NULL DEFERRABLE ,
    ORIG_CREATION_DT DATE DEFAULT SYSDATE NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE COR_BLOB_FEB ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_FEB ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_FEB ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE COR_BLOB_FEB ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_FEB ADD CONSTRAINT PK_COR_BLOB_FEB PRIMARY KEY ( BLOB_DB_ID, BLOB_ID ) ;


CREATE TABLE COR_BLOB_INFO
  (
    BLOB_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_FILE_NAME    VARCHAR2 (255) ,
    BLOB_CONTENT_TYPE VARCHAR2 (80) ,
    ALT_ID RAW (16) NOT NULL ,
    BLOB_LOC        VARCHAR2 (255) ,
    BLOB_TYPE       VARCHAR2 (80) NOT NULL DEFERRABLE ,
    SEGREGATED_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE COR_BLOB_INFO ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_INFO ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_INFO ADD CHECK ( SEGREGATED_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE COR_BLOB_INFO ADD CHECK ( RSTAT_CD        IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE COR_BLOB_INFO ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_INFO ADD CONSTRAINT PK_COR_BLOB_INFO PRIMARY KEY ( BLOB_DB_ID, BLOB_ID ) ;
ALTER TABLE COR_BLOB_INFO ADD CONSTRAINT IX_CORBLOBINFOALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE COR_BLOB_JAN
  (
    BLOB_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_DATA BLOB NOT NULL DEFERRABLE ,
    ORIG_CREATION_DT DATE DEFAULT SYSDATE NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE COR_BLOB_JAN ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_JAN ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_JAN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE COR_BLOB_JAN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_JAN ADD CONSTRAINT PK_COR_BLOB_JAN PRIMARY KEY ( BLOB_DB_ID, BLOB_ID ) ;


CREATE TABLE COR_BLOB_JUL
  (
    BLOB_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_DATA BLOB NOT NULL DEFERRABLE ,
    ORIG_CREATION_DT DATE DEFAULT SYSDATE NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE COR_BLOB_JUL ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_JUL ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_JUL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE COR_BLOB_JUL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_JUL ADD CONSTRAINT PK_COR_BLOB_JUL PRIMARY KEY ( BLOB_DB_ID, BLOB_ID ) ;


CREATE TABLE COR_BLOB_JUN
  (
    BLOB_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_DATA BLOB NOT NULL DEFERRABLE ,
    ORIG_CREATION_DT DATE DEFAULT SYSDATE NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE COR_BLOB_JUN ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_JUN ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_JUN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE COR_BLOB_JUN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_JUN ADD CONSTRAINT PK_COR_BLOB_JUN PRIMARY KEY ( BLOB_DB_ID, BLOB_ID ) ;


CREATE TABLE COR_BLOB_MAR
  (
    BLOB_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_DATA BLOB NOT NULL DEFERRABLE ,
    ORIG_CREATION_DT DATE DEFAULT SYSDATE NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE COR_BLOB_MAR ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_MAR ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_MAR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE COR_BLOB_MAR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_MAR ADD CONSTRAINT PK_COR_BLOB_MAR PRIMARY KEY ( BLOB_DB_ID, BLOB_ID ) ;


CREATE TABLE COR_BLOB_MAY
  (
    BLOB_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_DATA BLOB NOT NULL DEFERRABLE ,
    ORIG_CREATION_DT DATE DEFAULT SYSDATE NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE COR_BLOB_MAY ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_MAY ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_MAY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE COR_BLOB_MAY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_MAY ADD CONSTRAINT PK_COR_BLOB_MAY PRIMARY KEY ( BLOB_DB_ID, BLOB_ID ) ;


CREATE TABLE COR_BLOB_NOV
  (
    BLOB_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_DATA BLOB NOT NULL DEFERRABLE ,
    ORIG_CREATION_DT DATE DEFAULT SYSDATE NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE COR_BLOB_NOV ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_NOV ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_NOV ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE COR_BLOB_NOV ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_NOV ADD CONSTRAINT PK_COR_BLOB_NOV PRIMARY KEY ( BLOB_DB_ID, BLOB_ID ) ;


CREATE TABLE COR_BLOB_OCT
  (
    BLOB_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_DATA BLOB NOT NULL DEFERRABLE ,
    ORIG_CREATION_DT DATE DEFAULT SYSDATE NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE COR_BLOB_OCT ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_OCT ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_OCT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE COR_BLOB_OCT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_OCT ADD CONSTRAINT PK_COR_BLOB_OCT PRIMARY KEY ( BLOB_DB_ID, BLOB_ID ) ;


CREATE TABLE COR_BLOB_PRINT
  (
    DOC_DB_ID     NUMBER (10) NOT NULL ,
    DOC_ID        NUMBER (10) NOT NULL ,
    TYPE_CD       VARCHAR2 (8) NOT NULL ,
    FILENAME_DESC VARCHAR2 (255) NOT NULL ,
    PATH_DESC     VARCHAR2 (255) ,
    ORD           NUMBER (10) NOT NULL ,
    DATA BLOB ,
    CREATION_DT    DATE NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
COMMENT ON COLUMN COR_BLOB_PRINT.DOC_DB_ID
IS
  'primary key to identify a printable document.' ;
  COMMENT ON COLUMN COR_BLOB_PRINT.DOC_ID
IS
  'primary key to identify a printable document. Unique key generated from PRINT_DOC_ID_SEQ' ;
  COMMENT ON COLUMN COR_BLOB_PRINT.TYPE_CD
IS
  'describes the type of document byte data found in the DATA column. ex: PDF' ;
  COMMENT ON COLUMN COR_BLOB_PRINT.FILENAME_DESC
IS
  'the complete filename of the document. This is useful if printing to a filesystem' ;
  COMMENT ON COLUMN COR_BLOB_PRINT.PATH_DESC
IS
  'an identifier to allow grouping and organization of print jobs. This is useful if printing to a filesystem' ;
  COMMENT ON COLUMN COR_BLOB_PRINT.ORD
IS
  'the order of this document in relation to other documents in the same print job' ;
  COMMENT ON COLUMN COR_BLOB_PRINT.DATA
IS
  'the raw byte payload of the document' ;
CREATE UNIQUE INDEX IX_CORBLOBPRINTORD ON COR_BLOB_PRINT
  (
    DOC_DB_ID ASC , DOC_ID ASC , ORD ASC
  )
  ;
ALTER TABLE COR_BLOB_PRINT ADD CONSTRAINT PK_COR_BLOB_PRINT PRIMARY KEY ( DOC_DB_ID, DOC_ID ) ;


CREATE TABLE COR_BLOB_SEP
  (
    BLOB_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_DATA BLOB NOT NULL DEFERRABLE ,
    ORIG_CREATION_DT DATE DEFAULT SYSDATE NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE COR_BLOB_SEP ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_SEP ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_SEP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE COR_BLOB_SEP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_BLOB_SEP ADD CONSTRAINT PK_COR_BLOB_SEP PRIMARY KEY ( BLOB_DB_ID, BLOB_ID ) ;


CREATE TABLE COR_PERM_BLOB
  (
    BLOB_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_DATA BLOB NOT NULL DEFERRABLE ,
    BLOB_FILE_NAME    VARCHAR2 (255) ,
    BLOB_CONTENT_TYPE VARCHAR2 (80) ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE COR_PERM_BLOB ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_PERM_BLOB ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_PERM_BLOB ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE COR_PERM_BLOB ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE COR_PERM_BLOB ADD CONSTRAINT PK_COR_PERM_BLOB PRIMARY KEY ( BLOB_DB_ID, BLOB_ID ) ;


CREATE TABLE DEFN_NR_EST
  (
    TASK_DEFN_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    NR_EST_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    EST_EFFORT         NUMBER (6,2) ,
    EST_NR_FACTOR      NUMBER (6,2) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE DEFN_NR_EST ADD CHECK ( TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DEFN_NR_EST ADD CHECK ( TASK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DEFN_NR_EST ADD CHECK ( NR_EST_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DEFN_NR_EST ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DEFN_NR_EST ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE DEFN_NR_EST ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN DEFN_NR_EST.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN DEFN_NR_EST.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN DEFN_NR_EST.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN DEFN_NR_EST.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN DEFN_NR_EST.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_TASKDEFN_DEFNNREST ON DEFN_NR_EST
    (
      TASK_DEFN_DB_ID ASC ,
      TASK_DEFN_ID ASC
    ) ;
ALTER TABLE DEFN_NR_EST ADD CONSTRAINT PK_DEFN_NR_EST PRIMARY KEY ( TASK_DEFN_DB_ID, TASK_DEFN_ID, NR_EST_ID ) ;


CREATE TABLE DIM_INV
  (
    DIM_INV_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID       NUMBER (10) ,
    INV_NO_ID          NUMBER (10) ,
    INV_NO_SDESC       VARCHAR2 (240) ,
    ASSMBL_DB_ID       NUMBER (10) ,
    ASSMBL_CD          VARCHAR2 (8) ,
    ASSMBL_CLASS_DB_ID NUMBER (10) ,
    ASSMBL_CLASS_CD    VARCHAR2 (8) ,
    SERIAL_NO_OEM      VARCHAR2 (40) ,
    PART_NO_OEM        VARCHAR2 (40) ,
    INSTALL_GDT        DATE ,
    EQP_POS_CD         VARCHAR2 (40) ,
    AC_REG_CD          VARCHAR2 (10) ,
    AC_ASSMBL_DB_ID    NUMBER (10) ,
    AC_ASSMBL_CD       VARCHAR2 (8) ,
    CARRIER_NAME       VARCHAR2 (40) ,
    IATA_CD            VARCHAR2 (8) ,
    ICAO_CD            VARCHAR2 (8) ,
    TIME_UNIT_DB_ID    NUMBER (10) ,
    TIME_UNIT_CD       VARCHAR2 (8) ,
    OIL_UNIT_DB_ID     NUMBER (10) ,
    OIL_UNIT_CD        VARCHAR2 (8) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE DIM_INV ADD CHECK ( DIM_INV_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DIM_INV ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DIM_INV ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DIM_INV ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DIM_INV ADD CHECK ( ASSMBL_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DIM_INV ADD CHECK ( AC_ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DIM_INV ADD CHECK ( TIME_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DIM_INV ADD CHECK ( OIL_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DIM_INV ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE DIM_INV ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DIM_INV ADD CONSTRAINT PK_DIM_INV PRIMARY KEY ( DIM_INV_ID ) ;


CREATE TABLE DIM_OIL_STATUS
  (
    DIM_OIL_STATUS_ID NUMBER (10) NOT NULL DEFERRABLE ,
    OIL_STATUS_DB_ID  NUMBER (10) ,
    OIL_STATUS_CD     VARCHAR2 (16) ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE DIM_OIL_STATUS ADD CHECK ( DIM_OIL_STATUS_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DIM_OIL_STATUS ADD CHECK ( OIL_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DIM_OIL_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE DIM_OIL_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DIM_OIL_STATUS ADD CONSTRAINT PK_DIM_OIL_STATUS PRIMARY KEY ( DIM_OIL_STATUS_ID ) ;


CREATE TABLE DIM_TIME
  (
    DIM_TIME_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    DAY_TIMESTAMP      VARCHAR2 (32) ,
    DAY_NUMBERINWEEK   INTEGER ,
    DAY_NUMBERINMONTH  INTEGER ,
    DAY_NUMBERINYEAR   INTEGER ,
    WEEK_NUMBERINYEAR  INTEGER ,
    MONTH_NUMBERINYEAR INTEGER ,
    YEAR_KEY           INTEGER ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE DIM_TIME ADD CHECK ( DIM_TIME_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DIM_TIME ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE DIM_TIME ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DIM_TIME ADD CONSTRAINT PK_DIM_TIME PRIMARY KEY ( DIM_TIME_ID ) ;


CREATE TABLE DWT_TASK_LABOUR_SUMMARY
  (
    TASK_DEFN_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    TASK_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    BARCODE_SDESC       VARCHAR2 (80) ,
    REVISION_ORD        NUMBER (4) ,
    ASSMBL_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD           VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ASSMBL_INV_NO_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_INV_NO_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_INV_NO_SDESC VARCHAR2 (240) NOT NULL DEFERRABLE ,
    COMPLETE_DT         DATE ,
    SCHED_MAN_PWR_CT    NUMBER (10) ,
    SCHED_MAN_HR        NUMBER (9,5) NOT NULL DEFERRABLE ,
    ACTUAL_MAN_PWR_CT   NUMBER (10) ,
    ACTUAL_TOTAL_MAN_HR NUMBER (9,5) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CHECK ( TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CHECK ( TASK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CHECK ( ASSMBL_INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CHECK ( ASSMBL_INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CHECK ( SCHED_MAN_PWR_CT BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CHECK ( ACTUAL_MAN_PWR_CT BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN DWT_TASK_LABOUR_SUMMARY.TASK_DEFN_DB_ID
IS
  '(PK) FK to TASK_DEFN table.' ;
  COMMENT ON COLUMN DWT_TASK_LABOUR_SUMMARY.TASK_DEFN_ID
IS
  '(PK) FK to TASK_DEFN table.' ;
  COMMENT ON COLUMN DWT_TASK_LABOUR_SUMMARY.SCHED_DB_ID
IS
  '(PK) FK to SCHED_STASK table.' ;
  COMMENT ON COLUMN DWT_TASK_LABOUR_SUMMARY.SCHED_ID
IS
  '(PK) FK to SCHED_STASK table.' ;
  COMMENT ON COLUMN DWT_TASK_LABOUR_SUMMARY.LABOUR_SKILL_DB_ID
IS
  '(PK) FK to REF_LABOUR_SKILL table.' ;
  COMMENT ON COLUMN DWT_TASK_LABOUR_SUMMARY.LABOUR_SKILL_CD
IS
  '(PK) FK to REF_LABOUR_SKILL table.' ;
  COMMENT ON COLUMN DWT_TASK_LABOUR_SUMMARY.TASK_DB_ID
IS
  '(PK) FK to TASK_TASK table.' ;
  COMMENT ON COLUMN DWT_TASK_LABOUR_SUMMARY.TASK_ID
IS
  '(PK) FK to TASK_TASK table.' ;
  COMMENT ON COLUMN DWT_TASK_LABOUR_SUMMARY.BARCODE_SDESC
IS
  'Actual task barcode.' ;
  COMMENT ON COLUMN DWT_TASK_LABOUR_SUMMARY.REVISION_ORD
IS
  'Task definition revision code.' ;
  COMMENT ON COLUMN DWT_TASK_LABOUR_SUMMARY.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL. Task assembly.' ;
  COMMENT ON COLUMN DWT_TASK_LABOUR_SUMMARY.ASSMBL_CD
IS
  'FK to EQP_ASSMBL. Task assembly.' ;
  COMMENT ON COLUMN DWT_TASK_LABOUR_SUMMARY.ASSMBL_INV_NO_DB_ID
IS
  'FK to INV_INV. Task''s inventory parent assembly.' ;
  COMMENT ON COLUMN DWT_TASK_LABOUR_SUMMARY.ASSMBL_INV_NO_ID
IS
  'FK to INV_INV. Task''s inventory parent assembly.' ;
  COMMENT ON COLUMN DWT_TASK_LABOUR_SUMMARY.ASSMBL_INV_NO_SDESC
IS
  'Task inventory parent assembly description.' ;
  COMMENT ON COLUMN DWT_TASK_LABOUR_SUMMARY.COMPLETE_DT
IS
  'Actual task completion date.' ;
  COMMENT ON COLUMN DWT_TASK_LABOUR_SUMMARY.SCHED_MAN_PWR_CT
IS
  'Scheduled number of labour for the task.' ;
  COMMENT ON COLUMN DWT_TASK_LABOUR_SUMMARY.SCHED_MAN_HR
IS
  'Scheduled number of labour hours.' ;
  COMMENT ON COLUMN DWT_TASK_LABOUR_SUMMARY.ACTUAL_MAN_PWR_CT
IS
  'Scheduled number of labour for the actual task.' ;
  COMMENT ON COLUMN DWT_TASK_LABOUR_SUMMARY.ACTUAL_TOTAL_MAN_HR
IS
  'Actual total number of man hours.' ;
  CREATE INDEX IX_EQPASSMBL_TASKLABOURSUMMARY ON DWT_TASK_LABOUR_SUMMARY
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
  CREATE INDEX IX_INVINV_TASKLABOURSUMMARY ON DWT_TASK_LABOUR_SUMMARY
    (
      ASSMBL_INV_NO_DB_ID ASC ,
      ASSMBL_INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDSTASK_TASKLABOURSUMMAR ON DWT_TASK_LABOUR_SUMMARY
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_TASKTASK_TASKLABOURSUMMARY ON DWT_TASK_LABOUR_SUMMARY
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
  CREATE INDEX IX_TASKDEFN_TASKLABOURSUMMARY ON DWT_TASK_LABOUR_SUMMARY
    (
      TASK_DEFN_DB_ID ASC ,
      TASK_DEFN_ID ASC
    ) ;
ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CONSTRAINT PK_DWT_TASK_LABOUR_SUMMARY PRIMARY KEY ( TASK_DEFN_DB_ID, TASK_DEFN_ID, SCHED_DB_ID, SCHED_ID, LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD, TASK_DB_ID, TASK_ID ) ;


CREATE TABLE EQP_ADVSRY
  (
    ADVSRY_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ADVSRY_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    ADVSRY_NAME       VARCHAR2 (80) ,
    ADVSRY_DT         DATE NOT NULL DEFERRABLE ,
    ADVSRY_HR_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    ADVSRY_HR_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ADVSRY_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ADVSRY_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ADVSRY_NOTE       VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_ADVSRY ADD CHECK ( ADVSRY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ADVSRY ADD CHECK ( ADVSRY_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ADVSRY ADD CHECK ( ADVSRY_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ADVSRY ADD CHECK ( ADVSRY_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ADVSRY ADD CHECK ( ADVSRY_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ADVSRY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_ADVSRY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_ADVSRY
IS
  'This table contains the Advisory entity core attributes.' ;
  COMMENT ON COLUMN EQP_ADVSRY.ADVSRY_DB_ID
IS
  'A unique serial number assigned by mxi to each physical maintenix database. allows data to be merged or consolidated from independent sources without pk collisions.' ;
  COMMENT ON COLUMN EQP_ADVSRY.ADVSRY_ID
IS
  'A unique value that identifies the advisory.' ;
  COMMENT ON COLUMN EQP_ADVSRY.ADVSRY_NAME
IS
  'This is the short description of the advisory.' ;
  COMMENT ON COLUMN EQP_ADVSRY.ADVSRY_DT
IS
  'The date on which this advisory was recorded in the system.' ;
  COMMENT ON COLUMN EQP_ADVSRY.ADVSRY_HR_DB_ID
IS
  'FK to org_hr.  The user who recorded the advisory.' ;
  COMMENT ON COLUMN EQP_ADVSRY.ADVSRY_HR_ID
IS
  'FK to org_hr.  The user who recorded the advisory.' ;
  COMMENT ON COLUMN EQP_ADVSRY.ADVSRY_TYPE_DB_ID
IS
  'FK to REF_ADVSRY_TYPE' ;
  COMMENT ON COLUMN EQP_ADVSRY.ADVSRY_TYPE_CD
IS
  'FK to REF_ADVSRY_TYPE' ;
  COMMENT ON COLUMN EQP_ADVSRY.ADVSRY_NOTE
IS
  'The instructions regarding the advisory.' ;
  COMMENT ON COLUMN EQP_ADVSRY.RSTAT_CD
IS
  'FK to MIM_RSTAT' ;
  COMMENT ON COLUMN EQP_ADVSRY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_ADVSRY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_ADVSRY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_ADVSRY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGHR_EQPADVSRY ON EQP_ADVSRY
    (
      ADVSRY_HR_DB_ID ASC ,
      ADVSRY_HR_ID ASC
    ) ;
ALTER TABLE EQP_ADVSRY ADD CONSTRAINT PK_EQP_ADVSRY PRIMARY KEY ( ADVSRY_DB_ID, ADVSRY_ID ) ;
ALTER TABLE EQP_ADVSRY ADD CONSTRAINT IX_EQPADVSSRYALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE EQP_ADVSRY_ATTACH
  (
    ADVSRY_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ADVSRY_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    ADVSRY_ATTACH_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    ATTACH_TYPE_DB_ID NUMBER (10) ,
    ATTACH_TYPE_CD    VARCHAR2 (8) ,
    ATTACH_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    ATTACH_LDESC      VARCHAR2 (4000) ,
    ATTACH_NOTE       VARCHAR2 (4000) ,
    ATTACH_BLOB BLOB NOT NULL DEFERRABLE ,
    ATTACH_CONTENT_TYPE VARCHAR2 (80) ,
    ATTACH_FILENAME     VARCHAR2 (255) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_ADVSRY_ATTACH ADD CHECK ( ADVSRY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ADVSRY_ATTACH ADD CHECK ( ADVSRY_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ADVSRY_ATTACH ADD CHECK ( ADVSRY_ATTACH_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ADVSRY_ATTACH ADD CHECK ( ATTACH_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ADVSRY_ATTACH ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_ADVSRY_ATTACH ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_ADVSRY_ATTACH
IS
  'This table will contain the blob references to all the attachments on a given advisory.' ;
  COMMENT ON COLUMN EQP_ADVSRY_ATTACH.ADVSRY_DB_ID
IS
  'PFK to EQP_ADVSRY' ;
  COMMENT ON COLUMN EQP_ADVSRY_ATTACH.ADVSRY_ID
IS
  'PFK to EQP_ADVSRY' ;
  COMMENT ON COLUMN EQP_ADVSRY_ATTACH.ADVSRY_ATTACH_ID
IS
  'A unique value that identifies the advisory type.' ;
  COMMENT ON COLUMN EQP_ADVSRY_ATTACH.ATTACH_TYPE_DB_ID
IS
  'FK to REF_ATTACH_TYPE' ;
  COMMENT ON COLUMN EQP_ADVSRY_ATTACH.ATTACH_TYPE_CD
IS
  'FK to REF_ATTACH_TYPE' ;
  COMMENT ON COLUMN EQP_ADVSRY_ATTACH.ATTACH_SDESC
IS
  'The short description of the attachement.' ;
  COMMENT ON COLUMN EQP_ADVSRY_ATTACH.ATTACH_LDESC
IS
  'The long description of the attachement.' ;
  COMMENT ON COLUMN EQP_ADVSRY_ATTACH.ATTACH_NOTE
IS
  'Attachement note.' ;
  COMMENT ON COLUMN EQP_ADVSRY_ATTACH.ATTACH_BLOB
IS
  'Attachement blob.' ;
  COMMENT ON COLUMN EQP_ADVSRY_ATTACH.ATTACH_CONTENT_TYPE
IS
  'Attachment content type.' ;
  COMMENT ON COLUMN EQP_ADVSRY_ATTACH.ATTACH_FILENAME
IS
  'Attachment filename.' ;
  COMMENT ON COLUMN EQP_ADVSRY_ATTACH.RSTAT_CD
IS
  'FK to MIM_RSTAT' ;
  COMMENT ON COLUMN EQP_ADVSRY_ATTACH.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_ADVSRY_ATTACH.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_ADVSRY_ATTACH.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_ADVSRY_ATTACH.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPADVSRY_EQPADVSRYATTACH ON EQP_ADVSRY_ATTACH
    (
      ADVSRY_DB_ID ASC ,
      ADVSRY_ID ASC
    ) ;
ALTER TABLE EQP_ADVSRY_ATTACH ADD CONSTRAINT PK_EQP_ADVSRY_ATTACH PRIMARY KEY ( ADVSRY_DB_ID, ADVSRY_ID, ADVSRY_ATTACH_ID ) ;


CREATE TABLE EQP_ASSMBL
  (
    ASSMBL_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD          VARCHAR2 (8) NOT NULL ,
    ASSMBL_CLASS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CLASS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    LOGBOOK_TYPE_DB_ID NUMBER (10) ,
    LOGBOOK_TYPE_CD    VARCHAR2 (8) ,
    BITMAP_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG         NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_DB_ID         NUMBER (10) ,
    IETM_ID            NUMBER (10) ,
    IETM_TOPIC_ID      NUMBER (10) ,
    AUTHORITY_DB_ID    NUMBER (10) ,
    AUTHORITY_ID       NUMBER (10) ,
    ASSMBL_NAME        VARCHAR2 (40) NOT NULL DEFERRABLE ,
    ASSMBL_MDESC       VARCHAR2 (500) ,
    PROG_VER_LDESC     VARCHAR2 (4000) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_ASSMBL ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL ADD CHECK ( ASSMBL_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL ADD CHECK ( LOGBOOK_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL ADD CHECK ( IETM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL ADD CHECK ( IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL ADD CHECK ( IETM_TOPIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL ADD CHECK ( AUTHORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL ADD CHECK ( AUTHORITY_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_ASSMBL
IS
  'Assembly: An assembly is the abstract definition of a group of components that is collected by function, e.g. an engine or APU. An assembly forms the blueprint for creating Inventory assemblies in the system. 
An assembly is comprised of a list of BOM Items, which define the maintenance significant information such as: maintenance plan, reliability information, etc.' ;
  COMMENT ON COLUMN EQP_ASSMBL.ASSMBL_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN EQP_ASSMBL.ASSMBL_CD
IS
  'The alphanumeric code that uniquely identifies the Assembly to the user.  It forms part of the primary key of an Assembly.' ;
  COMMENT ON COLUMN EQP_ASSMBL.ASSMBL_CLASS_DB_ID
IS
  'FK to REF_ASSMBL_CLASS. Identifies the class of the assembly, which is used to activate various Maintenix functionality.' ;
  COMMENT ON COLUMN EQP_ASSMBL.ASSMBL_CLASS_CD
IS
  'FK to REF_ASSMBL_CLASS. Identifies the class of the assembly, which is used to activate various Maintenix functionality.' ;
  COMMENT ON COLUMN EQP_ASSMBL.LOGBOOK_TYPE_DB_ID
IS
  'FK to REF_LOGBOOK_TYPE. Identifies the paper-based aircraft logbook to which this assembly belongs.' ;
  COMMENT ON COLUMN EQP_ASSMBL.LOGBOOK_TYPE_CD
IS
  'FK to REF_LOGBOOK_TYPE. Identifies the paper-based aircraft logbook to which this assembly belongs.' ;
  COMMENT ON COLUMN EQP_ASSMBL.BITMAP_DB_ID
IS
  'FK to REF_BITMAP. Identifies the bitmap used to represent this assembly.' ;
  COMMENT ON COLUMN EQP_ASSMBL.BITMAP_TAG
IS
  'FK to REF_BITMAP. Identifies the bitmap used to represent this assembly.' ;
  COMMENT ON COLUMN EQP_ASSMBL.IETM_DB_ID
IS
  'FK to IETM_TOPIC. Identifies a link used to launch an IETM program in context of a particular topic.' ;
  COMMENT ON COLUMN EQP_ASSMBL.IETM_ID
IS
  'FK to IETM_TOPIC. Identifies a link used to launch an IETM program in context of a particular topic.' ;
  COMMENT ON COLUMN EQP_ASSMBL.IETM_TOPIC_ID
IS
  'FK to IETM_TOPIC. Identifies a link used to launch an IETM program in context of a particular topic.' ;
  COMMENT ON COLUMN EQP_ASSMBL.AUTHORITY_DB_ID
IS
  'FK to ORG_AUTHORITY.  Identifies the authority under which this asembly belongs.' ;
  COMMENT ON COLUMN EQP_ASSMBL.AUTHORITY_ID
IS
  'FK to ORG_AUTHORITY.  Identifies the authority under which this asembly belongs.' ;
  COMMENT ON COLUMN EQP_ASSMBL.ASSMBL_NAME
IS
  'The name or title of the Assembly.' ;
  COMMENT ON COLUMN EQP_ASSMBL.ASSMBL_MDESC
IS
  'The description of the Assembly that includes its purpose and application.' ;
  COMMENT ON COLUMN EQP_ASSMBL.PROG_VER_LDESC
IS
  'The release-version of the assembly. This field is a LONG string, so that a date-history of the revisions can be recorded in a textual format.' ;
  COMMENT ON COLUMN EQP_ASSMBL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record. ' ;
  COMMENT ON COLUMN EQP_ASSMBL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_ASSMBL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_ASSMBL.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_ASSMBL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_IETMTOPIC_EQPASSMBL ON EQP_ASSMBL
    (
      IETM_DB_ID ASC ,
      IETM_ID ASC ,
      IETM_TOPIC_ID ASC
    ) ;
  CREATE INDEX IX_ORGAUTHORITY_EQPASSMBL ON EQP_ASSMBL
    (
      AUTHORITY_DB_ID ASC ,
      AUTHORITY_ID ASC
    ) ;
ALTER TABLE EQP_ASSMBL ADD CONSTRAINT PK_EQP_ASSMBL PRIMARY KEY ( ASSMBL_DB_ID, ASSMBL_CD ) ;
ALTER TABLE EQP_ASSMBL ADD CONSTRAINT IX_EQPASSMBLASSMBLCD_UNQ UNIQUE ( ASSMBL_CD ) ;
ALTER TABLE EQP_ASSMBL ADD CONSTRAINT IX_EQPASSMBLALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE EQP_ASSMBL_BOM
  (
    ASSMBL_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD             VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ASSMBL_BOM_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    NH_ASSMBL_DB_ID       NUMBER (10) ,
    NH_ASSMBL_CD          VARCHAR2 (8) ,
    NH_ASSMBL_BOM_ID      NUMBER (10) ,
    BOM_CLASS_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_CLASS_CD          VARCHAR2 (8) NOT NULL DEFERRABLE ,
    CFG_SLOT_STATUS_DB_ID NUMBER (10) ,
    CFG_SLOT_STATUS_CD    VARCHAR2 (8) ,
    LOGCARD_FORM_DB_ID    NUMBER (10) ,
    LOGCARD_FORM_CD       VARCHAR2 (8) ,
    IETM_DB_ID            NUMBER (10) ,
    IETM_ID               NUMBER (10) ,
    IETM_TOPIC_ID         NUMBER (10) ,
    POS_CT                NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_BOM_CD         VARCHAR2 (50) NOT NULL DEFERRABLE ,
    ASSMBL_BOM_FUNC_CD    VARCHAR2 (40) ,
    ASSMBL_BOM_ZONE_CD    VARCHAR2 (40) ,
    ASSMBL_BOM_NAME       VARCHAR2 (100) ,
    MANDATORY_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    SOFTWARE_BOOL         NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RVSM_BOOL             NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ETOPS_BOOL            NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_ASSMBL_BOM ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM ADD CHECK ( ASSMBL_BOM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM ADD CHECK ( NH_ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM ADD CHECK ( NH_ASSMBL_BOM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM ADD CHECK ( BOM_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM ADD CHECK ( CFG_SLOT_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM ADD CHECK ( LOGCARD_FORM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM ADD CHECK ( IETM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM ADD CHECK ( IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM ADD CHECK ( IETM_TOPIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM ADD CHECK ( POS_CT BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM ADD CHECK ( MANDATORY_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM ADD CHECK ( SOFTWARE_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM ADD CHECK ( RVSM_BOOL      IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM ADD CHECK ( ETOPS_BOOL     IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM ADD CHECK ( RSTAT_CD       IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_ASSMBL_BOM
IS
  'Log Card: Every assembly is modeled as a collection of log cards. Every log card maintains maintenance-significant information such as: the on-off parts log, the work history, reliability information, etc.
The log cards can be organized hierarchically and therefore serve to define the whole-part browsing structure of an assembly. There can be several log cards of the same type in an assembly; and these cards are identified by "log card position". Every log card includes: a bill of materiels which lists all of the relevant part numbers, task definitions, faults, etc.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL. The assembly in which this log card is included.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.ASSMBL_CD
IS
  'FK to EQP_ASSMBL. The assembly in which this log card is included.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.ASSMBL_BOM_ID
IS
  'Unique identifier serving as part of the primary key, and assigned from the sequence ASSMBL_BOM_ID_SEQ.
''0'' is reserved as the root of the hierarchical structure (represents the assembly itself).' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.NH_ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL_BOM. Identifies the parent of this log card. Since the log card organization is hierarchical, this value indicates the "next highest" log card in the tree. The root log card of an assembly always has a value of NULL.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.NH_ASSMBL_CD
IS
  'FK to EQP_ASSMBL_BOM. Identifies the parent of this log card. Since the log card organization is hierarchical, this value indicates the "next highest" log card in the tree. The root log card of an assembly always has a value of NULL.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.NH_ASSMBL_BOM_ID
IS
  'FK to EQP_ASSMBL_BOM. Identifies the parent of this log card. Since the log card organization is hierarchical, this value indicates the "next highest" log card in the tree. The root log card of an assembly always has a value of NULL.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.BOM_CLASS_DB_ID
IS
  'FK to REF_BOM_CLASS. Identifies the class of the log card, which is used to activate various Maintenix functionality.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.BOM_CLASS_CD
IS
  'FK to REF_BOM_CLASS. Identifies the class of the log card, which is used to activate various Maintenix functionality.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.CFG_SLOT_STATUS_DB_ID
IS
  'FK to REF_CFG_SLOT_STATUS Identifies the status of the confguration slot, which is used to activate various Maintenix functionality.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.CFG_SLOT_STATUS_CD
IS
  'FK to REF_CFG_SLOT_STATUS Identifies the status of the confguration slot, which is used to activate various Maintenix functionality.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.LOGCARD_FORM_DB_ID
IS
  'FK to REF_LOGBOOK_FORM. Identifies the logbook card/form that this bom item represents.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.LOGCARD_FORM_CD
IS
  'FK to REF_LOGBOOK_FORM. Identifies the logbook card/form that this bom item represents.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.IETM_DB_ID
IS
  'FK to IETM_TOPIC. Identifies a link used to launch an IETM program in context of a particular topic.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.IETM_ID
IS
  'FK to IETM_TOPIC. Identifies a link used to launch an IETM program in context of a particular topic.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.IETM_TOPIC_ID
IS
  'FK to IETM_TOPIC. Identifies a link used to launch an IETM program in context of a particular topic.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.POS_CT
IS
  'The number of positions on a given assembly.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.ASSMBL_BOM_CD
IS
  'A code that identifies the log card (usually ATA code in commercial and WUC in military)' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.ASSMBL_BOM_FUNC_CD
IS
  'A second code that identfies the function of the log card.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.ASSMBL_BOM_ZONE_CD
IS
  'A third code that identifies the physical ATA ZONE where the log card can be located.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.ASSMBL_BOM_NAME
IS
  'A name used to label the log card entry.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.MANDATORY_BOOL
IS
  'Indicates whether this log card must be installed for the assembly structure to be considered "complete".' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.SOFTWARE_BOOL
IS
  'Boolean indicating if the config slot is used for software components.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.RVSM_BOOL
IS
  'This is the Reduced Vertical Separation Minimum indicator of the config slot.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.ETOPS_BOOL
IS
  'The ETOPS identifier for the BOM (Config Slot).' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
CREATE UNIQUE INDEX IX_EQPASS_ASSCDBOMCD ON EQP_ASSMBL_BOM
  (
    ASSMBL_CD ASC , ASSMBL_BOM_CD ASC
  )
  ;
  CREATE INDEX IX_EQPASSMBL_EQPASSMBLBOM ON EQP_ASSMBL_BOM
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
  CREATE INDEX IX_EQPASSMBLBOM_EQPASSMBLBOM ON EQP_ASSMBL_BOM
    (
      NH_ASSMBL_DB_ID ASC ,
      NH_ASSMBL_CD ASC ,
      NH_ASSMBL_BOM_ID ASC
    ) ;
  CREATE INDEX IX_IETMTOPIC_EQPASSMBLBOM ON EQP_ASSMBL_BOM
    (
      IETM_DB_ID ASC ,
      IETM_ID ASC ,
      IETM_TOPIC_ID ASC
    ) ;
ALTER TABLE EQP_ASSMBL_BOM ADD CONSTRAINT PK_EQP_ASSMBL_BOM PRIMARY KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) ;
ALTER TABLE EQP_ASSMBL_BOM ADD CONSTRAINT IX_EQPASSMBLBOMALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE EQP_ASSMBL_BOM_LOG
  (
    ASSMBL_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD         VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ASSMBL_BOM_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_BOM_LOG_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LOG_ACTION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    LOG_ACTION_CD     VARCHAR2 (16) NOT NULL DEFERRABLE ,
    HR_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    LOG_DT            DATE NOT NULL DEFERRABLE ,
    LOG_REASON_DB_ID  NUMBER (10) ,
    LOG_REASON_CD     VARCHAR2 (16) ,
    USER_NOTE         VARCHAR2 (4000) ,
    SYSTEM_NOTE       VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_ASSMBL_BOM_LOG ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_LOG ADD CHECK ( ASSMBL_BOM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_LOG ADD CHECK ( ASSMBL_BOM_LOG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_LOG ADD CHECK ( LOG_ACTION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_LOG ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_LOG ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_LOG ADD CHECK ( LOG_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_LOG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_ASSMBL_BOM_LOG
IS
  'Assembly: An assembly is the abstract definition of a group of components that is collected by function, e.g. an engine or APU. An assembly forms the blueprint for creating Inventory assemblies in the system.
An assembly is comprised of a list of BOM Items, which define the maintenance significant information such as: maintenance plan, reliability information, etc.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_LOG.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_LOG.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_LOG.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_LOG.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPASSMBLBOM_EQPASSMBLBMLG ON EQP_ASSMBL_BOM_LOG
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC ,
      ASSMBL_BOM_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_EQPASSMBLBOMLOG ON EQP_ASSMBL_BOM_LOG
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
ALTER TABLE EQP_ASSMBL_BOM_LOG ADD CONSTRAINT PK_EQP_ASSMBL_BOM_LOG PRIMARY KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID, ASSMBL_BOM_LOG_ID ) ;


CREATE TABLE EQP_ASSMBL_BOM_OIL
  (
    ASSMBL_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD            VARCHAR2 (8) NOT NULL DEFERRABLE ,
    OIL_DATA_TYPE_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    OIL_DATA_TYPE_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    TIME_DATA_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TIME_DATA_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_ASSMBL_BOM_OIL ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_OIL ADD CHECK ( OIL_DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_OIL ADD CHECK ( OIL_DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_OIL ADD CHECK ( TIME_DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_OIL ADD CHECK ( TIME_DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_OIL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_OIL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_ASSMBL_BOM_OIL
IS
  'Table contains the oil consumption rate definition for an assembly (of type ENG or APU).' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_OIL.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL.  The assembly for which the oil consumption rate is defined.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_OIL.ASSMBL_CD
IS
  'FK to EQP_ASSMBL.  The assembly for which the oil consumption rate is defined.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_OIL.OIL_DATA_TYPE_DB_ID
IS
  'FK to REF_DATA_TYPE_ASSMBL_CLASS.  The assembly measurement type.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_OIL.OIL_DATA_TYPE_ID
IS
  'FK to REF_DATA_TYPE_ASSMBL_CLASS.  The assembly measurement type.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_OIL.TIME_DATA_TYPE_DB_ID
IS
  'FK to MIIM_DATA_TYPE.  The operating time parameter.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_OIL.TIME_DATA_TYPE_ID
IS
  'FK to MIIM_DATA_TYPE.  The operating time parameter.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_OIL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_OIL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_OIL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_OIL.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_OIL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_MDATATYPE_EQPASSMBLBOMOIL ON EQP_ASSMBL_BOM_OIL
    (
      OIL_DATA_TYPE_DB_ID ASC ,
      OIL_DATA_TYPE_ID ASC
    ) ;
  CREATE INDEX IX_MDATATYPE_EQPASSMBLBOMTIME ON EQP_ASSMBL_BOM_OIL
    (
      TIME_DATA_TYPE_DB_ID ASC ,
      TIME_DATA_TYPE_ID ASC
    ) ;
ALTER TABLE EQP_ASSMBL_BOM_OIL ADD CONSTRAINT PK_EQP_ASSMBL_BOM_OIL PRIMARY KEY ( ASSMBL_DB_ID, ASSMBL_CD ) ;


CREATE TABLE EQP_ASSMBL_BOM_SENS
  (
    ASSMBL_DB_ID   NUMBER (10) NOT NULL ,
    ASSMBL_CD      VARCHAR2 (8) NOT NULL ,
    ASSMBL_BOM_ID  NUMBER (10) NOT NULL ,
    SENSITIVITY_CD VARCHAR2 (8) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE EQP_ASSMBL_BOM_SENS ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE EQP_ASSMBL_BOM_SENS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE EQP_ASSMBL_BOM_SENS ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE EQP_ASSMBL_BOM_SENS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON TABLE EQP_ASSMBL_BOM_SENS
IS
  'This is a relationship table between EQP_ASSMBL_BOM and REF_SENSITIVITY.
A record in this table means that a sensitivity is enabled for a system.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_SENS.ASSMBL_DB_ID
IS
  'FK to  EQP_ASSMBL_BOM''s PK table.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_SENS.ASSMBL_CD
IS
  'FK to  EQP_ASSMBL_BOM''s PK table.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_SENS.ASSMBL_BOM_ID
IS
  'FK to  EQP_ASSMBL_BOM''s PK table.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_SENS.SENSITIVITY_CD
IS
  'FK to REF_SENSITIVITY PK table' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_SENS.CTRL_DB_ID
IS
  'The identifier of the database that owns the record' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_SENS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_SENS.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_SENS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_SENS.REVISION_NO
IS
  'A number incremented each time the record is modified' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_SENS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_SENS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_SENS.REVISION_USER
IS
  'The user that last modified the record' ;
ALTER TABLE EQP_ASSMBL_BOM_SENS ADD CONSTRAINT PK_EQP_ASSMBL_BOM_SENS PRIMARY KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID, SENSITIVITY_CD ) ;


CREATE TABLE EQP_ASSMBL_BOM_THRESHOLD
  (
    FAULT_THRESHOLD_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FAULT_THRESHOLD_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD             VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ASSMBL_BOM_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    THRESHOLD_MODE_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    THRESHOLD_MODE_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    THRESHOLD_SDESC       VARCHAR2 (80) NOT NULL DEFERRABLE ,
    THRESHOLD_QT          NUMBER (10) NOT NULL DEFERRABLE ,
    THRESHOLD_DAYS_QT     NUMBER (10) NOT NULL DEFERRABLE ,
    APPL_EFF_LDESC        VARCHAR2 (4000) ,
    EFFECTIVE_DT          DATE ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_ASSMBL_BOM_THRESHOLD ADD CHECK ( FAULT_THRESHOLD_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_THRESHOLD ADD CHECK ( FAULT_THRESHOLD_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_THRESHOLD ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_THRESHOLD ADD CHECK ( ASSMBL_BOM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_THRESHOLD ADD CHECK ( THRESHOLD_MODE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_THRESHOLD ADD CHECK ( THRESHOLD_QT BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_THRESHOLD ADD CHECK ( THRESHOLD_DAYS_QT BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_THRESHOLD ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_BOM_THRESHOLD ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN EQP_ASSMBL_BOM_THRESHOLD.FAULT_THRESHOLD_DB_ID
IS
  'PK. Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_THRESHOLD.FAULT_THRESHOLD_ID
IS
  'PK.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_THRESHOLD.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL_BOM. This is the config slot that the fault threshold applies to.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_THRESHOLD.ASSMBL_CD
IS
  'FK to EQP_ASSMBL_BOM. This is the config slot that the fault threshold applies to.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_THRESHOLD.ASSMBL_BOM_ID
IS
  'FK to EQP_ASSMBL_BOM. This is the config slot that the fault threshold applies to.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_THRESHOLD.THRESHOLD_SDESC
IS
  'This is the fault threshold name.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_THRESHOLD.THRESHOLD_QT
IS
  'This is the fault threshold (# of faults).
' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_THRESHOLD.THRESHOLD_DAYS_QT
IS
  'This is the fault threshold time period (# of days).' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_THRESHOLD.APPL_EFF_LDESC
IS
  'This is the fault threshold applicabiltity range.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_THRESHOLD.EFFECTIVE_DT
IS
  'This is the fault threshold effective from date.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_THRESHOLD.RSTAT_CD
IS
  'FK to MIM_RSTAT. A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_THRESHOLD.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_THRESHOLD.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_THRESHOLD.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_ASSMBL_BOM_THRESHOLD.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPASSMBLBOM_EQPASSMBTH ON EQP_ASSMBL_BOM_THRESHOLD
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC ,
      ASSMBL_BOM_ID ASC
    ) ;
ALTER TABLE EQP_ASSMBL_BOM_THRESHOLD ADD CONSTRAINT PK_EQP_ASSMBL_BOM_THRESHOLD PRIMARY KEY ( FAULT_THRESHOLD_DB_ID, FAULT_THRESHOLD_ID ) ;


CREATE TABLE EQP_ASSMBL_DATA_TYPE
  (
    DATA_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_ASSMBL_DATA_TYPE ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_DATA_TYPE ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_DATA_TYPE ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_DATA_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_DATA_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_ASSMBL_DATA_TYPE
IS
  'This table stores the mappings of assembly specific measurements.' ;
  COMMENT ON COLUMN EQP_ASSMBL_DATA_TYPE.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN EQP_ASSMBL_DATA_TYPE.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN EQP_ASSMBL_DATA_TYPE.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL' ;
  COMMENT ON COLUMN EQP_ASSMBL_DATA_TYPE.ASSMBL_CD
IS
  'FK to EQP_ASSMBL' ;
  COMMENT ON COLUMN EQP_ASSMBL_DATA_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_ASSMBL_DATA_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_ASSMBL_DATA_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_ASSMBL_DATA_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_ASSMBL_DATA_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_FK_EQP_EQPASSMBLDATATYPE ON EQP_ASSMBL_DATA_TYPE
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
  CREATE INDEX IX_FK_DATA_EQPASSMBLDATATYPE ON EQP_ASSMBL_DATA_TYPE
    (
      DATA_TYPE_DB_ID ASC ,
      DATA_TYPE_ID ASC
    ) ;
ALTER TABLE EQP_ASSMBL_DATA_TYPE ADD CONSTRAINT PK_EQP_ASSMBL_DATA_TYPE PRIMARY KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID, ASSMBL_DB_ID, ASSMBL_CD ) ;


CREATE TABLE EQP_ASSMBL_POS
  (
    ASSMBL_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ASSMBL_BOM_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_POS_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    NH_ASSMBL_DB_ID  NUMBER (10) ,
    NH_ASSMBL_CD     VARCHAR2 (8) ,
    NH_ASSMBL_BOM_ID NUMBER (10) ,
    NH_ASSMBL_POS_ID NUMBER (10) ,
    EQP_POS_CD       VARCHAR2 (200) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_ASSMBL_POS ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_POS ADD CHECK ( ASSMBL_BOM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_POS ADD CHECK ( ASSMBL_POS_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_POS ADD CHECK ( NH_ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_POS ADD CHECK ( NH_ASSMBL_BOM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_POS ADD CHECK ( NH_ASSMBL_POS_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_POS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_POS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_ASSMBL_POS
IS
  'Log Card Position: When there are multiple log cards of the same type on an assembly, these individual log cards can be identified by position. For example, a Boeing 747 that has four engines will have a single log card definition for the engines, and an explicit log card position for each engine.
Like their parent log cards, log card positions are also organized hierarchically. The hierarchy of the log card positions must be the same as the hierarchy of the log cards. However if the next highest log card has more than one position, then you must indicate which next highest position this log card position belongs under.' ;
  COMMENT ON COLUMN EQP_ASSMBL_POS.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL_BOM. The log card for which this position is defined.' ;
  COMMENT ON COLUMN EQP_ASSMBL_POS.ASSMBL_CD
IS
  'FK to EQP_ASSMBL_BOM. The log card for which this position is defined.' ;
  COMMENT ON COLUMN EQP_ASSMBL_POS.ASSMBL_BOM_ID
IS
  'FK to EQP_ASSMBL_BOM. The log card for which this position is defined.' ;
  COMMENT ON COLUMN EQP_ASSMBL_POS.ASSMBL_POS_ID
IS
  'Unique identifier assigned in context of the log card (assmbl_pos_id = 1..n).' ;
  COMMENT ON COLUMN EQP_ASSMBL_POS.ALT_ID
IS
  'UUID for the position entity' ;
  COMMENT ON COLUMN EQP_ASSMBL_POS.NH_ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL_POS. The parent logcard position, in the logcard hierarchy. Although EQP_ASSMBL_BOM has a NH link to indicate hierarchy, we also include these columns because of the complications involved with logcards that have multiple positions.' ;
  COMMENT ON COLUMN EQP_ASSMBL_POS.NH_ASSMBL_CD
IS
  'FK to EQP_ASSMBL_POS. The parent logcard position, in the logcard hierarchy. Although EQP_ASSMBL_BOM has a NH link to indicate hierarchy, we also include these columns because of the complications involved with logcards that have multiple positions.' ;
  COMMENT ON COLUMN EQP_ASSMBL_POS.NH_ASSMBL_BOM_ID
IS
  'FK to EQP_ASSMBL_POS. The parent logcard position, in the logcard hierarchy. Although EQP_ASSMBL_BOM has a NH link to indicate hierarchy, we also include these columns because of the complications involved with logcards that have multiple positions.' ;
  COMMENT ON COLUMN EQP_ASSMBL_POS.NH_ASSMBL_POS_ID
IS
  'FK to EQP_ASSMBL_POS. The parent logcard position, in the logcard hierarchy. Although EQP_ASSMBL_BOM has a NH link to indicate hierarchy, we also include these columns because of the complications involved with logcards that have multiple positions.' ;
  COMMENT ON COLUMN EQP_ASSMBL_POS.EQP_POS_CD
IS
  'The standard, defining code for this position (eg. "left", "right", etc.)' ;
  COMMENT ON COLUMN EQP_ASSMBL_POS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_ASSMBL_POS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_ASSMBL_POS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_ASSMBL_POS.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_ASSMBL_POS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPASSMBLBOM_EQPASSMBLPOS ON EQP_ASSMBL_POS
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC ,
      ASSMBL_BOM_ID ASC
    ) ;
  CREATE INDEX IX_EQPASSMBLPOS_EQPASSMBLPOS ON EQP_ASSMBL_POS
    (
      NH_ASSMBL_DB_ID ASC ,
      NH_ASSMBL_CD ASC ,
      NH_ASSMBL_BOM_ID ASC ,
      NH_ASSMBL_POS_ID ASC
    ) ;
ALTER TABLE EQP_ASSMBL_POS ADD CONSTRAINT PK_EQP_ASSMBL_POS PRIMARY KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID, ASSMBL_POS_ID ) ;
ALTER TABLE EQP_ASSMBL_POS ADD CONSTRAINT IX_EQPASSMBLPOSALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE EQP_ASSMBL_SENS
  (
    ASSMBL_DB_ID   NUMBER (10) NOT NULL ,
    ASSMBL_CD      VARCHAR2 (8) NOT NULL ,
    SENSITIVITY_CD VARCHAR2 (8) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE EQP_ASSMBL_SENS ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE EQP_ASSMBL_SENS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE EQP_ASSMBL_SENS ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE EQP_ASSMBL_SENS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON TABLE EQP_ASSMBL_SENS
IS
  'This is a relationship table between EQP_ASSMBL and REF_SENSITIVITY.
A record in this table means that a sensitivity is assigned to an assembly.' ;
  COMMENT ON COLUMN EQP_ASSMBL_SENS.ASSMBL_DB_ID
IS
  'FK to  EQP_ASSMBL PK''s table.' ;
  COMMENT ON COLUMN EQP_ASSMBL_SENS.ASSMBL_CD
IS
  'FK to  EQP_ASSMBL''s PK table.' ;
  COMMENT ON COLUMN EQP_ASSMBL_SENS.SENSITIVITY_CD
IS
  'FK to REF_SENSITIVITY''s PK table' ;
  COMMENT ON COLUMN EQP_ASSMBL_SENS.CTRL_DB_ID
IS
  'The identifier of the database that owns the record' ;
  COMMENT ON COLUMN EQP_ASSMBL_SENS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record' ;
  COMMENT ON COLUMN EQP_ASSMBL_SENS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted' ;
  COMMENT ON COLUMN EQP_ASSMBL_SENS.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record' ;
  COMMENT ON COLUMN EQP_ASSMBL_SENS.REVISION_NO
IS
  'A number incremented each time the record is modified' ;
  COMMENT ON COLUMN EQP_ASSMBL_SENS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated' ;
  COMMENT ON COLUMN EQP_ASSMBL_SENS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated' ;
  COMMENT ON COLUMN EQP_ASSMBL_SENS.REVISION_USER
IS
  'The user that last modified the record' ;
ALTER TABLE EQP_ASSMBL_SENS ADD CONSTRAINT PK_EQP_ASSMBL_SENS PRIMARY KEY ( ASSMBL_DB_ID, ASSMBL_CD, SENSITIVITY_CD ) ;


CREATE TABLE EQP_ASSMBL_SUBTYPE
  (
    ASSMBL_SUBTYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_SUBTYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD            VARCHAR2 (8) NOT NULL DEFERRABLE ,
    SUBTYPE_CD           VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC           VARCHAR2 (80) NOT NULL DEFERRABLE ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_ASSMBL_SUBTYPE ADD CHECK ( ASSMBL_SUBTYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_SUBTYPE ADD CHECK ( ASSMBL_SUBTYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_SUBTYPE ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_SUBTYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_ASSMBL_SUBTYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN EQP_ASSMBL_SUBTYPE.ASSMBL_SUBTYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN EQP_ASSMBL_SUBTYPE.ASSMBL_SUBTYPE_ID
IS
  'Unique identifier serving as part of the primary key, and assigned from the sequence EQP_ASSMBL_SUBTYPE_ID_SEQ.' ;
  COMMENT ON COLUMN EQP_ASSMBL_SUBTYPE.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL.  Denotes the assembly to which this sub-type belongs.' ;
  COMMENT ON COLUMN EQP_ASSMBL_SUBTYPE.ASSMBL_CD
IS
  'FK to EQP_ASSMBL.  Denotes the assembly to which this sub-type belongs.' ;
  COMMENT ON COLUMN EQP_ASSMBL_SUBTYPE.SUBTYPE_CD
IS
  'Code that users use to uniquely identify a subtype.' ;
  COMMENT ON COLUMN EQP_ASSMBL_SUBTYPE.DESC_SDESC
IS
  'Name of the assembly sub-type.' ;
  COMMENT ON COLUMN EQP_ASSMBL_SUBTYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_ASSMBL_SUBTYPE.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.' ;
  COMMENT ON COLUMN EQP_ASSMBL_SUBTYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_ASSMBL_SUBTYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_ASSMBL_SUBTYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_ASSMBL_SUBTYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
CREATE UNIQUE INDEX IX_EQPASSMBLSUBTYPE_CD ON EQP_ASSMBL_SUBTYPE
  (
    ASSMBL_DB_ID ASC , ASSMBL_CD ASC , ASSMBL_SUBTYPE_DB_ID ASC , ASSMBL_SUBTYPE_ID ASC
  )
  ;
  CREATE INDEX IX_EQPASSMBL_ASSSUBTYPE ON EQP_ASSMBL_SUBTYPE
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
ALTER TABLE EQP_ASSMBL_SUBTYPE ADD CONSTRAINT PK_EQP_ASSMBL_SUBTYPE PRIMARY KEY ( ASSMBL_SUBTYPE_DB_ID, ASSMBL_SUBTYPE_ID ) ;
ALTER TABLE EQP_ASSMBL_SUBTYPE ADD CONSTRAINT IX_EQPASSMBLSUBTYPEALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE EQP_BOM_PART
  (
    BOM_PART_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_PART_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD        VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ASSMBL_BOM_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    INV_CLASS_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    INV_CLASS_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PURCH_TYPE_DB_ID NUMBER (10) ,
    PURCH_TYPE_CD    VARCHAR2 (8) ,
    IETM_DB_ID       NUMBER (10) ,
    IETM_ID          NUMBER (10) ,
    IETM_TOPIC_ID    NUMBER (10) ,
    BOM_PART_CD      VARCHAR2 (50) NOT NULL DEFERRABLE ,
    BOM_PART_NAME    VARCHAR2 (100) NOT NULL DEFERRABLE ,
    PART_QT FLOAT NOT NULL DEFERRABLE ,
    LRU_BOOL           NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    APPL_EFF_LDESC     VARCHAR2 (4000) ,
    REQ_SPEC_PART_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CONDITIONS_LDESC   VARCHAR2 (4000) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_BOM_PART ADD CHECK ( BOM_PART_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_BOM_PART ADD CHECK ( BOM_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_BOM_PART ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_BOM_PART ADD CHECK ( ASSMBL_BOM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_BOM_PART ADD CHECK ( INV_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_BOM_PART ADD CHECK ( PURCH_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_BOM_PART ADD CHECK ( IETM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_BOM_PART ADD CHECK ( IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_BOM_PART ADD CHECK ( IETM_TOPIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_BOM_PART ADD CHECK ( LRU_BOOL           IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_BOM_PART ADD CHECK ( REQ_SPEC_PART_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_BOM_PART ADD CHECK ( RSTAT_CD           IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_BOM_PART ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_BOM_PART
IS
  'Log Card Bill of Material: Every log card has a bill of material defined against it. This bill of material is typically derived from the design illustrations, and the parts catalog for a particular assembly. This bill of materiel allows users to determine which parts belong to a log card, and conversely, which log card a particular part number should be filed in.

A bill of material entry is not a part number; instead there can be several interchangeable part numbers which satisfy the requirement for a particular bill of material entry. This list of alternate parts is defined in the part baseline table.' ;
  COMMENT ON COLUMN EQP_BOM_PART.BOM_PART_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN EQP_BOM_PART.BOM_PART_ID
IS
  'Unique identifier serving as part of the primary key, and assigned from the sequence BOM_PART_ID_SEQ' ;
  COMMENT ON COLUMN EQP_BOM_PART.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL_BOM. Identifies the log card that this part is recorded against. Any events that occur to this bill of material entry should be filed under the given log card.' ;
  COMMENT ON COLUMN EQP_BOM_PART.ASSMBL_CD
IS
  'FK to EQP_ASSMBL_BOM. Identifies the log card that this part is recorded against. Any events that occur to this bill of material entry should be filed under the given log card.' ;
  COMMENT ON COLUMN EQP_BOM_PART.ASSMBL_BOM_ID
IS
  'FK to EQP_ASSMBL_BOM. Identifies the log card that this part is recorded against. Any events that occur to this bill of material entry should be filed under the given log card.' ;
  COMMENT ON COLUMN EQP_BOM_PART.INV_CLASS_DB_ID
IS
  'FK to REF_INV_CLASS.' ;
  COMMENT ON COLUMN EQP_BOM_PART.INV_CLASS_CD
IS
  'FK to REF_INV_CLASS.' ;
  COMMENT ON COLUMN EQP_BOM_PART.PURCH_TYPE_DB_ID
IS
  'FK to REF_PURCH_TYPE.  Used to categorize bom parts for purchasing.' ;
  COMMENT ON COLUMN EQP_BOM_PART.PURCH_TYPE_CD
IS
  'FK to REF_PURCH_TYPE.  Used to categorize bom parts for purchasing.' ;
  COMMENT ON COLUMN EQP_BOM_PART.IETM_DB_ID
IS
  'FK to IETM_TOPIC. Identifies a link used to launch an IETM program in context of a particular topic.' ;
  COMMENT ON COLUMN EQP_BOM_PART.IETM_ID
IS
  'FK to IETM_TOPIC. Identifies a link used to launch an IETM program in context of a particular topic.' ;
  COMMENT ON COLUMN EQP_BOM_PART.IETM_TOPIC_ID
IS
  'FK to IETM_TOPIC. Identifies a link used to launch an IETM program in context of a particular topic.' ;
  COMMENT ON COLUMN EQP_BOM_PART.BOM_PART_CD
IS
  'A code used to indentify, or classify this bom part. It is not necessarily unique.' ;
  COMMENT ON COLUMN EQP_BOM_PART.BOM_PART_NAME
IS
  'A label used to identify this bill of material entry. This is often the standard part number shown in the illustrated parts catalog.' ;
  COMMENT ON COLUMN EQP_BOM_PART.PART_QT
IS
  'A quantity indicating the number of parts that are recorded against this bill of material entry.' ;
  COMMENT ON COLUMN EQP_BOM_PART.LRU_BOOL
IS
  'Identifies Line replaceable units.  Items that can be removed directly from the aircraft.' ;
  COMMENT ON COLUMN EQP_BOM_PART.APPL_EFF_LDESC
IS
  'This is the applicability expression for a particular bom part slot. This is used when a particular bom part slot exists on some aircraft, but not on others. ' ;
  COMMENT ON COLUMN EQP_BOM_PART.REQ_SPEC_PART_BOOL
IS
  'this is the a boolean that denotes if a part group applicability needs to have a requests for a SPECIFIC part.' ;
  COMMENT ON COLUMN EQP_BOM_PART.CONDITIONS_LDESC
IS
  'This is the description of the conditional applicability for this part group' ;
  COMMENT ON COLUMN EQP_BOM_PART.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_BOM_PART.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_BOM_PART.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_BOM_PART.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_BOM_PART.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
CREATE UNIQUE INDEX IX_EQPBOMPRT_ASSCDBOMNPRT ON EQP_BOM_PART
  (
    ASSMBL_CD ASC , BOM_PART_CD ASC
  )
  ;
  CREATE INDEX IX_EQPASSMBLBOM_EQPBOMPART ON EQP_BOM_PART
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC ,
      ASSMBL_BOM_ID ASC
    ) ;
  CREATE INDEX IX_IETMTOPIC_EQPBOMPART ON EQP_BOM_PART
    (
      IETM_DB_ID ASC ,
      IETM_ID ASC ,
      IETM_TOPIC_ID ASC
    ) ;
ALTER TABLE EQP_BOM_PART ADD CONSTRAINT PK_EQP_BOM_PART PRIMARY KEY ( BOM_PART_DB_ID, BOM_PART_ID ) ;
ALTER TABLE EQP_BOM_PART ADD CONSTRAINT IX_EQPBOMPARTALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE EQP_BOM_PART_LOG
  (
    BOM_PART_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_PART_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_PART_LOG_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    LOG_ACTION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LOG_ACTION_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    HR_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    LOG_DT           DATE NOT NULL DEFERRABLE ,
    LOG_REASON_DB_ID NUMBER (10) ,
    LOG_REASON_CD    VARCHAR2 (16) ,
    USER_NOTE        VARCHAR2 (4000) ,
    SYSTEM_NOTE      VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_BOM_PART_LOG ADD CHECK ( BOM_PART_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_BOM_PART_LOG ADD CHECK ( BOM_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_BOM_PART_LOG ADD CHECK ( BOM_PART_LOG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_BOM_PART_LOG ADD CHECK ( LOG_ACTION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_BOM_PART_LOG ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_BOM_PART_LOG ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_BOM_PART_LOG ADD CHECK ( LOG_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_BOM_PART_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_BOM_PART_LOG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_BOM_PART_LOG
IS
  'Assembly: An assembly is the abstract definition of a group of components that is collected by function, e.g. an engine or APU. An assembly forms the blueprint for creating Inventory assemblies in the system.
An assembly is comprised of a list of BOM Items, which define the maintenance significant information such as: maintenance plan, reliability information, etc.' ;
  COMMENT ON COLUMN EQP_BOM_PART_LOG.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_BOM_PART_LOG.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_BOM_PART_LOG.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_BOM_PART_LOG.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPBOMPART_EQPBOMPARTLOG ON EQP_BOM_PART_LOG
    (
      BOM_PART_DB_ID ASC ,
      BOM_PART_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_EQPBOMPARTLOC ON EQP_BOM_PART_LOG
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
ALTER TABLE EQP_BOM_PART_LOG ADD CONSTRAINT PK_EQP_BOM_PART_LOG PRIMARY KEY ( BOM_PART_DB_ID, BOM_PART_ID, BOM_PART_LOG_ID ) ;


CREATE TABLE EQP_BOM_PART_SENS
  (
    BOM_PART_DB_ID NUMBER (10) NOT NULL ,
    BOM_PART_ID    NUMBER (10) NOT NULL ,
    SENSITIVITY_CD VARCHAR2 (8) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE EQP_BOM_PART_SENS ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE EQP_BOM_PART_SENS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE EQP_BOM_PART_SENS ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE EQP_BOM_PART_SENS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON TABLE EQP_BOM_PART_SENS
IS
  'This is a relationship table between EQP_BOM_PART and REF_SENSITIVITY.
A record in this table means that a sensitivity is enabled for a part group.' ;
  COMMENT ON COLUMN EQP_BOM_PART_SENS.BOM_PART_DB_ID
IS
  'FK to EQP_BOM_PART PK''s table' ;
  COMMENT ON COLUMN EQP_BOM_PART_SENS.BOM_PART_ID
IS
  'FK to EQP_BOM_PART PK''s table' ;
  COMMENT ON COLUMN EQP_BOM_PART_SENS.SENSITIVITY_CD
IS
  'FK to REF_SENSITIVITY''s PK table' ;
  COMMENT ON COLUMN EQP_BOM_PART_SENS.CTRL_DB_ID
IS
  'The identifier of the database that owns the record' ;
  COMMENT ON COLUMN EQP_BOM_PART_SENS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record' ;
  COMMENT ON COLUMN EQP_BOM_PART_SENS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted' ;
  COMMENT ON COLUMN EQP_BOM_PART_SENS.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record' ;
  COMMENT ON COLUMN EQP_BOM_PART_SENS.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN EQP_BOM_PART_SENS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated' ;
  COMMENT ON COLUMN EQP_BOM_PART_SENS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated' ;
  COMMENT ON COLUMN EQP_BOM_PART_SENS.REVISION_USER
IS
  'The user that last modified the record' ;
ALTER TABLE EQP_BOM_PART_SENS ADD CONSTRAINT PK_EQP_BOM_PART_SENS PRIMARY KEY ( BOM_PART_DB_ID, BOM_PART_ID, SENSITIVITY_CD ) ;


CREATE TABLE EQP_DATA_SOURCE
  (
    ASSMBL_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD         VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DATA_SOURCE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_SOURCE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DATA_SOURCE_NAME  VARCHAR2 (100) ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_DATA_SOURCE ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_DATA_SOURCE ADD CHECK ( DATA_SOURCE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_DATA_SOURCE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_DATA_SOURCE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_DATA_SOURCE
IS
  'Equipment Data Source.  This class enumerates all of the data sources that can be used to register data for a specific assembly. As assemblies can be constructed together to form definitions for any asset, the overall usage definition is dynamically constructed from the union of all of the Equipment Data Sources.' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE.ASSMBL_DB_ID
IS
  'FK to EQP ASSMBL.' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE.ASSMBL_CD
IS
  'FK to EQP ASSMBL.' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE.DATA_SOURCE_DB_ID
IS
  'FK to REF_DATA_SOURCE' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE.DATA_SOURCE_CD
IS
  'FK to REF_DATA_SOURCE' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE.DATA_SOURCE_NAME
IS
  'A name used to label the data source.' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPASSMBL_EQPDATASOURCE ON EQP_DATA_SOURCE
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
ALTER TABLE EQP_DATA_SOURCE ADD CONSTRAINT PK_EQP_DATA_SOURCE PRIMARY KEY ( ASSMBL_DB_ID, ASSMBL_CD, DATA_SOURCE_DB_ID, DATA_SOURCE_CD ) ;


CREATE TABLE EQP_DATA_SOURCE_SPEC
  (
    ASSMBL_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD         VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DATA_SOURCE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_SOURCE_CD    VARCHAR2 (8) CONSTRAINT NN_EQPDATASRC_SRCCD NOT NULL DEFERRABLE ,
    DATA_TYPE_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_ORD          NUMBER (4) ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) CONSTRAINT NN_EQPDTASRCSPC_REVISIONDBID NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_DATA_SOURCE_SPEC ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_DATA_SOURCE_SPEC ADD CHECK ( DATA_SOURCE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_DATA_SOURCE_SPEC ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_DATA_SOURCE_SPEC ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_DATA_SOURCE_SPEC ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_DATA_SOURCE_SPEC ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_DATA_SOURCE_SPEC
IS
  'Equipment Data Source Specification.  This class stores the specification used to retrieve and record data for a data source. It enumerates the data types that are supplied by a given data source for a given assembly.' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE_SPEC.ASSMBL_DB_ID
IS
  'FK to EQP_DATA_SOURCE' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE_SPEC.ASSMBL_CD
IS
  'FK to EQP_DATA_SOURCE' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE_SPEC.DATA_SOURCE_DB_ID
IS
  'FK to EQP_DATA_SOURCE' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE_SPEC.DATA_SOURCE_CD
IS
  'FK to EQP_DATA_SOURCE' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE_SPEC.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE_SPEC.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE_SPEC.DATA_ORD
IS
  'A numeric identifier that establishes order from 1 to N for all parameters within the data source.' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE_SPEC.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE_SPEC.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE_SPEC.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE_SPEC.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_DATA_SOURCE_SPEC.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_MDATATYPE_EQPDATASOURCESPEC ON EQP_DATA_SOURCE_SPEC
    (
      DATA_TYPE_DB_ID ASC ,
      DATA_TYPE_ID ASC
    ) ;
  CREATE INDEX IX_EQPDATASOURCE_EQPDATASOURCE ON EQP_DATA_SOURCE_SPEC
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC ,
      DATA_SOURCE_DB_ID ASC ,
      DATA_SOURCE_CD ASC
    ) ;
ALTER TABLE EQP_DATA_SOURCE_SPEC ADD CONSTRAINT PK_EQP_DATA_SOURCE_SPEC PRIMARY KEY ( ASSMBL_DB_ID, ASSMBL_CD, DATA_SOURCE_DB_ID, DATA_SOURCE_CD, DATA_TYPE_ID, DATA_TYPE_DB_ID ) ;


CREATE TABLE EQP_FINDING
  (
    FINDING_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    FINDING_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD          VARCHAR2 (8) NOT NULL DEFERRABLE ,
    FINDING_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FINDING_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    FINDING_CD         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    FINDING_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    FINDING_LDESC      VARCHAR2 (4000) ,
    ALT_ID RAW (16) NOT NULL ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_FINDING ADD CHECK ( FINDING_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_FINDING ADD CHECK ( FINDING_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_FINDING ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_FINDING ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_FINDING ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
COMMENT ON TABLE EQP_FINDING
IS
  'Primary Key for the finding type.' ;
  COMMENT ON COLUMN EQP_FINDING.FINDING_DB_ID
IS
  'Primary Key for the finding type.' ;
  COMMENT ON COLUMN EQP_FINDING.FINDING_ID
IS
  'Primary Key for the finding type.' ;
  COMMENT ON COLUMN EQP_FINDING.ASSMBL_DB_ID
IS
  'The assembly that the finding is defined against.' ;
  COMMENT ON COLUMN EQP_FINDING.ASSMBL_CD
IS
  'The assembly that the finding is defined against.' ;
  COMMENT ON COLUMN EQP_FINDING.FINDING_TYPE_DB_ID
IS
  'This is the type of finding.' ;
  COMMENT ON COLUMN EQP_FINDING.FINDING_TYPE_CD
IS
  'This is the type of finding.' ;
  COMMENT ON COLUMN EQP_FINDING.FINDING_CD
IS
  'Code Identifying the finding' ;
  COMMENT ON COLUMN EQP_FINDING.FINDING_SDESC
IS
  'Name for the finding.' ;
  COMMENT ON COLUMN EQP_FINDING.FINDING_LDESC
IS
  'This is a description for the finding.' ;
  COMMENT ON COLUMN EQP_FINDING.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_FINDING.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_FINDING.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_FINDING.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPASSMBL_EQPFINDING ON EQP_FINDING
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
ALTER TABLE EQP_FINDING ADD CONSTRAINT PK_EQP_FINDING PRIMARY KEY ( FINDING_DB_ID, FINDING_ID ) ;
ALTER TABLE EQP_FINDING ADD CONSTRAINT IX_EQPFINDINGALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE EQP_FLIGHT_SPEC
  (
    ASSMBL_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_ORD        NUMBER (4) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_FLIGHT_SPEC ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_FLIGHT_SPEC ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_FLIGHT_SPEC ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_FLIGHT_SPEC ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_FLIGHT_SPEC ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_FLIGHT_SPEC
IS
  'Used to record the list of flight measurements that will be recorded for this assembly.' ;
  COMMENT ON COLUMN EQP_FLIGHT_SPEC.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL.' ;
  COMMENT ON COLUMN EQP_FLIGHT_SPEC.ASSMBL_CD
IS
  'FK to EQP_ASSMBL.' ;
  COMMENT ON COLUMN EQP_FLIGHT_SPEC.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN EQP_FLIGHT_SPEC.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN EQP_FLIGHT_SPEC.DATA_ORD
IS
  'The order in which the list of flight measurements should be listed. ' ;
  COMMENT ON COLUMN EQP_FLIGHT_SPEC.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record. ' ;
  COMMENT ON COLUMN EQP_FLIGHT_SPEC.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN EQP_FLIGHT_SPEC.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN EQP_FLIGHT_SPEC.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN EQP_FLIGHT_SPEC.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_MDATATYPE_EQPFLIGHTSPEC ON EQP_FLIGHT_SPEC
    (
      DATA_TYPE_DB_ID ASC ,
      DATA_TYPE_ID ASC
    ) ;
  CREATE INDEX IX_EQPASSMBL_EQPFLIGHTSPEC ON EQP_FLIGHT_SPEC
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
ALTER TABLE EQP_FLIGHT_SPEC ADD CONSTRAINT "pk_EQP_FLIGHT_SPEC" PRIMARY KEY ( ASSMBL_DB_ID, ASSMBL_CD, DATA_TYPE_DB_ID, DATA_TYPE_ID ) ;


CREATE TABLE EQP_INSTALL_KIT_MAP
  (
    EQP_INSTALL_KIT_MAP_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    EQP_INSTALL_KIT_MAP_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_PART_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_PART_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    KIT_PART_NO_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    KIT_PART_NO_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD                  NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT               DATE NOT NULL DEFERRABLE ,
    REVISION_DT               DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER             VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_INSTALL_KIT_MAP ADD CHECK ( EQP_INSTALL_KIT_MAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_INSTALL_KIT_MAP ADD CHECK ( EQP_INSTALL_KIT_MAP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_INSTALL_KIT_MAP ADD CHECK ( BOM_PART_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_INSTALL_KIT_MAP ADD CHECK ( BOM_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_INSTALL_KIT_MAP ADD CHECK ( KIT_PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_INSTALL_KIT_MAP ADD CHECK ( KIT_PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_INSTALL_KIT_MAP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_INSTALL_KIT_MAP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_INSTALL_KIT_MAP
IS
  'Install Kit:  A kit that contains all the items needed to perform the installation of a part in Maintenix.
This table maps an install kit to a part group that it is associated to.' ;
  CREATE INDEX IX_EQPBOMPART_EQPINSTKITMAP ON EQP_INSTALL_KIT_MAP
    (
      BOM_PART_DB_ID ASC ,
      BOM_PART_ID ASC
    ) ;
  CREATE INDEX IX_EQPPARTNO_EQPINSTKITMAP ON EQP_INSTALL_KIT_MAP
    (
      KIT_PART_NO_DB_ID ASC ,
      KIT_PART_NO_ID ASC
    ) ;
ALTER TABLE EQP_INSTALL_KIT_MAP ADD CONSTRAINT PK_EQP_INSTALL_KIT_MAP PRIMARY KEY ( EQP_INSTALL_KIT_MAP_DB_ID, EQP_INSTALL_KIT_MAP_ID ) ;


CREATE TABLE EQP_INSTALL_KIT_PART_MAP
  (
    EQP_INSTALL_KIT_MAP_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    EQP_INSTALL_KIT_MAP_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD                  NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT               DATE NOT NULL DEFERRABLE ,
    REVISION_DT               DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER             VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_INSTALL_KIT_PART_MAP ADD CHECK ( EQP_INSTALL_KIT_MAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_INSTALL_KIT_PART_MAP ADD CHECK ( EQP_INSTALL_KIT_MAP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_INSTALL_KIT_PART_MAP ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_INSTALL_KIT_PART_MAP ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_INSTALL_KIT_PART_MAP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_INSTALL_KIT_PART_MAP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_INSTALL_KIT_PART_MAP
IS
  'Install Kit:  A kit that contains all the items needed to perform the installation of a part in Maintenix.
This table maps the specific parts in a part group that an install kit applies to.  The install kit is defined against the part group, and further refined down to specific parts using this table.' ;
  CREATE INDEX IX_EQPPARTNO_EQPINSTKITPARTMAP ON EQP_INSTALL_KIT_PART_MAP
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_EQPINSTKITMAP_EQPINSTKITPAR ON EQP_INSTALL_KIT_PART_MAP
    (
      EQP_INSTALL_KIT_MAP_DB_ID ASC ,
      EQP_INSTALL_KIT_MAP_ID ASC
    ) ;
ALTER TABLE EQP_INSTALL_KIT_PART_MAP ADD CONSTRAINT PK_EQP_INSTALL_KIT_PART_MAP PRIMARY KEY ( EQP_INSTALL_KIT_MAP_DB_ID, EQP_INSTALL_KIT_MAP_ID, PART_NO_DB_ID, PART_NO_ID ) ;


CREATE TABLE EQP_KIT_PART_GROUPS
  (
    EQP_KIT_PART_GROUP_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    EQP_KIT_PART_GROUP_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_PART_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_PART_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    KIT_QT FLOAT NOT NULL DEFERRABLE ,
    VALUE_PCT FLOAT NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_KIT_PART_GROUPS ADD CHECK ( EQP_KIT_PART_GROUP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_KIT_PART_GROUPS ADD CHECK ( EQP_KIT_PART_GROUP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_KIT_PART_GROUPS ADD CHECK ( BOM_PART_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_KIT_PART_GROUPS ADD CHECK ( BOM_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_KIT_PART_GROUPS ADD CHECK ( VALUE_PCT BETWEEN 0 AND 1) DEFERRABLE ;
ALTER TABLE EQP_KIT_PART_GROUPS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_KIT_PART_GROUPS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_KIT_PART_GROUPS
IS
  'Kit: A kit inventory is a container which holds inventory inside of it.
This table contains the part groups that are in a specific kit defintion.  For each part group, there is a specific required quantity and value percentage for the kit.' ;
  CREATE INDEX IX_EQPBOMPART_EQPKITPARTGROUPS ON EQP_KIT_PART_GROUPS
    (
      BOM_PART_DB_ID ASC ,
      BOM_PART_ID ASC
    ) ;
ALTER TABLE EQP_KIT_PART_GROUPS ADD CONSTRAINT PK_EQP_KIT_PART_GROUPS PRIMARY KEY ( EQP_KIT_PART_GROUP_DB_ID, EQP_KIT_PART_GROUP_ID ) ;
ALTER TABLE EQP_KIT_PART_GROUPS ADD CONSTRAINT IX_EQPKITPARTGRPSALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE EQP_KIT_PART_GROUP_MAP
  (
    EQP_KIT_PART_GROUP_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    EQP_KIT_PART_GROUP_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    KIT_PART_NO_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    KIT_PART_NO_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_KIT_PART_GROUP_MAP ADD CHECK ( EQP_KIT_PART_GROUP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_KIT_PART_GROUP_MAP ADD CHECK ( EQP_KIT_PART_GROUP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_KIT_PART_GROUP_MAP ADD CHECK ( KIT_PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_KIT_PART_GROUP_MAP ADD CHECK ( KIT_PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_KIT_PART_GROUP_MAP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_KIT_PART_GROUP_MAP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_KIT_PART_GROUP_MAP
IS
  'Kit: A kit inventory is a container which holds inventory inside of it.
This table maps the Kit part definition to the part groups that can be held inside the kit by definition.' ;
  CREATE INDEX IX_EQPPARTNO_EQPKITPARTGROUPMA ON EQP_KIT_PART_GROUP_MAP
    (
      KIT_PART_NO_DB_ID ASC ,
      KIT_PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_EQPKITPARTGROUPS_KITPARTGRO ON EQP_KIT_PART_GROUP_MAP
    (
      EQP_KIT_PART_GROUP_DB_ID ASC ,
      EQP_KIT_PART_GROUP_ID ASC
    ) ;
ALTER TABLE EQP_KIT_PART_GROUP_MAP ADD CONSTRAINT PK_EQP_KIT_PART_GROUP_MAP PRIMARY KEY ( EQP_KIT_PART_GROUP_DB_ID, EQP_KIT_PART_GROUP_ID, KIT_PART_NO_DB_ID, KIT_PART_NO_ID ) ;


CREATE TABLE EQP_KIT_PART_MAP
  (
    EQP_KIT_PART_GROUP_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    EQP_KIT_PART_GROUP_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_KIT_PART_MAP ADD CHECK ( EQP_KIT_PART_GROUP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_KIT_PART_MAP ADD CHECK ( EQP_KIT_PART_GROUP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_KIT_PART_MAP ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_KIT_PART_MAP ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_KIT_PART_MAP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_KIT_PART_MAP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_KIT_PART_MAP
IS
  'Kit: A kit inventory is a container which holds inventory inside of it.
This table maps the specifc parts in a part group that can be applied to a kit.  While the kit contains a reference to a part group, the kit can be specified to contain only certain parts in the part group.' ;
  CREATE INDEX IX_EQPPARTNO_EQPKITPARTMAP ON EQP_KIT_PART_MAP
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_EQPKITPARTGROUPS_EQPKITPART ON EQP_KIT_PART_MAP
    (
      EQP_KIT_PART_GROUP_DB_ID ASC ,
      EQP_KIT_PART_GROUP_ID ASC
    ) ;
ALTER TABLE EQP_KIT_PART_MAP ADD CONSTRAINT PK_EQP_KIT_PART_MAP PRIMARY KEY ( EQP_KIT_PART_GROUP_DB_ID, EQP_KIT_PART_GROUP_ID, PART_NO_DB_ID, PART_NO_ID ) ;


CREATE TABLE EQP_MANUFACT
  (
    MANUFACT_DB_ID NUMBER (10) NOT NULL ,
    MANUFACT_CD    VARCHAR2 (16) NOT NULL ,
    MANUFACT_NAME  VARCHAR2 (40) NOT NULL DEFERRABLE ,
    COUNTRY_DB_ID  NUMBER (10) ,
    COUNTRY_CD     VARCHAR2 (8) ,
    STATE_CD       VARCHAR2 (8) ,
    ADDRESS_PMAIL  VARCHAR2 (80) ,
    CITY_NAME      VARCHAR2 (40) ,
    ZIP_CD         VARCHAR2 (10) ,
    PHONE_PH       VARCHAR2 (20) ,
    FAX_PH         VARCHAR2 (20) ,
    ADDRESS_EMAIL  VARCHAR2 (40) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_MANUFACT ADD CHECK ( MANUFACT_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE EQP_MANUFACT ADD CONSTRAINT CK_EQPMANUFACT_MANUFACTCD CHECK ( MANUFACT_CD = UPPER(TRIM(MANUFACT_CD))) ;
ALTER TABLE EQP_MANUFACT ADD CHECK ( COUNTRY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_MANUFACT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_MANUFACT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_MANUFACT
IS
  'Equipment Manufacturer.  This class enumerates the manufacturers for every part number handled by the system.' ;
  COMMENT ON COLUMN EQP_MANUFACT.MANUFACT_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN EQP_MANUFACT.MANUFACT_CD
IS
  'A user-entered unique code that identifies the manufacturer. Typically the CAGE code.' ;
  COMMENT ON COLUMN EQP_MANUFACT.MANUFACT_NAME
IS
  'A name used to label the manufacturer.' ;
  COMMENT ON COLUMN EQP_MANUFACT.COUNTRY_DB_ID
IS
  'FK to REF_STATE' ;
  COMMENT ON COLUMN EQP_MANUFACT.COUNTRY_CD
IS
  'FK to REF_STATE' ;
  COMMENT ON COLUMN EQP_MANUFACT.STATE_CD
IS
  'FK to REF_STATE' ;
  COMMENT ON COLUMN EQP_MANUFACT.ADDRESS_PMAIL
IS
  'The postal address of the manufacturer.' ;
  COMMENT ON COLUMN EQP_MANUFACT.CITY_NAME
IS
  'The city where the manufacturer is located.' ;
  COMMENT ON COLUMN EQP_MANUFACT.ZIP_CD
IS
  'The manufacturer''s Postal Code or ZIP code.' ;
  COMMENT ON COLUMN EQP_MANUFACT.PHONE_PH
IS
  'The manufacturer''s phone number.' ;
  COMMENT ON COLUMN EQP_MANUFACT.FAX_PH
IS
  'The manufacturer''s FAX number.' ;
  COMMENT ON COLUMN EQP_MANUFACT.ADDRESS_EMAIL
IS
  'The E-mail address for the manufacturer.' ;
  COMMENT ON COLUMN EQP_MANUFACT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN EQP_MANUFACT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_MANUFACT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_MANUFACT.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_MANUFACT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE EQP_MANUFACT ADD CONSTRAINT PK_EQP_MANUFACT PRIMARY KEY ( MANUFACT_DB_ID, MANUFACT_CD ) ;
ALTER TABLE EQP_MANUFACT ADD CONSTRAINT IX_EQPMANUFACTMANUCD_UNQ UNIQUE ( MANUFACT_CD ) ;
ALTER TABLE EQP_MANUFACT ADD CONSTRAINT IX_EQPMANUFACTALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE EQP_OIL_THRESHOLD_ASSMBL
  (
    ASSMBL_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    THRESHOLD_ID NUMBER (10) NOT NULL DEFERRABLE ,
    THRESHOLD_QT FLOAT ,
    OIL_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    OIL_STATUS_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_OIL_THRESHOLD_ASSMBL ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_ASSMBL ADD CHECK ( THRESHOLD_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_ASSMBL ADD CHECK ( OIL_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_ASSMBL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_ASSMBL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_OIL_THRESHOLD_ASSMBL
IS
  'Table contains the assembly default oil consumption status threshold values.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_ASSMBL.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL_BOM_OIL.  The assembly for which the oil consumption status threshold values are defined.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_ASSMBL.ASSMBL_CD
IS
  'FK to EQP_ASSMBL_BOM_OIL.  The assembly for which the oil consumption status threshold values are defined.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_ASSMBL.THRESHOLD_ID
IS
  'Unique identifier assigned from Sequence EQP_OIL_THRESHOLD_ID_SEQ' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_ASSMBL.THRESHOLD_QT
IS
  'Threshold value.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_ASSMBL.OIL_STATUS_DB_ID
IS
  'FK to REF_OIL_STATUS.  The oil consumption status code.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_ASSMBL.OIL_STATUS_CD
IS
  'FK to REF_OIL_STATUS.  The oil consumption status code.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_ASSMBL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_ASSMBL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_ASSMBL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_ASSMBL.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_ASSMBL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPASSBOMOIL_EQPOILTHASSM ON EQP_OIL_THRESHOLD_ASSMBL
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
ALTER TABLE EQP_OIL_THRESHOLD_ASSMBL ADD CONSTRAINT PK_EQP_OIL_THRESHOLD_ASSMBL PRIMARY KEY ( ASSMBL_DB_ID, ASSMBL_CD, THRESHOLD_ID ) ;


CREATE TABLE EQP_OIL_THRESHOLD_CARRIER
  (
    ASSMBL_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    THRESHOLD_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    CARRIER_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    CARRIER_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    THRESHOLD_QT FLOAT ,
    OIL_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    OIL_STATUS_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_OIL_THRESHOLD_CARRIER ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_CARRIER ADD CHECK ( THRESHOLD_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_CARRIER ADD CHECK ( CARRIER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_CARRIER ADD CHECK ( CARRIER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_CARRIER ADD CHECK ( OIL_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_CARRIER ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_CARRIER ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_OIL_THRESHOLD_CARRIER
IS
  'Table contains the operator (carrier) specific oil consumption status threshold values.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_CARRIER.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL_BOM_OIL.  The assembly for which the oil consumption status threshold values are defined.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_CARRIER.ASSMBL_CD
IS
  'FK to EQP_ASSMBL_BOM_OIL.  The assembly for which the oil consumption status threshold values are defined.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_CARRIER.THRESHOLD_ID
IS
  'Unique identifier assigned from Sequence EQP_OIL_THRESHOLD_ID_SEQ' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_CARRIER.CARRIER_DB_ID
IS
  'FK to ORG_CARRIER. The specific carrier which the threshold values apply.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_CARRIER.CARRIER_ID
IS
  'FK to ORG_CARRIER. The specific carrier which the threshold values apply.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_CARRIER.THRESHOLD_QT
IS
  'Threshold value.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_CARRIER.OIL_STATUS_DB_ID
IS
  'FK to REF_OIL_STATUS.  The oil consumption status code.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_CARRIER.OIL_STATUS_CD
IS
  'FK to REF_OIL_STATUS.  The oil consumption status code.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_CARRIER.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_CARRIER.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_CARRIER.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_CARRIER.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_CARRIER.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGCARR_EQPOILTHRESHCARR ON EQP_OIL_THRESHOLD_CARRIER
    (
      CARRIER_DB_ID ASC ,
      CARRIER_ID ASC
    ) ;
  CREATE INDEX IX_EQPASSBOMOIL_EQPOILTHCARR ON EQP_OIL_THRESHOLD_CARRIER
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
ALTER TABLE EQP_OIL_THRESHOLD_CARRIER ADD CONSTRAINT PK_EQP_OIL_THRESHOLD_CARRIER PRIMARY KEY ( ASSMBL_DB_ID, ASSMBL_CD, THRESHOLD_ID ) ;


CREATE TABLE EQP_OIL_THRESHOLD_INV
  (
    ASSMBL_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    THRESHOLD_ID NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    THRESHOLD_QT FLOAT ,
    OIL_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    OIL_STATUS_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_OIL_THRESHOLD_INV ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_INV ADD CHECK ( THRESHOLD_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_INV ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_INV ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_INV ADD CHECK ( OIL_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_INV ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_INV ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_OIL_THRESHOLD_INV
IS
  'Table contains the serial number specific oil consumption status threshold values.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_INV.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL_BOM_OIL.  The assembly for which the oil consumption status threshold values are defined.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_INV.ASSMBL_CD
IS
  'FK to EQP_ASSMBL_BOM_OIL.  The assembly for which the oil consumption status threshold values are defined.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_INV.THRESHOLD_ID
IS
  'Unique identifier assigned from Sequence EQP_OIL_THRESHOLD_PART_ID_SEQ' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_INV.INV_NO_DB_ID
IS
  'FK to INV_INV. The specific inventory which the threshold values apply.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_INV.INV_NO_ID
IS
  'FK to INV_INV. The specific inventory which the threshold values apply.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_INV.THRESHOLD_QT
IS
  'Threshold value.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_INV.OIL_STATUS_DB_ID
IS
  'FK to REF_OIL_STATUS.  The oil consumption status code.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_INV.OIL_STATUS_CD
IS
  'FK to REF_OIL_STATUS.  The oil consumption status code.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_INV.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_INV.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_INV.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_INV.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_INV.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVINV_EQPOILTHRESHINV ON EQP_OIL_THRESHOLD_INV
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_EQPASSBOMOIL_EQPOILTHINV ON EQP_OIL_THRESHOLD_INV
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
ALTER TABLE EQP_OIL_THRESHOLD_INV ADD CONSTRAINT PK_EQP_OIL_THRESHOLD_INV PRIMARY KEY ( ASSMBL_DB_ID, ASSMBL_CD, THRESHOLD_ID ) ;


CREATE TABLE EQP_OIL_THRESHOLD_PART
  (
    ASSMBL_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    THRESHOLD_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    THRESHOLD_QT FLOAT ,
    OIL_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    OIL_STATUS_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_OIL_THRESHOLD_PART ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_PART ADD CHECK ( THRESHOLD_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_PART ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_PART ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_PART ADD CHECK ( OIL_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_PART ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_OIL_THRESHOLD_PART ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_OIL_THRESHOLD_PART
IS
  'Table contains the part number specific oil consumption status threshold values.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_PART.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL_BOM_OIL.  The assembly for which the oil consumption status threshold values are defined.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_PART.ASSMBL_CD
IS
  'FK to EQP_ASSMBL_BOM_OIL.  The assembly for which the oil consumption status threshold values are defined.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_PART.THRESHOLD_ID
IS
  'Unique identifier assigned from Sequence EQP_OIL_THRESHOLD_ID_SEQ' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_PART.PART_NO_DB_ID
IS
  'FK to EQP_PART_NO. The specific part number which the threshold values apply.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_PART.PART_NO_ID
IS
  'FK to EQP_PART_NO. The specific part number which the threshold values apply.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_PART.THRESHOLD_QT
IS
  'Threshold value.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_PART.OIL_STATUS_DB_ID
IS
  'FK to REF_OIL_STATUS.  The oil consumption status code.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_PART.OIL_STATUS_CD
IS
  'FK to REF_OIL_STATUS.  The oil consumption status code.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_PART.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_PART.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_PART.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_PART.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_OIL_THRESHOLD_PART.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPPRTNO_EQPOILTHRESHPART ON EQP_OIL_THRESHOLD_PART
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_EQPASSBOMOIL_EQPOILTHPART ON EQP_OIL_THRESHOLD_PART
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
ALTER TABLE EQP_OIL_THRESHOLD_PART ADD CONSTRAINT PK_EQP_OIL_THRESHOLD_PART PRIMARY KEY ( ASSMBL_DB_ID, ASSMBL_CD, THRESHOLD_ID ) ;


CREATE TABLE EQP_PART_ADVSRY
  (
    PART_NO_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ADVSRY_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ADVSRY_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    ACTIVE_BOOL     NUMBER (1) DEFAULT 0 ,
    CLEAR_NOTE      VARCHAR2 (4000) ,
    CLEAR_DT        DATE ,
    CLEAR_HR_DB_ID  NUMBER (10) ,
    CLEAR_HR_ID     NUMBER (10) ,
    SERIAL_NO_RANGE VARCHAR2 (1000) ,
    LOT_NO_RANGE    VARCHAR2 (1000) ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_PART_ADVSRY ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ADVSRY ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ADVSRY ADD CHECK ( ADVSRY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ADVSRY ADD CHECK ( ADVSRY_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ADVSRY ADD CHECK ( ACTIVE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_ADVSRY ADD CHECK ( CLEAR_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ADVSRY ADD CHECK ( CLEAR_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ADVSRY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_PART_ADVSRY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_PART_ADVSRY
IS
  'This table will associate the advisory with a part number.  When the relationship is flagged as active, the part number is flagged with the advisory.  To clear the flag, the ACTIVE_BOOL is set to zero.  The advisory remains associated with the part number for historical record keeping.' ;
  COMMENT ON COLUMN EQP_PART_ADVSRY.PART_NO_DB_ID
IS
  'PFK to eqp_part_no. The part being associated to the advisory.' ;
  COMMENT ON COLUMN EQP_PART_ADVSRY.PART_NO_ID
IS
  'PFK to eqp_part_no. The part being associated to the advisory.' ;
  COMMENT ON COLUMN EQP_PART_ADVSRY.ADVSRY_DB_ID
IS
  'PFK to eqp_advsry. The advisory being associated to the part.' ;
  COMMENT ON COLUMN EQP_PART_ADVSRY.ADVSRY_ID
IS
  'PFK to eqp_advsry. The advisory being associated to the part.' ;
  COMMENT ON COLUMN EQP_PART_ADVSRY.ACTIVE_BOOL
IS
  'Boolean flag to indicate if this advisory is currently active.  When the flag is set to true, the part number is under investigation according to the advisory.' ;
  COMMENT ON COLUMN EQP_PART_ADVSRY.CLEAR_NOTE
IS
  'This note field contains any notes the user entered when clearing the advisory from the part number.' ;
  COMMENT ON COLUMN EQP_PART_ADVSRY.CLEAR_DT
IS
  'Timestamp of advisory clear.' ;
  COMMENT ON COLUMN EQP_PART_ADVSRY.CLEAR_HR_DB_ID
IS
  'FK to org_hr.  The user who cleared the advisory from this part number.' ;
  COMMENT ON COLUMN EQP_PART_ADVSRY.CLEAR_HR_ID
IS
  'FK to org_hr.  The user who cleared the advisory from this part number.' ;
  COMMENT ON COLUMN EQP_PART_ADVSRY.SERIAL_NO_RANGE
IS
  'This field stores the advisory''s serial number range.' ;
  COMMENT ON COLUMN EQP_PART_ADVSRY.LOT_NO_RANGE
IS
  'This field stores the advisory''s lot number range.' ;
  COMMENT ON COLUMN EQP_PART_ADVSRY.RSTAT_CD
IS
  'FK to MIM_RSTAT' ;
  COMMENT ON COLUMN EQP_PART_ADVSRY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_PART_ADVSRY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_PART_ADVSRY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_PART_ADVSRY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPPARTNO_EQPPARTADVSRY ON EQP_PART_ADVSRY
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_EQPPARTADVSRY ON EQP_PART_ADVSRY
    (
      CLEAR_HR_DB_ID ASC ,
      CLEAR_HR_ID ASC
    ) ;
  CREATE INDEX IX_EQPADVSRY_EQPPARTADVSRY ON EQP_PART_ADVSRY
    (
      ADVSRY_DB_ID ASC ,
      ADVSRY_ID ASC
    ) ;
ALTER TABLE EQP_PART_ADVSRY ADD CONSTRAINT PK_EQP_PART_ADVSRY PRIMARY KEY ( PART_NO_DB_ID, PART_NO_ID, ADVSRY_DB_ID, ADVSRY_ID ) ;


CREATE TABLE EQP_PART_ALT_UNIT
  (
    PART_NO_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    QTY_UNIT_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    QTY_UNIT_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    QTY_CONVERT_QT FLOAT NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_PART_ALT_UNIT ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ALT_UNIT ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ALT_UNIT ADD CHECK ( QTY_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ALT_UNIT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_PART_ALT_UNIT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_PART_ALT_UNIT
IS
  'Storage for information on Alternate Units of Measure.  Users are able to set up alternate units of measure when purchasing parts.  Alternate units of measure can only be referenced on a purchase order' ;
  COMMENT ON COLUMN EQP_PART_ALT_UNIT.PART_NO_DB_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN EQP_PART_ALT_UNIT.PART_NO_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN EQP_PART_ALT_UNIT.QTY_UNIT_DB_ID
IS
  'FK to REF_QTY_UNIT.' ;
  COMMENT ON COLUMN EQP_PART_ALT_UNIT.QTY_UNIT_CD
IS
  'FK to REF_QTY_UNIT.' ;
  COMMENT ON COLUMN EQP_PART_ALT_UNIT.QTY_CONVERT_QT
IS
  'Used to convert the alternate unit of measure into your standard unit of measure.' ;
  COMMENT ON COLUMN EQP_PART_ALT_UNIT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN EQP_PART_ALT_UNIT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN EQP_PART_ALT_UNIT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN EQP_PART_ALT_UNIT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN EQP_PART_ALT_UNIT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EQP_PART_NO_EQPPARTALTUNIT ON EQP_PART_ALT_UNIT
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
ALTER TABLE EQP_PART_ALT_UNIT ADD CONSTRAINT "pk_EQP_PART_ALT_UNIT" PRIMARY KEY ( PART_NO_DB_ID, PART_NO_ID, QTY_UNIT_DB_ID, QTY_UNIT_CD ) ;


CREATE TABLE EQP_PART_ATTACHMENT
  (
    PART_NO_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ATTACH_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ATTACH_TYPE_DB_ID NUMBER (10) ,
    ATTACH_TYPE_CD    VARCHAR2 (8) ,
    ATTACH_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    ATTACH_BLOB BLOB NOT NULL DEFERRABLE ,
    ATTACH_LDESC        VARCHAR2 (4000) ,
    ATTACH_NOTE         VARCHAR2 (4000) ,
    ATTACH_FILENAME     VARCHAR2 (255) NOT NULL DEFERRABLE ,
    ATTACH_CONTENT_TYPE VARCHAR2 (80) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) CONSTRAINT NN_EQPRTATTREVDBID NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_PART_ATTACHMENT ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ATTACHMENT ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ATTACHMENT ADD CHECK ( PART_NO_ATTACH_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ATTACHMENT ADD CHECK ( ATTACH_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ATTACHMENT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_PART_ATTACHMENT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_PART_ATTACHMENT
IS
  ' Attachments can be used to add file attachments to a part no for things such as:
1. Warranty contracts
2. Purchasing arrangements
3. Diagrams' ;
  COMMENT ON COLUMN EQP_PART_ATTACHMENT.PART_NO_DB_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN EQP_PART_ATTACHMENT.PART_NO_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN EQP_PART_ATTACHMENT.PART_NO_ATTACH_ID
IS
  'Internal Identifier number to comprise the PK.' ;
  COMMENT ON COLUMN EQP_PART_ATTACHMENT.ATTACH_TYPE_DB_ID
IS
  'FK to REF_ATTACH_TYPE.' ;
  COMMENT ON COLUMN EQP_PART_ATTACHMENT.ATTACH_TYPE_CD
IS
  'FK to REF_ATTACH_TYPE.' ;
  COMMENT ON COLUMN EQP_PART_ATTACHMENT.ATTACH_SDESC
IS
  'Attach short description.' ;
  COMMENT ON COLUMN EQP_PART_ATTACHMENT.ATTACH_BLOB
IS
  'Attach blob.' ;
  COMMENT ON COLUMN EQP_PART_ATTACHMENT.ATTACH_LDESC
IS
  'Attach long description.' ;
  COMMENT ON COLUMN EQP_PART_ATTACHMENT.ATTACH_NOTE
IS
  'Attach notes.' ;
  COMMENT ON COLUMN EQP_PART_ATTACHMENT.ATTACH_FILENAME
IS
  'Attachment filename (without path) to be used when saved to the local filesystem.
' ;
  COMMENT ON COLUMN EQP_PART_ATTACHMENT.ATTACH_CONTENT_TYPE
IS
  'The MIME type, used to help the browser to identify the attachment file type when saving.
' ;
  COMMENT ON COLUMN EQP_PART_ATTACHMENT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_PART_ATTACHMENT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN EQP_PART_ATTACHMENT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN EQP_PART_ATTACHMENT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN EQP_PART_ATTACHMENT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EQP_PART_NO_EQPPRTATTACH ON EQP_PART_ATTACHMENT
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
ALTER TABLE EQP_PART_ATTACHMENT ADD CONSTRAINT "pk_EQP_PART_ATTACHMENT" PRIMARY KEY ( PART_NO_DB_ID, PART_NO_ID, PART_NO_ATTACH_ID ) ;


CREATE TABLE EQP_PART_BASELINE
  (
    BOM_PART_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_PART_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    STANDARD_BOOL    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    INTERCHG_ORD     NUMBER (4) DEFAULT 1 NOT NULL DEFERRABLE ,
    PART_BASELINE_CD VARCHAR2 (80) ,
    APPL_EFF_LDESC   VARCHAR2 (4000) ,
    APPROVED_BOOL    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CONDITIONAL_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_PART_BASELINE ADD CHECK ( BOM_PART_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_BASELINE ADD CHECK ( BOM_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_BASELINE ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_BASELINE ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_BASELINE ADD CHECK ( STANDARD_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_BASELINE ADD CHECK ( INTERCHG_ORD > 0) DEFERRABLE ;
ALTER TABLE EQP_PART_BASELINE ADD CHECK ( APPROVED_BOOL    IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_BASELINE ADD CHECK ( CONDITIONAL_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_BASELINE ADD CHECK ( RSTAT_CD         IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_PART_BASELINE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_PART_BASELINE
IS
  'Part Baseline: This table defines the list of alternate part numbers that can be  used in a particular log card''s bill of material entry. Any part numbers listed in this table are assumed to be compatible, unless specifically mentioned in the part incompatibility table.' ;
  COMMENT ON COLUMN EQP_PART_BASELINE.BOM_PART_DB_ID
IS
  'FK to EQP_BOM_PART. This identifies the bill of material item which the given part number is an alternate for. It is part of the primary key.' ;
  COMMENT ON COLUMN EQP_PART_BASELINE.BOM_PART_ID
IS
  'FK to EQP_BOM_PART. This identifies the bill of material item which the given part number is an alternate for. It is part of the primary key.' ;
  COMMENT ON COLUMN EQP_PART_BASELINE.PART_NO_DB_ID
IS
  'FK to EQP_PART_NO. This identifies one of the alternate part numbers for the given bill of material entry. This is part of the primary key.' ;
  COMMENT ON COLUMN EQP_PART_BASELINE.PART_NO_ID
IS
  'FK to EQP_PART_NO. This identifies one of the alternate part numbers for the given bill of material entry. This is part of the primary key.' ;
  COMMENT ON COLUMN EQP_PART_BASELINE.STANDARD_BOOL
IS
  'Indicates that this is the standard part number to use in the given bill of material entry. When initializing assembly inventory, the standard part numbers will be used by default. Only one part number per bom part can be standard_bool=1.' ;
  COMMENT ON COLUMN EQP_PART_BASELINE.INTERCHG_ORD
IS
  'Allows for both "1-way" and "2-way" interchangeability.  By default this column will default to 1. ' ;
  COMMENT ON COLUMN EQP_PART_BASELINE.PART_BASELINE_CD
IS
  'This is a simple code that can be used to identify Bom Part to Part Number relationships. ' ;
  COMMENT ON COLUMN EQP_PART_BASELINE.APPL_EFF_LDESC
IS
  'This is the applicability expression for a particular part number within a bom part slot. This will define the assembly-inventories on which this particular part number can be installed. ' ;
  COMMENT ON COLUMN EQP_PART_BASELINE.APPROVED_BOOL
IS
  'Indicates that the part is approved for the part group, default 0.' ;
  COMMENT ON COLUMN EQP_PART_BASELINE.CONDITIONAL_BOOL
IS
  'this describes if an alternative part has a conditional applicability to it defined by it''s relationship to a part group''s conditional_ldesc.' ;
  COMMENT ON COLUMN EQP_PART_BASELINE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_PART_BASELINE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_PART_BASELINE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_PART_BASELINE.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_PART_BASELINE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPBOMPART_EQPPARTBASELINE ON EQP_PART_BASELINE
    (
      BOM_PART_DB_ID ASC ,
      BOM_PART_ID ASC
    ) ;
  CREATE INDEX IX_EQPPARTNO_EQPPARTBASELINE ON EQP_PART_BASELINE
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
ALTER TABLE EQP_PART_BASELINE ADD CONSTRAINT PK_EQP_PART_BASELINE PRIMARY KEY ( BOM_PART_DB_ID, BOM_PART_ID, PART_NO_DB_ID, PART_NO_ID ) ;


CREATE TABLE EQP_PART_COMPAT_DEF
  (
    BOM_PART_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_PART_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    NH_BOM_PART_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    NH_BOM_PART_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    NH_PART_NO_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    NH_PART_NO_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_PART_COMPAT_DEF ADD CHECK ( BOM_PART_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_COMPAT_DEF ADD CHECK ( BOM_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_COMPAT_DEF ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_COMPAT_DEF ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_COMPAT_DEF ADD CHECK ( NH_BOM_PART_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_COMPAT_DEF ADD CHECK ( NH_BOM_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_COMPAT_DEF ADD CHECK ( NH_PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_COMPAT_DEF ADD CHECK ( NH_PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_COMPAT_DEF ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_PART_COMPAT_DEF ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_PART_COMPAT_DEF
IS
  'Part Compatibility Definition: The parent-child part incompatibilities are explicitly enumerated in this table. The system supports any dimensions of part compatibility and is not restricted to parts on the immediate assembly.
By default (ie. if a part compatibility row is not defined), the system assumes that all parts defined in the part baseline are compatible with each other.' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_DEF.BOM_PART_DB_ID
IS
  'FK to EQP_PART_BASELINE. Indicates the part that is trying to ''fit into'' the assembly.' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_DEF.BOM_PART_ID
IS
  'FK to EQP_PART_BASELINE. Indicates the part that is trying to ''fit into'' the assembly.' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_DEF.PART_NO_DB_ID
IS
  'FK to EQP_PART_BASELINE. Indicates the part that is trying to ''fit into'' the assembly.' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_DEF.PART_NO_ID
IS
  'FK to EQP_PART_BASELINE. Indicates the part that is trying to ''fit into'' the assembly.' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_DEF.NH_BOM_PART_DB_ID
IS
  'FK to EQP_PART_BASELINE. Indicates the parts that are on the assembly that restrict the installation of the ''fits into'' part.' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_DEF.NH_BOM_PART_ID
IS
  'FK to EQP_PART_BASELINE. Indicates the parts that are on the assembly that restrict the installation of the ''fits into'' part.' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_DEF.NH_PART_NO_DB_ID
IS
  'FK to EQP_PART_BASELINE. Indicates the parts that are on the assembly that restrict the installation of the ''fits into'' part.' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_DEF.NH_PART_NO_ID
IS
  'FK to EQP_PART_BASELINE. Indicates the parts that are on the assembly that restrict the installation of the ''fits into'' part.' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_DEF.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_DEF.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_DEF.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_DEF.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_DEF.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQP_PART_COMPAT_DEF ON EQP_PART_COMPAT_DEF
    (
      NH_PART_NO_DB_ID ASC ,
      NH_PART_NO_ID ASC ,
      NH_BOM_PART_DB_ID ASC ,
      NH_BOM_PART_ID ASC
    ) ;
  CREATE INDEX IX_EQPRTBSLINE_EQPPARTCOMPATDE ON EQP_PART_COMPAT_DEF
    (
      BOM_PART_DB_ID ASC ,
      BOM_PART_ID ASC ,
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_EQPPRTBASELINE_EQPPARTCOMPA ON EQP_PART_COMPAT_DEF
    (
      NH_BOM_PART_DB_ID ASC ,
      NH_BOM_PART_ID ASC ,
      NH_PART_NO_DB_ID ASC ,
      NH_PART_NO_ID ASC
    ) ;
ALTER TABLE EQP_PART_COMPAT_DEF ADD CONSTRAINT PK_EQP_PART_COMPAT_DEF PRIMARY KEY ( BOM_PART_DB_ID, BOM_PART_ID, PART_NO_DB_ID, PART_NO_ID, NH_BOM_PART_DB_ID, NH_BOM_PART_ID, NH_PART_NO_DB_ID, NH_PART_NO_ID ) ;


CREATE TABLE EQP_PART_COMPAT_TASK
  (
    BOM_PART_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_PART_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    PRE_COMPLETE_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_PART_COMPAT_TASK ADD CHECK ( BOM_PART_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_COMPAT_TASK ADD CHECK ( BOM_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_COMPAT_TASK ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_COMPAT_TASK ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_COMPAT_TASK ADD CHECK ( TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_COMPAT_TASK ADD CHECK ( TASK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_COMPAT_TASK ADD CHECK ( PRE_COMPLETE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_COMPAT_TASK ADD CHECK ( RSTAT_CD          IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_PART_COMPAT_TASK ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_PART_COMPAT_TASK
IS
  'This table is used to define part-level compatibility based on which tasks exist on an assembly. Just like the EQP_PART_COMPAT_DEF table, it used to define a list of incompatibilities between part numbers and task definitions.' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_TASK.BOM_PART_DB_ID
IS
  'FK EQP_PART_BASELINE.' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_TASK.BOM_PART_ID
IS
  'FK EQP_PART_BASELINE.' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_TASK.PART_NO_DB_ID
IS
  'FK EQP_PART_BASELINE.' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_TASK.PART_NO_ID
IS
  'FK EQP_PART_BASELINE.' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_TASK.TASK_DEFN_DB_ID
IS
  'FK TASK_DEFN' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_TASK.TASK_DEFN_ID
IS
  'FK TASK_DEFN' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_TASK.PRE_COMPLETE_BOOL
IS
  'This column indicates whether the part is incompatible before or after the task has been completed. If this column is 1 (true), then the part is incompatible when the task is still in non-historic status. If this column is 0 (false), then the part will only become incompatible once the task is complete.' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_TASK.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_TASK.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_TASK.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_TASK.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN EQP_PART_COMPAT_TASK.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EQPRTBASLIN_EQPRTCMPATTSK ON EQP_PART_COMPAT_TASK
    (
      BOM_PART_DB_ID ASC ,
      BOM_PART_ID ASC ,
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_TASKDEFN_EQPRTCMPATTSK ON EQP_PART_COMPAT_TASK
    (
      TASK_DEFN_DB_ID ASC ,
      TASK_DEFN_ID ASC
    ) ;
ALTER TABLE EQP_PART_COMPAT_TASK ADD CONSTRAINT "pk_EQP_PART_COMPAT_TASK" PRIMARY KEY ( BOM_PART_DB_ID, BOM_PART_ID, PART_NO_DB_ID, PART_NO_ID, TASK_DEFN_DB_ID, TASK_DEFN_ID ) ;


CREATE TABLE EQP_PART_IETM
  (
    PART_NO_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_IETM_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_DB_ID         NUMBER (10) ,
    IETM_ID            NUMBER (10) ,
    IETM_TOPIC_ID      NUMBER (10) ,
    IETM_TYPE_DB_ID    NUMBER (10) ,
    IETM_TYPE_CD       VARCHAR2 (8) ,
    IETM_SDESC         VARCHAR2 (80) ,
    CMDLINE_PARM_LDESC VARCHAR2 (4000) ,
    IETM_LDESC         VARCHAR2 (4000) ,
    IETM_NOTE          VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_PART_IETM ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_IETM ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_IETM ADD CHECK ( PART_NO_IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_IETM ADD CHECK ( IETM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_IETM ADD CHECK ( IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_IETM ADD CHECK ( IETM_TOPIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_IETM ADD CHECK ( IETM_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_IETM ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_PART_IETM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_PART_IETM
IS
  'Every part number can have a list of IETM links and attachments. IETM links can be used to add URL hyperlinks to a part number for such things as:
1. Hazardous Materials web site
2. Illustrated Parts Catalogue web site
3. Manufacturer?s Information web site' ;
  COMMENT ON COLUMN EQP_PART_IETM.PART_NO_DB_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN EQP_PART_IETM.PART_NO_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN EQP_PART_IETM.PART_NO_IETM_ID
IS
  'PK  field' ;
  COMMENT ON COLUMN EQP_PART_IETM.IETM_DB_ID
IS
  'FK to IETM_TOPIC.' ;
  COMMENT ON COLUMN EQP_PART_IETM.IETM_ID
IS
  'FK to IETM_TOPIC.' ;
  COMMENT ON COLUMN EQP_PART_IETM.IETM_TOPIC_ID
IS
  'FK to IETM_TOPIC.' ;
  COMMENT ON COLUMN EQP_PART_IETM.IETM_TYPE_DB_ID
IS
  'FK to REF_IETM_TYPE.' ;
  COMMENT ON COLUMN EQP_PART_IETM.IETM_TYPE_CD
IS
  'FK to REF_IETM_TYPE.' ;
  COMMENT ON COLUMN EQP_PART_IETM.IETM_SDESC
IS
  'Short description of the ietm link or attachment.' ;
  COMMENT ON COLUMN EQP_PART_IETM.IETM_LDESC
IS
  'Long description of the ietm link or attachment.' ;
  COMMENT ON COLUMN EQP_PART_IETM.IETM_NOTE
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_PART_IETM.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN EQP_PART_IETM.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN EQP_PART_IETM.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN EQP_PART_IETM.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN EQP_PART_IETM.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EQP_PART_NO_EQPPARTIETM ON EQP_PART_IETM
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_IETM_TOPIC_EQPPARTIETM ON EQP_PART_IETM
    (
      IETM_DB_ID ASC ,
      IETM_ID ASC ,
      IETM_TOPIC_ID ASC
    ) ;
ALTER TABLE EQP_PART_IETM ADD CONSTRAINT "pk_EQP_PART_IETM" PRIMARY KEY ( PART_NO_DB_ID, PART_NO_ID, PART_NO_IETM_ID ) ;


CREATE TABLE EQP_PART_NO
  (
    PART_NO_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    INV_CLASS_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    INV_CLASS_CD          VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PART_TYPE_DB_ID       NUMBER (10) ,
    PART_TYPE_CD          VARCHAR2 (8) ,
    PART_STATUS_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    PART_STATUS_CD        VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PART_USE_DB_ID        NUMBER (10) ,
    PART_USE_CD           VARCHAR2 (8) ,
    MANUFACT_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    MANUFACT_CD           VARCHAR2 (16) NOT NULL DEFERRABLE ,
    IETM_DB_ID            NUMBER (10) ,
    IETM_ID               NUMBER (10) ,
    IETM_TOPIC_ID         NUMBER (10) ,
    BITMAP_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG            NUMBER (10) NOT NULL DEFERRABLE ,
    SHIPPING_INSTR_DB_ID  NUMBER (10) ,
    SHIPPING_INSTR_CD     VARCHAR2 (8) ,
    SHIPPING_LDESC        VARCHAR2 (4000) ,
    PACKAGING_INSTR_DB_ID NUMBER (10) ,
    PACKAGING_INSTR_CD    VARCHAR2 (8) ,
    PACKAGING_LDESC       VARCHAR2 (4000) ,
    STORAGE_INSTR_DB_ID   NUMBER (10) ,
    STORAGE_INSTR_CD      VARCHAR2 (8) ,
    STORAGE_LDESC         VARCHAR2 (4000) ,
    QTY_UNIT_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    QTY_UNIT_CD           VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PART_NO_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    PART_NO_OEM           VARCHAR2 (40) NOT NULL DEFERRABLE ,
    MODEL_NAME            VARCHAR2 (40) ,
    REV_NO_NAME           VARCHAR2 (40) ,
    PART_NO_LDESC         VARCHAR2 (4000) ,
    REPAIR_BOOL           NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RECEIPT_INSP_BOOL     NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    MTBUR_QT FLOAT ,
    MTBR_QT FLOAT ,
    MTBF_QT FLOAT ,
    MTTR_QT FLOAT ,
    STOCK_NO_DB_ID NUMBER (10) ,
    STOCK_NO_ID    NUMBER (10) ,
    STOCK_PCT FLOAT ,
    SCRAP_RATE_PCT FLOAT NOT NULL DEFERRABLE ,
    SHELF_LIFE_UNIT_DB_ID NUMBER (10) ,
    SHELF_LIFE_UNIT_CD    VARCHAR2 (8) ,
    SHELF_LIFE_QT FLOAT ,
    HAZMAT_DB_ID          NUMBER (10) ,
    HAZMAT_CD             VARCHAR2 (8) ,
    DG_REF_SDESC          VARCHAR2 (80) ,
    FINANCIAL_CLASS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FINANCIAL_CLASS_CD    VARCHAR2 (20) NOT NULL DEFERRABLE ,
    POWER_ENG_UNIT_DB_ID  NUMBER (10) ,
    POWER_ENG_UNIT_CD     VARCHAR2 (8) ,
    POWER_QT FLOAT ,
    FREQ_ENG_UNIT_DB_ID NUMBER (10) ,
    FREQ_ENG_UNIT_CD    VARCHAR2 (8) ,
    FREQ_QT FLOAT ,
    VOLTAGE_ENG_UNIT_DB_ID NUMBER (10) ,
    VOLTAGE_ENG_UNIT_CD    VARCHAR2 (8) ,
    VOLTAGE_QT FLOAT ,
    CURRENT_ENG_UNIT_DB_ID NUMBER (10) ,
    CURRENT_ENG_UNIT_CD    VARCHAR2 (8) ,
    CURRENT_QT FLOAT ,
    WEIGHT_ENG_UNIT_DB_ID    NUMBER (10) ,
    WEIGHT_ENG_UNIT_CD       VARCHAR2 (8) ,
    DIMENSION_ENG_UNIT_DB_ID NUMBER (10) ,
    DIMENSION_ENG_UNIT_CD    VARCHAR2 (8) ,
    ABC_CLASS_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    ABC_CLASS_CD             VARCHAR2 (8) NOT NULL DEFERRABLE ,
    CALC_ABC_CLASS_BOOL      NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    WEIGHT_QT FLOAT ,
    HEIGHT_QT FLOAT ,
    WIDTH_QT FLOAT ,
    LENGTH_QT FLOAT ,
    DATA_TYPE_DB_ID            NUMBER (10) ,
    DATA_TYPE_ID               NUMBER (10) ,
    CONTROL_RESERVE_BOOL       NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    USE_DEFAULT_BATCH_NO_BOOL  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    DOC_REQ_LDESC              VARCHAR2 (4000) ,
    SOS_BOOL                   NUMBER (1) DEFAULT 0 ,
    ASSET_ACCOUNT_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    ASSET_ACCOUNT_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REPAIR_ORDER_ACCOUNT_DB_ID NUMBER (10) ,
    REPAIR_ORDER_ACCOUNT_ID    NUMBER (10) ,
    AVG_UNIT_PRICE             NUMBER (15,5) NOT NULL DEFERRABLE ,
    TOTAL_QT FLOAT NOT NULL DEFERRABLE ,
    TOTAL_VALUE          NUMBER (15,5) NOT NULL DEFERRABLE ,
    NO_AUTO_RESERVE_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    TARIFF_CD            VARCHAR2 (40) ,
    ECCN_CD              VARCHAR2 (20) ,
    PMA_BOOL             NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ETOPS_BOOL           NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    PROCURABLE_BOOL      NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE ,
    NOTE           VARCHAR2 (2000)
  ) ;
ALTER TABLE EQP_PART_NO ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( INV_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( PART_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( PART_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( PART_USE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( MANUFACT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( IETM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( IETM_TOPIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( SHIPPING_INSTR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( PACKAGING_INSTR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( STORAGE_INSTR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( QTY_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CONSTRAINT CK_EQPPARTNO_PARTNOOEM CHECK ( PART_NO_OEM = UPPER(TRIM(PART_NO_OEM))) ;
ALTER TABLE EQP_PART_NO ADD CHECK ( REPAIR_BOOL       IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( RECEIPT_INSP_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( STOCK_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( STOCK_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( SHELF_LIFE_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( HAZMAT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( FINANCIAL_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( POWER_ENG_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( FREQ_ENG_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( VOLTAGE_ENG_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( CURRENT_ENG_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( WEIGHT_ENG_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( DIMENSION_ENG_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( ABC_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( CALC_ABC_CLASS_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( CONTROL_RESERVE_BOOL      IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( USE_DEFAULT_BATCH_NO_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( SOS_BOOL                  IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( ASSET_ACCOUNT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( ASSET_ACCOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( NO_AUTO_RESERVE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( PMA_BOOL             IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( ETOPS_BOOL           IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( PROCURABLE_BOOL      IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( RSTAT_CD             IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_PART_NO ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_PART_NO
IS
  'Part Number: A part represents the definition, not the physical instantiation, of a particular component design.
A part includes the manufacturer as an attribute. If the same component design is manufactured by two different organizations, then these are considered to be two distinct parts. Parts are categorized using identifiable classifications and sub-classifications.' ;
  COMMENT ON COLUMN EQP_PART_NO.PART_NO_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN EQP_PART_NO.PART_NO_ID
IS
  'Unique identifier serving as part of the primary key, and assigned from the sequence PART_NO_ID_SEQ' ;
  COMMENT ON COLUMN EQP_PART_NO.INV_CLASS_DB_ID
IS
  'FK to REF_INV_CLASS.' ;
  COMMENT ON COLUMN EQP_PART_NO.INV_CLASS_CD
IS
  'FK to REF_INV_CLASS.' ;
  COMMENT ON COLUMN EQP_PART_NO.PART_TYPE_DB_ID
IS
  'FK to REF_PART_TYPE. Identifies the functional class of the part no.' ;
  COMMENT ON COLUMN EQP_PART_NO.PART_TYPE_CD
IS
  'FK to REF_PART_TYPE. Identifies the functional class of the part no.' ;
  COMMENT ON COLUMN EQP_PART_NO.PART_STATUS_DB_ID
IS
  'FK to REF_PART_STATUS.' ;
  COMMENT ON COLUMN EQP_PART_NO.PART_STATUS_CD
IS
  'FK to REF_PART_STATUS.' ;
  COMMENT ON COLUMN EQP_PART_NO.PART_USE_DB_ID
IS
  'FK to REF_PART_USE. Identifies the use for this part no, which can be used to activate certain Maintenix logic features.' ;
  COMMENT ON COLUMN EQP_PART_NO.PART_USE_CD
IS
  'FK to REF_PART_USE. Identifies the use for this part no, which can be used to activate certain Maintenix logic features.' ;
  COMMENT ON COLUMN EQP_PART_NO.MANUFACT_DB_ID
IS
  'FK to EQP_MANUFACT. Identifies the manufacturer of the part.' ;
  COMMENT ON COLUMN EQP_PART_NO.MANUFACT_CD
IS
  'FK to EQP_MANUFACT. Identifies the manufacturer of the part.' ;
  COMMENT ON COLUMN EQP_PART_NO.IETM_DB_ID
IS
  'FK to IETM_TOPIC. Identifies a link used to launch an IETM program in context of a particular topic.' ;
  COMMENT ON COLUMN EQP_PART_NO.IETM_ID
IS
  'FK to IETM_TOPIC. Identifies a link used to launch an IETM program in context of a particular topic.' ;
  COMMENT ON COLUMN EQP_PART_NO.IETM_TOPIC_ID
IS
  'FK to IETM_TOPIC. Identifies a link used to launch an IETM program in context of a particular topic.' ;
  COMMENT ON COLUMN EQP_PART_NO.BITMAP_DB_ID
IS
  'FK to REF_BITMAP. Identifies the bitmap used to represent this part.' ;
  COMMENT ON COLUMN EQP_PART_NO.BITMAP_TAG
IS
  'FK to REF_BITMAP. Identifies the bitmap used to represent this part.' ;
  COMMENT ON COLUMN EQP_PART_NO.SHIPPING_INSTR_DB_ID
IS
  'FK to REF_SHIPPING_INST.' ;
  COMMENT ON COLUMN EQP_PART_NO.SHIPPING_INSTR_CD
IS
  'FK to REF_SHIPPING_INSTR.' ;
  COMMENT ON COLUMN EQP_PART_NO.SHIPPING_LDESC
IS
  'Long description for the shipping instructions.' ;
  COMMENT ON COLUMN EQP_PART_NO.PACKAGING_INSTR_DB_ID
IS
  'FK to REF_PACKAGING_INSTR.' ;
  COMMENT ON COLUMN EQP_PART_NO.PACKAGING_INSTR_CD
IS
  'FK to REF_PACKAGING_INSTR.' ;
  COMMENT ON COLUMN EQP_PART_NO.PACKAGING_LDESC
IS
  'Long description of the packaging instructions.' ;
  COMMENT ON COLUMN EQP_PART_NO.STORAGE_INSTR_DB_ID
IS
  'FK to REF_STORAGE_INSTR.' ;
  COMMENT ON COLUMN EQP_PART_NO.STORAGE_INSTR_CD
IS
  'FK to REF_STORAGE_INSTR.' ;
  COMMENT ON COLUMN EQP_PART_NO.STORAGE_LDESC
IS
  'Long description of the storage instructions.' ;
  COMMENT ON COLUMN EQP_PART_NO.QTY_UNIT_DB_ID
IS
  'FK to REF_QTY_UNIT.' ;
  COMMENT ON COLUMN EQP_PART_NO.QTY_UNIT_CD
IS
  'FK to REF_QTY_UNIT.' ;
  COMMENT ON COLUMN EQP_PART_NO.PART_NO_SDESC
IS
  'A label used to describe the part.' ;
  COMMENT ON COLUMN EQP_PART_NO.PART_NO_OEM
IS
  'The Original Equipment Manufacturer''s part number.' ;
  COMMENT ON COLUMN EQP_PART_NO.MODEL_NAME
IS
  'The model number of the part' ;
  COMMENT ON COLUMN EQP_PART_NO.REV_NO_NAME
IS
  'The model revision number of the part' ;
  COMMENT ON COLUMN EQP_PART_NO.PART_NO_LDESC
IS
  'A long description of the part.' ;
  COMMENT ON COLUMN EQP_PART_NO.REPAIR_BOOL
IS
  'Indicates whether or not the part number is repairable. Repairable inventory can be returned to its original reliability characteristics specified maintenance procedures. Therefore, repairable inventory are turned into supply once they are removed.' ;
  COMMENT ON COLUMN EQP_PART_NO.RECEIPT_INSP_BOOL
IS
  'Indicates whether a part must be inspected when it is received.' ;
  COMMENT ON COLUMN EQP_PART_NO.MTBUR_QT
IS
  'Mean time between unscheduled removals,  The average length of time between unscheduled removals on a given part.' ;
  COMMENT ON COLUMN EQP_PART_NO.MTBR_QT
IS
  'The MTBR (Mean Time Between Removals) and the usage forecast to estimate the monthly demand' ;
  COMMENT ON COLUMN EQP_PART_NO.MTBF_QT
IS
  'Mean time between failures, The average length of time between removals of a given part' ;
  COMMENT ON COLUMN EQP_PART_NO.MTTR_QT
IS
  'Mean time to repair, The average length of time between repairs on a given part' ;
  COMMENT ON COLUMN EQP_PART_NO.STOCK_NO_DB_ID
IS
  'FK to EQP_STOCK_NO.' ;
  COMMENT ON COLUMN EQP_PART_NO.STOCK_NO_ID
IS
  'FK to EQP_STOCK_NO.' ;
  COMMENT ON COLUMN EQP_PART_NO.STOCK_PCT
IS
  'Indicates the ratios in which you want specific part numbers stocked for a given stock number.  ' ;
  COMMENT ON COLUMN EQP_PART_NO.SCRAP_RATE_PCT
IS
  'The scrap rate represents how often a repairable component is scrapped because it is beyond the realm of economic repair. ' ;
  COMMENT ON COLUMN EQP_PART_NO.SHELF_LIFE_UNIT_DB_ID
IS
  'FK to REF_ENG_UNIT for shelf life unit of measure.' ;
  COMMENT ON COLUMN EQP_PART_NO.SHELF_LIFE_UNIT_CD
IS
  'FK to REF_ENG_UNIT for shelf life unit of measure.' ;
  COMMENT ON COLUMN EQP_PART_NO.SHELF_LIFE_QT
IS
  'How long the item will last before it becomes unusable' ;
  COMMENT ON COLUMN EQP_PART_NO.HAZMAT_DB_ID
IS
  'FK to REF_HAZMAT.' ;
  COMMENT ON COLUMN EQP_PART_NO.HAZMAT_CD
IS
  'FK to REF_HAZMAT.' ;
  COMMENT ON COLUMN EQP_PART_NO.DG_REF_SDESC
IS
  'Dangerous Goods short description.' ;
  COMMENT ON COLUMN EQP_PART_NO.FINANCIAL_CLASS_DB_ID
IS
  'FK to REF_FINANCIAL_CLASS.' ;
  COMMENT ON COLUMN EQP_PART_NO.FINANCIAL_CLASS_CD
IS
  'FK to REF_FINANCIAL_CLASS.' ;
  COMMENT ON COLUMN EQP_PART_NO.POWER_ENG_UNIT_DB_ID
IS
  'Indicates unit of measure being used. FK to REF_ENG_UNIT.' ;
  COMMENT ON COLUMN EQP_PART_NO.POWER_ENG_UNIT_CD
IS
  'Indicates unit of measure being used. FK to REF_ENG_UNIT.' ;
  COMMENT ON COLUMN EQP_PART_NO.POWER_QT
IS
  'Power value, reference power_unit_db_id, power_cd.' ;
  COMMENT ON COLUMN EQP_PART_NO.FREQ_ENG_UNIT_DB_ID
IS
  'FK to REF_ENG_UNIT.' ;
  COMMENT ON COLUMN EQP_PART_NO.FREQ_ENG_UNIT_CD
IS
  'FK to REF_ENG_UNIT.' ;
  COMMENT ON COLUMN EQP_PART_NO.FREQ_QT
IS
  'Frequency value, reference freq_unit_db_id, freq_cd.' ;
  COMMENT ON COLUMN EQP_PART_NO.VOLTAGE_ENG_UNIT_DB_ID
IS
  'Indicates unit of measure being used. FK to REF_ENG_UNIT.' ;
  COMMENT ON COLUMN EQP_PART_NO.VOLTAGE_ENG_UNIT_CD
IS
  'Indicates unit of measure being used. FK to REF_ENG_UNIT.' ;
  COMMENT ON COLUMN EQP_PART_NO.VOLTAGE_QT
IS
  'Dimension of voltage, reference dimension_unit_db_id, dimension_cd.' ;
  COMMENT ON COLUMN EQP_PART_NO.CURRENT_ENG_UNIT_DB_ID
IS
  'Indicates unit of measure being used. FK to REF_ENG_UNIT.' ;
  COMMENT ON COLUMN EQP_PART_NO.CURRENT_ENG_UNIT_CD
IS
  'Indicates unit of measure being used. FK to REF_ENG_UNIT.' ;
  COMMENT ON COLUMN EQP_PART_NO.CURRENT_QT
IS
  'Identifies electrical current produced by/rating for/etc the part' ;
  COMMENT ON COLUMN EQP_PART_NO.WEIGHT_ENG_UNIT_DB_ID
IS
  'Indicates unit of measure being used. FK to REF_ENG_UNIT.' ;
  COMMENT ON COLUMN EQP_PART_NO.WEIGHT_ENG_UNIT_CD
IS
  'Indicates unit of measure being used. FK to REF_ENG_UNIT.' ;
  COMMENT ON COLUMN EQP_PART_NO.DIMENSION_ENG_UNIT_DB_ID
IS
  'Indicates unit of measure being used. FK to REF_ENG_UNIT.' ;
  COMMENT ON COLUMN EQP_PART_NO.DIMENSION_ENG_UNIT_CD
IS
  'Indicates unit of measure being used. FK to REF_ENG_UNIT..' ;
  COMMENT ON COLUMN EQP_PART_NO.ABC_CLASS_DB_ID
IS
  'FK to REF_ABC_CLASS.' ;
  COMMENT ON COLUMN EQP_PART_NO.ABC_CLASS_CD
IS
  'FK to REF_ABC_CLASS.' ;
  COMMENT ON COLUMN EQP_PART_NO.CALC_ABC_CLASS_BOOL
IS
  'This column indicates whether the ABC Class will be automatically calculated for the part number. By default, this column is set to 1.' ;
  COMMENT ON COLUMN EQP_PART_NO.WEIGHT_QT
IS
  'Weight value, reference weight_unit_db_id, weight_cd.' ;
  COMMENT ON COLUMN EQP_PART_NO.HEIGHT_QT
IS
  'Dimension of height, reference dimension_unit_db_id, dimension_cd.' ;
  COMMENT ON COLUMN EQP_PART_NO.WIDTH_QT
IS
  'Dimension of width, reference dimension_unit_db_id, dimension_cd.
' ;
  COMMENT ON COLUMN EQP_PART_NO.LENGTH_QT
IS
  'Dimension of length, reference dimension_unit_db_id, dimension_cd.' ;
  COMMENT ON COLUMN EQP_PART_NO.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN EQP_PART_NO.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN EQP_PART_NO.CONTROL_RESERVE_BOOL
IS
  'The Controlled Reservation attribute is used to determine whether an inventory manager must reserve exact serial numbers (or batch numbers). If Controlled Reservation is true, then the storeroom clerk must grab the reserved serial number. If Controlled Reservation is false, then the storeroom clerk can simply grab the first item off the shelf.' ;
  COMMENT ON COLUMN EQP_PART_NO.USE_DEFAULT_BATCH_NO_BOOL
IS
  'This boolean is used to indicate that a single batch number should be used for all instances of the part number. It only makes sense to set this to true for BATCH part numbers.' ;
  COMMENT ON COLUMN EQP_PART_NO.DOC_REQ_LDESC
IS
  'Description of the documents that are required with receipt of a shipped item.' ;
  COMMENT ON COLUMN EQP_PART_NO.SOS_BOOL
IS
  'If the repair group has reason to believe that a part is not broken, they will mark it as serviceable and put it back into the storeroom. This is known as ship or shelf.' ;
  COMMENT ON COLUMN EQP_PART_NO.REPAIR_ORDER_ACCOUNT_DB_ID
IS
  'The default repair account db id of expense account.' ;
  COMMENT ON COLUMN EQP_PART_NO.REPAIR_ORDER_ACCOUNT_ID
IS
  'The default repair account id of expense account.' ;
  COMMENT ON COLUMN EQP_PART_NO.TARIFF_CD
IS
  'Tariff code for the part.' ;
  COMMENT ON COLUMN EQP_PART_NO.ECCN_CD
IS
  'Export Control Classification Number (ECCN)
a specific alpha-numeric code that identifies the level of export control for articles, technology and software that are exported from member states of the Wassenaar Arrangement, including the United States. ' ;
  COMMENT ON COLUMN EQP_PART_NO.PMA_BOOL
IS
  'This is the Parts Manufacturer Approval (PMA) indicator of the part number.' ;
  COMMENT ON COLUMN EQP_PART_NO.ETOPS_BOOL
IS
  'This is the ETOPS identifier for this part number.' ;
  COMMENT ON COLUMN EQP_PART_NO.PROCURABLE_BOOL
IS
  'This boolean indicates whether the part is procurable or not.  Non-procurable parts cannot be purchased, and are created in-house.' ;
  COMMENT ON COLUMN EQP_PART_NO.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.' ;
  COMMENT ON COLUMN EQP_PART_NO.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_PART_NO.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_PART_NO.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_PART_NO.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_PART_NO.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  COMMENT ON COLUMN EQP_PART_NO.NOTE
IS
  'Generic receiving notes for the part number.' ;
  CREATE INDEX IX_EQP_PART_NO_OEM ON EQP_PART_NO
    ( PART_NO_OEM ASC
    ) ;
  CREATE INDEX IX_EQP_PRT_NO_PRTNSDSC ON EQP_PART_NO
    ( PART_NO_SDESC ASC
    ) ;
CREATE UNIQUE INDEX IX_EQPPRNO_MANCDPARTNO ON EQP_PART_NO
  (
    MANUFACT_CD ASC , PART_NO_OEM ASC
  )
  ;
  CREATE INDEX IX_MDATATYPE_EQPPARTNO ON EQP_PART_NO
    (
      DATA_TYPE_DB_ID ASC ,
      DATA_TYPE_ID ASC
    ) ;
  CREATE INDEX IX_EQPMANUFACT_EQPPARTNO ON EQP_PART_NO
    (
      MANUFACT_DB_ID ASC ,
      MANUFACT_CD ASC
    ) ;
  CREATE INDEX IX_IETMTOPIC_EQPPARTNO ON EQP_PART_NO
    (
      IETM_DB_ID ASC ,
      IETM_ID ASC ,
      IETM_TOPIC_ID ASC
    ) ;
  CREATE INDEX IX_EQP_STOCK_NO_EQPPARTNO ON EQP_PART_NO
    (
      STOCK_NO_DB_ID ASC ,
      STOCK_NO_ID ASC
    ) ;
  CREATE INDEX IX_FNCACCNT_EQPPRTNO ON EQP_PART_NO
    (
      ASSET_ACCOUNT_DB_ID ASC ,
      ASSET_ACCOUNT_ID ASC
    ) ;
  CREATE INDEX IX_RO_FNCACCNT_EQPPRTNO ON EQP_PART_NO
    (
      REPAIR_ORDER_ACCOUNT_DB_ID ASC ,
      REPAIR_ORDER_ACCOUNT_ID ASC
    ) ;
ALTER TABLE EQP_PART_NO ADD CONSTRAINT PK_EQP_PART_NO PRIMARY KEY ( PART_NO_DB_ID, PART_NO_ID ) ;
ALTER TABLE EQP_PART_NO ADD CONSTRAINT IX_EQPPARTNOALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE EQP_PART_NO_LOG
  (
    PART_NO_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_LOG_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    LOG_ACTION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LOG_ACTION_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    HR_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    LOG_DT           DATE NOT NULL DEFERRABLE ,
    LOG_REASON_DB_ID NUMBER (10) ,
    LOG_REASON_CD    VARCHAR2 (16) ,
    USER_NOTE        VARCHAR2 (4000) ,
    SYSTEM_NOTE      VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_PART_NO_LOG ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO_LOG ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO_LOG ADD CHECK ( PART_NO_LOG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO_LOG ADD CHECK ( LOG_ACTION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO_LOG ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO_LOG ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO_LOG ADD CHECK ( LOG_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_NO_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_PART_NO_LOG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_PART_NO_LOG
IS
  'Assembly: An assembly is the abstract definition of a group of components that is collected by function, e.g. an engine or APU. An assembly forms the blueprint for creating Inventory assemblies in the system.
An assembly is comprised of a list of BOM Items, which define the maintenance significant information such as: maintenance plan, reliability information, etc.' ;
  COMMENT ON COLUMN EQP_PART_NO_LOG.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_PART_NO_LOG.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_PART_NO_LOG.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_PART_NO_LOG.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPPARTNO_EQPARTNOLOG ON EQP_PART_NO_LOG
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_EQPPARTNOLOG ON EQP_PART_NO_LOG
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
ALTER TABLE EQP_PART_NO_LOG ADD CONSTRAINT PK_EQP_PART_NO_LOG PRIMARY KEY ( PART_NO_DB_ID, PART_NO_ID, PART_NO_LOG_ID ) ;


CREATE TABLE EQP_PART_ROTABLE_ADJUST
  (
    PART_NO_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ADJUST_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    XACTION_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    XACTION_TYPE_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    HR_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    ADJUST_DT          DATE NOT NULL DEFERRABLE ,
    ADJUST_QT FLOAT NOT NULL DEFERRABLE ,
    INV_NO_DB_ID                 NUMBER (10) ,
    INV_NO_ID                    NUMBER (10) ,
    USER_NOTE                    VARCHAR2 (4000) ,
    SYSTEM_NOTE                  VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    PO_DB_ID                     NUMBER (10) ,
    PO_ID                        NUMBER (10) ,
    PO_LINE_ID                   NUMBER (10) ,
    EVENT_DB_ID                  NUMBER (10) ,
    EVENT_ID                     NUMBER (10) ,
    RSTAT_CD                     NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT                  DATE NOT NULL DEFERRABLE ,
    REVISION_DT                  DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER                VARCHAR2 (30) NOT NULL DEFERRABLE ,
    AVG_UNIT_PRICE_BEFORE_ADJUST NUMBER (15,5) ,
    TOTAL_QT_BEFORE_ADJUST FLOAT ,
    TOTAL_VALUE_BEFORE_ADJUST   NUMBER (15,5) ,
    AVG_UNIT_PRICE_AFTER_ADJUST NUMBER (15,5) ,
    TOTAL_QT_AFTER_ADJUST FLOAT ,
    TOTAL_VALUE_AFTER_ADJUST NUMBER (15,5) ,
    AC_EVENT_DB_ID           NUMBER (10) ,
    AC_EVENT_ID              NUMBER (10)
  ) ;
ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CHECK ( PART_NO_ADJUST_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CHECK ( XACTION_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CHECK ( PO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CHECK ( PO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CHECK ( PO_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CHECK ( AC_EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CHECK ( AC_EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.PART_NO_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.PART_NO_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.PART_NO_ADJUST_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.XACTION_TYPE_DB_ID
IS
  'FK REF_XACTION_TYPE.  Description of the adjustment (i.e CRTINV, INSP, SCRAP, ARCHIVE)' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.XACTION_TYPE_CD
IS
  'FK REF_XACTION_TYPE.  Description of the adjustment (i.e CRTINV, INSP, SCRAP, ARCHIVE)' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.HR_DB_ID
IS
  'FK_ORG_HR. The user who triggered the adjustment.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.HR_ID
IS
  'FK_ORG_HR. The user who triggered the adjustment.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.ADJUST_DT
IS
  'The date of the adjustment.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.ADJUST_QT
IS
  'The adjustment quantity.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.INV_NO_DB_ID
IS
  'FK_INV_INV. The rotable inventoy adjusted.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.INV_NO_ID
IS
  'FK_INV_INV. The rotable inventoy adjusted.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.USER_NOTE
IS
  'User note related to the adjustment.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.SYSTEM_NOTE
IS
  'System note related to the adjustment.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.PO_DB_ID
IS
  'FK_PO_LINE. If applicable, the inventory purchase order related to the adjustment.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.PO_ID
IS
  'FK_PO_LINE. If applicable, the inventory purchase order related to the adjustment.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.PO_LINE_ID
IS
  'FK_PO_LINE. If applicable, the inventory purchase order related to the adjustment.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.EVENT_DB_ID
IS
  'FK_EVT_EVENT. If applicable, the event (SCRAP, ARCHIVE) related to the adjustment.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.EVENT_ID
IS
  'FK_EVT_EVENT. If applicable, the event (SCRAP, ARCHIVE) related to the adjustment.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.AVG_UNIT_PRICE_BEFORE_ADJUST
IS
  'Part average unit price before the adjust' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.TOTAL_QT_BEFORE_ADJUST
IS
  'Part total quantity before the adjust' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.TOTAL_VALUE_BEFORE_ADJUST
IS
  'Part total value before the adjust' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.AVG_UNIT_PRICE_AFTER_ADJUST
IS
  'Part average unit price after the adjust' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.TOTAL_QT_AFTER_ADJUST
IS
  'Part total quantity after the adjust' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.TOTAL_VALUE_AFTER_ADJUST
IS
  'Part total value after the adjust' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.AC_EVENT_DB_ID
IS
  'FK_INV_CND_CHG_EVENT. If applicable, the AC event  related to the adjustment.' ;
  COMMENT ON COLUMN EQP_PART_ROTABLE_ADJUST.AC_EVENT_ID
IS
  'FK_INV_CND_CHG_EVENT. If applicable, the AC event  related to the adjustment.' ;
  CREATE INDEX IX_EQPPRTNO_EQPPARTROTABLE ON EQP_PART_ROTABLE_ADJUST
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_EVTEVENT_EQPPARTROTABLE ON EQP_PART_ROTABLE_ADJUST
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
  CREATE INDEX IX_INVINV_EQPPRTROTABLE ON EQP_PART_ROTABLE_ADJUST
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_EQPPRTROTABLE ON EQP_PART_ROTABLE_ADJUST
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
  CREATE INDEX IX_POLINE_EQPPARTROTABLE ON EQP_PART_ROTABLE_ADJUST
    (
      PO_DB_ID ASC ,
      PO_ID ASC ,
      PO_LINE_ID ASC
    ) ;
  CREATE INDEX IX_INVCNDCHGEVENT_EQPPARTROTAB ON EQP_PART_ROTABLE_ADJUST
    (
      AC_EVENT_DB_ID ASC ,
      AC_EVENT_ID ASC
    ) ;
ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CONSTRAINT PK_EQP_PART_ROTABLE_ADJUST PRIMARY KEY ( PART_NO_DB_ID, PART_NO_ID, PART_NO_ADJUST_ID ) ;


CREATE TABLE EQP_PART_VENDOR
  (
    VENDOR_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_VENDOR      VARCHAR2 (40) ,
    PREF_BOOL           NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    VENDOR_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    CONTRACT_NUMBER     VARCHAR2 (40) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_PART_VENDOR ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR ADD CHECK ( PREF_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR ADD CHECK ( VENDOR_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN EQP_PART_VENDOR.VENDOR_DB_ID
IS
  'FK to ORG_VENDOR.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR.VENDOR_ID
IS
  'FK to ORG_VENDOR.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR.PART_NO_DB_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR.PART_NO_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR.PART_NO_VENDOR
IS
  'The Vendor Part number.  This is important as their number can sometimes differ from the part number assigned by the OEM.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR.PREF_BOOL
IS
  'Indicates if this is the preferred vendor for this particular part.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR.VENDOR_STATUS_DB_ID
IS
  'FK to REF_VENDOR_STATUS.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR.VENDOR_STATUS_CD
IS
  'FK to REF_VENDOR_STATUS.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN EQP_PART_VENDOR.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN EQP_PART_VENDOR.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EQPPRTNO_EQPPRTVENDR ON EQP_PART_VENDOR
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_ORGVNDR_EQPPRTVENDOR ON EQP_PART_VENDOR
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
ALTER TABLE EQP_PART_VENDOR ADD CONSTRAINT "pk_EQP_PART_VENDOR" PRIMARY KEY ( VENDOR_DB_ID, VENDOR_ID, PART_NO_DB_ID, PART_NO_ID ) ;


CREATE TABLE EQP_PART_VENDOR_ADVSRY
  (
    PART_NO_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    PART_VENDOR_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PART_VENDOR_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ADVSRY_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    ADVSRY_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    ACTIVE_BOOL            NUMBER (1) DEFAULT 0 ,
    CLEAR_NOTE             VARCHAR2 (4000) ,
    CLEAR_DT               DATE ,
    CLEAR_HR_DB_ID         NUMBER (10) ,
    CLEAR_HR_ID            NUMBER (10) ,
    SERIAL_NO_RANGE        VARCHAR2 (1000) ,
    LOT_NO_RANGE           VARCHAR2 (1000) ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_PART_VENDOR_ADVSRY ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_ADVSRY ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_ADVSRY ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_ADVSRY ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_ADVSRY ADD CHECK ( PART_VENDOR_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_ADVSRY ADD CHECK ( ADVSRY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_ADVSRY ADD CHECK ( ADVSRY_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_ADVSRY ADD CHECK ( ACTIVE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_ADVSRY ADD CHECK ( CLEAR_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_ADVSRY ADD CHECK ( CLEAR_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_ADVSRY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_ADVSRY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_PART_VENDOR_ADVSRY
IS
  'This table will associate the advisory with a vendor-part number relationship.  When the relationship is flagged as active, the vendor-part number relationship is flagged with the advisory.  To clear the flag, the ACTIVE_BOOL is set to zero.  The advisory remains associated with the vendor-part number relationship for historical record keeping.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_ADVSRY.PART_NO_DB_ID
IS
  'PFK to eqp_part_no. The part no of the vendor-part being associated to the advisory.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_ADVSRY.PART_NO_ID
IS
  'PFK to eqp_part_no. The part no of the vendor-part being associated to the advisory.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_ADVSRY.VENDOR_DB_ID
IS
  'PFK to one of EQP_PART_VENDOR, EQP_PART_VENDOR_REP, or EQP_PART_VENDOR_EXCHG.  Note the constraint will be enforced in the "before insert" trigger.  The vendor-part being associated to the advisory.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_ADVSRY.VENDOR_ID
IS
  'PFK to one of EQP_PART_VENDOR, EQP_PART_VENDOR_REP, or EQP_PART_VENDOR_EXCHG.  Note the constraint will be enforced in the "before insert" trigger.  The vendor-part being associated to the advisory.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_ADVSRY.PART_VENDOR_TYPE_DB_ID
IS
  'PFK to ref_part_vendor_type.  The type of vendor-part which may be used to determine which eqp_part_vendor* table this object is related (i.e. purchase, repair, exchange).' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_ADVSRY.PART_VENDOR_TYPE_CD
IS
  'PFK to ref_part_vendor_type.  The type of vendor-part which may be used to determine which eqp_part_vendor* table this object is related (i.e. purchase, repair, exchange).' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_ADVSRY.ADVSRY_DB_ID
IS
  'PFK to eqp_advsry. The advisory being associated to the vendor-part.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_ADVSRY.ADVSRY_ID
IS
  'PFK to eqp_advsry. The advisory being associated to the vendor-part.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_ADVSRY.ACTIVE_BOOL
IS
  'Boolean flag to indicate if this advisory is currently active.  When the flag is set to true, the vendor-part number relationship is under investigation according to the advisory.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_ADVSRY.CLEAR_NOTE
IS
  'This note field contains any notes the user entered when clearing the advisory from the part number for the vendor.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_ADVSRY.CLEAR_DT
IS
  'Timestamp of advisory clear.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_ADVSRY.CLEAR_HR_DB_ID
IS
  'FK to org_hr.  The user who cleared the advisory from this vendor-part number relationship.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_ADVSRY.CLEAR_HR_ID
IS
  'FK to org_hr.  The user who cleared the advisory from this vendor-part number relationship.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_ADVSRY.SERIAL_NO_RANGE
IS
  'This field stores the advisory''s serial number range.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_ADVSRY.LOT_NO_RANGE
IS
  'This field stores the advisory''s lot number range.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_ADVSRY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_ADVSRY.CREATION_DT
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_ADVSRY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_ADVSRY.REVISION_DB_ID
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_ADVSRY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPPARTNO_EQPPTVENADV ON EQP_PART_VENDOR_ADVSRY
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_EQPPARTVENDORADV ON EQP_PART_VENDOR_ADVSRY
    (
      CLEAR_HR_DB_ID ASC ,
      CLEAR_HR_ID ASC
    ) ;
  CREATE INDEX IX_EQP_ADVSRY_EQPPTVENADV ON EQP_PART_VENDOR_ADVSRY
    (
      ADVSRY_DB_ID ASC ,
      ADVSRY_ID ASC
    ) ;
ALTER TABLE EQP_PART_VENDOR_ADVSRY ADD CONSTRAINT PK_EQP_PART_VENDOR_ADVSRY PRIMARY KEY ( PART_NO_DB_ID, PART_NO_ID, VENDOR_DB_ID, VENDOR_ID, PART_VENDOR_TYPE_DB_ID, PART_VENDOR_TYPE_CD, ADVSRY_DB_ID, ADVSRY_ID ) ;


CREATE TABLE EQP_PART_VENDOR_EXCHG
  (
    VENDOR_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PART_NO_VENDOR      VARCHAR2 (40) ,
    PREF_BOOL           NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CONTRACT_NUMBER     VARCHAR2 (40) ,
    EXCHANGE_COST       NUMBER (15,5) ,
    RETURN_TIME FLOAT ,
    LEAD_TIME FLOAT ,
    BASE_PRICE       NUMBER (15,5) ,
    ALL_AIRPORT_BOOL NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_PART_VENDOR_EXCHG ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_EXCHG ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_EXCHG ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_EXCHG ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_EXCHG ADD CHECK ( VENDOR_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_EXCHG ADD CHECK ( PREF_BOOL        IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_EXCHG ADD CHECK ( ALL_AIRPORT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_EXCHG ADD CHECK ( RSTAT_CD         IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_EXCHG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG.VENDOR_DB_ID
IS
  'FK to EQP_PART_VENDOR_EXCHG' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG.VENDOR_ID
IS
  'FK to EQP_PART_VENDOR_EXCHG' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG.PART_NO_DB_ID
IS
  'FK to EQP_PART_VENDOR_EXCHG' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG.PART_NO_ID
IS
  'FK to EQP_PART_VENDOR_EXCHG' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG.VENDOR_STATUS_DB_ID
IS
  'FK to REF_VENDOR_STATUS' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG.VENDOR_STATUS_CD
IS
  'FK to REF_VENDOR_STATUS' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG.PART_NO_VENDOR
IS
  'The Vendor Part number.  This is important as their number can sometimes differ from the part number assigned by the OEM.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG.PREF_BOOL
IS
  'Indicates if this is the preferred vendor for this particular part.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG.EXCHANGE_COST
IS
  'Base cost for making an exchange' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG.RETURN_TIME
IS
  'Amount of time (in days) allowed to return the exchanged part to the vendor.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG.LEAD_TIME
IS
  'Amount of time (in days) that it takes to get the new part from the vendor.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG.BASE_PRICE
IS
  'Base price of the item.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG.ALL_AIRPORT_BOOL
IS
  'Whether this exchange relationship is availble at all locations.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EQPPARTNO_PARTVENDORXCHG ON EQP_PART_VENDOR_EXCHG
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_ORGVENDOR_PARTVENDORXCHG ON EQP_PART_VENDOR_EXCHG
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
ALTER TABLE EQP_PART_VENDOR_EXCHG ADD CONSTRAINT "pk_EQP_PART_VENDOR_EXCHG" PRIMARY KEY ( VENDOR_DB_ID, VENDOR_ID, PART_NO_DB_ID, PART_NO_ID ) ;


CREATE TABLE EQP_PART_VENDOR_EXCHG_LOC
  (
    VENDOR_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_PART_VENDOR_EXCHG_LOC ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_EXCHG_LOC ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_EXCHG_LOC ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_EXCHG_LOC ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_EXCHG_LOC ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_EXCHG_LOC ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_EXCHG_LOC ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_EXCHG_LOC ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG_LOC.VENDOR_DB_ID
IS
  'FK to EQP_PART_VENDOR_EXCHG' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG_LOC.VENDOR_ID
IS
  'FK to EQP_PART_VENDOR_EXCHG' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG_LOC.PART_NO_DB_ID
IS
  'FK to EQP_PART_VENDOR_EXCHG' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG_LOC.PART_NO_ID
IS
  'FK to EQP_PART_VENDOR_EXCHG' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG_LOC.LOC_DB_ID
IS
  'FK to INV_LOC' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG_LOC.LOC_ID
IS
  'FK to INV_LOC' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG_LOC.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG_LOC.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG_LOC.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG_LOC.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_EXCHG_LOC.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_INVLOC_PARTVENDORXCHGLOC ON EQP_PART_VENDOR_EXCHG_LOC
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
  CREATE INDEX IX_PARTVENDORXCHG_PARTVENDORXC ON EQP_PART_VENDOR_EXCHG_LOC
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC ,
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
ALTER TABLE EQP_PART_VENDOR_EXCHG_LOC ADD CONSTRAINT "pk_EQP_PART_VENDOR_EXCHG_LOC" PRIMARY KEY ( VENDOR_DB_ID, VENDOR_ID, PART_NO_DB_ID, PART_NO_ID, LOC_DB_ID, LOC_ID ) ;


CREATE TABLE EQP_PART_VENDOR_PRICE
  (
    PART_VENDOR_PRICE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PART_VENDOR_PRICE_ID    NUMBER (10) CONSTRAINT NN_PRTVENDPRIID NOT NULL DEFERRABLE ,
    PART_NO_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    HIST_BOOL               NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    UNIT_PRICE              NUMBER (15,5) NOT NULL DEFERRABLE ,
    CURRENCY_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    CURRENCY_CD             VARCHAR2 (8) NOT NULL DEFERRABLE ,
    QTY_UNIT_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    QTY_UNIT_CD             VARCHAR2 (8) NOT NULL DEFERRABLE ,
    LEAD_TIME FLOAT NOT NULL DEFERRABLE ,
    EFFECTIVE_FROM_DT DATE ,
    EFFECTIVE_TO_DT   DATE ,
    DISCOUNT_PCT FLOAT ,
    STD_SALE_QT FLOAT ,
    MIN_ORDER_QT FLOAT NOT NULL DEFERRABLE ,
    PRICE_TYPE_DB_ID   NUMBER (10) ,
    PRICE_TYPE_CD      VARCHAR2 (8) ,
    VENDOR_NOTE        VARCHAR2 (4000) ,
    DOC_REF_SDESC      VARCHAR2 (80) ,
    QUOTE_DT           DATE ,
    CONTRACT_REF_SDESC VARCHAR2 (80) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) CONSTRAINT NN_EQPRTVENPRICREVID NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) CONSTRAINT NN_EPRTVENPRREVUSER NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_PART_VENDOR_PRICE ADD CONSTRAINT CK_PRTVENDRPRIDBID CHECK ( PART_VENDOR_PRICE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_PRICE ADD CONSTRAINT CK_PRTVENDPRIID CHECK ( PART_VENDOR_PRICE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_PRICE ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_PRICE ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_PRICE ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_PRICE ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_PRICE ADD CHECK ( HIST_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_PRICE ADD CHECK ( CURRENCY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_PRICE ADD CHECK ( QTY_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_PRICE ADD CHECK ( PRICE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_PRICE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_PRICE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_PART_VENDOR_PRICE
IS
  'History of prices for parts in relation to a particular vendor.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.PART_VENDOR_PRICE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.PART_VENDOR_PRICE_ID
IS
  'PK - value initiated by sequence EQP_PART_VENDR_PRI_SEQ value in utl_sequence table.
' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.PART_NO_DB_ID
IS
  'FK EQP_PART_VENDOR.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.PART_NO_ID
IS
  'FK EQP_PART_VENDOR.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.VENDOR_DB_ID
IS
  'FK EQP_PART_VENDOR.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.VENDOR_ID
IS
  'FK EQP_PART_VENDOR.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.HIST_BOOL
IS
  'All historic prices are marked with hist_bool of 1.  New prices are marked with hist_bool of 0.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.UNIT_PRICE
IS
  'The unit price.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.CURRENCY_DB_ID
IS
  'FK to REF_CURRENCY.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.CURRENCY_CD
IS
  'FK to REF_CURRENCY.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.QTY_UNIT_DB_ID
IS
  'FK to REF_QTY_UNIT.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.QTY_UNIT_CD
IS
  'FK to REF_QTY_UNIT.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.LEAD_TIME
IS
  'Lead Time.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.EFFECTIVE_FROM_DT
IS
  'Date the price is effective from.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.EFFECTIVE_TO_DT
IS
  'Date the price is effective until.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.DISCOUNT_PCT
IS
  'Discount percentage.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.STD_SALE_QT
IS
  'The packaging amount from a given vendor.  An example would be the quantity in a batch.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.MIN_ORDER_QT
IS
  'Minimun order quantity.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.PRICE_TYPE_DB_ID
IS
  'FK to REF_PRICE_TYPE.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.PRICE_TYPE_CD
IS
  'FK to REF_PRICE_TYPE.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.VENDOR_NOTE
IS
  'Additional notes about Vendor.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.QUOTE_DT
IS
  'Last quotation date for the given part by the vendor. ' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.CONTRACT_REF_SDESC
IS
  'Contract Reference.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_PRICE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EQPPRTVD_EQPRTVENDPRICE ON EQP_PART_VENDOR_PRICE
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC ,
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
ALTER TABLE EQP_PART_VENDOR_PRICE ADD CONSTRAINT "pk_EQP_PART_VENDOR_PRICE" PRIMARY KEY ( PART_VENDOR_PRICE_DB_ID, PART_VENDOR_PRICE_ID ) ;


CREATE TABLE EQP_PART_VENDOR_REP
  (
    VENDOR_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    PREF_BOOL           NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    VENDOR_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_STATUS_CD    VARCHAR2 (8) CONSTRAINT NN_EQPPRTVNSTATCD NOT NULL DEFERRABLE ,
    CONTRACT_NUMBER     VARCHAR2 (40) ,
    REPAIR_COST         NUMBER (15,5) ,
    LEAD_TIME FLOAT ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_PART_VENDOR_REP ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_REP ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_REP ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_REP ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_REP ADD CHECK ( PREF_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_REP ADD CHECK ( VENDOR_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_REP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_PART_VENDOR_REP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN EQP_PART_VENDOR_REP.VENDOR_DB_ID
IS
  'PK - FK to ORG_VENDOR' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_REP.VENDOR_ID
IS
  'PK - FK to ORG_VENDOR' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_REP.PART_NO_DB_ID
IS
  'PK - FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_REP.PART_NO_ID
IS
  'PK - FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_REP.PREF_BOOL
IS
  'Indicates whether or not the vendor related to the specific part number is the preferred repairer of that part' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_REP.VENDOR_STATUS_DB_ID
IS
  'FK to REF_VENDOR_STATUS' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_REP.VENDOR_STATUS_CD
IS
  'FK to REF_VENDOR_STATUS' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_REP.CONTRACT_NUMBER
IS
  'If there is a standard contract to provide repairs for a certain part number, that contract number can be referenced here.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_REP.REPAIR_COST
IS
  'This is the standard repair cost for the part, if applicable.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_REP.LEAD_TIME
IS
  'This represents the amount of time required to ship the part to the vendor, have it repaired, and have it back in your organization and ready for use.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_REP.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_REP.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_REP.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_REP.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN EQP_PART_VENDOR_REP.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EQPTNO_EQPPTVENDOR ON EQP_PART_VENDOR_REP
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_ORGVENDOR_EQPRTVENDOR ON EQP_PART_VENDOR_REP
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
ALTER TABLE EQP_PART_VENDOR_REP ADD CONSTRAINT "pk_EQP_PART_VENDOR_REP" PRIMARY KEY ( VENDOR_DB_ID, VENDOR_ID, PART_NO_DB_ID, PART_NO_ID ) ;


CREATE TABLE EQP_PLANNING_TYPE
  (
    PLANNING_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PLANNING_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD           VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PLANNING_TYPE_CD    VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_SDESC          VARCHAR2 (200) NOT NULL DEFERRABLE ,
    DESC_LDESC          VARCHAR2 (4000) ,
    NR_FACTOR           NUMBER (3,2) NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_PLANNING_TYPE ADD CHECK ( PLANNING_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PLANNING_TYPE ADD CHECK ( PLANNING_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PLANNING_TYPE ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PLANNING_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_PLANNING_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_PLANNING_TYPE
IS
  'This table represents a Maintenix planning type.' ;
  CREATE INDEX IX_EQPASSMBL_EQPPLANNINGTYPE ON EQP_PLANNING_TYPE
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
ALTER TABLE EQP_PLANNING_TYPE ADD CONSTRAINT PK_EQP_PLANNING_TYPE PRIMARY KEY ( PLANNING_TYPE_DB_ID, PLANNING_TYPE_ID ) ;
ALTER TABLE EQP_PLANNING_TYPE ADD CONSTRAINT IX_EQPPLANTYPEALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE EQP_PLANNING_TYPE_SKILL
  (
    PLANNING_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PLANNING_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    EFFORT_PCT FLOAT NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_PLANNING_TYPE_SKILL ADD CHECK ( PLANNING_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PLANNING_TYPE_SKILL ADD CHECK ( PLANNING_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PLANNING_TYPE_SKILL ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_PLANNING_TYPE_SKILL ADD CHECK ( EFFORT_PCT BETWEEN 0 AND 1) DEFERRABLE ;
ALTER TABLE EQP_PLANNING_TYPE_SKILL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_PLANNING_TYPE_SKILL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EQP_PLANNING_TYPE_SKILL
IS
  'This table represents the skills associated with a Maintenix planning type.' ;
  CREATE INDEX IX_EQPPLANNINGTYPE_LABOURSKILL ON EQP_PLANNING_TYPE_SKILL
    (
      PLANNING_TYPE_DB_ID ASC ,
      PLANNING_TYPE_ID ASC
    ) ;
ALTER TABLE EQP_PLANNING_TYPE_SKILL ADD CONSTRAINT PK_EQP_PLANNING_TYPE_SKILL PRIMARY KEY ( PLANNING_TYPE_DB_ID, PLANNING_TYPE_ID, LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) ;


CREATE TABLE EQP_STOCK_NO
  (
    STOCK_NO_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    STOCK_NO_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    QTY_UNIT_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    QTY_UNIT_CD             VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ABC_CLASS_DB_ID         NUMBER (10) ,
    ABC_CLASS_CD            VARCHAR2 (8) ,
    INV_CLASS_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    INV_CLASS_CD            VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PURCH_TYPE_DB_ID        NUMBER (10) ,
    PURCH_TYPE_CD           VARCHAR2 (8) ,
    STOCK_NO_NAME           VARCHAR2 (100) NOT NULL DEFERRABLE ,
    STOCK_NO_CD             VARCHAR2 (40) NOT NULL DEFERRABLE ,
    CARRY_COST_INTEREST_QT  NUMBER (15,5) DEFAULT 0.0 NOT NULL DEFERRABLE ,
    CARRY_COST_INSURANCE_QT NUMBER (15,5) DEFAULT 0.0 NOT NULL DEFERRABLE ,
    CARRY_COST_TAXES_QT     NUMBER (15,5) DEFAULT 0.0 NOT NULL DEFERRABLE ,
    CARRY_COST_STORAGE_QT   NUMBER (15,5) DEFAULT 0.0 NOT NULL DEFERRABLE ,
    CARRY_COST_TOTAL_QT     NUMBER (15,5) DEFAULT 0.0 NOT NULL DEFERRABLE ,
    PURCHASE_LEAD_TIME FLOAT DEFAULT 1.0 NOT NULL DEFERRABLE ,
    REPAIR_LEAD_TIME FLOAT DEFAULT 1.0 NOT NULL DEFERRABLE ,
    SHIP_QT FLOAT ,
    SHIPPING_TIME_QT FLOAT DEFAULT 1.0 NOT NULL DEFERRABLE ,
    PROCESSING_TIME_QT FLOAT DEFAULT 1.0 NOT NULL DEFERRABLE ,
    TOTAL_LEAD_TIME_QT FLOAT NOT NULL DEFERRABLE ,
    SERVICE_LVL_PCT FLOAT DEFAULT 0.0 NOT NULL DEFERRABLE ,
    MAX_MULT_QT FLOAT ,
    GLOBAL_REORDER_QT FLOAT ,
    SAFETY_LEVEL_QT FLOAT ,
    MONTHLY_DEMAND_QT FLOAT ,
    BATCH_SIZE FLOAT ,
    AUTO_CREATE_PO_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    AUTO_ISSUE_PO_BOOL  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE ,
    NOTE           VARCHAR2 (2000)
  ) ;
ALTER TABLE EQP_STOCK_NO ADD CHECK ( STOCK_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_STOCK_NO ADD CHECK ( STOCK_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_STOCK_NO ADD CHECK ( QTY_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_STOCK_NO ADD CHECK ( ABC_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_STOCK_NO ADD CHECK ( INV_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_STOCK_NO ADD CHECK ( PURCH_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_STOCK_NO ADD CHECK ( AUTO_CREATE_PO_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_STOCK_NO ADD CHECK ( AUTO_ISSUE_PO_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE EQP_STOCK_NO ADD CHECK ( RSTAT_CD            IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_STOCK_NO ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN EQP_STOCK_NO.STOCK_NO_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.STOCK_NO_ID
IS
  'Unique ID assigned from java sequence eqp_stock_no_id.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.QTY_UNIT_DB_ID
IS
  'Units of measure are used whenever you need to describe stock quantities for storage, movement, purchasing, etc. Every part number within this stock number must have the same unit of measure. FK to REF_QTY_UNIT.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.QTY_UNIT_CD
IS
  'Units of measure are used whenever you need to describe stock quantities for storage, movement, purchasing, etc. Every part number within this stock number must have the same unit of measure. FK to REF_QTY_UNIT.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.ABC_CLASS_DB_ID
IS
  'An ABC analysis tries to categorize parts based on how expensive/important they are. Class ?A? parts are the most expensive and frequently used parts, while class ?C? parts are the least expensive or frequently used parts.  FK to REF_ABC_CLASS.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.ABC_CLASS_CD
IS
  'An ABC analysis tries to categorize parts based on how expensive/important they are. Class ?A? parts are the most expensive and frequently used parts, while class ?C? parts are the least expensive or frequently used parts.  FK to REF_ABC_CLASS.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.INV_CLASS_DB_ID
IS
  'FK to REF_INV_CLASS.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.INV_CLASS_CD
IS
  'FK to REF_INV_CLASS.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.PURCH_TYPE_DB_ID
IS
  'FK to REF_PURCH_TYPE.  Used to categorize stock numbers for purchasing.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.PURCH_TYPE_CD
IS
  'FK to REF_PURCH_TYPE.  Used to categorize stock numbers for purchasing.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.STOCK_NO_NAME
IS
  'Every stock number has a code and a name.  The name is descriptive.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.STOCK_NO_CD
IS
  'Every stock number has a code and a name.  The code is typically an internally generated unique value' ;
  COMMENT ON COLUMN EQP_STOCK_NO.CARRY_COST_INTEREST_QT
IS
  'Carrying costs are the dollar-costs involved with holding stock in your inventory warehouse.  This column stores interest costs.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.CARRY_COST_INSURANCE_QT
IS
  'Carrying costs are the dollar-costs involved with holding stock in your inventory warehouse.
This column stores insurance costs.
' ;
  COMMENT ON COLUMN EQP_STOCK_NO.CARRY_COST_TAXES_QT
IS
  'Carrying costs are the dollar-costs involved with holding stock in your inventory warehouse.
This column stores tax costs.
' ;
  COMMENT ON COLUMN EQP_STOCK_NO.CARRY_COST_STORAGE_QT
IS
  'Carrying costs are the dollar-costs involved with holding stock in your inventory warehouse.
This column stores storage costs.
' ;
  COMMENT ON COLUMN EQP_STOCK_NO.CARRY_COST_TOTAL_QT
IS
  'Maintenix calculates CARRY_COST_TOTAL_QT as the sum of the individual carrying costs. The total carrying cost will be updated whenever any of the sub-costs are changed.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.PURCHASE_LEAD_TIME
IS
  'Purchasing lead time (PURCHASE_LEAD_TIME_QT) represent the time it takes for a vendor to deliver this part; from the time you place the order to the time it leaves the vendor?s shipping dock.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.REPAIR_LEAD_TIME
IS
  'Repair lead times (REPAIR_LEAD_TIME_QT) represent the average time it takes to repair a component; from the time the part is sent to the repair shop to the time the part leaves the repair shop.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.SHIP_QT
IS
  'This is the standard quantity to ship from a hub/supplier location when a satelite location hits low stock. ' ;
  COMMENT ON COLUMN EQP_STOCK_NO.SHIPPING_TIME_QT
IS
  'Assume that shipping time is the same for a repaired and a new part. ' ;
  COMMENT ON COLUMN EQP_STOCK_NO.PROCESSING_TIME_QT
IS
  'Processing time is the amount of time it takes QC to inspect the part and put it on the shelf. We assume that this takes the same amount of time for both repaired and purchased parts. ' ;
  COMMENT ON COLUMN EQP_STOCK_NO.TOTAL_LEAD_TIME_QT
IS
  'In order to determine the reorder level, you must decide the service level that you would like to achieve. This is sometimes called the fill rate. Essentially it means, how often should the part be available when you go to look for it.  This is the service level quantity.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.SERVICE_LVL_PCT
IS
  'In order to determine the reorder level, you must decide the ?service level? that you would like to achieve. This is sometimes called the ?fill rate?. Essentially it means, how often should the part be available when you go to look for it.  This is the service level quantity.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.MAX_MULT_QT
IS
  'The user will be able to get Maintenix to calculate the max level based on the by taking the reorder level and multiplying it by the MAX_MULT_QT.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.GLOBAL_REORDER_QT
IS
  'When the quantity of serviceable stock drops below this level, Maintenix will initiate replenishment actions. Should probably be called GLOBAL_REORDER_LEVEL_QT for clarity.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.SAFETY_LEVEL_QT
IS
  'The Safety Level = Global Reorder Level ? (Average Demand * Lead Time).' ;
  COMMENT ON COLUMN EQP_STOCK_NO.MONTHLY_DEMAND_QT
IS
  'Used to analyze the monthly demand starting from a given date, stored in the configuration parameter MONTHLY_DEMAND_START_DT.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.AUTO_CREATE_PO_BOOL
IS
  'This flag indicates if a new PO should be automatically created when the stock runs low.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.AUTO_ISSUE_PO_BOOL
IS
  'This flag indicates if the new PO created automatically should also be automatically issued when the stock runs low.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.
' ;
  COMMENT ON COLUMN EQP_STOCK_NO.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN EQP_STOCK_NO.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN EQP_STOCK_NO.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EQP_STOCK_NO.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN EQP_STOCK_NO.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  COMMENT ON COLUMN EQP_STOCK_NO.NOTE
IS
  'Generic receiving notes for the stock number.' ;
ALTER TABLE EQP_STOCK_NO ADD CONSTRAINT "pk_EQP_STOCK_NO" PRIMARY KEY ( STOCK_NO_DB_ID, STOCK_NO_ID ) ;
ALTER TABLE EQP_STOCK_NO ADD CONSTRAINT IX_EQPSTOCKNOALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE EQP_TASK_PANEL
  (
    PANEL_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    PANEL_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PANEL_CD     VARCHAR2 (16) NOT NULL DEFERRABLE ,
    ZONE_DB_ID   NUMBER (10) ,
    ZONE_ID      NUMBER (10) ,
    DESC_SDESC   VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC   VARCHAR2 (4000) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_TASK_PANEL ADD CHECK ( PANEL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_TASK_PANEL ADD CHECK ( PANEL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_TASK_PANEL ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_TASK_PANEL ADD CHECK ( ZONE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_TASK_PANEL ADD CHECK ( ZONE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_TASK_PANEL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_TASK_PANEL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN EQP_TASK_PANEL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN EQP_TASK_PANEL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN EQP_TASK_PANEL.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN EQP_TASK_PANEL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EQPASSMBL_EQPTASKPANEL ON EQP_TASK_PANEL
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
  CREATE INDEX IX_EQPTSKZONE_EQPTSKPANEL ON EQP_TASK_PANEL
    (
      ZONE_DB_ID ASC ,
      ZONE_ID ASC
    ) ;
ALTER TABLE EQP_TASK_PANEL ADD CONSTRAINT "pk_EQP_TASK_PANEL" PRIMARY KEY ( PANEL_DB_ID, PANEL_ID ) ;
ALTER TABLE EQP_TASK_PANEL ADD CONSTRAINT IX_EQPTASKPANELALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE EQP_TASK_ZONE
  (
    ZONE_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ZONE_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    NH_ZONE_DB_ID NUMBER (10) ,
    NH_ZONE_ID    NUMBER (10) ,
    ASSMBL_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ZONE_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC    VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC    VARCHAR2 (4000) ,
    HR_LIMIT FLOAT DEFAULT 0 ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EQP_TASK_ZONE ADD CHECK ( ZONE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_TASK_ZONE ADD CHECK ( ZONE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_TASK_ZONE ADD CHECK ( NH_ZONE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_TASK_ZONE ADD CHECK ( NH_ZONE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_TASK_ZONE ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EQP_TASK_ZONE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EQP_TASK_ZONE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN EQP_TASK_ZONE.HR_LIMIT
IS
  'Represents the max number of technicians that should be concurrently assigned to work in that zone' ;
  COMMENT ON COLUMN EQP_TASK_ZONE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN EQP_TASK_ZONE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN EQP_TASK_ZONE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN EQP_TASK_ZONE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EQPASSMBL_EQPTASKZONE ON EQP_TASK_ZONE
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
  CREATE INDEX IX_EQPTASKZONE_NHEQPTSKZNE ON EQP_TASK_ZONE
    (
      NH_ZONE_DB_ID ASC ,
      NH_ZONE_ID ASC
    ) ;
ALTER TABLE EQP_TASK_ZONE ADD CONSTRAINT "pk_EQP_TASK_ZONE" PRIMARY KEY ( ZONE_DB_ID, ZONE_ID ) ;
ALTER TABLE EQP_TASK_ZONE ADD CONSTRAINT IX_EQPTASKZONEALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE ER_DATE_RANGE
  (
    RULE_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    RULE_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    RANGE_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    START_MONTH    NUMBER NOT NULL DEFERRABLE ,
    START_DAY      NUMBER NOT NULL DEFERRABLE ,
    START_HOUR     NUMBER NOT NULL DEFERRABLE ,
    MAX_AIRCRAFT   NUMBER ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ER_DATE_RANGE ADD CHECK ( RULE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ER_DATE_RANGE ADD CHECK ( RULE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ER_DATE_RANGE ADD CHECK ( RANGE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ER_DATE_RANGE ADD CHECK ( MAX_AIRCRAFT BETWEEN 0 AND 9999) DEFERRABLE ;
ALTER TABLE ER_DATE_RANGE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ER_DATE_RANGE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN ER_DATE_RANGE.RULE_DB_ID
IS
  'PFK - extraction rule to which this range applies.' ;
  COMMENT ON COLUMN ER_DATE_RANGE.RULE_ID
IS
  'PFK - extraction rule to which this range applies.' ;
  COMMENT ON COLUMN ER_DATE_RANGE.RANGE_ID
IS
  'Primary key for this date range.' ;
  COMMENT ON COLUMN ER_DATE_RANGE.START_MONTH
IS
  'Month number indicating the starting month for the range.' ;
  COMMENT ON COLUMN ER_DATE_RANGE.START_DAY
IS
  'Day number indicating the starting day for the range.' ;
  COMMENT ON COLUMN ER_DATE_RANGE.START_HOUR
IS
  'Day number indicating the starting hour for the range.' ;
  COMMENT ON COLUMN ER_DATE_RANGE.MAX_AIRCRAFT
IS
  'Maximum number of aircraft that may be maintained during this date range.' ;
  COMMENT ON COLUMN ER_DATE_RANGE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ER_DATE_RANGE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ER_DATE_RANGE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ER_DATE_RANGE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ER_DATE_RANGE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ERHEADER_ERDATERANGE ON ER_DATE_RANGE
    (
      RULE_DB_ID ASC ,
      RULE_ID ASC
    ) ;
ALTER TABLE ER_DATE_RANGE ADD CONSTRAINT PK_ER_DATE_RANGE PRIMARY KEY ( RULE_DB_ID, RULE_ID, RANGE_ID ) ;


CREATE TABLE ER_HEADER
  (
    RULE_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    RULE_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC           VARCHAR2 (80) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD            VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ASSMBL_SUBTYPE_DB_ID NUMBER (10) ,
    ASSMBL_SUBTYPE_ID    NUMBER (10) ,
    CARRIER_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    CARRIER_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_DB_ID            NUMBER (10) ,
    LOC_ID               NUMBER (10) ,
    EFFECTIVE_FROM_DT    DATE NOT NULL DEFERRABLE ,
    EFFECTIVE_TO_DT      DATE ,
    ER_TYPE_CD           VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ER_HEADER ADD CHECK ( RULE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ER_HEADER ADD CHECK ( RULE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ER_HEADER ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ER_HEADER ADD CHECK ( ASSMBL_SUBTYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ER_HEADER ADD CHECK ( ASSMBL_SUBTYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ER_HEADER ADD CHECK ( CARRIER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ER_HEADER ADD CHECK ( CARRIER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ER_HEADER ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ER_HEADER ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ER_HEADER ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ER_HEADER ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN ER_HEADER.RULE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN ER_HEADER.RULE_ID
IS
  'Unique identifier serving as part of the primary key, and assigned from the sequence ER_HEADER_ID_SEQ' ;
  COMMENT ON COLUMN ER_HEADER.DESC_SDESC
IS
  'The name of the extraction rule.' ;
  COMMENT ON COLUMN ER_HEADER.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL.' ;
  COMMENT ON COLUMN ER_HEADER.ASSMBL_CD
IS
  'FK to EQP_ASSMBL.' ;
  COMMENT ON COLUMN ER_HEADER.ASSMBL_SUBTYPE_DB_ID
IS
  'FK to EQP_ASSMBL_SUBTYPE.' ;
  COMMENT ON COLUMN ER_HEADER.ASSMBL_SUBTYPE_ID
IS
  'FK to EQP_ASSMBL_SUBTYPE.' ;
  COMMENT ON COLUMN ER_HEADER.CARRIER_DB_ID
IS
  'FK to ORG_CARRIER.' ;
  COMMENT ON COLUMN ER_HEADER.CARRIER_ID
IS
  'FK to ORG_CARRIER.' ;
  COMMENT ON COLUMN ER_HEADER.LOC_DB_ID
IS
  'Foreign key to the location.' ;
  COMMENT ON COLUMN ER_HEADER.LOC_ID
IS
  'Foreign key to the location.' ;
  COMMENT ON COLUMN ER_HEADER.EFFECTIVE_FROM_DT
IS
  'Date from which the rule is in effect.' ;
  COMMENT ON COLUMN ER_HEADER.EFFECTIVE_TO_DT
IS
  'Date to which the rule is in effect.' ;
  COMMENT ON COLUMN ER_HEADER.ER_TYPE_CD
IS
  'Type of extraction rule. Valid options are: DATE, WEEK
This field is not displayed in the GUI. It is an indication of which ?Range? table is populated
DATE: ER_DATE_RANGE
WEEK: ER_WEEKLY_RANGE
' ;
  COMMENT ON COLUMN ER_HEADER.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ER_HEADER.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ER_HEADER.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ER_HEADER.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ER_HEADER.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
CREATE UNIQUE INDEX IX_UQ_ERHEADER_SDESC ON ER_HEADER
  (
    RULE_DB_ID ASC , DESC_SDESC ASC , EFFECTIVE_FROM_DT ASC , EFFECTIVE_TO_DT ASC
  )
  ;
  CREATE INDEX IX_EQPASSMBL_ERHEADER ON ER_HEADER
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
  CREATE INDEX IX_INVLOC_ERHEADER ON ER_HEADER
    ( LOC_DB_ID ASC , LOC_ID ASC
    ) ;
  CREATE INDEX IX_ORGCARRIER_ERHEADER ON ER_HEADER
    (
      CARRIER_DB_ID ASC ,
      CARRIER_ID ASC
    ) ;
  CREATE INDEX IX_EQPASSSUBTYPE_ERHEAD ON ER_HEADER
    (
      ASSMBL_SUBTYPE_DB_ID ASC ,
      ASSMBL_SUBTYPE_ID ASC
    ) ;
ALTER TABLE ER_HEADER ADD CONSTRAINT PK_ER_HEADER PRIMARY KEY ( RULE_DB_ID, RULE_ID ) ;


CREATE TABLE ER_WEEKLY_RANGE
  (
    RULE_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    RULE_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    WEEKLY_RANGE_ID NUMBER (10) NOT NULL DEFERRABLE ,
    START_DAY       NUMBER (10) NOT NULL DEFERRABLE ,
    START_HOUR      NUMBER (10) NOT NULL DEFERRABLE ,
    START_MINUTE    NUMBER (10) NOT NULL DEFERRABLE ,
    MAX_AIRCRAFT    NUMBER (10) ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ER_WEEKLY_RANGE ADD CHECK ( RULE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ER_WEEKLY_RANGE ADD CHECK ( RULE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ER_WEEKLY_RANGE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ER_WEEKLY_RANGE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ER_WEEKLY_RANGE
IS
  'This table defines the maximum number of aircraft that can be scheduled for maintenance for the specified week range of the extraction rule.' ;
  COMMENT ON COLUMN ER_WEEKLY_RANGE.RULE_DB_ID
IS
  'Foreign key to the extraction rule to which this range applies.' ;
  COMMENT ON COLUMN ER_WEEKLY_RANGE.RULE_ID
IS
  'Foreign key to the extraction rule to which this range applies.' ;
  COMMENT ON COLUMN ER_WEEKLY_RANGE.WEEKLY_RANGE_ID
IS
  'Primary key for this day range.' ;
  COMMENT ON COLUMN ER_WEEKLY_RANGE.START_DAY
IS
  'Day of the week indicating the starting day for the range.' ;
  COMMENT ON COLUMN ER_WEEKLY_RANGE.START_HOUR
IS
  'Hour part of the time indicating the starting time for the range.' ;
  COMMENT ON COLUMN ER_WEEKLY_RANGE.START_MINUTE
IS
  'Minute part of the time indicating the start time for the extraction rule.' ;
  COMMENT ON COLUMN ER_WEEKLY_RANGE.MAX_AIRCRAFT
IS
  'This column indicates the maximum number of aircraft that can be scheduled for maintenance at a given time. NULL value means that an unlimited number of aircrafts can be out-of-service (in maintenance).' ;
  COMMENT ON COLUMN ER_WEEKLY_RANGE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ER_WEEKLY_RANGE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ER_WEEKLY_RANGE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ER_WEEKLY_RANGE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ER_WEEKLY_RANGE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ERHEADER_ERWEEKLYRANGE ON ER_WEEKLY_RANGE
    (
      RULE_DB_ID ASC ,
      RULE_ID ASC
    ) ;
ALTER TABLE ER_WEEKLY_RANGE ADD CONSTRAINT PK_ER_WEEKLY_RANGE PRIMARY KEY ( RULE_DB_ID, RULE_ID, WEEKLY_RANGE_ID ) ;


CREATE TABLE ER_WORK_TYPE
  (
    RULE_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    RULE_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    WORK_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WORK_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ER_WORK_TYPE ADD CHECK ( RULE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ER_WORK_TYPE ADD CHECK ( RULE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ER_WORK_TYPE ADD CHECK ( WORK_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ER_WORK_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ER_WORK_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ER_WORK_TYPE
IS
  'This table defines the type of work that is associated to an extraction rule.' ;
  COMMENT ON COLUMN ER_WORK_TYPE.RULE_DB_ID
IS
  'Foreign key to the extraction rule to which this range applies.' ;
  COMMENT ON COLUMN ER_WORK_TYPE.RULE_ID
IS
  'Foreign key to the extraction rule to which this range applies.' ;
  COMMENT ON COLUMN ER_WORK_TYPE.WORK_TYPE_DB_ID
IS
  'Foreign key to the work type to which this range applies.' ;
  COMMENT ON COLUMN ER_WORK_TYPE.WORK_TYPE_CD
IS
  'Foreign key to the work type to which this range applies.' ;
  COMMENT ON COLUMN ER_WORK_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ER_WORK_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN ER_WORK_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN ER_WORK_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ERHEADER_ERWORKTYPE ON ER_WORK_TYPE
    (
      RULE_DB_ID ASC ,
      RULE_ID ASC
    ) ;
ALTER TABLE ER_WORK_TYPE ADD CONSTRAINT PK_ER_WORK_TYPE PRIMARY KEY ( RULE_DB_ID, RULE_ID, WORK_TYPE_DB_ID, WORK_TYPE_CD ) ;


CREATE TABLE ESIG_DOC
  (
    DOC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    DOC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    HR_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DOC_DT         DATE NOT NULL DEFERRABLE ,
    BLOB_DB_ID     NUMBER (10) ,
    BLOB_ID        NUMBER (10) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ESIG_DOC ADD CHECK ( DOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ESIG_DOC ADD CHECK ( DOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ESIG_DOC ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ESIG_DOC ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ESIG_DOC ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ESIG_DOC ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ESIG_DOC ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ESIG_DOC ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_ORGHR_ESIGDOC ON ESIG_DOC
  ( HR_DB_ID ASC , HR_ID ASC
  ) ;
CREATE INDEX IX_FK_CORBLOBINFO_ESIGDOC ON ESIG_DOC
  (
    BLOB_DB_ID ASC ,
    BLOB_ID ASC
  ) ;
ALTER TABLE ESIG_DOC ADD CONSTRAINT PK_ESIG_DOC PRIMARY KEY ( DOC_DB_ID, DOC_ID ) ;


CREATE TABLE ESIG_DOC_SIGN
  (
    SIGN_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    SIGN_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    DOC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    DOC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    HR_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    CERT_ID        NUMBER (10) ,
    SIG_DT         DATE NOT NULL DEFERRABLE ,
    BLOB_DB_ID     NUMBER (10) ,
    BLOB_ID        NUMBER (10) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE ,
    META_DATA CLOB
  ) ;
ALTER TABLE ESIG_DOC_SIGN ADD CHECK ( SIGN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ESIG_DOC_SIGN ADD CHECK ( SIGN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ESIG_DOC_SIGN ADD CHECK ( DOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ESIG_DOC_SIGN ADD CHECK ( DOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ESIG_DOC_SIGN ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ESIG_DOC_SIGN ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ESIG_DOC_SIGN ADD CHECK ( CERT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ESIG_DOC_SIGN ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ESIG_DOC_SIGN ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ESIG_DOC_SIGN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ESIG_DOC_SIGN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN ESIG_DOC_SIGN.META_DATA
IS
  'This column stores the information about the electronic signature itself.  It describes the electronic signature.' ;
  CREATE INDEX IX_ESIGDOC_ESIGDOCSIGN ON ESIG_DOC_SIGN
    (
      DOC_DB_ID ASC ,
      DOC_ID ASC
    ) ;
  CREATE INDEX IX_ORGHRCERT_ESIGDOCSIGN ON ESIG_DOC_SIGN
    (
      HR_DB_ID ASC ,
      HR_ID ASC ,
      CERT_ID ASC
    ) ;
  CREATE INDEX IX_FK_CORBLOBINFO_ESIGDOCSIGN ON ESIG_DOC_SIGN
    (
      BLOB_DB_ID ASC ,
      BLOB_ID ASC
    ) ;
ALTER TABLE ESIG_DOC_SIGN ADD CONSTRAINT PK_ESIG_DOC_SIGN PRIMARY KEY ( SIGN_DB_ID, SIGN_ID ) ;


CREATE TABLE EVT_ATTACH
  (
    EVENT_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ATTACH_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    ATTACH_TYPE_DB_ID NUMBER (10) ,
    ATTACH_TYPE_CD    VARCHAR2 (8) ,
    ATTACH_SDESC      VARCHAR2 (80) ,
    ATTACH_LDESC      VARCHAR2 (4000) ,
    ATTACH_NOTE       VARCHAR2 (4000) ,
    IETM_DB_ID        NUMBER (10) ,
    IETM_ID           NUMBER (10) ,
    IETM_TOPIC_ID     NUMBER (10) ,
    PRINT_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    BLOB_DB_ID        NUMBER (10) ,
    BLOB_ID           NUMBER (10) ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_ATTACH ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ATTACH ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ATTACH ADD CHECK ( EVENT_ATTACH_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ATTACH ADD CHECK ( ATTACH_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ATTACH ADD CHECK ( IETM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ATTACH ADD CHECK ( IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ATTACH ADD CHECK ( IETM_TOPIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ATTACH ADD CHECK ( PRINT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EVT_ATTACH ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ATTACH ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ATTACH ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EVT_ATTACH ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EVT_ATTACH
IS
  'Holding place for external documents (diagram, manuals), related to the listed event.' ;
  COMMENT ON COLUMN EVT_ATTACH.EVENT_DB_ID
IS
  'PK - fk to evt_event.' ;
  COMMENT ON COLUMN EVT_ATTACH.EVENT_ID
IS
  'PK - fk to evt_event.' ;
  COMMENT ON COLUMN EVT_ATTACH.EVENT_ATTACH_ID
IS
  'Number assigned (1..n) in context of the event.' ;
  COMMENT ON COLUMN EVT_ATTACH.ATTACH_TYPE_DB_ID
IS
  'FK to ref_attach_type.' ;
  COMMENT ON COLUMN EVT_ATTACH.ATTACH_TYPE_CD
IS
  'FK to ref_attach_type.' ;
  COMMENT ON COLUMN EVT_ATTACH.ATTACH_SDESC
IS
  'Attach short description.' ;
  COMMENT ON COLUMN EVT_ATTACH.ATTACH_LDESC
IS
  'Attach Long description.' ;
  COMMENT ON COLUMN EVT_ATTACH.ATTACH_NOTE
IS
  'Attach Note.' ;
  COMMENT ON COLUMN EVT_ATTACH.IETM_DB_ID
IS
  'FK IETM_TOPIC.  Allows you to record a link to a baselined IETM topic.' ;
  COMMENT ON COLUMN EVT_ATTACH.IETM_ID
IS
  'FK IETM_TOPIC.  Allows you to record a link to a baselined IETM topic.' ;
  COMMENT ON COLUMN EVT_ATTACH.IETM_TOPIC_ID
IS
  'FK IETM_TOPIC.  Allows you to record a link to a baselined IETM topic.' ;
  COMMENT ON COLUMN EVT_ATTACH.PRINT_BOOL
IS
  'If the attachment is printable on the task card' ;
  COMMENT ON COLUMN EVT_ATTACH.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EVT_ATTACH.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN EVT_ATTACH.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN EVT_ATTACH.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN EVT_ATTACH.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EVTATTACH_EVTEVNT ON EVT_ATTACH
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
  CREATE INDEX IX_IETMTOPIC_EVTATTACH ON EVT_ATTACH
    (
      IETM_DB_ID ASC ,
      IETM_ID ASC ,
      IETM_TOPIC_ID ASC
    ) ;
  CREATE INDEX IX_FK_CORBLOBINFO_EVTATTACH ON EVT_ATTACH
    (
      BLOB_DB_ID ASC ,
      BLOB_ID ASC
    ) ;
ALTER TABLE EVT_ATTACH ADD CONSTRAINT "pk_EVT_ATTACH" PRIMARY KEY ( EVENT_DB_ID, EVENT_ID, EVENT_ATTACH_ID ) ;


CREATE TABLE EVT_BAND
  (
    BAND_GROUP_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BAND_GROUP_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BAND_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC       VARCHAR2 (50) NOT NULL DEFERRABLE ,
    ORDER_SEQ        NUMBER (4) NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_BAND ADD CHECK ( BAND_GROUP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_BAND ADD CHECK ( BAND_GROUP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_BAND ADD CHECK ( BAND_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_BAND ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_BAND ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
COMMENT ON COLUMN EVT_BAND.BAND_GROUP_DB_ID
IS
  'Primary Key for the band.' ;
  COMMENT ON COLUMN EVT_BAND.BAND_GROUP_ID
IS
  'Primary Key for the band.' ;
  COMMENT ON COLUMN EVT_BAND.BAND_ID
IS
  'Primary Key for the band.' ;
  COMMENT ON COLUMN EVT_BAND.DESC_SDESC
IS
  'Title for the band.' ;
  COMMENT ON COLUMN EVT_BAND.ORDER_SEQ
IS
  'Order with the bands are displayed within the band group.' ;
  COMMENT ON COLUMN EVT_BAND.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EVT_BAND.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EVT_BAND.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EVT_BAND.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  COMMENT ON COLUMN EVT_BAND.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  CREATE INDEX IX_EVTBANDGROUP_EVTBAND ON EVT_BAND
    (
      BAND_GROUP_DB_ID ASC ,
      BAND_GROUP_ID ASC
    ) ;
ALTER TABLE EVT_BAND ADD CONSTRAINT PK_EVT_BAND PRIMARY KEY ( BAND_GROUP_DB_ID, BAND_GROUP_ID, BAND_ID ) ;
ALTER TABLE EVT_BAND ADD CONSTRAINT IX_EVTBANDALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE EVT_BAND_FIELD
  (
    BAND_GROUP_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BAND_GROUP_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BAND_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    FIELD_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC       VARCHAR2 (200) NOT NULL DEFERRABLE ,
    ORDER_SEQ        NUMBER (4) NOT NULL DEFERRABLE ,
    DESC_LDESC       VARCHAR2 (500) ,
    DATA_TYPE_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_BAND_FIELD ADD CHECK ( BAND_GROUP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_BAND_FIELD ADD CHECK ( BAND_GROUP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_BAND_FIELD ADD CHECK ( BAND_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_BAND_FIELD ADD CHECK ( FIELD_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_BAND_FIELD ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_BAND_FIELD ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_BAND_FIELD ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_BAND_FIELD ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
COMMENT ON COLUMN EVT_BAND_FIELD.BAND_GROUP_DB_ID
IS
  'Primary Key for the key field.' ;
  COMMENT ON COLUMN EVT_BAND_FIELD.BAND_GROUP_ID
IS
  'Primary Key for the key field.' ;
  COMMENT ON COLUMN EVT_BAND_FIELD.BAND_ID
IS
  'Primary Key for the key field.' ;
  COMMENT ON COLUMN EVT_BAND_FIELD.FIELD_ID
IS
  'Primary Key for the key field.' ;
  COMMENT ON COLUMN EVT_BAND_FIELD.DESC_SDESC
IS
  'Short description of the field.' ;
  COMMENT ON COLUMN EVT_BAND_FIELD.ORDER_SEQ
IS
  'Order with which fields are displayed within the band in the Event Entry page.' ;
  COMMENT ON COLUMN EVT_BAND_FIELD.DESC_LDESC
IS
  'Long description of the field.' ;
  COMMENT ON COLUMN EVT_BAND_FIELD.DATA_TYPE_ID
IS
  'Measurement type that is being displayed in the current field.' ;
  COMMENT ON COLUMN EVT_BAND_FIELD.DATA_TYPE_DB_ID
IS
  'Measurement type that is being displayed in the current field.' ;
  COMMENT ON COLUMN EVT_BAND_FIELD.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EVT_BAND_FIELD.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EVT_BAND_FIELD.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EVT_BAND_FIELD.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  COMMENT ON COLUMN EVT_BAND_FIELD.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
CREATE UNIQUE INDEX IX_EVTBANDFIELD_UNIQUEDATATYPE ON EVT_BAND_FIELD
  (
    DATA_TYPE_ID ASC , DATA_TYPE_DB_ID ASC
  )
  ;
  CREATE INDEX IX_EVTBAND_EVTBANDFIELD ON EVT_BAND_FIELD
    (
      BAND_GROUP_DB_ID ASC ,
      BAND_GROUP_ID ASC ,
      BAND_ID ASC
    ) ;
ALTER TABLE EVT_BAND_FIELD ADD CONSTRAINT PK_EVT_BAND_FIELD PRIMARY KEY ( BAND_GROUP_DB_ID, BAND_GROUP_ID, BAND_ID, FIELD_ID ) ;


CREATE TABLE EVT_BAND_GROUP
  (
    BAND_GROUP_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BAND_GROUP_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC       VARCHAR2 (50) NOT NULL DEFERRABLE ,
    ORDER_SEQ        NUMBER (4) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_BAND_GROUP ADD CHECK ( BAND_GROUP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_BAND_GROUP ADD CHECK ( BAND_GROUP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_BAND_GROUP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_BAND_GROUP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
COMMENT ON COLUMN EVT_BAND_GROUP.BAND_GROUP_DB_ID
IS
  'The primary key for the band group.' ;
  COMMENT ON COLUMN EVT_BAND_GROUP.BAND_GROUP_ID
IS
  'The primary key for the band group.' ;
  COMMENT ON COLUMN EVT_BAND_GROUP.DESC_SDESC
IS
  'The title for the band group.' ;
  COMMENT ON COLUMN EVT_BAND_GROUP.ORDER_SEQ
IS
  'Order with which the band groups are displayed.' ;
  COMMENT ON COLUMN EVT_BAND_GROUP.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EVT_BAND_GROUP.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EVT_BAND_GROUP.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EVT_BAND_GROUP.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  COMMENT ON COLUMN EVT_BAND_GROUP.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
ALTER TABLE EVT_BAND_GROUP ADD CONSTRAINT PK_EVT_BAND_GROUP PRIMARY KEY ( BAND_GROUP_DB_ID, BAND_GROUP_ID ) ;


CREATE TABLE EVT_BAND_ROLE
  (
    ROLE_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    BAND_GROUP_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BAND_GROUP_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BAND_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    VIEW_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    EDIT_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_BAND_ROLE ADD CHECK ( BAND_GROUP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_BAND_ROLE ADD CHECK ( BAND_GROUP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_BAND_ROLE ADD CHECK ( BAND_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_BAND_ROLE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_BAND_ROLE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
COMMENT ON COLUMN EVT_BAND_ROLE.ROLE_ID
IS
  'Primary Key for the key table and foreign key utl_role.' ;
  COMMENT ON COLUMN EVT_BAND_ROLE.BAND_GROUP_DB_ID
IS
  'Primary Key for the key table.' ;
  COMMENT ON COLUMN EVT_BAND_ROLE.BAND_GROUP_ID
IS
  'Primary Key for the key table.' ;
  COMMENT ON COLUMN EVT_BAND_ROLE.BAND_ID
IS
  'Primary Key for the key table.' ;
  COMMENT ON COLUMN EVT_BAND_ROLE.VIEW_BOOL
IS
  'Indicates wether the specifiedrole is allowed to view the band.' ;
  COMMENT ON COLUMN EVT_BAND_ROLE.EDIT_BOOL
IS
  'Indicates wether the specified role is allowed to edit the band.' ;
  COMMENT ON COLUMN EVT_BAND_ROLE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EVT_BAND_ROLE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EVT_BAND_ROLE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EVT_BAND_ROLE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  COMMENT ON COLUMN EVT_BAND_ROLE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  CREATE INDEX IX_EVTBAND_EVTBANDROLE ON EVT_BAND_ROLE
    (
      BAND_GROUP_DB_ID ASC ,
      BAND_GROUP_ID ASC ,
      BAND_ID ASC
    ) ;
ALTER TABLE EVT_BAND_ROLE ADD CONSTRAINT PK_EVT_BAND_ROLE PRIMARY KEY ( ROLE_ID, BAND_GROUP_DB_ID, BAND_GROUP_ID, BAND_ID ) ;


CREATE TABLE EVT_DEPT
  (
    EVENT_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_DEPT_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    DEPT_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    DEPT_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_DEPT ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_DEPT ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_DEPT ADD CHECK ( EVENT_DEPT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_DEPT ADD CHECK ( DEPT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_DEPT ADD CHECK ( DEPT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_DEPT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EVT_DEPT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EVT_DEPT
IS
  'Event Departments: This entity lists all departments that are associated with an event (eg. work departments, request departments, etc.)' ;
  COMMENT ON COLUMN EVT_DEPT.EVENT_DB_ID
IS
  'FK to EVT_EVENT. The event that has this work department assigned to it.' ;
  COMMENT ON COLUMN EVT_DEPT.EVENT_ID
IS
  'FK to EVT_EVENT. The event that has this work department assigned to it.' ;
  COMMENT ON COLUMN EVT_DEPT.EVENT_DEPT_ID
IS
  'Number assigned (1..n) in context of the event.' ;
  COMMENT ON COLUMN EVT_DEPT.DEPT_DB_ID
IS
  'FK to ORG_WORK_DEPT. The work department that is assigned to this event.' ;
  COMMENT ON COLUMN EVT_DEPT.DEPT_ID
IS
  'FK to ORG_WORK_DEPT.' ;
  COMMENT ON COLUMN EVT_DEPT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EVT_DEPT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EVT_DEPT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EVT_DEPT.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EVT_DEPT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EVTEVENT_EVTDEPT ON EVT_DEPT
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
  CREATE INDEX IX_ORGWORKDEPT_EVTDEPT ON EVT_DEPT
    (
      DEPT_DB_ID ASC ,
      DEPT_ID ASC
    ) ;
ALTER TABLE EVT_DEPT ADD CONSTRAINT PK_EVT_DEPT PRIMARY KEY ( EVENT_DB_ID, EVENT_ID, EVENT_DEPT_ID ) ;


CREATE TABLE EVT_EVENT
  (
    EVENT_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_TYPE_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_TYPE_CD        VARCHAR2 (8) NOT NULL DEFERRABLE ,
    STAGE_REASON_DB_ID   NUMBER (10) ,
    STAGE_REASON_CD      VARCHAR2 (16) ,
    EDITOR_HR_DB_ID      NUMBER (10) ,
    EDITOR_HR_ID         NUMBER (10) ,
    EVENT_STATUS_DB_ID   NUMBER (10) ,
    EVENT_STATUS_CD      VARCHAR2 (16) ,
    EVENT_REASON_DB_ID   NUMBER (10) ,
    EVENT_REASON_CD      VARCHAR2 (8) ,
    BITMAP_DB_ID         NUMBER (10) ,
    BITMAP_TAG           NUMBER (10) ,
    SCHED_PRIORITY_DB_ID NUMBER (10) ,
    SCHED_PRIORITY_CD    VARCHAR2 (8) ,
    DATA_SOURCE_DB_ID    NUMBER (10) ,
    DATA_SOURCE_CD       VARCHAR2 (8) ,
    NH_EVENT_DB_ID       NUMBER (10) ,
    NH_EVENT_ID          NUMBER (10) ,
    H_EVENT_DB_ID        NUMBER (10) ,
    H_EVENT_ID           NUMBER (10) ,
    EVENT_SDESC          VARCHAR2 (500) NOT NULL DEFERRABLE ,
    EXT_KEY_SDESC        VARCHAR2 (80) ,
    HIST_BOOL            NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CONTACT_INFO_SDESC   VARCHAR2 (80) ,
    SEQ_ERR_BOOL         NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    EVENT_LDESC          VARCHAR2 (4000) ,
    EVENT_DT             DATE ,
    EVENT_GDT            DATE ,
    SCHED_START_DT       DATE ,
    SCHED_START_GDT      DATE ,
    SCHED_END_DT         DATE ,
    SCHED_END_GDT        DATE ,
    ACTUAL_START_DT      DATE ,
    ACTUAL_START_GDT     DATE ,
    DOC_REF_SDESC        VARCHAR2 (80) ,
    SUB_EVENT_ORD        NUMBER (4) ,
    DELTA_QT FLOAT ,
    ACCOUNT_DB_ID NUMBER (10) ,
    ACCOUNT_ID    NUMBER (10) ,
    CTRL_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_EVENT ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( EVENT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( STAGE_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( EDITOR_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( EDITOR_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( EVENT_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( EVENT_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( SCHED_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( DATA_SOURCE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( NH_EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( NH_EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( H_EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( H_EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( HIST_BOOL    IN (0, 1)) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( SEQ_ERR_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( ACCOUNT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( ACCOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EVT_EVENT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EVT_EVENT
IS
  'Event.  This class enumerates all of the actions (i.e. data records, fault records, etc.) that are entered into the system against an inventory item. It is the foundation for all recorded transactions against assets and is driven in sequence by time and usage. Events can be historical in nature, can be current or can be in the future. An event has 
a) a lifecycle
b) a duration
c) records completed actions for FAA purposes
d) records pending actions for FAA purposes
e) records technical log related information
f) records journey log related information' ;
  COMMENT ON COLUMN EVT_EVENT.EVENT_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN EVT_EVENT.EVENT_ID
IS
  'Unique idenifier assigned from Sequence EVENT_ID_SEQ.' ;
  COMMENT ON COLUMN EVT_EVENT.EVENT_TYPE_DB_ID
IS
  'FK to REF_EVENT_TYPE. Used to identify the subtype in the Gen-Spec Hierarchy.' ;
  COMMENT ON COLUMN EVT_EVENT.EVENT_TYPE_CD
IS
  'FK to REF_EVENT_TYPE. Used to identify the subtype in the Gen-Spec Hierarchy.' ;
  COMMENT ON COLUMN EVT_EVENT.STAGE_REASON_DB_ID
IS
  'FK to REF_STAGE_REASON' ;
  COMMENT ON COLUMN EVT_EVENT.STAGE_REASON_CD
IS
  'FK to REF_STAGE_REASON.' ;
  COMMENT ON COLUMN EVT_EVENT.EDITOR_HR_DB_ID
IS
  'FK to ORG_HR. The current editor of the event record.' ;
  COMMENT ON COLUMN EVT_EVENT.EDITOR_HR_ID
IS
  'FK to ORG_HR. The current editor of the event record.' ;
  COMMENT ON COLUMN EVT_EVENT.EVENT_STATUS_DB_ID
IS
  'The last recorded status of the workflow. FK to REF_EVENT_STATUS' ;
  COMMENT ON COLUMN EVT_EVENT.EVENT_STATUS_CD
IS
  'The last recorded status of the workflow. FK to REF_EVENT_STATUS' ;
  COMMENT ON COLUMN EVT_EVENT.EVENT_REASON_DB_ID
IS
  'FK to REF_EVENT_REASON. Identifies main reason for event occurrence.' ;
  COMMENT ON COLUMN EVT_EVENT.EVENT_REASON_CD
IS
  'FK to REF_EVENT_REASON. Identifies main reason for event occurrence.' ;
  COMMENT ON COLUMN EVT_EVENT.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN EVT_EVENT.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN EVT_EVENT.SCHED_PRIORITY_DB_ID
IS
  'FK to REF_SCHED_PRIORITY. Identifies the priority model for task scheduling/execution.' ;
  COMMENT ON COLUMN EVT_EVENT.SCHED_PRIORITY_CD
IS
  'FK to REF_SCHED_PRIORITY. Identifies the priority model for task scheduling/execution.' ;
  COMMENT ON COLUMN EVT_EVENT.DATA_SOURCE_DB_ID
IS
  'FK to REF_DATA_SOURCE.  Identifies the method that the system will use to retrieve actual data.' ;
  COMMENT ON COLUMN EVT_EVENT.DATA_SOURCE_CD
IS
  'FK to REF_DATA_SOURCE.  Identifies the method that the system will use to retrieve actual data.' ;
  COMMENT ON COLUMN EVT_EVENT.NH_EVENT_DB_ID
IS
  'FK to EVT_EVENT.  Corresponds to the next highest (parent) Event under which this Event is grouped.' ;
  COMMENT ON COLUMN EVT_EVENT.NH_EVENT_ID
IS
  'FK to EVT_EVENT.  Corresponds to the next highest (parent) Event under which this Event is grouped.' ;
  COMMENT ON COLUMN EVT_EVENT.H_EVENT_DB_ID
IS
  'FK to EVT_EVENT.  Corresponds to the highest Event under which this Event is grouped.' ;
  COMMENT ON COLUMN EVT_EVENT.H_EVENT_ID
IS
  'FK to EVT_EVENT.  Corresponds to the highest Event under which this Event is grouped.' ;
  COMMENT ON COLUMN EVT_EVENT.EVENT_SDESC
IS
  'A short label used for the event. Frequently generated by the system.' ;
  COMMENT ON COLUMN EVT_EVENT.EXT_KEY_SDESC
IS
  'A field used to store an external system''s PK value.' ;
  COMMENT ON COLUMN EVT_EVENT.HIST_BOOL
IS
  'Indicates if the event has already taken place.' ;
  COMMENT ON COLUMN EVT_EVENT.CONTACT_INFO_SDESC
IS
  'Contact information' ;
  COMMENT ON COLUMN EVT_EVENT.SEQ_ERR_BOOL
IS
  'Indicates if the event was recorded out of chronological sequence.' ;
  COMMENT ON COLUMN EVT_EVENT.EVENT_LDESC
IS
  'A long description for the event.' ;
  COMMENT ON COLUMN EVT_EVENT.EVENT_DT
IS
  'Local time that the event actually ended.' ;
  COMMENT ON COLUMN EVT_EVENT.EVENT_GDT
IS
  'GMT that the event actually ended.' ;
  COMMENT ON COLUMN EVT_EVENT.SCHED_START_DT
IS
  'Scheduled local time to start the event.' ;
  COMMENT ON COLUMN EVT_EVENT.SCHED_START_GDT
IS
  'Scheduled GMT to start the event.' ;
  COMMENT ON COLUMN EVT_EVENT.SCHED_END_DT
IS
  'Scheduled local time to complete the event.' ;
  COMMENT ON COLUMN EVT_EVENT.SCHED_END_GDT
IS
  'Scheduled GMT to complete the event.' ;
  COMMENT ON COLUMN EVT_EVENT.ACTUAL_START_DT
IS
  'Actual local time the event started.' ;
  COMMENT ON COLUMN EVT_EVENT.ACTUAL_START_GDT
IS
  'Actual GMT the event started.' ;
  COMMENT ON COLUMN EVT_EVENT.DOC_REF_SDESC
IS
  'External document reference' ;
  COMMENT ON COLUMN EVT_EVENT.SUB_EVENT_ORD
IS
  'Defines the hierarchy of a series of related events.' ;
  COMMENT ON COLUMN EVT_EVENT.DELTA_QT
IS
  'Delta value that was used to adjust the bin quantity.' ;
  COMMENT ON COLUMN EVT_EVENT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN EVT_EVENT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EVT_EVENT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EVT_EVENT.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EVT_EVENT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EVT_EVENT_EVTSDESC ON EVT_EVENT
    ( EVENT_SDESC ASC
    ) ;
  CREATE INDEX IX_EVT_EVENT_TYPESTATUS ON EVT_EVENT
    (
      EVENT_TYPE_DB_ID ASC ,
      EVENT_TYPE_CD ASC ,
      EVENT_STATUS_DB_ID ASC ,
      EVENT_STATUS_CD ASC ,
      HIST_BOOL ASC
    ) ;
  CREATE INDEX IX_EVT_EVENT_EXTKEYSDESC ON EVT_EVENT
    ( EXT_KEY_SDESC ASC
    ) ;
  CREATE INDEX IX_EVT_EVENT_HISTBOOL ON EVT_EVENT
    ( HIST_BOOL ASC
    ) ;
  CREATE INDEX IX_EVTEVENT_EVTEVENT ON EVT_EVENT
    (
      NH_EVENT_DB_ID ASC ,
      NH_EVENT_ID ASC
    ) ;
  CREATE INDEX IX_EVTEVENT_EVTEVTH ON EVT_EVENT
    (
      H_EVENT_DB_ID ASC ,
      H_EVENT_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_EVTEVENT ON EVT_EVENT
    (
      EDITOR_HR_DB_ID ASC ,
      EDITOR_HR_ID ASC
    ) ;
  CREATE INDEX IX_FNCACCNT_EVTEVENT ON EVT_EVENT
    (
      ACCOUNT_DB_ID ASC ,
      ACCOUNT_ID ASC
    ) ;
  CREATE INDEX IX_EVT_EVENT_TYPEHISTNH ON EVT_EVENT
    (
      EVENT_TYPE_DB_ID ASC ,
      EVENT_TYPE_CD ASC ,
      HIST_BOOL ASC ,
      NH_EVENT_DB_ID ASC ,
      EVENT_GDT ASC ,
      SCHED_END_GDT ASC
    ) ;
  CREATE INDEX IX_EVTEVENT_CRTDT ON EVT_EVENT
    ( CREATION_DT ASC
    ) ;
  CREATE INDEX IX_EVTEVENT_GDT ON EVT_EVENT
    ( EVENT_GDT ASC
    ) ;
ALTER TABLE EVT_EVENT ADD CONSTRAINT PK_EVT_EVENT PRIMARY KEY ( EVENT_DB_ID, EVENT_ID ) ;
ALTER TABLE EVT_EVENT ADD CONSTRAINT IX_EVTEVENTALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE EVT_EVENT_REL
  (
    EVENT_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_REL_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REL_EVENT_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REL_EVENT_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REL_TYPE_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REL_TYPE_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    REL_EVENT_ORD   NUMBER (4) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_EVENT_REL ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT_REL ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT_REL ADD CHECK ( EVENT_REL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT_REL ADD CHECK ( REL_EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT_REL ADD CHECK ( REL_EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT_REL ADD CHECK ( REL_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_EVENT_REL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EVT_EVENT_REL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EVT_EVENT_REL
IS
  'Event Relationships: This associative entity binds together any event dependencies (ie, incident during flight or troubleshooting tasks that have a series of corrective tasks). The data model does not restrict any relationships types.' ;
  COMMENT ON COLUMN EVT_EVENT_REL.EVENT_DB_ID
IS
  'FK to EVT_EVENT' ;
  COMMENT ON COLUMN EVT_EVENT_REL.EVENT_ID
IS
  'FK to EVT_EVENT' ;
  COMMENT ON COLUMN EVT_EVENT_REL.EVENT_REL_ID
IS
  'Number assigned (1..n) in context of the event.' ;
  COMMENT ON COLUMN EVT_EVENT_REL.REL_EVENT_DB_ID
IS
  'FK to EVT_EVENT. Points to the related event' ;
  COMMENT ON COLUMN EVT_EVENT_REL.REL_EVENT_ID
IS
  'FK to EVT_EVENT. Points to the related event.' ;
  COMMENT ON COLUMN EVT_EVENT_REL.REL_TYPE_DB_ID
IS
  'FK to REF_REL_TYPE.' ;
  COMMENT ON COLUMN EVT_EVENT_REL.REL_TYPE_CD
IS
  'FK to REF_REL_TYPE.' ;
  COMMENT ON COLUMN EVT_EVENT_REL.REL_EVENT_ORD
IS
  'This attribute allows for ordering of related events.' ;
  COMMENT ON COLUMN EVT_EVENT_REL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EVT_EVENT_REL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EVT_EVENT_REL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EVT_EVENT_REL.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EVT_EVENT_REL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EVTEVENT_EVTEVENTREL ON EVT_EVENT_REL
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
  CREATE INDEX IX_EVTEVENT_EVTEVENTREL2 ON EVT_EVENT_REL
    (
      REL_EVENT_DB_ID ASC ,
      REL_EVENT_ID ASC
    ) ;
ALTER TABLE EVT_EVENT_REL ADD CONSTRAINT PK_EVT_EVENT_REL PRIMARY KEY ( EVENT_DB_ID, EVENT_ID, EVENT_REL_ID ) ;


CREATE TABLE EVT_FAIL_EFFECT
  (
    EVENT_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_EFFECT_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LEG_ID RAW (16) ,
    FAIL_EFFECT_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_EFFECT_TYPE_CD    VARCHAR2 (8) CONSTRAINT NN_EVTFAILEFFECT_FLEFFCTTYPCD NOT NULL DEFERRABLE ,
    FAIL_EFFECT_DB_ID      NUMBER (10) ,
    FAIL_EFFECT_ID         NUMBER (10) ,
    FLIGHT_STAGE_DB_ID     NUMBER (10) ,
    FLIGHT_STAGE_CD        VARCHAR2 (8) ,
    EFFECT_DT              DATE ,
    EFFECT_GDT             DATE ,
    INFO_SDESC             VARCHAR2 (80) ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_FAIL_EFFECT ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_FAIL_EFFECT ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_FAIL_EFFECT ADD CHECK ( EVENT_EFFECT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_FAIL_EFFECT ADD CHECK ( FAIL_EFFECT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_FAIL_EFFECT ADD CHECK ( FAIL_EFFECT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_FAIL_EFFECT ADD CHECK ( FAIL_EFFECT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_FAIL_EFFECT ADD CHECK ( FLIGHT_STAGE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_FAIL_EFFECT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EVT_FAIL_EFFECT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EVT_FAIL_EFFECT
IS
  'Event Failure Effects: All of the observations (pre-defined or ad-hoc) that have been recorded during an event. An obvious example is the obsrevations made during a failure-finding inspection. This forms the basis for reliability engineering and conditional maintenance program development.' ;
  COMMENT ON COLUMN EVT_FAIL_EFFECT.EVENT_DB_ID
IS
  'FK to EVT_EVENT. The event that this failure effect is defined for. Part of the primary key.' ;
  COMMENT ON COLUMN EVT_FAIL_EFFECT.EVENT_ID
IS
  'FK to EVT_EVENT. The event that this failure effect is defined for. Part of the primary key.' ;
  COMMENT ON COLUMN EVT_FAIL_EFFECT.EVENT_EFFECT_ID
IS
  'Number assigned (1..n) in context of the event.' ;
  COMMENT ON COLUMN EVT_FAIL_EFFECT.LEG_ID
IS
  'FK to FL_LEG table.' ;
  COMMENT ON COLUMN EVT_FAIL_EFFECT.FAIL_EFFECT_TYPE_DB_ID
IS
  'FK to REF_FAIL_EFFECT_TYPE.  Classifies the failure effects into types for sorting/filtering.' ;
  COMMENT ON COLUMN EVT_FAIL_EFFECT.FAIL_EFFECT_TYPE_CD
IS
  'FK to REF_FAIL_EFFECT_TYPE.  Classifies the failure effects into types for sorting/filtering.' ;
  COMMENT ON COLUMN EVT_FAIL_EFFECT.FAIL_EFFECT_DB_ID
IS
  'FK to FAIL_EFFECT.' ;
  COMMENT ON COLUMN EVT_FAIL_EFFECT.FAIL_EFFECT_ID
IS
  'FK to FAIL_EFFECT.' ;
  COMMENT ON COLUMN EVT_FAIL_EFFECT.FLIGHT_STAGE_DB_ID
IS
  'FK to REF_FLIGHT_STAGE.' ;
  COMMENT ON COLUMN EVT_FAIL_EFFECT.FLIGHT_STAGE_CD
IS
  'FK to REF_FLIGHT_STAGE.' ;
  COMMENT ON COLUMN EVT_FAIL_EFFECT.EFFECT_DT
IS
  'The local date/time when the effect occurred.' ;
  COMMENT ON COLUMN EVT_FAIL_EFFECT.EFFECT_GDT
IS
  'The GMT when the effect occurred.' ;
  COMMENT ON COLUMN EVT_FAIL_EFFECT.INFO_SDESC
IS
  'Short description information.' ;
  COMMENT ON COLUMN EVT_FAIL_EFFECT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EVT_FAIL_EFFECT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EVT_FAIL_EFFECT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EVT_FAIL_EFFECT.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EVT_FAIL_EFFECT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EVTEVENT_EVTFAILEFFECT ON EVT_FAIL_EFFECT
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
  CREATE INDEX IX_FAILEFFECT_EVTFAILEFFECT ON EVT_FAIL_EFFECT
    (
      FAIL_EFFECT_DB_ID ASC ,
      FAIL_EFFECT_ID ASC
    ) ;
  CREATE INDEX IX_FLLEG_EVTFAILEFF ON EVT_FAIL_EFFECT
    ( LEG_ID ASC
    ) ;
ALTER TABLE EVT_FAIL_EFFECT ADD CONSTRAINT PK_EVT_FAIL_EFFECT PRIMARY KEY ( EVENT_DB_ID, EVENT_ID, EVENT_EFFECT_ID ) ;


CREATE TABLE EVT_FINDING
  (
    EVENT_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_FINDING_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FINDING_DB_ID    NUMBER (10) ,
    FINDING_ID       NUMBER (10) ,
    HR_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_PART_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_PART_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    PRIMARY_BOOL     NUMBER (1) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_FINDING ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_FINDING ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_FINDING ADD CHECK ( EVENT_FINDING_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_FINDING ADD CHECK ( FINDING_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_FINDING ADD CHECK ( FINDING_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_FINDING ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_FINDING ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_FINDING ADD CHECK ( BOM_PART_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_FINDING ADD CHECK ( BOM_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_FINDING ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_FINDING ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
COMMENT ON COLUMN EVT_FINDING.EVENT_DB_ID
IS
  'Primary key for the finding.' ;
  COMMENT ON COLUMN EVT_FINDING.EVENT_ID
IS
  'Primary key for the finding.' ;
  COMMENT ON COLUMN EVT_FINDING.EVENT_FINDING_ID
IS
  'Primary key for the finding.' ;
  COMMENT ON COLUMN EVT_FINDING.FINDING_DB_ID
IS
  'Columns indicate actual finding.' ;
  COMMENT ON COLUMN EVT_FINDING.FINDING_ID
IS
  'Columns indicate actual finding.' ;
  COMMENT ON COLUMN EVT_FINDING.HR_DB_ID
IS
  'Indicate user who logged the finding.' ;
  COMMENT ON COLUMN EVT_FINDING.HR_ID
IS
  'Indicate user who logged the finding.' ;
  COMMENT ON COLUMN EVT_FINDING.BOM_PART_DB_ID
IS
  'Indicate part group where finding occurred.' ;
  COMMENT ON COLUMN EVT_FINDING.BOM_PART_ID
IS
  'Indicate part group where finding occurred.' ;
  COMMENT ON COLUMN EVT_FINDING.PRIMARY_BOOL
IS
  'Used to indicate which finding is the primary finding ofr the event.' ;
  COMMENT ON COLUMN EVT_FINDING.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EVT_FINDING.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EVT_FINDING.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EVT_FINDING.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  COMMENT ON COLUMN EVT_FINDING.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  CREATE INDEX IX_EQPBOMPART_EQPFINDING ON EVT_FINDING
    (
      BOM_PART_DB_ID ASC ,
      BOM_PART_ID ASC
    ) ;
  CREATE INDEX IX_EVTEVENT_EVTFINDING ON EVT_FINDING
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_EQPFINDING ON EVT_FINDING
    ( HR_DB_ID ASC , HR_ID ASC
    ) ;
  CREATE INDEX IX_EQPFINDING_EVTFINDING ON EVT_FINDING
    (
      FINDING_DB_ID ASC ,
      FINDING_ID ASC
    ) ;
ALTER TABLE EVT_FINDING ADD CONSTRAINT PK_EVT_FINDING PRIMARY KEY ( EVENT_DB_ID, EVENT_ID, EVENT_FINDING_ID ) ;


CREATE TABLE EVT_IETM
  (
    EVENT_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_IETM_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_DB_ID         NUMBER (10) ,
    IETM_ID            NUMBER (10) ,
    IETM_TOPIC_ID      NUMBER (10) ,
    IETM_ORD           NUMBER (4) ,
    IETM_TYPE_DB_ID    NUMBER (10) ,
    IETM_TYPE_CD       VARCHAR2 (8) ,
    IETM_SDESC         VARCHAR2 (80) ,
    CMDLINE_PARM_LDESC VARCHAR2 (4000) ,
    IETM_LDESC         VARCHAR2 (4000) ,
    IETM_NOTE          VARCHAR2 (4000) ,
    PRINT_BOOL         NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_IETM ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_IETM ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_IETM ADD CHECK ( EVENT_IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_IETM ADD CHECK ( IETM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_IETM ADD CHECK ( IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_IETM ADD CHECK ( IETM_TOPIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_IETM ADD CHECK ( IETM_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_IETM ADD CHECK ( PRINT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EVT_IETM ADD CHECK ( RSTAT_CD   IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EVT_IETM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EVT_IETM
IS
  'Event IETM Link: This associative entity links all of the IETM( InteractiveElectronic Technical Manuals) entry points that are defined or used during an event.' ;
  COMMENT ON COLUMN EVT_IETM.EVENT_DB_ID
IS
  'FK to EVT_EVENT.  Event related to the IETM topic.' ;
  COMMENT ON COLUMN EVT_IETM.EVENT_ID
IS
  'FK to EVT_EVENT.  Event related to the IETM topic.' ;
  COMMENT ON COLUMN EVT_IETM.EVENT_IETM_ID
IS
  'Unique identifier for ietm links to events.' ;
  COMMENT ON COLUMN EVT_IETM.IETM_DB_ID
IS
  'FK to  IETM_TOPIC' ;
  COMMENT ON COLUMN EVT_IETM.IETM_ID
IS
  'FK to  IETM_TOPIC' ;
  COMMENT ON COLUMN EVT_IETM.IETM_TOPIC_ID
IS
  'FK to  IETM_TOPIC.' ;
  COMMENT ON COLUMN EVT_IETM.IETM_ORD
IS
  'Order of IETM records in relation to an event.' ;
  COMMENT ON COLUMN EVT_IETM.IETM_TYPE_DB_ID
IS
  'FK to REF_IETM_TYPE.' ;
  COMMENT ON COLUMN EVT_IETM.IETM_TYPE_CD
IS
  'FK to REF_IETM_TYPE.' ;
  COMMENT ON COLUMN EVT_IETM.IETM_SDESC
IS
  'Short description for the ''ad hoc'' ietm record.' ;
  COMMENT ON COLUMN EVT_IETM.CMDLINE_PARM_LDESC
IS
  'Any Operating System command line parameters or arguments that allow the browser or viewer defined in IETM_IETM to find this specific topic''s context.' ;
  COMMENT ON COLUMN EVT_IETM.IETM_LDESC
IS
  'Long description for the ''ad hoc'' ietm record.' ;
  COMMENT ON COLUMN EVT_IETM.IETM_NOTE
IS
  'Note for the ''ad hoc'' ietm record.' ;
  COMMENT ON COLUMN EVT_IETM.PRINT_BOOL
IS
  'Indicates if the technical reference is printable.' ;
  COMMENT ON COLUMN EVT_IETM.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN EVT_IETM.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EVT_IETM.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EVT_IETM.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EVT_IETM.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EVTEVENT_EVTIETM ON EVT_IETM
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
  CREATE INDEX IX_IETMTOPIC_EVTIETM ON EVT_IETM
    (
      IETM_DB_ID ASC ,
      IETM_ID ASC ,
      IETM_TOPIC_ID ASC
    ) ;
ALTER TABLE EVT_IETM ADD CONSTRAINT PK_EVT_IETM PRIMARY KEY ( EVENT_DB_ID, EVENT_ID, EVENT_IETM_ID ) ;


CREATE TABLE EVT_INV
  (
    EVENT_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_INV_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    NH_INV_NO_DB_ID     NUMBER (10) ,
    NH_INV_NO_ID        NUMBER (10) ,
    ASSMBL_INV_NO_DB_ID NUMBER (10) ,
    ASSMBL_INV_NO_ID    NUMBER (10) ,
    H_INV_NO_DB_ID      NUMBER (10) ,
    H_INV_NO_ID         NUMBER (10) ,
    ASSMBL_DB_ID        NUMBER (10) ,
    ASSMBL_CD           VARCHAR2 (8) ,
    ASSMBL_BOM_ID       NUMBER (10) ,
    ASSMBL_POS_ID       NUMBER (10) ,
    PART_NO_DB_ID       NUMBER (10) ,
    PART_NO_ID          NUMBER (10) ,
    BOM_PART_DB_ID      NUMBER (10) ,
    BOM_PART_ID         NUMBER (10) ,
    MAIN_INV_BOOL       NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    BIN_QT FLOAT ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_INV ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV ADD CHECK ( EVENT_INV_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV ADD CHECK ( NH_INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV ADD CHECK ( NH_INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV ADD CHECK ( ASSMBL_INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV ADD CHECK ( ASSMBL_INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV ADD CHECK ( H_INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV ADD CHECK ( H_INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV ADD CHECK ( ASSMBL_BOM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV ADD CHECK ( ASSMBL_POS_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV ADD CHECK ( BOM_PART_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV ADD CHECK ( BOM_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV ADD CHECK ( MAIN_INV_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EVT_INV ADD CHECK ( RSTAT_CD      IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EVT_INV ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EVT_INV
IS
  'Event Inventory Configuration: This entity is used to determine which log card an event should be filed against. It also captures the log card''s asset configuration (ie, exact component, assembly, engine, aircraft, etc...) at the time the event was completed. It is the foundation for reconstructing configurations at points in history.' ;
  COMMENT ON COLUMN EVT_INV.EVENT_DB_ID
IS
  'FK to EVT_EVENT.  The event the log card should be filed against.' ;
  COMMENT ON COLUMN EVT_INV.EVENT_ID
IS
  'FK to EVT_EVENT.  The event the log card should be filed against.' ;
  COMMENT ON COLUMN EVT_INV.EVENT_INV_ID
IS
  'Number assigned (1..n) in context of the event.' ;
  COMMENT ON COLUMN EVT_INV.INV_NO_DB_ID
IS
  'FK to INV_INV. The immediate item that the event is assigned to.' ;
  COMMENT ON COLUMN EVT_INV.INV_NO_ID
IS
  'FK to INV_INV. The immediate item that the event is assigned to.' ;
  COMMENT ON COLUMN EVT_INV.NH_INV_NO_DB_ID
IS
  'FK to INV_INV. The immediate item''s immediate parent at the time of the event.' ;
  COMMENT ON COLUMN EVT_INV.NH_INV_NO_ID
IS
  'FK to INV_INV. The immediate item''s immediate parent at the time of the event.' ;
  COMMENT ON COLUMN EVT_INV.ASSMBL_INV_NO_DB_ID
IS
  'FK to INV_INV. The immediate item''s immediate parent assembly at the time of the event.' ;
  COMMENT ON COLUMN EVT_INV.ASSMBL_INV_NO_ID
IS
  'FK to INV_INV. The immediate item''s immediate parent assembly at the time of the event.' ;
  COMMENT ON COLUMN EVT_INV.H_INV_NO_DB_ID
IS
  'FK to INV_INV. The immediate item''s highest parent at the time of the event.' ;
  COMMENT ON COLUMN EVT_INV.H_INV_NO_ID
IS
  'FK to INV_INV. The immediate item''s highest parent at the time of the event.' ;
  COMMENT ON COLUMN EVT_INV.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL_BOM_POS. The position of the immediate item at the time of the event.' ;
  COMMENT ON COLUMN EVT_INV.ASSMBL_CD
IS
  'FK to EQP_ASSMBL_BOM_POS. The position of the immediate item at the time of the event.' ;
  COMMENT ON COLUMN EVT_INV.ASSMBL_BOM_ID
IS
  'FK to EQP_ASSMBL_BOM_POS. The position of the immediate item at the time of the event.' ;
  COMMENT ON COLUMN EVT_INV.ASSMBL_POS_ID
IS
  'FK to EQP_ASSMBL_BOM_POS. The position of the immediate item at the time of the event.' ;
  COMMENT ON COLUMN EVT_INV.PART_NO_DB_ID
IS
  'FK to EQP_PART_NO. The part number of the immediate item at the time of the event.' ;
  COMMENT ON COLUMN EVT_INV.PART_NO_ID
IS
  'FK to EQP_PART_NO. The part number of the immediate item at the time of the event.' ;
  COMMENT ON COLUMN EVT_INV.BOM_PART_DB_ID
IS
  'FK to EQP_BOM_PART.' ;
  COMMENT ON COLUMN EVT_INV.BOM_PART_ID
IS
  'FK to EQP_BOM_PART.' ;
  COMMENT ON COLUMN EVT_INV.MAIN_INV_BOOL
IS
  'Indicates that this item is THE immediate item which always carries the event.' ;
  COMMENT ON COLUMN EVT_INV.BIN_QT
IS
  'Batch Inventory Quantity.' ;
  COMMENT ON COLUMN EVT_INV.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EVT_INV.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EVT_INV.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EVT_INV.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EVT_INV.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INV_INV_EVENTINV_IE ON EVT_INV
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC ,
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_MAIN_EVT_EVTINV ON EVT_INV
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC ,
      MAIN_INV_BOOL ASC
    ) ;
  CREATE INDEX IX_MAIN_INV_EVT_EVTINV ON EVT_INV
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC ,
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC ,
      MAIN_INV_BOOL ASC
    ) ;
  CREATE INDEX IX_MAIN_INV_EVTINV ON EVT_INV
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC ,
      MAIN_INV_BOOL ASC
    ) ;
  CREATE INDEX IX_EVTINV_EVTEVENT ON EVT_INV
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC ,
      EVENT_DB_ID ASC ,
      EVENT_ID ASC ,
      MAIN_INV_BOOL ASC
    ) ;
  CREATE INDEX IX_EQPASSMBLPOS_EVTINV ON EVT_INV
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC ,
      ASSMBL_BOM_ID ASC ,
      ASSMBL_POS_ID ASC
    ) ;
  CREATE INDEX IX_EQPBOMPART_EVTINV ON EVT_INV
    (
      BOM_PART_DB_ID ASC ,
      BOM_PART_ID ASC
    ) ;
  CREATE INDEX IX_EQPPARTNO_EVTINV ON EVT_INV
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVIN_EVTINV ON EVT_INV
    ( INV_NO_DB_ID ASC , INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVINV_EVTINV ON EVT_INV
    (
      H_INV_NO_DB_ID ASC ,
      H_INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_ININV_EVTINV ON EVT_INV
    (
      ASSMBL_INV_NO_DB_ID ASC ,
      ASSMBL_INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_IVINV_EVTINV ON EVT_INV
    (
      NH_INV_NO_DB_ID ASC ,
      NH_INV_NO_ID ASC
    ) ;
ALTER TABLE EVT_INV ADD CONSTRAINT PK_EVT_INV PRIMARY KEY ( EVENT_DB_ID, EVENT_ID, EVENT_INV_ID ) ;


CREATE TABLE EVT_INV_USAGE
  (
    EVENT_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_INV_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    TSN_QT FLOAT NOT NULL DEFERRABLE ,
    TSO_QT FLOAT NOT NULL DEFERRABLE ,
    TSI_QT FLOAT NOT NULL DEFERRABLE ,
    ASSMBL_TSN_QT FLOAT ,
    ASSMBL_TSO_QT FLOAT ,
    H_TSN_QT FLOAT ,
    H_TSO_QT FLOAT ,
    NH_TSN_QT FLOAT ,
    NH_TSO_QT FLOAT ,
    NEGATED_BOOL   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    SOURCE_DB_ID   NUMBER (10) NOT NULL ,
    SOURCE_CD      VARCHAR2 (20) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_INV_USAGE ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV_USAGE ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV_USAGE ADD CHECK ( EVENT_INV_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV_USAGE ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV_USAGE ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_INV_USAGE ADD CHECK ( NEGATED_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EVT_INV_USAGE ADD CHECK ( RSTAT_CD     IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EVT_INV_USAGE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EVT_INV_USAGE
IS
  'Event Usage: The usage values (TSN and TSO) at the time of the event are captured in this entity. This is required for historical auditing, scheduling and usage auditing.' ;
  COMMENT ON COLUMN EVT_INV_USAGE.EVENT_DB_ID
IS
  'FK to EVT_INV.  Determines the event the log card was filed against.' ;
  COMMENT ON COLUMN EVT_INV_USAGE.EVENT_ID
IS
  'FK to EVT_INV.  Determines the event the log card was filed against.' ;
  COMMENT ON COLUMN EVT_INV_USAGE.EVENT_INV_ID
IS
  'FK to EVT_INV.  Determines the event the log card was filed against.' ;
  COMMENT ON COLUMN EVT_INV_USAGE.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE.  Identifies the main usage parameter for this event.' ;
  COMMENT ON COLUMN EVT_INV_USAGE.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE.  Identifies the main usage parameter for this event.' ;
  COMMENT ON COLUMN EVT_INV_USAGE.TSN_QT
IS
  'The total usage since new on the item when the event occurred' ;
  COMMENT ON COLUMN EVT_INV_USAGE.TSO_QT
IS
  'The total usage since overhaul on the item when the event occurred' ;
  COMMENT ON COLUMN EVT_INV_USAGE.TSI_QT
IS
  'Whenever a usage snapshot is taken on an event, we will record the TSI_QT as well as the TSN_QT and the TSO_QT. This value can be taken directly from the new INV_CURR_USAGE.TSI_QT column.' ;
  COMMENT ON COLUMN EVT_INV_USAGE.ASSMBL_TSN_QT
IS
  'The total usage since new on the item''s next most immediate parent assembly when the event occurred' ;
  COMMENT ON COLUMN EVT_INV_USAGE.ASSMBL_TSO_QT
IS
  'The total usage since overhaul on the item''s next most immediate parent assembly when the event occurred' ;
  COMMENT ON COLUMN EVT_INV_USAGE.H_TSN_QT
IS
  'The total usage since new on the item''s highest parent when the event occurred' ;
  COMMENT ON COLUMN EVT_INV_USAGE.H_TSO_QT
IS
  'The total usage since overhaul on the item''s highest parent when the event occurred' ;
  COMMENT ON COLUMN EVT_INV_USAGE.NH_TSN_QT
IS
  'The total usage since new on the item''s next highest parent when the event occurred' ;
  COMMENT ON COLUMN EVT_INV_USAGE.NH_TSO_QT
IS
  'The total usage since overhaul on the item''s next highest parent when the event occurred' ;
  COMMENT ON COLUMN EVT_INV_USAGE.NEGATED_BOOL
IS
  'Indicates that the usage record was negated' ;
  COMMENT ON COLUMN EVT_INV_USAGE.SOURCE_DB_ID
IS
  'FK to the REF_USG_SNAPSHOT_SRC_TYPE table. Determines the source of the usage snapshot.' ;
  COMMENT ON COLUMN EVT_INV_USAGE.SOURCE_CD
IS
  'FK to the REF_USG_SNAPSHOT_SRC_TYPE table. Determines the source of the usage snapshot.' ;
  COMMENT ON COLUMN EVT_INV_USAGE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EVT_INV_USAGE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EVT_INV_USAGE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EVT_INV_USAGE.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EVT_INV_USAGE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_MDATATYPE_EVTINVUSAGE ON EVT_INV_USAGE
    (
      DATA_TYPE_DB_ID ASC ,
      DATA_TYPE_ID ASC
    ) ;
  CREATE INDEX IX_EVTINV_EVTINVUSAGE ON EVT_INV_USAGE
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC ,
      EVENT_INV_ID ASC
    ) ;
ALTER TABLE EVT_INV_USAGE ADD CONSTRAINT PK_EVT_INV_USAGE PRIMARY KEY ( EVENT_DB_ID, EVENT_ID, EVENT_INV_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID ) ;


CREATE TABLE EVT_LIC_DEFN
  (
    LIC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LIC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_LIC_DEFN ADD CHECK ( LIC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_LIC_DEFN ADD CHECK ( LIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_LIC_DEFN ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_LIC_DEFN ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_LIC_DEFN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EVT_LIC_DEFN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EVT_LIC_DEFN
IS
  'This table stores license definition history.' ;
  COMMENT ON COLUMN EVT_LIC_DEFN.LIC_DB_ID
IS
  'This is a primary key for the license definition historic event.' ;
  COMMENT ON COLUMN EVT_LIC_DEFN.LIC_ID
IS
  'This is a primary key for the license definition historic event.' ;
  COMMENT ON COLUMN EVT_LIC_DEFN.EVENT_DB_ID
IS
  'This is a primary key for the license definition historic event.' ;
  COMMENT ON COLUMN EVT_LIC_DEFN.EVENT_ID
IS
  'This is a primary key for the license definition historic event.' ;
  COMMENT ON COLUMN EVT_LIC_DEFN.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN EVT_LIC_DEFN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN EVT_LIC_DEFN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN EVT_LIC_DEFN.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN EVT_LIC_DEFN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EVTEVENT_EVTLICDEFN ON EVT_LIC_DEFN
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
  CREATE INDEX IX_LICDEFN_EVTLICDEFN ON EVT_LIC_DEFN
    (
      LIC_DB_ID ASC ,
      LIC_ID ASC
    ) ;
ALTER TABLE EVT_LIC_DEFN ADD CONSTRAINT PK_EVT_LIC_DEFN PRIMARY KEY ( LIC_DB_ID, LIC_ID, EVENT_DB_ID, EVENT_ID ) ;


CREATE TABLE EVT_LOC
  (
    EVENT_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_LOC_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_LOC ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_LOC ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_LOC ADD CHECK ( EVENT_LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_LOC ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_LOC ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_LOC ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EVT_LOC ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EVT_LOC
IS
  'Event Locations: This entity records all locations that are used by an event (eg. transfer locations, work locations, etc.)' ;
  COMMENT ON COLUMN EVT_LOC.EVENT_DB_ID
IS
  'FK to EVT_EVENT. The event that has this location assigned to it.' ;
  COMMENT ON COLUMN EVT_LOC.EVENT_ID
IS
  'FK to EVT_EVENT. The event that has this location assigned to it.' ;
  COMMENT ON COLUMN EVT_LOC.EVENT_LOC_ID
IS
  'Number assigned (1..n) in context of the event.' ;
  COMMENT ON COLUMN EVT_LOC.LOC_DB_ID
IS
  'FK to INV_LOC. The location that is assigned to this event.' ;
  COMMENT ON COLUMN EVT_LOC.LOC_ID
IS
  'FK to INV_LOC. The location that is assigned to this event.' ;
  COMMENT ON COLUMN EVT_LOC.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EVT_LOC.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EVT_LOC.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EVT_LOC.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EVT_LOC.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EVTEVENT_EVTLOC ON EVT_LOC
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
  CREATE INDEX IX_INVLOC_EVTLOC ON EVT_LOC
    ( LOC_DB_ID ASC , LOC_ID ASC
    ) ;
ALTER TABLE EVT_LOC ADD CONSTRAINT PK_EVT_LOC PRIMARY KEY ( EVENT_DB_ID, EVENT_ID, EVENT_LOC_ID ) ;


CREATE TABLE EVT_ORG_HR
  (
    HR_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_ORG_HR ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ORG_HR ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ORG_HR ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ORG_HR ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ORG_HR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EVT_ORG_HR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EVT_ORG_HR
IS
  'This table stores user history' ;
  COMMENT ON COLUMN EVT_ORG_HR.HR_DB_ID
IS
  'PK for the human resource historic event' ;
  COMMENT ON COLUMN EVT_ORG_HR.HR_ID
IS
  'PK for the human resource historic event' ;
  COMMENT ON COLUMN EVT_ORG_HR.EVENT_DB_ID
IS
  'PK for the human resource historic event' ;
  COMMENT ON COLUMN EVT_ORG_HR.EVENT_ID
IS
  'PK for the human resource historic event' ;
  COMMENT ON COLUMN EVT_ORG_HR.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN EVT_ORG_HR.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN EVT_ORG_HR.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN EVT_ORG_HR.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN EVT_ORG_HR.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EVTEVENT_EVTORGHR ON EVT_ORG_HR
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_EVTORGHR ON EVT_ORG_HR
    ( HR_DB_ID ASC , HR_ID ASC
    ) ;
ALTER TABLE EVT_ORG_HR ADD CONSTRAINT PK_EVT_ORG_HR PRIMARY KEY ( HR_DB_ID, HR_ID, EVENT_DB_ID, EVENT_ID ) ;


CREATE TABLE EVT_ORG_VENDOR_PO_TYPE
  (
    EVENT_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    PO_TYPE_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    PO_TYPE_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_ORG_VENDOR_PO_TYPE ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ORG_VENDOR_PO_TYPE ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ORG_VENDOR_PO_TYPE ADD CHECK ( ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ORG_VENDOR_PO_TYPE ADD CHECK ( ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ORG_VENDOR_PO_TYPE ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ORG_VENDOR_PO_TYPE ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ORG_VENDOR_PO_TYPE ADD CHECK ( PO_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ORG_VENDOR_PO_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EVT_ORG_VENDOR_PO_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EVT_ORG_VENDOR_PO_TYPE
IS
  'Entity to store vendor approval for specific order types.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_PO_TYPE.EVENT_DB_ID
IS
  'FK to EVT_EVENT table.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_PO_TYPE.EVENT_ID
IS
  'FK to EVT_EVENT table.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_PO_TYPE.ORG_DB_ID
IS
  'FK to ORG_VENDOR_PO_TYPE.  Represents organisation for which the vendor order type combination is approved.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_PO_TYPE.ORG_ID
IS
  'FK to ORG_VENDOR_PO_TYPE.  Represents organisation for which the vendor order type combination is approved.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_PO_TYPE.VENDOR_DB_ID
IS
  'FK to ORG_VENDOR_PO_TYPE.  Represents vendor for which the order type is approved.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_PO_TYPE.VENDOR_ID
IS
  'FK to ORG_VENDOR_PO_TYPE.  Represents vendor for which the order type is approved.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_PO_TYPE.PO_TYPE_DB_ID
IS
  'FK to ORG_VENDOR_PO_TYPE.  Represents the order type for which the vendor is approved.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_PO_TYPE.PO_TYPE_CD
IS
  'FK to ORG_VENDOR_PO_TYPE.  Represents the order type for which the vendor is approved.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_PO_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_PO_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_PO_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_PO_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_PO_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EVTEVENT_EVTORGVENPOTYPE ON EVT_ORG_VENDOR_PO_TYPE
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
  CREATE INDEX IX_ORGVENPOTYPE_EVTORGVENPO ON EVT_ORG_VENDOR_PO_TYPE
    (
      ORG_DB_ID ASC ,
      ORG_ID ASC ,
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC ,
      PO_TYPE_DB_ID ASC ,
      PO_TYPE_CD ASC
    ) ;
ALTER TABLE EVT_ORG_VENDOR_PO_TYPE ADD CONSTRAINT PK_EVT_ORG_VENDOR_PO_TYPE PRIMARY KEY ( EVENT_DB_ID, EVENT_ID, ORG_DB_ID, ORG_ID, VENDOR_DB_ID, VENDOR_ID, PO_TYPE_DB_ID, PO_TYPE_CD ) ;


CREATE TABLE EVT_ORG_VENDOR_SERVICE_TYPE
  (
    EVENT_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    SERVICE_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SERVICE_TYPE_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_ORG_VENDOR_SERVICE_TYPE ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ORG_VENDOR_SERVICE_TYPE ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ORG_VENDOR_SERVICE_TYPE ADD CHECK ( ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ORG_VENDOR_SERVICE_TYPE ADD CHECK ( ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ORG_VENDOR_SERVICE_TYPE ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ORG_VENDOR_SERVICE_TYPE ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ORG_VENDOR_SERVICE_TYPE ADD CHECK ( SERVICE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_ORG_VENDOR_SERVICE_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EVT_ORG_VENDOR_SERVICE_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EVT_ORG_VENDOR_SERVICE_TYPE
IS
  'Entity to store vendor approval for specific service types.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_SERVICE_TYPE.EVENT_DB_ID
IS
  'FK to EVT_EVENT' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_SERVICE_TYPE.EVENT_ID
IS
  'FK to EVT_EVENT' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_SERVICE_TYPE.ORG_DB_ID
IS
  'FK to ORG_VENDOR_SERVICE_TYPE.  Represents organization for which the vendor service type combination is approved.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_SERVICE_TYPE.ORG_ID
IS
  'FK to ORG_VENDOR_SERVICE_TYPE.  Represents organization for which the vendor service type combination is approved.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_SERVICE_TYPE.VENDOR_DB_ID
IS
  'FK to ORG_VENDOR_SERVICE_TYPE.  Represents vendor for which the service type is approved.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_SERVICE_TYPE.VENDOR_ID
IS
  'FK to ORG_VENDOR_SERVICE_TYPE.  Represents vendor for which the service type is approved.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_SERVICE_TYPE.SERVICE_TYPE_DB_ID
IS
  'FK to ORG_VENDOR_SERVICE_TYPE.  Represents the service type for which the vendor is approved.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_SERVICE_TYPE.SERVICE_TYPE_CD
IS
  'FK to ORG_VENDOR_SERVICE_TYPE.  Represents the service type for which the vendor is approved.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_SERVICE_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_SERVICE_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_SERVICE_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_SERVICE_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EVT_ORG_VENDOR_SERVICE_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EVTEVENT_EVTORGVENSRVTYPE ON EVT_ORG_VENDOR_SERVICE_TYPE
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
  CREATE INDEX IX_ORGVENSRVTYPE_EVTORGVENSR ON EVT_ORG_VENDOR_SERVICE_TYPE
    (
      ORG_DB_ID ASC ,
      ORG_ID ASC ,
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC ,
      SERVICE_TYPE_DB_ID ASC ,
      SERVICE_TYPE_CD ASC
    ) ;
ALTER TABLE EVT_ORG_VENDOR_SERVICE_TYPE ADD CONSTRAINT PK_EVT_ORG_VENDOR_SERVICE_TYPE PRIMARY KEY ( EVENT_DB_ID, EVENT_ID, ORG_DB_ID, ORG_ID, VENDOR_DB_ID, VENDOR_ID, SERVICE_TYPE_DB_ID, SERVICE_TYPE_CD ) ;


CREATE TABLE EVT_PART_NO
  (
    EVENT_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_PART_NO ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_PART_NO ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_PART_NO ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_PART_NO ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_PART_NO ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EVT_PART_NO ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EVT_PART_NO
IS
  'EVT_PART_NO: This table allows for the association of events with individual part numbers.  Allows for the recording of status change events for part numbers.' ;
  COMMENT ON COLUMN EVT_PART_NO.EVENT_DB_ID
IS
  'FK to EVT_EVENT' ;
  COMMENT ON COLUMN EVT_PART_NO.EVENT_ID
IS
  'FK to EVT_EVENT' ;
  COMMENT ON COLUMN EVT_PART_NO.PART_NO_DB_ID
IS
  'FK to EQP_PART_NO' ;
  COMMENT ON COLUMN EVT_PART_NO.PART_NO_ID
IS
  'FK to EQP_PART_NO' ;
  COMMENT ON COLUMN EVT_PART_NO.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EVT_PART_NO.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN EVT_PART_NO.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN EVT_PART_NO.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN EVT_PART_NO.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EQPPARTNO_EVTPARTNO ON EVT_PART_NO
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_EVTEVENT_EVTPARTNO ON EVT_PART_NO
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
ALTER TABLE EVT_PART_NO ADD CONSTRAINT PK_EVT_PART_NO PRIMARY KEY ( EVENT_DB_ID, EVENT_ID, PART_NO_DB_ID, PART_NO_ID ) ;


CREATE TABLE EVT_SCHED_DEAD
  (
    EVENT_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DEAD_QT FLOAT ,
    SCHED_DEAD_DT              DATE ,
    SCHED_DEAD_DT_LAST_UPDATED DATE NOT NULL DEFERRABLE ,
    SCHED_FROM_DB_ID           NUMBER (10) ,
    SCHED_FROM_CD              VARCHAR2 (8) ,
    START_DT                   DATE ,
    START_QT FLOAT ,
    USAGE_REM_QT FLOAT ,
    NOTIFY_QT FLOAT NOT NULL DEFERRABLE ,
    SCHED_DRIVER_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    DEVIATION_QT FLOAT NOT NULL DEFERRABLE ,
    INTERVAL_QT FLOAT NOT NULL DEFERRABLE ,
    PREFIXED_QT FLOAT NOT NULL DEFERRABLE ,
    POSTFIXED_QT FLOAT NOT NULL DEFERRABLE ,
    HIST_BOOL_RO   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_SCHED_DEAD ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_SCHED_DEAD ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_SCHED_DEAD ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_SCHED_DEAD ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_SCHED_DEAD ADD CHECK ( SCHED_FROM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_SCHED_DEAD ADD CHECK ( SCHED_DRIVER_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EVT_SCHED_DEAD ADD CHECK ( HIST_BOOL_RO      IN (0, 1)) DEFERRABLE ;
ALTER TABLE EVT_SCHED_DEAD ADD CHECK ( RSTAT_CD          IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EVT_SCHED_DEAD ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EVT_SCHED_DEAD
IS
  'Scheduled event deadline table.' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.EVENT_DB_ID
IS
  'FK to EVT_EVENT. The event that this deadline is defined for. Part of the primary key.' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.EVENT_ID
IS
  'FK to EVT_EVENT. The event that this deadline is defined for. Part of the primary key.' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE. The data parameter that this deadline is defined with (eg. AFH, DAYS, LANDINGS, etc.). Part of the primary key.' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE. The data parameter that this deadline is defined with (eg. AFH, DAYS, LANDINGS, etc.). Part of the primary key.' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.SCHED_DEAD_QT
IS
  'the quantity value at the time of the deadline.' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.SCHED_DEAD_DT
IS
  'The scheduled deadline for the event.' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.SCHED_DEAD_DT_LAST_UPDATED
IS
  'Indicates the last time that the sched_dead_dt was recalculated' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.SCHED_FROM_DB_ID
IS
  'FK to REF_SCHED_FROM.' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.SCHED_FROM_CD
IS
  'FK to REF_SCHED_FROM.' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.START_DT
IS
  'Starting point to calculate the sched_dead_qt value.
' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.START_QT
IS
  'Starting point to calculate the sched_dead_qt value.
' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.USAGE_REM_QT
IS
  'The difference between the current usage count (DATA_TYPE_ID) and SCHED_DEAD_QT.' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.NOTIFY_QT
IS
  'The quantity of DATA_TYPE_ID prior to SCHED_DEAD_QT that will allow the task to go from PENDING to ACTIVE.' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.SCHED_DRIVER_BOOL
IS
  'Indicates that this usage parameter will be reached or exceeded first if there are multiple parameters driving  the schedule.' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.DEVIATION_QT
IS
  'The amount by which the deadline can "slip" past its due date before being considered overdue.' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.INTERVAL_QT
IS
  'Interval quantity' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.PREFIXED_QT
IS
  'Prefixed quantity.' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.POSTFIXED_QT
IS
  'Postfixed quantity.' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.HIST_BOOL_RO
IS
  'This column is a copy of evt_event.hist_bool that will be kept in sync by database triggers. The column is read-only and must be updated through evt_event instead.' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN EVT_SCHED_DEAD.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EVTSCHEDDEAD_DEADDT ON EVT_SCHED_DEAD
    ( SCHED_DEAD_DT ASC
    ) ;
  CREATE INDEX IX_MDATATYPE_EVTSCHEDDEAD ON EVT_SCHED_DEAD
    (
      DATA_TYPE_DB_ID ASC ,
      DATA_TYPE_ID ASC
    ) ;
  CREATE INDEX IX_EVTEVNT_EVTSHEDDEAD ON EVT_SCHED_DEAD
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
ALTER TABLE EVT_SCHED_DEAD ADD CONSTRAINT "pk_EVT_SCHED_DEAD" PRIMARY KEY ( EVENT_DB_ID, EVENT_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID ) ;


CREATE TABLE EVT_STAGE
  (
    EVENT_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    STAGE_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_STATUS_DB_ID NUMBER (10) ,
    EVENT_STATUS_CD    VARCHAR2 (16) ,
    STAGE_REASON_DB_ID NUMBER (10) ,
    STAGE_REASON_CD    VARCHAR2 (16) ,
    STAGE_EVENT_DB_ID  NUMBER (10) ,
    STAGE_EVENT_ID     NUMBER (10) ,
    HR_DB_ID           NUMBER (10) ,
    HR_ID              NUMBER (10) ,
    STAGE_DT           DATE NOT NULL DEFERRABLE ,
    STAGE_GDT          DATE NOT NULL DEFERRABLE ,
    STAGE_NOTE         VARCHAR2 (4000) ,
    SYSTEM_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_STAGE ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_STAGE ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_STAGE ADD CHECK ( STAGE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_STAGE ADD CHECK ( EVENT_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_STAGE ADD CHECK ( STAGE_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_STAGE ADD CHECK ( STAGE_EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_STAGE ADD CHECK ( STAGE_EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_STAGE ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_STAGE ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_STAGE ADD CHECK ( SYSTEM_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE EVT_STAGE ADD CHECK ( RSTAT_CD    IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EVT_STAGE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EVT_STAGE
IS
  'Event Lifecycle Stage: Each event has workflow models associated with them. This entity records the progression of every event through every workflow state.' ;
  COMMENT ON COLUMN EVT_STAGE.EVENT_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN EVT_STAGE.EVENT_ID
IS
  'Unique idenifier assigned from Sequence EVENT_ID_SEQ.' ;
  COMMENT ON COLUMN EVT_STAGE.STAGE_ID
IS
  'Number assigned (1..n) in context of the event.' ;
  COMMENT ON COLUMN EVT_STAGE.EVENT_STATUS_DB_ID
IS
  'FK to REF_EVENT_STATUS.  Defines the workflow step for the Event.' ;
  COMMENT ON COLUMN EVT_STAGE.EVENT_STATUS_CD
IS
  'FK to REF_EVENT_STATUS.  Defines the workflow step for the Event.' ;
  COMMENT ON COLUMN EVT_STAGE.STAGE_REASON_DB_ID
IS
  'FK to REF_STAGE_REASON.' ;
  COMMENT ON COLUMN EVT_STAGE.STAGE_REASON_CD
IS
  'FK to REF_STAGE_REASON.' ;
  COMMENT ON COLUMN EVT_STAGE.STAGE_EVENT_DB_ID
IS
  'FK to REF_STAGE_REASON.' ;
  COMMENT ON COLUMN EVT_STAGE.STAGE_EVENT_ID
IS
  'FK to REF_STAGE_REASON.' ;
  COMMENT ON COLUMN EVT_STAGE.HR_DB_ID
IS
  'FK to ORG_HR.  The human resource assigned for this event stage.' ;
  COMMENT ON COLUMN EVT_STAGE.HR_ID
IS
  'FK to ORG_HR.  The human resource assigned for this event stage.' ;
  COMMENT ON COLUMN EVT_STAGE.STAGE_DT
IS
  'The local date the stage changed.' ;
  COMMENT ON COLUMN EVT_STAGE.STAGE_GDT
IS
  'The GMT the stage changed.' ;
  COMMENT ON COLUMN EVT_STAGE.STAGE_NOTE
IS
  'Any notes the user entered when the stage changed.' ;
  COMMENT ON COLUMN EVT_STAGE.SYSTEM_BOOL
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EVT_STAGE.ALT_ID
IS
  'The surrogate key for the evt_stage table, used for APIs.' ;
  COMMENT ON COLUMN EVT_STAGE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EVT_STAGE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EVT_STAGE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EVT_STAGE.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EVT_STAGE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EVT_STAGE_IF1066 ON EVT_STAGE
    (
      STAGE_REASON_DB_ID ASC ,
      STAGE_REASON_CD ASC
    ) ;
  CREATE INDEX IX_EVTEVENT_EVTSTAGE ON EVT_STAGE
    (
      STAGE_EVENT_DB_ID ASC ,
      STAGE_EVENT_ID ASC
    ) ;
  CREATE INDEX IX_EVTEVENT_EVTSTAGE2 ON EVT_STAGE
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_EVTSTAGE ON EVT_STAGE
    ( HR_DB_ID ASC , HR_ID ASC
    ) ;
ALTER TABLE EVT_STAGE ADD CONSTRAINT PK_EVT_STAGE PRIMARY KEY ( EVENT_DB_ID, EVENT_ID, STAGE_ID ) ;
ALTER TABLE EVT_STAGE ADD CONSTRAINT IX_EVTSTAGEALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE EVT_TOOL
  (
    EVENT_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    TOOL_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_PART_DB_ID NUMBER (10) ,
    BOM_PART_ID    NUMBER (10) ,
    PART_NO_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID   NUMBER (10) ,
    INV_NO_ID      NUMBER (10) ,
    TASK_DB_ID     NUMBER (10) ,
    TASK_ID        NUMBER (10) ,
    TASK_TOOL_ID   NUMBER (10) ,
    SCHED_HR       NUMBER (9,5) ,
    ACTUAL_HR      NUMBER (9,5) ,
    TOOL_COST      NUMBER (15,5) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_TOOL ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_TOOL ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_TOOL ADD CHECK ( TOOL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_TOOL ADD CHECK ( BOM_PART_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_TOOL ADD CHECK ( BOM_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_TOOL ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_TOOL ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_TOOL ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_TOOL ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_TOOL ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_TOOL ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_TOOL ADD CHECK ( TASK_TOOL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_TOOL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE EVT_TOOL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EVT_TOOL
IS
  'Event Tools: All tools or support equipment used during and event are recorded here.' ;
  COMMENT ON COLUMN EVT_TOOL.EVENT_DB_ID
IS
  'FK to EVT_EVENT.  Event for which the tool is being used.' ;
  COMMENT ON COLUMN EVT_TOOL.EVENT_ID
IS
  'FK to EVT_EVENT.  Event for which the tool is being used.' ;
  COMMENT ON COLUMN EVT_TOOL.TOOL_ID
IS
  'Number assigned (1..n) in context of the event.' ;
  COMMENT ON COLUMN EVT_TOOL.BOM_PART_DB_ID
IS
  'FK to EQP_BOM_PART.  Defines the BOM part of the tool being used for the task.' ;
  COMMENT ON COLUMN EVT_TOOL.BOM_PART_ID
IS
  'FK to EQP_BOM_PART.  Defines the BOM part of the tool being used for the task.' ;
  COMMENT ON COLUMN EVT_TOOL.PART_NO_DB_ID
IS
  'FK to EQP_PART_NO. This is the part number for the tool requirement.' ;
  COMMENT ON COLUMN EVT_TOOL.PART_NO_ID
IS
  'FK to EQP_PART_NO. This is the part number for the tool requirement.' ;
  COMMENT ON COLUMN EVT_TOOL.INV_NO_DB_ID
IS
  'FK to INV_INV. Defines specifically the instance of the tool used.' ;
  COMMENT ON COLUMN EVT_TOOL.INV_NO_ID
IS
  'FK to INV_INV. Defines specifically the instance of the tool used.' ;
  COMMENT ON COLUMN EVT_TOOL.TASK_DB_ID
IS
  'FK to TASK_TOOL_LIST. It specifies the tool requirement definition.' ;
  COMMENT ON COLUMN EVT_TOOL.TASK_ID
IS
  'FK to TASK_TOOL_LIST. It specifies the tool requirement definition.' ;
  COMMENT ON COLUMN EVT_TOOL.TASK_TOOL_ID
IS
  'FK to TASK_TOOL_LIST. It specifies the tool requirement definition.' ;
  COMMENT ON COLUMN EVT_TOOL.SCHED_HR
IS
  'Scheduled number of hours the tool is to be used.' ;
  COMMENT ON COLUMN EVT_TOOL.ACTUAL_HR
IS
  'Actual number of hours the tools was used.' ;
  COMMENT ON COLUMN EVT_TOOL.TOOL_COST
IS
  'Total cost of using the tool.' ;
  COMMENT ON COLUMN EVT_TOOL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN EVT_TOOL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EVT_TOOL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EVT_TOOL.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EVT_TOOL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPBOMPART_EVTTOOL ON EVT_TOOL
    (
      BOM_PART_DB_ID ASC ,
      BOM_PART_ID ASC
    ) ;
  CREATE INDEX IX_EQPPARTNO_EVTTOOL ON EVT_TOOL
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_EVTEVENT_EVTTOOL ON EVT_TOOL
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
  CREATE INDEX IX_INVINV_EVTTOOL ON EVT_TOOL
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_TASKTOOLLIST_EVTTOOL ON EVT_TOOL
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC ,
      TASK_TOOL_ID ASC
    ) ;
ALTER TABLE EVT_TOOL ADD CONSTRAINT PK_EVT_TOOL PRIMARY KEY ( EVENT_DB_ID, EVENT_ID, TOOL_ID ) ;


CREATE TABLE EVT_VENDOR
  (
    EVENT_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE EVT_VENDOR ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_VENDOR ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_VENDOR ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_VENDOR ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE EVT_VENDOR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE EVT_VENDOR
IS
  'Event Vendor: This entity is used to record an event history against a vendor.' ;
  COMMENT ON COLUMN EVT_VENDOR.EVENT_DB_ID
IS
  'FK to EVT_EVENT.' ;
  COMMENT ON COLUMN EVT_VENDOR.EVENT_ID
IS
  'FK to EVT_EVENT.' ;
  COMMENT ON COLUMN EVT_VENDOR.VENDOR_DB_ID
IS
  'FK to ORG_VENDOR.' ;
  COMMENT ON COLUMN EVT_VENDOR.VENDOR_ID
IS
  'FK to ORG_VENDOR.' ;
  COMMENT ON COLUMN EVT_VENDOR.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN EVT_VENDOR.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN EVT_VENDOR.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN EVT_VENDOR.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EVTEVENT_EVTVENDOR ON EVT_VENDOR
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
  CREATE INDEX IX_ORGVENDOR_EVTVENDOR ON EVT_VENDOR
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
ALTER TABLE EVT_VENDOR ADD CONSTRAINT "pk_EVT_VENDOR" PRIMARY KEY ( EVENT_DB_ID, EVENT_ID, VENDOR_DB_ID, VENDOR_ID ) ;


CREATE TABLE EXT_REF_ITEM
  (
    EXT_REF_ITEM_DB_ID  NUMBER (10) NOT NULL ,
    EXT_REF_ITEM_ID     NUMBER (10) NOT NULL ,
    REFERENCE_ITEM_NAME VARCHAR2 (40) ,
    RSTAT_CD            NUMBER (3) NOT NULL ,
    REVISION_NO         NUMBER (10) NOT NULL ,
    CTRL_DB_ID          NUMBER (10) NOT NULL ,
    CREATION_DT         DATE NOT NULL ,
    REVISION_DT         DATE NOT NULL ,
    REVISION_DB_ID      NUMBER (10) NOT NULL ,
    REVISION_USER       VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE EXT_REF_ITEM ADD CHECK ( RSTAT_CD IN (0,1,2,3)) ;
COMMENT ON COLUMN EXT_REF_ITEM.EXT_REF_ITEM_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN EXT_REF_ITEM.EXT_REF_ITEM_ID
IS
  'Unique identifier serving as part of the primary key.' ;
  COMMENT ON COLUMN EXT_REF_ITEM.REFERENCE_ITEM_NAME
IS
  'Identifies the reference item.' ;
ALTER TABLE EXT_REF_ITEM ADD CONSTRAINT PK_EXT_REF_ITEM PRIMARY KEY ( EXT_REF_ITEM_ID, EXT_REF_ITEM_DB_ID ) ;
ALTER TABLE EXT_REF_ITEM ADD CONSTRAINT IX_EXTREFITEMNAME_UNQ UNIQUE ( REFERENCE_ITEM_NAME ) ;


CREATE TABLE FAIL_DEFER_CARRIER
  (
    FAIL_DEFER_REF_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_DEFER_REF_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    CARRIER_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    CARRIER_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FAIL_DEFER_CARRIER ADD CHECK ( FAIL_DEFER_REF_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_DEFER_CARRIER ADD CHECK ( FAIL_DEFER_REF_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_DEFER_CARRIER ADD CHECK ( CARRIER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_DEFER_CARRIER ADD CHECK ( CARRIER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_DEFER_CARRIER ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FAIL_DEFER_CARRIER ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE FAIL_DEFER_CARRIER
IS
  'This table maps failure deferrals to operators.' ;
  COMMENT ON COLUMN FAIL_DEFER_CARRIER.FAIL_DEFER_REF_DB_ID
IS
  'This is a foreign key to the FAIL_DEFER_REF table.' ;
  COMMENT ON COLUMN FAIL_DEFER_CARRIER.FAIL_DEFER_REF_ID
IS
  'This is a foreign key to the FAIL_DEFER_REF table.' ;
  COMMENT ON COLUMN FAIL_DEFER_CARRIER.CARRIER_DB_ID
IS
  'This is a foreign key to the ORG_CARRIER table.' ;
  COMMENT ON COLUMN FAIL_DEFER_CARRIER.CARRIER_ID
IS
  'This is a foreign key to the ORG_CARRIER table.' ;
  CREATE INDEX IX_ORGCARRIER_FAILDEFCARRIER ON FAIL_DEFER_CARRIER
    (
      CARRIER_DB_ID ASC ,
      CARRIER_ID ASC
    ) ;
  CREATE INDEX IX_FAILDEFREF_FAILDEFCARRIER ON FAIL_DEFER_CARRIER
    (
      FAIL_DEFER_REF_DB_ID ASC ,
      FAIL_DEFER_REF_ID ASC
    ) ;
ALTER TABLE FAIL_DEFER_CARRIER ADD CONSTRAINT PK_FAIL_DEFER_CARRIER PRIMARY KEY ( FAIL_DEFER_REF_DB_ID, FAIL_DEFER_REF_ID, CARRIER_DB_ID, CARRIER_ID ) ;


CREATE TABLE FAIL_DEFER_REF
  (
    FAIL_DEFER_REF_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_DEFER_REF_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD            VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DEFER_REF_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    FAIL_SEV_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_SEV_CD          VARCHAR2 (8) NOT NULL DEFERRABLE ,
    FAIL_DEFER_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_DEFER_CD        VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DEFER_REF_LDESC      VARCHAR2 (4000) ,
    MOC_APPROVAL_BOOL    NUMBER (1) DEFAULT 1 NOT NULL ,
    DEFER_REF_STATUS_CD  VARCHAR2 (16 CHAR) DEFAULT 'ACTV' NOT NULL ,
    ASSMBL_BOM_ID RAW (16) ,
    INST_SYSTEMS_QT         NUMBER (4) DEFAULT 0 NOT NULL ,
    OP_SYSTEMS_QT           NUMBER (4) DEFAULT 0 NOT NULL ,
    APPL_LDESC              VARCHAR2 (4000) ,
    OPER_RESTRICTIONS_LDESC VARCHAR2 (4000) ,
    MAINT_ACTIONS_LDESC     VARCHAR2 (4000) ,
    PERF_PENALTIES_LDESC    VARCHAR2 (4000) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FAIL_DEFER_REF ADD CHECK ( FAIL_DEFER_REF_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_DEFER_REF ADD CHECK ( FAIL_DEFER_REF_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_DEFER_REF ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_DEFER_REF ADD CHECK ( FAIL_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_DEFER_REF ADD CHECK ( FAIL_DEFER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_DEFER_REF ADD CHECK ( MOC_APPROVAL_BOOL IN (0, 1)) ;
ALTER TABLE FAIL_DEFER_REF ADD CHECK ( RSTAT_CD          IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FAIL_DEFER_REF ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN FAIL_DEFER_REF.FAIL_DEFER_REF_DB_ID
IS
  'PK. Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.FAIL_DEFER_REF_ID
IS
  'PK.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL.This is the assembly that the deferral reference applies to.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.ASSMBL_CD
IS
  'FK to EQP_ASSMBL.This is the assembly that the deferral reference applies to.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.DEFER_REF_SDESC
IS
  'This is the deferral reference code.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.FAIL_SEV_DB_ID
IS
  'FK to REF_FAIL_SEV. This is the fault severity associated with the deferral reference.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.FAIL_SEV_CD
IS
  'FK to REF_FAIL_SEV. This is the fault severity associated with the deferral reference.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.FAIL_DEFER_DB_ID
IS
  'FK to REF_FAIL_DEFER. This is the deferral class associated with the deferral reference.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.FAIL_DEFER_CD
IS
  'FK to REF_FAIL_DEFER. This is the deferral class associated with the deferral reference.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.DEFER_REF_LDESC
IS
  'The deferral reference for a fault.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.MOC_APPROVAL_BOOL
IS
  'True if the MOC needs to approve this deferral reference.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.DEFER_REF_STATUS_CD
IS
  'FK to REF_FAIL_DEFER_REF_STATUS' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.ASSMBL_BOM_ID
IS
  'FK in EQP_ASSMBL_BOM' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.INST_SYSTEMS_QT
IS
  'The number of installed systems. A value of -1 represents a variable number of installed systems.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.OP_SYSTEMS_QT
IS
  'The number of operational systems for dispatch. A value of -1 represents a variable number of systems required for dispatch.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.APPL_LDESC
IS
  'The applicability range for the deferral reference.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.OPER_RESTRICTIONS_LDESC
IS
  'Description of operational restrictions.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.MAINT_ACTIONS_LDESC
IS
  'List of maintenance actions.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.PERF_PENALTIES_LDESC
IS
  'List of performance penalties.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.RSTAT_CD
IS
  'FK to MIM_RSTAT. A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPASSMBL_FAILDEFERREF ON FAIL_DEFER_REF
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
  CREATE INDEX IX_DEFER_REF_STATUS_CD ON FAIL_DEFER_REF
    (
      DEFER_REF_STATUS_CD ASC
    ) ;
  CREATE INDEX IX_DEFER_REF_SDESC_LOWER ON FAIL_DEFER_REF
    (
      LOWER(defer_ref_sdesc)
    ) ;
ALTER TABLE FAIL_DEFER_REF ADD CONSTRAINT PK_FAIL_DEFER_REF PRIMARY KEY ( FAIL_DEFER_REF_DB_ID, FAIL_DEFER_REF_ID ) ;
ALTER TABLE FAIL_DEFER_REF ADD CONSTRAINT IX_FAILDEFERREFALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE FAIL_DEFER_REF_CONFLICT_DEF
  (
    FAIL_DEFER_REF_ID RAW (16) NOT NULL ,
    CONFLICT_FAIL_DEFER_REF_ID RAW (16) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE FAIL_DEFER_REF_CONFLICT_DEF ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE FAIL_DEFER_REF_CONFLICT_DEF ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE FAIL_DEFER_REF_CONFLICT_DEF ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE FAIL_DEFER_REF_CONFLICT_DEF ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON COLUMN FAIL_DEFER_REF_CONFLICT_DEF.FAIL_DEFER_REF_ID
IS
  'FK in FAIL_DEFER_REF referring to the deferral reference under configuration.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_CONFLICT_DEF.CONFLICT_FAIL_DEFER_REF_ID
IS
  'FK in FAIL_DEFER_REF referring to the deferral reference that conflicts with the deferral reference under configuration.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_CONFLICT_DEF.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_CONFLICT_DEF.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_CONFLICT_DEF.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_CONFLICT_DEF.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_CONFLICT_DEF.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_CONFLICT_DEF.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_CONFLICT_DEF.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_CONFLICT_DEF.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE FAIL_DEFER_REF_CONFLICT_DEF ADD CONSTRAINT PK_FAIL_DEFER_REF_CONF_DEF PRIMARY KEY ( FAIL_DEFER_REF_ID, CONFLICT_FAIL_DEFER_REF_ID ) ;


CREATE TABLE FAIL_DEFER_REF_DEAD
  (
    DEFER_REF_DEAD_ID RAW (16) NOT NULL ,
    DATA_TYPE_DB_ID NUMBER (10) NOT NULL ,
    DATA_TYPE_ID    NUMBER (10) NOT NULL ,
    FAIL_DEFER_REF_ID RAW (16) NOT NULL ,
    DEAD_QT FLOAT NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE FAIL_DEFER_REF_DEAD ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE FAIL_DEFER_REF_DEAD ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE FAIL_DEFER_REF_DEAD ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE FAIL_DEFER_REF_DEAD ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON COLUMN FAIL_DEFER_REF_DEAD.DEFER_REF_DEAD_ID
IS
  'PK for the deferral reference deadline.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEAD.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEAD.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEAD.FAIL_DEFER_REF_ID
IS
  'FK to FAIL_DEFER_REF' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEAD.DEAD_QT
IS
  'Number of DATA_TYPE_ID units for the deadline.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEAD.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEAD.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEAD.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEAD.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEAD.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEAD.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEAD.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEAD.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_FAILDEFERREF_DEFERREFDEAD ON FAIL_DEFER_REF_DEAD
    (
      FAIL_DEFER_REF_ID ASC
    ) ;
  CREATE INDEX IX_MIMDATATYPE_DEFERREFDEAD ON FAIL_DEFER_REF_DEAD
    (
      DATA_TYPE_DB_ID ASC ,
      DATA_TYPE_ID ASC
    ) ;
ALTER TABLE FAIL_DEFER_REF_DEAD ADD CONSTRAINT PK_FAIL_DEFER_REF_DEAD PRIMARY KEY ( DEFER_REF_DEAD_ID ) ;
ALTER TABLE FAIL_DEFER_REF_DEAD ADD CONSTRAINT IX_FAILDEFERREF_DATATYPE_UNQ UNIQUE ( FAIL_DEFER_REF_ID , DATA_TYPE_DB_ID , DATA_TYPE_ID ) ;


CREATE TABLE FAIL_DEFER_REF_DEGRAD_CAP
  (
    FAIL_DEFER_REF_ID RAW (16) NOT NULL ,
    CAP_CD          VARCHAR2 (8) NOT NULL ,
    CAP_DB_ID       NUMBER (10) NOT NULL ,
    CAP_LEVEL_CD    VARCHAR2 (8) ,
    CAP_LEVEL_DB_ID NUMBER (10) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE FAIL_DEFER_REF_DEGRAD_CAP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE FAIL_DEFER_REF_DEGRAD_CAP ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE FAIL_DEFER_REF_DEGRAD_CAP ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE FAIL_DEFER_REF_DEGRAD_CAP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON COLUMN FAIL_DEFER_REF_DEGRAD_CAP.FAIL_DEFER_REF_ID
IS
  'FK to defer ref table' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEGRAD_CAP.CAP_CD
IS
  'The capability code.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEGRAD_CAP.CAP_LEVEL_CD
IS
  'The capability level code.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEGRAD_CAP.RSTAT_CD
IS
  'FK to MIM_RSTAT. A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEGRAD_CAP.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEGRAD_CAP.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEGRAD_CAP.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEGRAD_CAP.CREATION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was created.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEGRAD_CAP.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEGRAD_CAP.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_DEGRAD_CAP.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE FAIL_DEFER_REF_DEGRAD_CAP ADD CONSTRAINT PK_FAIL_DEFER_REF_DEGRAD_CAP PRIMARY KEY ( FAIL_DEFER_REF_ID, CAP_CD, CAP_DB_ID ) ;
ALTER TABLE FAIL_DEFER_REF_DEGRAD_CAP ADD CONSTRAINT IX_FAILDEFERREFDEGRADCAPID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE FAIL_DEFER_REF_REL_DEF
  (
    FAIL_DEFER_REF_ID RAW (16) NOT NULL ,
    REL_FAIL_DEFER_REF_ID RAW (16) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE FAIL_DEFER_REF_REL_DEF ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE FAIL_DEFER_REF_REL_DEF ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE FAIL_DEFER_REF_REL_DEF ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE FAIL_DEFER_REF_REL_DEF ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON COLUMN FAIL_DEFER_REF_REL_DEF.FAIL_DEFER_REF_ID
IS
  'FK in FAIL_DEFER_REF referring to the deferral reference under configuration.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_REL_DEF.REL_FAIL_DEFER_REF_ID
IS
  'FK in FAIL_DEFER_REF referring to the deferral reference that relates to the deferral reference under configuration.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_REL_DEF.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_REL_DEF.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_REL_DEF.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_REL_DEF.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_REL_DEF.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_REL_DEF.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_REL_DEF.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_REL_DEF.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE FAIL_DEFER_REF_REL_DEF ADD CONSTRAINT PK_FAIL_DEFER_REF_REL_DEF PRIMARY KEY ( FAIL_DEFER_REF_ID, REL_FAIL_DEFER_REF_ID ) ;


CREATE TABLE FAIL_DEFER_REF_ROLE
  (
    FAIL_DEFER_REF_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_DEFER_REF_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ROLE_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FAIL_DEFER_REF_ROLE ADD CHECK ( FAIL_DEFER_REF_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_DEFER_REF_ROLE ADD CHECK ( FAIL_DEFER_REF_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_DEFER_REF_ROLE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FAIL_DEFER_REF_ROLE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN FAIL_DEFER_REF_ROLE.FAIL_DEFER_REF_DB_ID
IS
  'PK. FK to FAIL_DEFER_REF. Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_ROLE.FAIL_DEFER_REF_ID
IS
  'PK. FK to FAIL_DEFER_REF.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_ROLE.ROLE_ID
IS
  'PK. FK to UTL_ROLE.
' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_ROLE.RSTAT_CD
IS
  'FK to MIM_RSTAT. A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_ROLE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_ROLE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_ROLE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_ROLE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_FAILERFERREF_FAILDEFREFRL ON FAIL_DEFER_REF_ROLE
    (
      FAIL_DEFER_REF_DB_ID ASC ,
      FAIL_DEFER_REF_ID ASC
    ) ;
ALTER TABLE FAIL_DEFER_REF_ROLE ADD CONSTRAINT PK_FAIL_DEFER_REF_ROLE PRIMARY KEY ( FAIL_DEFER_REF_DB_ID, FAIL_DEFER_REF_ID, ROLE_ID ) ;


CREATE TABLE FAIL_DEFER_REF_TASK_DEFN
  (
    FAIL_DEFER_REF_ID RAW (16) NOT NULL ,
    TASK_DEFN_ID RAW (16) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE FAIL_DEFER_REF_TASK_DEFN ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE FAIL_DEFER_REF_TASK_DEFN ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE FAIL_DEFER_REF_TASK_DEFN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE FAIL_DEFER_REF_TASK_DEFN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON COLUMN FAIL_DEFER_REF_TASK_DEFN.FAIL_DEFER_REF_ID
IS
  'FK in FAIL_DEFER_REF referring to the deferral reference under configuration.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_TASK_DEFN.TASK_DEFN_ID
IS
  'FK in TASK_DEFN  referring to the deferral reference under configuration.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_TASK_DEFN.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_TASK_DEFN.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_TASK_DEFN.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_TASK_DEFN.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_TASK_DEFN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_TASK_DEFN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_TASK_DEFN.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN FAIL_DEFER_REF_TASK_DEFN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE FAIL_DEFER_REF_TASK_DEFN ADD CONSTRAINT PK_FAIL_DEFER_REF_TASK_DEFN PRIMARY KEY ( FAIL_DEFER_REF_ID, TASK_DEFN_ID ) ;


CREATE TABLE FAIL_EFFECT
  (
    FAIL_EFFECT_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_EFFECT_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD              VARCHAR2 (8) NOT NULL DEFERRABLE ,
    EFFECT_SEV_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    EFFECT_SEV_CD          VARCHAR2 (8) NOT NULL DEFERRABLE ,
    FAIL_EFFECT_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_EFFECT_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG             NUMBER (10) NOT NULL DEFERRABLE ,
    EFFECT_CD              VARCHAR2 (80) NOT NULL DEFERRABLE ,
    EFFECT_NAME            VARCHAR2 (100) NOT NULL DEFERRABLE ,
    EFFECT_LDESC           VARCHAR2 (4000) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FAIL_EFFECT ADD CHECK ( FAIL_EFFECT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_EFFECT ADD CHECK ( FAIL_EFFECT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_EFFECT ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_EFFECT ADD CHECK ( EFFECT_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_EFFECT ADD CHECK ( FAIL_EFFECT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_EFFECT ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_EFFECT ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_EFFECT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FAIL_EFFECT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE FAIL_EFFECT
IS
  'Failure Effect: Each assembly can carry a pre-defined list of failure observations. An example would be the set of CMC messages for a Boeing Aircraft. This is the same as the FMECA or MSG-3 notion of a functional failure.' ;
  COMMENT ON COLUMN FAIL_EFFECT.FAIL_EFFECT_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN FAIL_EFFECT.FAIL_EFFECT_ID
IS
  'Unique identifier assigned from Sequence FAIL_EFFECT_ID_SEQ.' ;
  COMMENT ON COLUMN FAIL_EFFECT.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL' ;
  COMMENT ON COLUMN FAIL_EFFECT.ASSMBL_CD
IS
  'FK to EQP_ASSMBL' ;
  COMMENT ON COLUMN FAIL_EFFECT.EFFECT_SEV_DB_ID
IS
  'FK to REF_EFFECT_SEV.' ;
  COMMENT ON COLUMN FAIL_EFFECT.EFFECT_SEV_CD
IS
  'FK to REF_EFFECT_SEV.' ;
  COMMENT ON COLUMN FAIL_EFFECT.FAIL_EFFECT_TYPE_DB_ID
IS
  'FK to REF_FAIL_EFFECT_TYPE.  The way the failure manifests itself.' ;
  COMMENT ON COLUMN FAIL_EFFECT.FAIL_EFFECT_TYPE_CD
IS
  'FK to REF_FAIL_EFFECT_TYPE.  The way the failure manifests itself.' ;
  COMMENT ON COLUMN FAIL_EFFECT.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN FAIL_EFFECT.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN FAIL_EFFECT.EFFECT_CD
IS
  'A user entered code that helps identify the effect.' ;
  COMMENT ON COLUMN FAIL_EFFECT.EFFECT_NAME
IS
  'A name used to label the effect.' ;
  COMMENT ON COLUMN FAIL_EFFECT.EFFECT_LDESC
IS
  'A long description of what one would see if the effect occurred.' ;
  COMMENT ON COLUMN FAIL_EFFECT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN FAIL_EFFECT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN FAIL_EFFECT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN FAIL_EFFECT.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN FAIL_EFFECT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPASSMBL_FAILEFFECT ON FAIL_EFFECT
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
ALTER TABLE FAIL_EFFECT ADD CONSTRAINT PK_FAIL_EFFECT PRIMARY KEY ( FAIL_EFFECT_DB_ID, FAIL_EFFECT_ID ) ;
ALTER TABLE FAIL_EFFECT ADD CONSTRAINT IX_FAILEFFECTALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE FAIL_MODE
  (
    FAIL_MODE_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_MODE_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DB_ID          NUMBER (10) ,
    TASK_ID             NUMBER (10) ,
    FAIL_CATGRY_DB_ID   NUMBER (10) ,
    FAIL_CATGRY_CD      VARCHAR2 (8) ,
    FAIL_PRIORITY_DB_ID NUMBER (10) ,
    FAIL_PRIORITY_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG          NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_TYPE_DB_ID     NUMBER (10) ,
    FAIL_TYPE_CD        VARCHAR2 (8) ,
    FAIL_DEFER_DB_ID    NUMBER (10) ,
    FAIL_DEFER_CD       VARCHAR2 (8) ,
    FAIL_SEV_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_SEV_CD         VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD           VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ASSMBL_BOM_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    DEFER_REF_SDESC     VARCHAR2 (80) ,
    DATA_TYPE_DB_ID     NUMBER (10) ,
    DATA_TYPE_ID        NUMBER (10) ,
    FAIL_MODE_CD        VARCHAR2 (40) NOT NULL DEFERRABLE ,
    FAIL_MODE_NAME      VARCHAR2 (200) NOT NULL DEFERRABLE ,
    FAIL_MODE_LDESC     VARCHAR2 (4000) ,
    MTBF_QT FLOAT ,
    MTTR_QT FLOAT ,
    CALC_PRIORITY_BOOL   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    OP_RESTRICTION_LDESC VARCHAR2 (4000) ,
    MANUAL_RAISE_BOOL    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    OBSOLETE_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FAIL_MODE ADD CHECK ( FAIL_MODE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE ADD CHECK ( FAIL_MODE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE ADD CHECK ( FAIL_CATGRY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE ADD CHECK ( FAIL_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE ADD CHECK ( FAIL_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE ADD CHECK ( FAIL_DEFER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE ADD CHECK ( FAIL_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE ADD CHECK ( ASSMBL_BOM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE ADD CHECK ( CALC_PRIORITY_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE FAIL_MODE ADD CHECK ( MANUAL_RAISE_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE FAIL_MODE ADD CHECK ( OBSOLETE_BOOL      IN (0, 1)) DEFERRABLE ;
ALTER TABLE FAIL_MODE ADD CHECK ( RSTAT_CD           IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FAIL_MODE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE FAIL_MODE
IS
  'Failure Mode: A list of pre-defined failure modes can be defined at each BOM slot on an assembly. The failure mode drives corrective maintenance and reliability engineering. This is equivalent to the FMECA or MSG-3 notion of a root cause.' ;
  COMMENT ON COLUMN FAIL_MODE.FAIL_MODE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN FAIL_MODE.FAIL_MODE_ID
IS
  'Unique identifier assigned from Sequence FAIL_MODE_ID_SEQ.' ;
  COMMENT ON COLUMN FAIL_MODE.TASK_DB_ID
IS
  'FK to a corrective task definition.  Each fail mode record can have only a single corrective task definition, but that corrective task can have several sub-tasks.' ;
  COMMENT ON COLUMN FAIL_MODE.TASK_ID
IS
  'FK to a corrective task definitinon.  Each fail mode record can have only a single corrective task definition, but that corrective task can have several sub-tasks.' ;
  COMMENT ON COLUMN FAIL_MODE.FAIL_CATGRY_DB_ID
IS
  'FK to REF_FAIL_CATGRY.' ;
  COMMENT ON COLUMN FAIL_MODE.FAIL_CATGRY_CD
IS
  'FK to REF_FAIL_CATGRY.' ;
  COMMENT ON COLUMN FAIL_MODE.FAIL_PRIORITY_DB_ID
IS
  'FK to REF_FAIL_PRIORITY.' ;
  COMMENT ON COLUMN FAIL_MODE.FAIL_PRIORITY_CD
IS
  'FK to REF_FAIL_PRIORITY.' ;
  COMMENT ON COLUMN FAIL_MODE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN FAIL_MODE.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN FAIL_MODE.FAIL_TYPE_DB_ID
IS
  'FK to REF_FAIL_TYPE.' ;
  COMMENT ON COLUMN FAIL_MODE.FAIL_TYPE_CD
IS
  'FK to REF_FAIL_TYPE.' ;
  COMMENT ON COLUMN FAIL_MODE.FAIL_DEFER_DB_ID
IS
  'FK to REF_FAIL_DEFER' ;
  COMMENT ON COLUMN FAIL_MODE.FAIL_DEFER_CD
IS
  'FK to REF_FAIL_DEFER' ;
  COMMENT ON COLUMN FAIL_MODE.FAIL_SEV_DB_ID
IS
  'FK to REF_FAIL_SEV.  The failure severity of the failure mode.' ;
  COMMENT ON COLUMN FAIL_MODE.FAIL_SEV_CD
IS
  'FK to REF_FAIL_SEV.  The failure severity of the failure mode.' ;
  COMMENT ON COLUMN FAIL_MODE.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL_BOM.  The assembly for which the failure modes were defined in the baseline.' ;
  COMMENT ON COLUMN FAIL_MODE.ASSMBL_CD
IS
  'FK to EQP_ASSMBL_BOM.  The assembly for which the failure modes were defined in the baseline.' ;
  COMMENT ON COLUMN FAIL_MODE.ASSMBL_BOM_ID
IS
  'FK to EQP_ASSMBL_BOM. The assembly for which the failure modes were defined in the baseline.' ;
  COMMENT ON COLUMN FAIL_MODE.DEFER_REF_SDESC
IS
  'The deferral reference for a fault.' ;
  COMMENT ON COLUMN FAIL_MODE.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE. Used to set measure values for MTBF.' ;
  COMMENT ON COLUMN FAIL_MODE.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE. Used to set measure values for MTBF.' ;
  COMMENT ON COLUMN FAIL_MODE.FAIL_MODE_CD
IS
  'A user-entered code that helps identify the failure mode.' ;
  COMMENT ON COLUMN FAIL_MODE.FAIL_MODE_NAME
IS
  'A name used to label the failure mode.' ;
  COMMENT ON COLUMN FAIL_MODE.FAIL_MODE_LDESC
IS
  'A long description of the failure mode.' ;
  COMMENT ON COLUMN FAIL_MODE.MTBF_QT
IS
  'Mean Time Between Failure - The mean time (based on the data type) that would likely pass before the next occurrence.' ;
  COMMENT ON COLUMN FAIL_MODE.MTTR_QT
IS
  'Mean Time to Repair - The number of days that it takes on average to repair this failure.' ;
  COMMENT ON COLUMN FAIL_MODE.CALC_PRIORITY_BOOL
IS
  'Value is used to calculate the priority of a fault using an average of the priorities of all the failure mode factors.  If CALC_PRIORITY_BOOL = 1, then the FAIL_MODE.FAIL_PRIORITY value is ignored, and the priority of the raised fault will be calculated based on the failure mode factors.' ;
  COMMENT ON COLUMN FAIL_MODE.OP_RESTRICTION_LDESC
IS
  'Allows for the entering/editing of flight/operational restrictions on MEL faults when the fault is deferred.' ;
  COMMENT ON COLUMN FAIL_MODE.MANUAL_RAISE_BOOL
IS
  'Used to distinguish Fault Definitions that are meant to be raised using the Diagnostics Adapter from Fault Definitions that are meant to be raised manually using the ?Raise Fault? web page.' ;
  COMMENT ON COLUMN FAIL_MODE.OBSOLETE_BOOL
IS
  'Marks a Failure Mode obsolete.' ;
  COMMENT ON COLUMN FAIL_MODE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN FAIL_MODE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN FAIL_MODE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN FAIL_MODE.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN FAIL_MODE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPASSMBLBOM_FAILMODE ON FAIL_MODE
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC ,
      ASSMBL_BOM_ID ASC
    ) ;
  CREATE INDEX IX_TASKTASK_FAILMODE ON FAIL_MODE
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
ALTER TABLE FAIL_MODE ADD CONSTRAINT PK_FAIL_MODE PRIMARY KEY ( FAIL_MODE_DB_ID, FAIL_MODE_ID ) ;
ALTER TABLE FAIL_MODE ADD CONSTRAINT IX_FAILMODEALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE FAIL_MODE_EFFECT
  (
    FAIL_EFFECT_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_EFFECT_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_MODE_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_MODE_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_EFFECT_ORD   NUMBER (4) NOT NULL DEFERRABLE ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FAIL_MODE_EFFECT ADD CHECK ( FAIL_EFFECT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE_EFFECT ADD CHECK ( FAIL_EFFECT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE_EFFECT ADD CHECK ( FAIL_MODE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE_EFFECT ADD CHECK ( FAIL_MODE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE_EFFECT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FAIL_MODE_EFFECT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE FAIL_MODE_EFFECT
IS
  'FK to Failure Mode: A list of pre-defined failure modes can be defined at each BOM slot on an assembly. The failure mode drives corrective maintenance and reliability engineering. This is equivalent to the FMECA or MSG-3 notion of a root cause.
FK to Failure Effect: Each assembly can carry a pre-defined list of failure observations. An example would be the set of CMC messages for a Boeing Aircraft. This is the same as the FMECA or MSG-3 notion of a functional failure.' ;
  COMMENT ON COLUMN FAIL_MODE_EFFECT.FAIL_EFFECT_DB_ID
IS
  'FK to Failure Mode: A list of pre-defined failure modes can be defined at each BOM slot on an assembly. The failure mode drives corrective maintenance and reliability engineering. This is equivalent to the FMECA or MSG-3 notion of a root cause.
FK to Failure Effect: Each assembly can carry a pre-defined list of failure observations. An example would be the set of CMC messages for a Boeing Aircraft. This is the same as the FMECA or MSG-3 notion of a functional failure.' ;
  COMMENT ON COLUMN FAIL_MODE_EFFECT.FAIL_EFFECT_ID
IS
  'FK to Failure Mode: A list of pre-defined failure modes can be defined at each BOM slot on an assembly. The failure mode drives corrective maintenance and reliability engineering. This is equivalent to the FMECA or MSG-3 notion of a root cause.
FK to Failure Effect: Each assembly can carry a pre-defined list of failure observations. An example would be the set of CMC messages for a Boeing Aircraft. This is the same as the FMECA or MSG-3 notion of a functional failure.' ;
  COMMENT ON COLUMN FAIL_MODE_EFFECT.FAIL_MODE_DB_ID
IS
  'FK to Failure Mode: A list of pre-defined failure modes can be defined at each BOM slot on an assembly. The failure mode drives corrective maintenance and reliability engineering. This is equivalent to the FMECA or MSG-3 notion of a root cause.
FK to Failure Effect: Each assembly can carry a pre-defined list of failure observations. An example would be the set of CMC messages for a Boeing Aircraft. This is the same as the FMECA or MSG-3 notion of a functional failure.' ;
  COMMENT ON COLUMN FAIL_MODE_EFFECT.FAIL_MODE_ID
IS
  'FK to Failure Mode: A list of pre-defined failure modes can be defined at each BOM slot on an assembly. The failure mode drives corrective maintenance and reliability engineering. This is equivalent to the FMECA or MSG-3 notion of a root cause.
FK to Failure Effect: Each assembly can carry a pre-defined list of failure observations. An example would be the set of CMC messages for a Boeing Aircraft. This is the same as the FMECA or MSG-3 notion of a functional failure.' ;
  COMMENT ON COLUMN FAIL_MODE_EFFECT.FAIL_EFFECT_ORD
IS
  'The order in which one would expect chronologically to see or observe the effects occur when this failure mode is transpiring.
' ;
  COMMENT ON COLUMN FAIL_MODE_EFFECT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN FAIL_MODE_EFFECT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN FAIL_MODE_EFFECT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN FAIL_MODE_EFFECT.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN FAIL_MODE_EFFECT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_FAILEFFECT_FAILMODEEFFECT ON FAIL_MODE_EFFECT
    (
      FAIL_EFFECT_DB_ID ASC ,
      FAIL_EFFECT_ID ASC
    ) ;
  CREATE INDEX IX_FAILMODE_FAILMODEEFFECT ON FAIL_MODE_EFFECT
    (
      FAIL_MODE_DB_ID ASC ,
      FAIL_MODE_ID ASC
    ) ;
ALTER TABLE FAIL_MODE_EFFECT ADD CONSTRAINT PK_FAIL_MODE_EFFECT PRIMARY KEY ( FAIL_EFFECT_DB_ID, FAIL_EFFECT_ID, FAIL_MODE_DB_ID, FAIL_MODE_ID ) ;


CREATE TABLE FAIL_MODE_FACTOR
  (
    FAIL_MODE_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_MODE_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_FACTOR_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_FACTOR_CD      VARCHAR2 (8) NOT NULL DEFERRABLE ,
    FAIL_PRIORITY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_PRIORITY_CD    VARCHAR2 (8) CONSTRAINT NN_FAILMDEFCTOR_FAILPRIORITY NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FAIL_MODE_FACTOR ADD CHECK ( FAIL_MODE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE_FACTOR ADD CHECK ( FAIL_MODE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE_FACTOR ADD CHECK ( FAIL_FACTOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE_FACTOR ADD CHECK ( FAIL_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE_FACTOR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FAIL_MODE_FACTOR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE FAIL_MODE_FACTOR
IS
  'This table describes the different impacts that can occur because of a fault.  Works in conjunction with REF_FAIL_FACTOR.' ;
  COMMENT ON COLUMN FAIL_MODE_FACTOR.FAIL_MODE_DB_ID
IS
  'FK to FAIL_MODE.' ;
  COMMENT ON COLUMN FAIL_MODE_FACTOR.FAIL_MODE_ID
IS
  'FK to FAIL_MODE.' ;
  COMMENT ON COLUMN FAIL_MODE_FACTOR.FAIL_FACTOR_DB_ID
IS
  'FK to REF_FAIL_FACTOR.' ;
  COMMENT ON COLUMN FAIL_MODE_FACTOR.FAIL_FACTOR_CD
IS
  'FK to REF_FAIL_FACTOR.' ;
  COMMENT ON COLUMN FAIL_MODE_FACTOR.FAIL_PRIORITY_DB_ID
IS
  'FK to REF_FAIL_PRIORITY.' ;
  COMMENT ON COLUMN FAIL_MODE_FACTOR.FAIL_PRIORITY_CD
IS
  'FK to REF_FAIL_PRIORITY.' ;
  COMMENT ON COLUMN FAIL_MODE_FACTOR.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN FAIL_MODE_FACTOR.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN FAIL_MODE_FACTOR.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN FAIL_MODE_FACTOR.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN FAIL_MODE_FACTOR.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_FAILMODE_FAILMODEFACTOR ON FAIL_MODE_FACTOR
    (
      FAIL_MODE_DB_ID ASC ,
      FAIL_MODE_ID ASC
    ) ;
ALTER TABLE FAIL_MODE_FACTOR ADD CONSTRAINT PK_FAIL_MODE_FACTOR PRIMARY KEY ( FAIL_MODE_DB_ID, FAIL_MODE_ID, FAIL_FACTOR_DB_ID, FAIL_FACTOR_CD ) ;


CREATE TABLE FAIL_MODE_IETM
  (
    FAIL_MODE_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_MODE_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_MODE_IETM_ID NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_TOPIC_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_ORD          NUMBER (4) ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FAIL_MODE_IETM ADD CHECK ( FAIL_MODE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE_IETM ADD CHECK ( FAIL_MODE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE_IETM ADD CHECK ( FAIL_MODE_IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE_IETM ADD CHECK ( IETM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE_IETM ADD CHECK ( IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE_IETM ADD CHECK ( IETM_TOPIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE_IETM ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FAIL_MODE_IETM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE FAIL_MODE_IETM
IS
  'This table allows for multiple IETM links to be associated with a particular failure mode.' ;
  COMMENT ON COLUMN FAIL_MODE_IETM.FAIL_MODE_DB_ID
IS
  'FK to FAIL_MODE.' ;
  COMMENT ON COLUMN FAIL_MODE_IETM.FAIL_MODE_ID
IS
  'FK to FAIL_MODE.' ;
  COMMENT ON COLUMN FAIL_MODE_IETM.FAIL_MODE_IETM_ID
IS
  'Unique identifier of IETM links that reference a fail mode.' ;
  COMMENT ON COLUMN FAIL_MODE_IETM.IETM_DB_ID
IS
  'FK to IETM_IETM. IETM link for this failure mode.' ;
  COMMENT ON COLUMN FAIL_MODE_IETM.IETM_ID
IS
  'FK to IETM_IETM. IETM link for this failure mode.' ;
  COMMENT ON COLUMN FAIL_MODE_IETM.IETM_TOPIC_ID
IS
  'Unique ID (from 1 to n) within the IETM.' ;
  COMMENT ON COLUMN FAIL_MODE_IETM.IETM_ORD
IS
  'Order of IETM links in reference to a failure mode.' ;
  COMMENT ON COLUMN FAIL_MODE_IETM.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN FAIL_MODE_IETM.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN FAIL_MODE_IETM.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN FAIL_MODE_IETM.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN FAIL_MODE_IETM.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_FAILMODE_FAILMODEIETM ON FAIL_MODE_IETM
    (
      FAIL_MODE_DB_ID ASC ,
      FAIL_MODE_ID ASC
    ) ;
  CREATE INDEX IX_IETMTOPIC_FAILMODEIETM ON FAIL_MODE_IETM
    (
      IETM_DB_ID ASC ,
      IETM_ID ASC ,
      IETM_TOPIC_ID ASC
    ) ;
ALTER TABLE FAIL_MODE_IETM ADD CONSTRAINT PK_FAIL_MODE_IETM PRIMARY KEY ( FAIL_MODE_DB_ID, FAIL_MODE_ID, FAIL_MODE_IETM_ID ) ;


CREATE TABLE FAIL_MODE_SUPPRESS
  (
    FAIL_MODE_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_MODE_ID             NUMBER (10) CONSTRAINT NN_FLMDSUPPRESS_SUPRSFAMDID NOT NULL DEFERRABLE ,
    SUPPRESS_FAIL_MODE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SUPPRESS_FAIL_MODE_ID    NUMBER (10) CONSTRAINT NN_FALMDSUPRS_SUPRSID NOT NULL DEFERRABLE ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FAIL_MODE_SUPPRESS ADD CHECK ( FAIL_MODE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE_SUPPRESS ADD CHECK ( FAIL_MODE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE_SUPPRESS ADD CHECK ( SUPPRESS_FAIL_MODE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE_SUPPRESS ADD CONSTRAINT CK_FALMDSUPPRSS_SUPPRSSFAID CHECK ( SUPPRESS_FAIL_MODE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FAIL_MODE_SUPPRESS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FAIL_MODE_SUPPRESS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE FAIL_MODE_SUPPRESS
IS
  'This table is used to suppress the auto-creation of other fault definitions once the initial definition has been raised.' ;
  COMMENT ON COLUMN FAIL_MODE_SUPPRESS.FAIL_MODE_DB_ID
IS
  'FK to FAIL_MODE' ;
  COMMENT ON COLUMN FAIL_MODE_SUPPRESS.FAIL_MODE_ID
IS
  'FK to FAIL_MODE.' ;
  COMMENT ON COLUMN FAIL_MODE_SUPPRESS.SUPPRESS_FAIL_MODE_DB_ID
IS
  'FK to FAIL_MODE' ;
  COMMENT ON COLUMN FAIL_MODE_SUPPRESS.SUPPRESS_FAIL_MODE_ID
IS
  'FK to FAIL_MODE' ;
  COMMENT ON COLUMN FAIL_MODE_SUPPRESS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN FAIL_MODE_SUPPRESS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN FAIL_MODE_SUPPRESS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN FAIL_MODE_SUPPRESS.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN FAIL_MODE_SUPPRESS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_FAILMODE_FAILMODESUPPRESS ON FAIL_MODE_SUPPRESS
    (
      SUPPRESS_FAIL_MODE_DB_ID ASC ,
      SUPPRESS_FAIL_MODE_ID ASC
    ) ;
  CREATE INDEX IX_FAILMODE_FAILMODESUPPRESS2 ON FAIL_MODE_SUPPRESS
    (
      FAIL_MODE_DB_ID ASC ,
      FAIL_MODE_ID ASC
    ) ;
ALTER TABLE FAIL_MODE_SUPPRESS ADD CONSTRAINT PK_FAIL_MODE_SUPPRESS PRIMARY KEY ( FAIL_MODE_DB_ID, FAIL_MODE_ID, SUPPRESS_FAIL_MODE_DB_ID, SUPPRESS_FAIL_MODE_ID ) ;


CREATE TABLE FCT_INV_OIL
  (
    FCT_INV_OIL_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    DIM_INV_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    DIM_OIL_STATUS_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DIM_TIME_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_GDT         DATE ,
    OIL_QT FLOAT ,
    DELTA_TIME_QT FLOAT ,
    TASK_BARCODE_SDESC VARCHAR2 (80) ,
    TSN_QT FLOAT ,
    TSI_QT FLOAT ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FCT_INV_OIL ADD CHECK ( FCT_INV_OIL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FCT_INV_OIL ADD CHECK ( DIM_INV_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FCT_INV_OIL ADD CHECK ( DIM_OIL_STATUS_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FCT_INV_OIL ADD CHECK ( DIM_TIME_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FCT_INV_OIL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FCT_INV_OIL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_DIMINV_FCTINVOIL ON FCT_INV_OIL
  ( DIM_INV_ID ASC
  ) ;
CREATE INDEX IX_DIMOILSTATUS_FCTINVOIL ON FCT_INV_OIL
  (
    DIM_OIL_STATUS_ID ASC
  ) ;
CREATE INDEX IX_DIMTIME_FCTINVOIL ON FCT_INV_OIL
  ( DIM_TIME_ID ASC
  ) ;
ALTER TABLE FCT_INV_OIL ADD CONSTRAINT PK_FCT_INV_OIL PRIMARY KEY ( FCT_INV_OIL_ID ) ;


CREATE TABLE FC_MODEL
  (
    MODEL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    MODEL_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DEFAULT_BOOL    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    AUTHORITY_DB_ID NUMBER (10) ,
    AUTHORITY_ID    NUMBER (10) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FC_MODEL ADD CHECK ( MODEL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FC_MODEL ADD CHECK ( MODEL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FC_MODEL ADD CHECK ( DEFAULT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE FC_MODEL ADD CHECK ( AUTHORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FC_MODEL ADD CHECK ( AUTHORITY_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FC_MODEL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FC_MODEL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN FC_MODEL.MODEL_DB_ID
IS
  'Primary key for the forecast model.' ;
  COMMENT ON COLUMN FC_MODEL.MODEL_ID
IS
  'Primary key for the forecast model.' ;
  COMMENT ON COLUMN FC_MODEL.DESC_SDESC
IS
  'The name of the forecast model' ;
  COMMENT ON COLUMN FC_MODEL.DEFAULT_BOOL
IS
  'Boolean flag indicating that this forecast model is to be used as the default when creating new aircraft.' ;
  COMMENT ON COLUMN FC_MODEL.AUTHORITY_DB_ID
IS
  'Authority for the forecast model.' ;
  COMMENT ON COLUMN FC_MODEL.AUTHORITY_ID
IS
  'Authority for the forecast model.' ;
  COMMENT ON COLUMN FC_MODEL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN FC_MODEL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN FC_MODEL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN FC_MODEL.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN FC_MODEL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGAUTHORITY_FCMODEL ON FC_MODEL
    (
      AUTHORITY_DB_ID ASC ,
      AUTHORITY_ID ASC
    ) ;
ALTER TABLE FC_MODEL ADD CONSTRAINT PK_FC_MODEL PRIMARY KEY ( MODEL_DB_ID, MODEL_ID ) ;
ALTER TABLE FC_MODEL ADD CONSTRAINT IX_FCMODELALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE FC_RANGE
  (
    MODEL_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    MODEL_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    RANGE_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    START_MONTH    NUMBER NOT NULL DEFERRABLE ,
    START_DAY      NUMBER NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FC_RANGE ADD CHECK ( MODEL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FC_RANGE ADD CHECK ( MODEL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FC_RANGE ADD CHECK ( RANGE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FC_RANGE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FC_RANGE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN FC_RANGE.MODEL_DB_ID
IS
  'PFK - forecast model that this range applies to.' ;
  COMMENT ON COLUMN FC_RANGE.MODEL_ID
IS
  'PFK - forecast model that this range applies to.' ;
  COMMENT ON COLUMN FC_RANGE.RANGE_ID
IS
  'PK - primary key for this forecase model range.' ;
  COMMENT ON COLUMN FC_RANGE.START_MONTH
IS
  'Month number indicating the starting month for the range' ;
  COMMENT ON COLUMN FC_RANGE.START_DAY
IS
  'Day number indicating the starting day for the range.' ;
  COMMENT ON COLUMN FC_RANGE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN FC_RANGE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN FC_RANGE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN FC_RANGE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN FC_RANGE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_FCMODEL_FCRANGE ON FC_RANGE
    (
      MODEL_DB_ID ASC ,
      MODEL_ID ASC
    ) ;
ALTER TABLE FC_RANGE ADD CONSTRAINT PK_FC_RANGE PRIMARY KEY ( MODEL_DB_ID, MODEL_ID, RANGE_ID ) ;


CREATE TABLE FC_RATE
  (
    MODEL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    MODEL_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    RANGE_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    FORECAST_RATE_QT FLOAT NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FC_RATE ADD CHECK ( MODEL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FC_RATE ADD CHECK ( MODEL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FC_RATE ADD CHECK ( RANGE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FC_RATE ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FC_RATE ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FC_RATE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FC_RATE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN FC_RATE.MODEL_DB_ID
IS
  'PFK - The forecast model range that this rate applies to.' ;
  COMMENT ON COLUMN FC_RATE.MODEL_ID
IS
  'PFK - The forecast model range that this rate applies to.' ;
  COMMENT ON COLUMN FC_RATE.RANGE_ID
IS
  'PFK - The forecast model range that this rate applies to.' ;
  COMMENT ON COLUMN FC_RATE.DATA_TYPE_DB_ID
IS
  'FK - The datatype that this rate applies to.' ;
  COMMENT ON COLUMN FC_RATE.DATA_TYPE_ID
IS
  'FK - The datatype that this rate applies to.' ;
  COMMENT ON COLUMN FC_RATE.FORECAST_RATE_QT
IS
  'The forecast rate for the given data type and forecast model date range.' ;
  COMMENT ON COLUMN FC_RATE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN FC_RATE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN FC_RATE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN FC_RATE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN FC_RATE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_MDATATYPE_FCRATE ON FC_RATE
    (
      DATA_TYPE_DB_ID ASC ,
      DATA_TYPE_ID ASC
    ) ;
  CREATE INDEX IX_FCRANGE_FCRATE ON FC_RATE
    (
      MODEL_DB_ID ASC ,
      MODEL_ID ASC ,
      RANGE_ID ASC
    ) ;
ALTER TABLE FC_RATE ADD CONSTRAINT PK_FC_RATE PRIMARY KEY ( MODEL_DB_ID, MODEL_ID, RANGE_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID ) ;


CREATE TABLE FL_LEG
  (
    LEG_ID RAW (16) NOT NULL DEFERRABLE ,
    LEG_NO               VARCHAR2 (500) NOT NULL DEFERRABLE ,
    LEG_DESC             VARCHAR2 (4000) ,
    MASTER_FLIGHT_NO     VARCHAR2 (80) ,
    EXT_KEY              VARCHAR2 (80) ,
    HIST_BOOL            NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    FLIGHT_LEG_STATUS_CD VARCHAR2 (16) NOT NULL DEFERRABLE ,
    FLIGHT_REASON_CD     VARCHAR2 (8) ,
    FLIGHT_TYPE_DB_ID    NUMBER (10) ,
    FLIGHT_TYPE_CD       VARCHAR2 (8) ,
    ETOPS_BOOL           NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    AIRCRAFT_DB_ID       NUMBER (10) ,
    AIRCRAFT_ID          NUMBER (10) ,
    INV_CAPABILITY_DB_ID NUMBER (10) ,
    INV_CAPABILITY_CD    VARCHAR2 (8) ,
    LOGBOOK_REF          VARCHAR2 (80) ,
    USAGE_RECORD_ID RAW (16) ,
    DEPARTURE_LOC_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DEPARTURE_LOC_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    DEPARTURE_GATE_CD   VARCHAR2 (8) ,
    SCHED_DEPARTURE_DT  DATE ,
    ACTUAL_DEPARTURE_DT DATE ,
    OFF_DT              DATE ,
    ARRIVAL_LOC_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    ARRIVAL_LOC_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    PLAN_ASSMBL_DB_ID   NUMBER (10) ,
    PLAN_ASSMBL_CD      VARCHAR2 (8) ,
    ARRIVAL_GATE_CD     VARCHAR2 (8) ,
    SCHED_ARRIVAL_DT    DATE ,
    ACTUAL_ARRIVAL_DT   DATE NOT NULL DEFERRABLE ,
    ON_DT               DATE ,
    LEGACY_KEY          VARCHAR2 (21) ,
    RECORDED_DT         DATE NOT NULL DEFERRABLE ,
    CTRL_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_NO         NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FL_LEG ADD CHECK ( HIST_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE FL_LEG ADD CHECK ( FLIGHT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG ADD CHECK ( ETOPS_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE FL_LEG ADD CHECK ( AIRCRAFT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG ADD CHECK ( AIRCRAFT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG ADD CHECK ( INV_CAPABILITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG ADD CHECK ( DEPARTURE_LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG ADD CHECK ( DEPARTURE_LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG ADD CHECK ( ARRIVAL_LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG ADD CHECK ( ARRIVAL_LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG ADD CHECK ( PLAN_ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FL_LEG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE FL_LEG
IS
  'Entity to store flight information.' ;
  COMMENT ON COLUMN FL_LEG.LEG_ID
IS
  'Unique identifier for fl_leg entity.' ;
  COMMENT ON COLUMN FL_LEG.LEG_NO
IS
  'Represents leg number for the flight.' ;
  COMMENT ON COLUMN FL_LEG.LEG_DESC
IS
  'Detailed description of the flight.' ;
  COMMENT ON COLUMN FL_LEG.MASTER_FLIGHT_NO
IS
  'The name used to label the flight (or flight legs) under one flight plan number.' ;
  COMMENT ON COLUMN FL_LEG.EXT_KEY
IS
  'Indicates the representation of the flight in external system.' ;
  COMMENT ON COLUMN FL_LEG.HIST_BOOL
IS
  'Indicates if the flight is historic.' ;
  COMMENT ON COLUMN FL_LEG.FLIGHT_LEG_STATUS_CD
IS
  'FK to REF_FLIGHT_LEG_STATUS table.' ;
  COMMENT ON COLUMN FL_LEG.FLIGHT_REASON_CD
IS
  'FK to REF_FLIGHT_REASON' ;
  COMMENT ON COLUMN FL_LEG.FLIGHT_TYPE_DB_ID
IS
  'FK to REF_FLIGHT_TYPE' ;
  COMMENT ON COLUMN FL_LEG.FLIGHT_TYPE_CD
IS
  'FK to REF_FLIGHT_TYPE' ;
  COMMENT ON COLUMN FL_LEG.ETOPS_BOOL
IS
  'Indicates if the flight operated as per Extended-range Twin-engine Operational Performance Standards.' ;
  COMMENT ON COLUMN FL_LEG.AIRCRAFT_DB_ID
IS
  'FK to INV_AC_REG.  Indicates the aircraft for the fllight.' ;
  COMMENT ON COLUMN FL_LEG.AIRCRAFT_ID
IS
  'FK to INV_AC_REG.  Indicates the aircraft for the fllight.' ;
  COMMENT ON COLUMN FL_LEG.INV_CAPABILITY_DB_ID
IS
  'FK to REF_INV_CAPABILITY' ;
  COMMENT ON COLUMN FL_LEG.INV_CAPABILITY_CD
IS
  'FK to REF_INV_CAPABILITY' ;
  COMMENT ON COLUMN FL_LEG.LOGBOOK_REF
IS
  'External document reference.' ;
  COMMENT ON COLUMN FL_LEG.USAGE_RECORD_ID
IS
  'FK to USG_USAGE_RECORD table.  Indicates usage accrued during flight.' ;
  COMMENT ON COLUMN FL_LEG.DEPARTURE_LOC_DB_ID
IS
  'FK to inv_loc table.  Indicates departure location of the flight.' ;
  COMMENT ON COLUMN FL_LEG.DEPARTURE_LOC_ID
IS
  'FK to inv_loc table.  Indicates departure location of the flight.' ;
  COMMENT ON COLUMN FL_LEG.DEPARTURE_GATE_CD
IS
  'Indicates departure gate number.' ;
  COMMENT ON COLUMN FL_LEG.SCHED_DEPARTURE_DT
IS
  'Scheduled departure date of the flight.' ;
  COMMENT ON COLUMN FL_LEG.ACTUAL_DEPARTURE_DT
IS
  'Actual departure date of the flight.' ;
  COMMENT ON COLUMN FL_LEG.OFF_DT
IS
  'Date and time of take-off.' ;
  COMMENT ON COLUMN FL_LEG.ARRIVAL_LOC_DB_ID
IS
  'FK to INV_LOC.  Indicates arrival location of the flight.' ;
  COMMENT ON COLUMN FL_LEG.ARRIVAL_LOC_ID
IS
  'FK to INV_LOC.  Indicates arrival location of the flight.' ;
  COMMENT ON COLUMN FL_LEG.PLAN_ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL.  Whenever an aircraft is assigned to a flight, the FL_LEG.PLAN_ASSMBL columns will be filled in .  If the PLAN_ASSMBL columns are already filled in (ie. a message has been sent to set the aircraft type), Maintenix will not validate to make sure that the assigned aircraft is of the correct type.' ;
  COMMENT ON COLUMN FL_LEG.PLAN_ASSMBL_CD
IS
  'FK to EQP_ASSMBL.  Whenever an aircraft is assigned to a flight, the FL_LEG.PLAN_ASSMBL columns will be filled in .  If the PLAN_ASSMBL columns are already filled in (ie. a message has been sent to set the aircraft type), Maintenix will not validate to make sure that the assigned aircraft is of the correct type.' ;
  COMMENT ON COLUMN FL_LEG.ARRIVAL_GATE_CD
IS
  'Indicates arrival gate number of the flight.' ;
  COMMENT ON COLUMN FL_LEG.SCHED_ARRIVAL_DT
IS
  'Indicates scheduled arrival date of the flight.' ;
  COMMENT ON COLUMN FL_LEG.ACTUAL_ARRIVAL_DT
IS
  'Indicates actual arrival date of the flight.' ;
  COMMENT ON COLUMN FL_LEG.ON_DT
IS
  'Indicates date and time of landing of the flight.' ;
  COMMENT ON COLUMN FL_LEG.LEGACY_KEY
IS
  'Indicates the representation of the entity in the old data model.  Used only for reference purposes.' ;
  COMMENT ON COLUMN FL_LEG.RECORDED_DT
IS
  'This column contains the date the flight leg was recorded' ;
  COMMENT ON COLUMN FL_LEG.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN FL_LEG.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN FL_LEG.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN FL_LEG.RSTAT_CD
IS
  'The status of the record.' ;
  COMMENT ON COLUMN FL_LEG.CREATION_DT
IS
  'The data and time at which the record was inserted.' ;
  COMMENT ON COLUMN FL_LEG.REVISION_DT
IS
  'The data and time at which the record was updated.' ;
  COMMENT ON COLUMN FL_LEG.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN FL_LEG.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_FL_LEG ON FL_LEG
    (
      LEG_NO ASC ,
      AIRCRAFT_ID ASC ,
      AIRCRAFT_DB_ID ASC ,
      DEPARTURE_LOC_ID ASC ,
      DEPARTURE_LOC_DB_ID ASC ,
      ACTUAL_DEPARTURE_DT ASC
    ) ;
  CREATE INDEX IX_FL_LEG_REFFLSTATUS_FK ON FL_LEG
    ( FLIGHT_LEG_STATUS_CD ASC
    ) ;
  CREATE INDEX IX_FL_LEG_FLLEGREASON_FK ON FL_LEG
    ( FLIGHT_REASON_CD ASC
    ) ;
  CREATE INDEX IX_FL_LEG_REFFLTYPE_FK ON FL_LEG
    (
      FLIGHT_TYPE_DB_ID ASC ,
      FLIGHT_TYPE_CD ASC
    ) ;
  CREATE INDEX IX_FL_LEG_REFINVCAP_FK ON FL_LEG
    (
      INV_CAPABILITY_DB_ID ASC ,
      INV_CAPABILITY_CD ASC
    ) ;
  CREATE INDEX IX_FL_LEG_MIMDB_FK ON FL_LEG
    ( CTRL_DB_ID ASC
    ) ;
  CREATE INDEX IX_EQPASSMBL_FLLEG ON FL_LEG
    (
      PLAN_ASSMBL_DB_ID ASC ,
      PLAN_ASSMBL_CD ASC
    ) ;
  CREATE INDEX IX_INVACREG_FLLEG ON FL_LEG
    (
      AIRCRAFT_DB_ID ASC ,
      AIRCRAFT_ID ASC
    ) ;
  CREATE INDEX IX_DEPINVLOC_FLLEG ON FL_LEG
    (
      DEPARTURE_LOC_DB_ID ASC ,
      DEPARTURE_LOC_ID ASC
    ) ;
  CREATE INDEX IX_ARRINVLOC_FLLEG ON FL_LEG
    (
      ARRIVAL_LOC_DB_ID ASC ,
      ARRIVAL_LOC_ID ASC
    ) ;
  CREATE INDEX IX_USGUSREC_FLLEG ON FL_LEG
    ( USAGE_RECORD_ID ASC
    ) ;
ALTER TABLE FL_LEG ADD CONSTRAINT PK_FL_LEG PRIMARY KEY ( LEG_ID ) ;
ALTER TABLE FL_LEG ADD CONSTRAINT IX_FLLEGEXTKEY_UNQ UNIQUE ( EXT_KEY ) ;


CREATE TABLE FL_LEG_DISRUPT
  (
    LEG_DISRUPT_ID RAW (16) NOT NULL DEFERRABLE ,
    LEG_ID RAW (16) NOT NULL DEFERRABLE ,
    EXT_REF            VARCHAR2 (80) ,
    FLIGHT_STAGE_DB_ID NUMBER (10) ,
    FLIGHT_STAGE_CD    VARCHAR2 (8) ,
    SCHED_DB_ID        NUMBER (10) ,
    SCHED_ID           NUMBER (10) ,
    DELAY_CODE_DB_ID   NUMBER (10) ,
    DELAY_CODE_CD      VARCHAR2 (8) ,
    MAINT_DELAY_TIME_QT FLOAT ,
    TECH_DELAY_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    DISRUPTION_DESC VARCHAR2 (80) ,
    DISRUPTION_NOTE VARCHAR2 (4000) ,
    LEGACY_KEY      VARCHAR2 (21) ,
    CTRL_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_NO     NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FL_LEG_DISRUPT ADD CHECK ( FLIGHT_STAGE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_DISRUPT ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_DISRUPT ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_DISRUPT ADD CHECK ( DELAY_CODE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_DISRUPT ADD CHECK ( TECH_DELAY_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE FL_LEG_DISRUPT ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_DISRUPT ADD CHECK ( REVISION_NO BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_DISRUPT ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_DISRUPT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FL_LEG_DISRUPT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE FL_LEG_DISRUPT
IS
  'Historic records of flight disruptions. These records are entered by the users.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.LEG_DISRUPT_ID
IS
  'Unique Id for FL_LEG_DISRUPT table.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.LEG_ID
IS
  'FK to FL_LEG table.  Indicates the flight leg for which the disruption is created.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.EXT_REF
IS
  'External reference for the flight leg disruption.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.FLIGHT_STAGE_DB_ID
IS
  'FK to REF_FLIGHT_STAGE.  Indicates the flight stage when the disruption occured.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.FLIGHT_STAGE_CD
IS
  'FK to REF_FLIGHT_STAGE.  Indicates the flight stage when the disruption occured.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.SCHED_DB_ID
IS
  'FK to SCHED_STASK table.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.SCHED_ID
IS
  'FK to SCHED_STASK table.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.DELAY_CODE_DB_ID
IS
  'FK to REF_DELAY_CODE' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.DELAY_CODE_CD
IS
  'FK to REF_DELAY_CODE' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.MAINT_DELAY_TIME_QT
IS
  'Maintenance delay time for the flight (in minutes).' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.TECH_DELAY_BOOL
IS
  'This boolean indicates if the flight disruption is a technical delay.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.DISRUPTION_DESC
IS
  'Description of the flight disruption.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.DISRUPTION_NOTE
IS
  'Detailed note on the flight leg disruption.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.LEGACY_KEY
IS
  'Indicates the representation of the entity in the old data model.  Used only for reference purposes.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.RSTAT_CD
IS
  'The status of the record.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.CREATION_DT
IS
  'The data and time at which the record was inserted.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.REVISION_DT
IS
  'The data and time at which the record was updated.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_FL_LEG_DIS_REFFLSTG_FK ON FL_LEG_DISRUPT
    (
      FLIGHT_STAGE_DB_ID ASC ,
      FLIGHT_STAGE_CD ASC
    ) ;
  CREATE INDEX IX_FL_LEG_DIS_REFDELCD_FK ON FL_LEG_DISRUPT
    (
      DELAY_CODE_DB_ID ASC ,
      DELAY_CODE_CD ASC
    ) ;
  CREATE INDEX IX_FLLEGDISRUPT_NK ON FL_LEG_DISRUPT
    (
      LEG_ID ASC ,
      DELAY_CODE_CD ASC ,
      DELAY_CODE_DB_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDSTASK_FLLEGDIS ON FL_LEG_DISRUPT
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_FLLEG_FLLEGDISRUPT ON FL_LEG_DISRUPT
    ( LEG_ID ASC
    ) ;
ALTER TABLE FL_LEG_DISRUPT ADD CONSTRAINT PK_FL_LEG_DISRUPT PRIMARY KEY ( LEG_DISRUPT_ID ) ;


CREATE TABLE FL_LEG_DISRUPT_TYPE
  (
    LEG_DISRUPT_TYPE_ID RAW (16) NOT NULL DEFERRABLE ,
    LEG_DISRUPT_ID RAW (16) NOT NULL DEFERRABLE ,
    DISRUPT_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DISRUPT_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    LEGACY_KEY         VARCHAR2 (41) ,
    CTRL_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_NO        NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FL_LEG_DISRUPT_TYPE ADD CHECK ( DISRUPT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_DISRUPT_TYPE ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_DISRUPT_TYPE ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_DISRUPT_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FL_LEG_DISRUPT_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE FL_LEG_DISRUPT_TYPE
IS
  'This table maps flight disruptions to flight disruption types. A flight disruption may map to several types.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT_TYPE.LEG_DISRUPT_TYPE_ID
IS
  'Unique Id for FL_LEG_DISRUPT_TYPE table.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT_TYPE.LEG_DISRUPT_ID
IS
  'FK to FL_LEG_DISRUPT.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT_TYPE.DISRUPT_TYPE_DB_ID
IS
  'FK to REF_DISRUPT_TYPE' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT_TYPE.DISRUPT_TYPE_CD
IS
  'FK to REF_DISRUPT_TYPE' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT_TYPE.LEGACY_KEY
IS
  'Indicates the representation of the entity in the old data model.  Used only for reference purposes.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT_TYPE.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT_TYPE.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT_TYPE.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT_TYPE.RSTAT_CD
IS
  'The status of the record.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT_TYPE.CREATION_DT
IS
  'The data and time at which the record was inserted.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT_TYPE.REVISION_DT
IS
  'The data and time at which the record was updated.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT_TYPE.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN FL_LEG_DISRUPT_TYPE.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_FLLEGDISTYPE_REFDISTYP_FK ON FL_LEG_DISRUPT_TYPE
    (
      DISRUPT_TYPE_DB_ID ASC ,
      DISRUPT_TYPE_CD ASC
    ) ;
  CREATE INDEX IX_FLLEGDISTYPE_MIMDB_FK ON FL_LEG_DISRUPT_TYPE
    (
      CTRL_DB_ID ASC
    ) ;
CREATE UNIQUE INDEX IX_FLLEGDISRUPTTYPE_NK ON FL_LEG_DISRUPT_TYPE
  (
    LEG_DISRUPT_ID ASC , DISRUPT_TYPE_CD ASC , DISRUPT_TYPE_DB_ID ASC
  )
  ;
  CREATE INDEX IX_FLLEGDIS_FLLEGDISTYP ON FL_LEG_DISRUPT_TYPE
    (
      LEG_DISRUPT_ID ASC
    ) ;
ALTER TABLE FL_LEG_DISRUPT_TYPE ADD CONSTRAINT PK_FL_LEG_DISRUPT_TYPE PRIMARY KEY ( LEG_DISRUPT_TYPE_ID ) ;


CREATE TABLE FL_LEG_FAIL_EFFECT
  (
    LEG_FAIL_EFFECT_ID RAW (16) NOT NULL DEFERRABLE ,
    LEG_ID RAW (16) NOT NULL DEFERRABLE ,
    FAIL_EFFECT_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_EFFECT_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    FAIL_EFFECT_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_EFFECT_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    EFFECT_DT              DATE NOT NULL DEFERRABLE ,
    EFFECT_DESC            VARCHAR2 (80) ,
    FLIGHT_STAGE_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    FLIGHT_STAGE_CD        VARCHAR2 (8) NOT NULL DEFERRABLE ,
    LEGACY_KEY             VARCHAR2 (32) ,
    CTRL_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_NO            NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FL_LEG_FAIL_EFFECT ADD CHECK ( FAIL_EFFECT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_FAIL_EFFECT ADD CHECK ( FAIL_EFFECT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_FAIL_EFFECT ADD CHECK ( FAIL_EFFECT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_FAIL_EFFECT ADD CHECK ( FLIGHT_STAGE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_FAIL_EFFECT ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_FAIL_EFFECT ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_FAIL_EFFECT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FL_LEG_FAIL_EFFECT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN FL_LEG_FAIL_EFFECT.LEG_FAIL_EFFECT_ID
IS
  'Unique id for FL_LEG_FAIL_EFFECT.' ;
  COMMENT ON COLUMN FL_LEG_FAIL_EFFECT.LEG_ID
IS
  'FK to FL_LEG table.' ;
  COMMENT ON COLUMN FL_LEG_FAIL_EFFECT.FAIL_EFFECT_TYPE_DB_ID
IS
  'FK to REF_FAIL_EFFECT_TYPE.' ;
  COMMENT ON COLUMN FL_LEG_FAIL_EFFECT.FAIL_EFFECT_TYPE_CD
IS
  'FK to REF_FAIL_EFFECT_TYPE.' ;
  COMMENT ON COLUMN FL_LEG_FAIL_EFFECT.FAIL_EFFECT_DB_ID
IS
  'FK to FAIL_EFFECT.' ;
  COMMENT ON COLUMN FL_LEG_FAIL_EFFECT.FAIL_EFFECT_ID
IS
  'FK to FAIL_EFFECT.' ;
  COMMENT ON COLUMN FL_LEG_FAIL_EFFECT.EFFECT_DT
IS
  'The local date/time when the effect occurred.' ;
  COMMENT ON COLUMN FL_LEG_FAIL_EFFECT.EFFECT_DESC
IS
  'Description of the failure effect.' ;
  COMMENT ON COLUMN FL_LEG_FAIL_EFFECT.FLIGHT_STAGE_DB_ID
IS
  'FK to REF_FLIGHT_STAGE.' ;
  COMMENT ON COLUMN FL_LEG_FAIL_EFFECT.FLIGHT_STAGE_CD
IS
  'FK to REF_FLIGHT_STAGE.' ;
  COMMENT ON COLUMN FL_LEG_FAIL_EFFECT.LEGACY_KEY
IS
  'Indicates the representation of the entity in the old data model.  Used only for reference purposes.' ;
  COMMENT ON COLUMN FL_LEG_FAIL_EFFECT.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN FL_LEG_FAIL_EFFECT.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN FL_LEG_FAIL_EFFECT.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN FL_LEG_FAIL_EFFECT.RSTAT_CD
IS
  'The status of the record.' ;
  COMMENT ON COLUMN FL_LEG_FAIL_EFFECT.CREATION_DT
IS
  'The data and time at which the record was inserted.' ;
  COMMENT ON COLUMN FL_LEG_FAIL_EFFECT.REVISION_DT
IS
  'The data and time at which the record was updated.' ;
  COMMENT ON COLUMN FL_LEG_FAIL_EFFECT.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN FL_LEG_FAIL_EFFECT.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_FLLEGFAILEFF_REFFAILETYP_FK ON FL_LEG_FAIL_EFFECT
    (
      FAIL_EFFECT_TYPE_DB_ID ASC ,
      FAIL_EFFECT_TYPE_CD ASC
    ) ;
  CREATE INDEX IX_FLLEGFAILEFF_REFFLSTG_FK ON FL_LEG_FAIL_EFFECT
    (
      FLIGHT_STAGE_DB_ID ASC ,
      FLIGHT_STAGE_CD ASC
    ) ;
  CREATE INDEX IX_FLLEGFAILEFF_MIMDB_FK ON FL_LEG_FAIL_EFFECT
    (
      CTRL_DB_ID ASC
    ) ;
  CREATE INDEX IX_FLLEGFAILEFFECT_NK ON FL_LEG_FAIL_EFFECT
    (
      LEG_ID ASC ,
      FAIL_EFFECT_TYPE_CD ASC ,
      FAIL_EFFECT_TYPE_DB_ID ASC ,
      FAIL_EFFECT_ID ASC ,
      FAIL_EFFECT_DB_ID ASC ,
      EFFECT_DT ASC
    ) ;
  CREATE INDEX IX_FLEFFECT_FLLEGFLEFF ON FL_LEG_FAIL_EFFECT
    (
      FAIL_EFFECT_DB_ID ASC ,
      FAIL_EFFECT_ID ASC
    ) ;
  CREATE INDEX IX_FLLEG_FLLEGFAILEFF ON FL_LEG_FAIL_EFFECT
    ( LEG_ID ASC
    ) ;
ALTER TABLE FL_LEG_FAIL_EFFECT ADD CONSTRAINT PK_FL_LEG_FAIL_EFFECT PRIMARY KEY ( LEG_FAIL_EFFECT_ID ) ;


CREATE TABLE FL_LEG_MEASUREMENT
  (
    LEG_MEASUREMENT_ID RAW (16) NOT NULL DEFERRABLE ,
    LEG_ID RAW (16) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_ORD         NUMBER (4) NOT NULL DEFERRABLE ,
    DATA_VALUE_DB_ID NUMBER (10) ,
    DATA_VALUE_CD    VARCHAR2 (8) ,
    DATA_QT FLOAT ,
    DATA_DT        DATE ,
    DATA_TEXT      VARCHAR2 (4000) ,
    DATA_BOOL      NUMBER (1) DEFAULT 0 ,
    LEGACY_KEY     VARCHAR2 (76) ,
    CTRL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_NO    NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FL_LEG_MEASUREMENT ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_MEASUREMENT ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_MEASUREMENT ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_MEASUREMENT ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_MEASUREMENT ADD CHECK ( DATA_VALUE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_MEASUREMENT ADD CHECK ( DATA_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE FL_LEG_MEASUREMENT ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_MEASUREMENT ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_MEASUREMENT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FL_LEG_MEASUREMENT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE FL_LEG_MEASUREMENT
IS
  'Entity to store flight measurements.' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.LEG_MEASUREMENT_ID
IS
  'Unique id for FL_LEG_MEASUREMENT table.' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.LEG_ID
IS
  'FK to FL_LEG table.  Flight leg for which the measurements are applicable.' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.INV_NO_DB_ID
IS
  'FK to INV_INV table.' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.INV_NO_ID
IS
  'FK to INV_INV table.' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE table.' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE table.' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.DATA_ORD
IS
  'Numerical order of the measurement.' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.DATA_VALUE_DB_ID
IS
  'FK to REF_DATA_VALUE table.' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.DATA_VALUE_CD
IS
  'FK to REF_DATA_VALUE table.' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.DATA_QT
IS
  'Measurement quantity.' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.DATA_DT
IS
  'Date of measurement.' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.DATA_TEXT
IS
  'Attribute to store value of text based measurements. (free form text)' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.LEGACY_KEY
IS
  'Indicates the representation of the entity in the old data model.  Used only for reference purposes.' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.RSTAT_CD
IS
  'The status of the record.' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.CREATION_DT
IS
  'The data and time at which the record was inserted.' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.REVISION_DT
IS
  'The data and time at which the record was updated.' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN FL_LEG_MEASUREMENT.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_FLLEGMEAS_MIMDATTYP_FK ON FL_LEG_MEASUREMENT
    (
      DATA_TYPE_DB_ID ASC ,
      DATA_TYPE_ID ASC
    ) ;
  CREATE INDEX IX_FLLEGMEAS_REFDATVAL_FK ON FL_LEG_MEASUREMENT
    (
      DATA_VALUE_DB_ID ASC ,
      DATA_VALUE_CD ASC
    ) ;
  CREATE INDEX IX_FLLEGMEAS_MIMDB_FK ON FL_LEG_MEASUREMENT
    ( CTRL_DB_ID ASC
    ) ;
CREATE UNIQUE INDEX IX_FLLEGMEASUREMENT_NK ON FL_LEG_MEASUREMENT
  (
    LEG_ID ASC , INV_NO_ID ASC , INV_NO_DB_ID ASC , DATA_TYPE_ID ASC , DATA_TYPE_DB_ID ASC
  )
  ;
  CREATE INDEX IX_INVINV_FLLEGMEAS ON FL_LEG_MEASUREMENT
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_FLLEG_FLLEGMEAS ON FL_LEG_MEASUREMENT
    ( LEG_ID ASC
    ) ;
ALTER TABLE FL_LEG_MEASUREMENT ADD CONSTRAINT PK_FL_LEG_MEASUREMENT PRIMARY KEY ( LEG_MEASUREMENT_ID ) ;


CREATE TABLE FL_LEG_NOTE
  (
    FLIGHT_NOTE_ID RAW (16) NOT NULL DEFERRABLE ,
    LEG_ID RAW (16) NOT NULL DEFERRABLE ,
    ENTRY_DT       DATE NOT NULL DEFERRABLE ,
    ENTRY_ORD      NUMBER (10) NOT NULL DEFERRABLE ,
    SYSTEM_BOOL    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    HR_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    ENTRY_NOTE     VARCHAR2 (4000) ,
    CTRL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    LEGACY_KEY     VARCHAR2 (32) ,
    REVISION_NO    NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FL_LEG_NOTE ADD CHECK ( SYSTEM_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE FL_LEG_NOTE ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_NOTE ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_NOTE ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_NOTE ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_NOTE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FL_LEG_NOTE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE FL_LEG_NOTE
IS
  'Historic notes recorded when a change to a flight leg record occurs. These notes may be created by the system or they may be entered by the users.' ;
  COMMENT ON COLUMN FL_LEG_NOTE.FLIGHT_NOTE_ID
IS
  'Unique identifier for flight note.' ;
  COMMENT ON COLUMN FL_LEG_NOTE.LEG_ID
IS
  'FK to FL_LEG.  Indicates the flight leg for which the note was logged.' ;
  COMMENT ON COLUMN FL_LEG_NOTE.ENTRY_DT
IS
  'Date when the note was made.' ;
  COMMENT ON COLUMN FL_LEG_NOTE.ENTRY_ORD
IS
  'Order of the note in chronological order.' ;
  COMMENT ON COLUMN FL_LEG_NOTE.SYSTEM_BOOL
IS
  'Indicates if the note was created by the system.' ;
  COMMENT ON COLUMN FL_LEG_NOTE.HR_DB_ID
IS
  'FK to ORG_HR table.  Indicates the HR who logged the note.' ;
  COMMENT ON COLUMN FL_LEG_NOTE.HR_ID
IS
  'FK to ORG_HR table.  Indicates the HR who logged the note.' ;
  COMMENT ON COLUMN FL_LEG_NOTE.ENTRY_NOTE
IS
  'Indicates the note that was made.' ;
  COMMENT ON COLUMN FL_LEG_NOTE.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN FL_LEG_NOTE.LEGACY_KEY
IS
  'Indicates the representation of the entity in the old data model.  Used only for reference purposes.' ;
  COMMENT ON COLUMN FL_LEG_NOTE.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN FL_LEG_NOTE.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN FL_LEG_NOTE.RSTAT_CD
IS
  'The status of the record.' ;
  COMMENT ON COLUMN FL_LEG_NOTE.CREATION_DT
IS
  'The data and time at which the record was inserted.' ;
  COMMENT ON COLUMN FL_LEG_NOTE.REVISION_DT
IS
  'The data and time at which the record was updated.' ;
  COMMENT ON COLUMN FL_LEG_NOTE.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN FL_LEG_NOTE.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_FLLEGNOTE_MIMDB_FK ON FL_LEG_NOTE
    ( CTRL_DB_ID ASC
    ) ;
CREATE UNIQUE INDEX IX_FLLEGNOTE_NK ON FL_LEG_NOTE
  (
    LEG_ID ASC , ENTRY_DT ASC , ENTRY_ORD ASC , SYSTEM_BOOL ASC
  )
  ;
  CREATE INDEX IX_ORGHR_FLLEGNOTE ON FL_LEG_NOTE
    ( HR_DB_ID ASC , HR_ID ASC
    ) ;
  CREATE INDEX IX_FLLEG_FLLEGNOTE ON FL_LEG_NOTE
    ( LEG_ID ASC
    ) ;
ALTER TABLE FL_LEG_NOTE ADD CONSTRAINT PK_FL_LEG_NOTE PRIMARY KEY ( FLIGHT_NOTE_ID ) ;


CREATE TABLE FL_LEG_STATUS_LOG
  (
    LEG_STATUS_LOG_ID RAW (16) NOT NULL DEFERRABLE ,
    LEG_ID RAW (16) NOT NULL DEFERRABLE ,
    LOG_DT               DATE NOT NULL DEFERRABLE ,
    FLIGHT_LEG_STATUS_CD VARCHAR2 (16) NOT NULL DEFERRABLE ,
    SYSTEM_BOOL          NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    HR_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    USER_NOTE_ID RAW (16) ,
    SYSTEM_NOTE_ID RAW (16) ,
    LEGACY_KEY     VARCHAR2 (32) ,
    CTRL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_NO    NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FL_LEG_STATUS_LOG ADD CHECK ( SYSTEM_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE FL_LEG_STATUS_LOG ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_STATUS_LOG ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_STATUS_LOG ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_STATUS_LOG ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FL_LEG_STATUS_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FL_LEG_STATUS_LOG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE FL_LEG_STATUS_LOG
IS
  'Log entries that record changes in flight status. These records are created by the system.' ;
  COMMENT ON COLUMN FL_LEG_STATUS_LOG.LEG_STATUS_LOG_ID
IS
  'Unique id for FL_LEG_STATUS_LOG table.' ;
  COMMENT ON COLUMN FL_LEG_STATUS_LOG.LEG_ID
IS
  'FK to FL_LEG table.' ;
  COMMENT ON COLUMN FL_LEG_STATUS_LOG.LOG_DT
IS
  'Date of status change.' ;
  COMMENT ON COLUMN FL_LEG_STATUS_LOG.FLIGHT_LEG_STATUS_CD
IS
  'FK to REF_FLIGHT_STATUS table.' ;
  COMMENT ON COLUMN FL_LEG_STATUS_LOG.SYSTEM_BOOL
IS
  'Indicates if this status change was logged by the system.' ;
  COMMENT ON COLUMN FL_LEG_STATUS_LOG.HR_DB_ID
IS
  'FK to ORG_HR table.   Indicates the HR who initiated the transaction that changed the flight leg status.' ;
  COMMENT ON COLUMN FL_LEG_STATUS_LOG.HR_ID
IS
  'FK to ORG_HR table.  Indicates the HR who initiated the transaction that changed the flight leg status.' ;
  COMMENT ON COLUMN FL_LEG_STATUS_LOG.USER_NOTE_ID
IS
  'FK to FL_LEG_NOTE table.' ;
  COMMENT ON COLUMN FL_LEG_STATUS_LOG.SYSTEM_NOTE_ID
IS
  'FK to FL_LEG_NOTE table.' ;
  COMMENT ON COLUMN FL_LEG_STATUS_LOG.LEGACY_KEY
IS
  'Indicates the representation of the entity in the old data model.  Used only for reference purposes.' ;
  COMMENT ON COLUMN FL_LEG_STATUS_LOG.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN FL_LEG_STATUS_LOG.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN FL_LEG_STATUS_LOG.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN FL_LEG_STATUS_LOG.RSTAT_CD
IS
  'The status of the record.' ;
  COMMENT ON COLUMN FL_LEG_STATUS_LOG.CREATION_DT
IS
  'The data and time at which the record was inserted.' ;
  COMMENT ON COLUMN FL_LEG_STATUS_LOG.REVISION_DT
IS
  'The data and time at which the record was updated.' ;
  COMMENT ON COLUMN FL_LEG_STATUS_LOG.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN FL_LEG_STATUS_LOG.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_FLLEGSTAT_REFFLLEGSTAT_FK ON FL_LEG_STATUS_LOG
    (
      FLIGHT_LEG_STATUS_CD ASC
    ) ;
  CREATE INDEX IX_FLLEGSTAT_MIMDB_FK ON FL_LEG_STATUS_LOG
    ( CTRL_DB_ID ASC
    ) ;
  CREATE INDEX IX_FLLEGSTATUSLOG_NK ON FL_LEG_STATUS_LOG
    (
      LEG_ID ASC ,
      LOG_DT DESC ,
      FLIGHT_LEG_STATUS_CD ASC ,
      SYSTEM_BOOL ASC
    ) ;
  CREATE INDEX IX_ORGHR_FLLEGSTATLOG ON FL_LEG_STATUS_LOG
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
  CREATE INDEX IX_FLLEG_FLLEGSTATLOG ON FL_LEG_STATUS_LOG
    ( LEG_ID ASC
    ) ;
  CREATE INDEX IX_USRFLLEGNOTE_FLLEGSTALOG ON FL_LEG_STATUS_LOG
    (
      USER_NOTE_ID ASC
    ) ;
  CREATE INDEX IX_SYSFLLEGNOTE_FLLEGSTALOG ON FL_LEG_STATUS_LOG
    (
      SYSTEM_NOTE_ID ASC
    ) ;
ALTER TABLE FL_LEG_STATUS_LOG ADD CONSTRAINT PK_FL_LEG_STATUS_LOG PRIMARY KEY ( LEG_STATUS_LOG_ID ) ;


CREATE TABLE FL_REQUIREMENT
  (
    FL_LEG_ID RAW (16) NOT NULL ,
    CAP_DB_ID   NUMBER (10) NOT NULL ,
    CAP_CD      VARCHAR2 (8) NOT NULL ,
    LEVEL_DB_ID NUMBER (10) NOT NULL ,
    LEVEL_CD    VARCHAR2 (8) NOT NULL ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE FL_REQUIREMENT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE FL_REQUIREMENT ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE FL_REQUIREMENT ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE FL_REQUIREMENT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON COLUMN FL_REQUIREMENT.FL_LEG_ID
IS
  'FK to FL_LEG table.  Flight leg for which the requirements are applicable.' ;
  COMMENT ON COLUMN FL_REQUIREMENT.CAP_DB_ID
IS
  'Capability Id' ;
  COMMENT ON COLUMN FL_REQUIREMENT.CAP_CD
IS
  'Capability Code' ;
  COMMENT ON COLUMN FL_REQUIREMENT.LEVEL_DB_ID
IS
  'Capability Level DB Id' ;
  COMMENT ON COLUMN FL_REQUIREMENT.LEVEL_CD
IS
  'Capability Level Code' ;
  COMMENT ON COLUMN FL_REQUIREMENT.ALT_ID
IS
  'Unique id for FL_REQ table.' ;
  COMMENT ON COLUMN FL_REQUIREMENT.RSTAT_CD
IS
  'The status of the record.' ;
  COMMENT ON COLUMN FL_REQUIREMENT.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN FL_REQUIREMENT.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN FL_REQUIREMENT.CREATION_DT
IS
  'The data and time at which the record was inserted.' ;
  COMMENT ON COLUMN FL_REQUIREMENT.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN FL_REQUIREMENT.REVISION_DT
IS
  'The data and time at which the record was updated.' ;
  COMMENT ON COLUMN FL_REQUIREMENT.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN FL_REQUIREMENT.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
ALTER TABLE FL_REQUIREMENT ADD CONSTRAINT PK_FL_REQ PRIMARY KEY ( FL_LEG_ID, CAP_CD, CAP_DB_ID, LEVEL_CD, LEVEL_DB_ID ) ;
ALTER TABLE FL_REQUIREMENT ADD CONSTRAINT IX_FLREQUIREMENTALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE FNC_ACCOUNT
  (
    ACCOUNT_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ACCOUNT_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    NH_ACCOUNT_DB_ID   NUMBER (10) ,
    NH_ACCOUNT_ID      NUMBER (10) ,
    ACCOUNT_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ACCOUNT_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ACCOUNT_CD         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    ACCOUNT_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    ACCOUNT_LDESC      VARCHAR2 (4000) ,
    TCODE_DB_ID        NUMBER (10) ,
    TCODE_ID           NUMBER (10) ,
    DEFAULT_BOOL       NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CLOSED_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    EXT_KEY_SDESC      VARCHAR2 (80) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FNC_ACCOUNT ADD CHECK ( ACCOUNT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_ACCOUNT ADD CHECK ( ACCOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_ACCOUNT ADD CHECK ( NH_ACCOUNT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_ACCOUNT ADD CHECK ( NH_ACCOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_ACCOUNT ADD CHECK ( ACCOUNT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_ACCOUNT ADD CHECK ( TCODE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_ACCOUNT ADD CHECK ( TCODE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_ACCOUNT ADD CHECK ( DEFAULT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE FNC_ACCOUNT ADD CHECK ( CLOSED_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE FNC_ACCOUNT ADD CHECK ( RSTAT_CD     IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FNC_ACCOUNT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE FNC_ACCOUNT
IS
  'This table is used to store the details of a financial account. These accounts are used to report on the financial activities that are occurring in Maintenix.' ;
  COMMENT ON COLUMN FNC_ACCOUNT.ACCOUNT_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN FNC_ACCOUNT.ACCOUNT_ID
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN FNC_ACCOUNT.NH_ACCOUNT_DB_ID
IS
  'FK FNC_ACCOUNT.  Gives ability to setup a hierarchy of account codes.' ;
  COMMENT ON COLUMN FNC_ACCOUNT.NH_ACCOUNT_ID
IS
  'FK FNC_ACCOUNT.  Gives ability to setup a hierarchy of account codes.' ;
  COMMENT ON COLUMN FNC_ACCOUNT.ACCOUNT_TYPE_DB_ID
IS
  'FK REF_ACCOUNT_TYPE.  ' ;
  COMMENT ON COLUMN FNC_ACCOUNT.ACCOUNT_TYPE_CD
IS
  'FK REF_ACCOUNT_TYPE.  ' ;
  COMMENT ON COLUMN FNC_ACCOUNT.ACCOUNT_CD
IS
  'The identifying code for the account.' ;
  COMMENT ON COLUMN FNC_ACCOUNT.ACCOUNT_SDESC
IS
  'This is a descriptive name for the account.' ;
  COMMENT ON COLUMN FNC_ACCOUNT.ACCOUNT_LDESC
IS
  'This is a long description of the account.' ;
  COMMENT ON COLUMN FNC_ACCOUNT.TCODE_DB_ID
IS
  'FK FNC_TCODE. Indicates which financial-system GL account is associated with this Maintenix account.' ;
  COMMENT ON COLUMN FNC_ACCOUNT.TCODE_ID
IS
  'FK FNC_TCODE. Indicates which financial-system GL account is associated with this Maintenix account.' ;
  COMMENT ON COLUMN FNC_ACCOUNT.DEFAULT_BOOL
IS
  'Indicates the default account for a particular account type. There is one default account for every account type.' ;
  COMMENT ON COLUMN FNC_ACCOUNT.CLOSED_BOOL
IS
  'Indicates if the account is closed or open.' ;
  COMMENT ON COLUMN FNC_ACCOUNT.EXT_KEY_SDESC
IS
  'Allows mapping to an account on an external financial system.
' ;
  COMMENT ON COLUMN FNC_ACCOUNT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN FNC_ACCOUNT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN FNC_ACCOUNT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN FNC_ACCOUNT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN FNC_ACCOUNT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_FNC_ACCOUNT_ACCOUNTCD ON FNC_ACCOUNT
    ( ACCOUNT_CD ASC
    ) ;
  CREATE INDEX IX_FNCACCNT_FNCACCNT ON FNC_ACCOUNT
    (
      NH_ACCOUNT_DB_ID ASC ,
      NH_ACCOUNT_ID ASC
    ) ;
  CREATE INDEX IX_FNCTCODE_FNCACCOUNT ON FNC_ACCOUNT
    (
      TCODE_DB_ID ASC ,
      TCODE_ID ASC
    ) ;
ALTER TABLE FNC_ACCOUNT ADD CONSTRAINT "pk_FNC_ACCOUNT" PRIMARY KEY ( ACCOUNT_DB_ID, ACCOUNT_ID ) ;
ALTER TABLE FNC_ACCOUNT ADD CONSTRAINT IX_FNCACCOUNTALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE FNC_TCODE
  (
    TCODE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TCODE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    TCODE_CD    VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_SDESC  VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC  VARCHAR2 (4000) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FNC_TCODE ADD CHECK ( TCODE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_TCODE ADD CHECK ( TCODE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_TCODE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FNC_TCODE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE FNC_TCODE
IS
  'This table catogorizes the ''type'' of account.' ;
  COMMENT ON COLUMN FNC_TCODE.TCODE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN FNC_TCODE.TCODE_ID
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN FNC_TCODE.TCODE_CD
IS
  'Short code identifier for the T-Code account' ;
  COMMENT ON COLUMN FNC_TCODE.DESC_SDESC
IS
  'Short description of the T-Code Account' ;
  COMMENT ON COLUMN FNC_TCODE.DESC_LDESC
IS
  'Long description for the T-Code account' ;
  COMMENT ON COLUMN FNC_TCODE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN FNC_TCODE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN FNC_TCODE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN FNC_TCODE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN FNC_TCODE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE FNC_TCODE ADD CONSTRAINT "pk_FNC_TCODE" PRIMARY KEY ( TCODE_DB_ID, TCODE_ID ) ;
ALTER TABLE FNC_TCODE ADD CONSTRAINT IX_FNCTCODEALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE FNC_XACTION_ACCOUNT
  (
    XACTION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    XACTION_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    XACTION_ACCOUNT_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ACCOUNT_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ACCOUNT_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    CREDIT_COST        NUMBER (15,5) ,
    DEBIT_COST         NUMBER (15,5) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE FNC_XACTION_ACCOUNT ADD CHECK ( XACTION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_ACCOUNT ADD CHECK ( XACTION_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_ACCOUNT ADD CHECK ( XACTION_ACCOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_ACCOUNT ADD CHECK ( ACCOUNT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_ACCOUNT ADD CHECK ( ACCOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_ACCOUNT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FNC_XACTION_ACCOUNT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN FNC_XACTION_ACCOUNT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN FNC_XACTION_ACCOUNT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN FNC_XACTION_ACCOUNT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN FNC_XACTION_ACCOUNT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_FNCACCNT_FNCXACTNACNT ON FNC_XACTION_ACCOUNT
    (
      ACCOUNT_DB_ID ASC ,
      ACCOUNT_ID ASC
    ) ;
  CREATE INDEX IX_FNCXACTNLG_FNCXACTNACNT ON FNC_XACTION_ACCOUNT
    (
      XACTION_DB_ID ASC ,
      XACTION_ID ASC
    ) ;
ALTER TABLE FNC_XACTION_ACCOUNT ADD CONSTRAINT "pk_FNC_XACTION_ACCOUNT" PRIMARY KEY ( XACTION_DB_ID, XACTION_ID, XACTION_ACCOUNT_ID ) ;


CREATE TABLE FNC_XACTION_LOG
  (
    XACTION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    XACTION_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    XACTION_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    XACTION_TYPE_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    XACTION_DT         DATE NOT NULL DEFERRABLE ,
    XACTION_LDESC      VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    PO_DB_ID           NUMBER (10) ,
    PO_ID              NUMBER (10) ,
    PO_LINE_ID         NUMBER (10) ,
    PO_INVOICE_DB_ID   NUMBER (10) ,
    PO_INVOICE_ID      NUMBER (10) ,
    PO_INVOICE_LINE_ID NUMBER (10) ,
    EVENT_DB_ID        NUMBER (10) ,
    EVENT_ID           NUMBER (10) ,
    UNIT_PRICE         NUMBER (15,5) ,
    QTY FLOAT ,
    PART_NO_DB_ID  NUMBER (10) ,
    PART_NO_ID     NUMBER (10) ,
    INV_NO_DB_ID   NUMBER (10) ,
    INV_NO_ID      NUMBER (10) ,
    SCHED_DB_ID    NUMBER (10) ,
    SCHED_ID       NUMBER (10) ,
    CURRENCY_DB_ID NUMBER (10) ,
    CURRENCY_CD    VARCHAR2 (8) ,
    EXCHG_QT FLOAT ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE ,
    AVG_UNIT_PRICE_BEFORE_TX NUMBER (15,5) ,
    TOTAL_QT_BEFORE_TX FLOAT ,
    TOTAL_VALUE_BEFORE_TX   NUMBER (15,5) ,
    AVG_UNIT_PRICE_AFTER_TX NUMBER (15,5) ,
    TOTAL_QT_AFTER_TX FLOAT ,
    TOTAL_VALUE_AFTER_TX NUMBER (15,5) ,
    AC_EVENT_DB_ID       NUMBER (10) ,
    AC_EVENT_ID          NUMBER (10)
  ) ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( XACTION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( XACTION_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( XACTION_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( PO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( PO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( PO_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( PO_INVOICE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( PO_INVOICE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( PO_INVOICE_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( CURRENCY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( AC_EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE FNC_XACTION_LOG ADD CHECK ( AC_EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE FNC_XACTION_LOG
IS
  'This is a ''financial transaction log'' used to record every financial transaction in Maintenix.' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.XACTION_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.XACTION_ID
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.XACTION_TYPE_DB_ID
IS
  'FK REF_XACTION_TYPE.  ' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.XACTION_TYPE_CD
IS
  'FK REF_XACTION_TYPE. ' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.XACTION_DT
IS
  'This is the date that the financial transaction occured.' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.XACTION_LDESC
IS
  'This is a description of the financial transaction.  It is readable and generated by the Maintenix logic.' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.PO_INVOICE_DB_ID
IS
  'FK PO_INVOICE_LINE.  Records the PO invoice line that was sent for payment.  It is only used for transactions of type ''PAYINVC''.' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.PO_INVOICE_ID
IS
  'FK PO_INVOICE_LINE.  Records the PO invoice line that was sent for payment.  It is only used for transactions of type ''PAYINVC''.' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.PO_INVOICE_LINE_ID
IS
  'FK PO_INVOICE_LINE.  Records the PO invoice line that was sent for payment.  It is only used for transactions of type ''PAYINVC''.' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.EVENT_DB_ID
IS
  'FK EVT_EVENT. Link to the transfer event created for manually issue or expected turn in associated with this financial transaction.' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.EVENT_ID
IS
  'FK EVT_EVENT. Link to the transfer event created for manually issue or expected turn in associated with this financial transaction.' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.UNIT_PRICE
IS
  'The unit price for the financial transaction' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.QTY
IS
  'The quantity for the financial transaction' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.PART_NO_DB_ID
IS
  'FK EQP_PART_NO. Identifies the part number associated with this financial transaction.' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.PART_NO_ID
IS
  'FK EQP_PART_NO. Identifies the part number associated with this financial transaction.' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.INV_NO_DB_ID
IS
  'FK INV_INV.  The inventory being affected by the record transaction.  They are only used for transactions of type ''ISSUE'', ''TURN IN'' and ''QTYADJ''.' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.INV_NO_ID
IS
  'FK INV_INV.  The inventory being affected by the record transaction.  They are only used for transactions of type ''ISSUE'', ''TURN IN'' and ''QTYADJ''.' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.SCHED_DB_ID
IS
  'FK SCHED_STASK. Identifies the task associated with this financial transaction.' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.SCHED_ID
IS
  'FK SCHED_STASK. Identifies the task associated with this financial transaction.' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.CURRENCY_DB_ID
IS
  'Currency of the transaction.' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.CURRENCY_CD
IS
  'Currency of the transaction.' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.EXCHG_QT
IS
  'Exchange Rate at the time of the transaction.' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.AVG_UNIT_PRICE_BEFORE_TX
IS
  'Part average unit price before the transaction' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.TOTAL_QT_BEFORE_TX
IS
  'Part total quantity before the transaction' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.TOTAL_VALUE_BEFORE_TX
IS
  'Part total value before the transaction' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.AVG_UNIT_PRICE_AFTER_TX
IS
  'Part average unit price after the transaction' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.TOTAL_QT_AFTER_TX
IS
  'Part total quantity after the transaction' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.TOTAL_VALUE_AFTER_TX
IS
  'Part total value after the transaction' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.AC_EVENT_DB_ID
IS
  'FK to INV_CND_CHG_EVENT. If applicable, the associated AC event.' ;
  COMMENT ON COLUMN FNC_XACTION_LOG.AC_EVENT_ID
IS
  'FK to INV_CND_CHG_EVENT. If applicable, the associated AC event.' ;
  CREATE INDEX IX_EQPPARTNO_FNCXACTIONLOG ON FNC_XACTION_LOG
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_EVTEVENT_FNCXACTIONLOG ON FNC_XACTION_LOG
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
  CREATE INDEX IX_INVINV_FNCXACTIONLOG ON FNC_XACTION_LOG
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_POLINE_FNCXACTLOG ON FNC_XACTION_LOG
    (
      PO_DB_ID ASC ,
      PO_ID ASC ,
      PO_LINE_ID ASC
    ) ;
  CREATE INDEX IX_POINVOICELINE_FNCXACTNLOG ON FNC_XACTION_LOG
    (
      PO_INVOICE_DB_ID ASC ,
      PO_INVOICE_ID ASC ,
      PO_INVOICE_LINE_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDSTASK_FNCXACTIONLOG ON FNC_XACTION_LOG
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_INVCNDCHGEVENT_FNCACTIONLG ON FNC_XACTION_LOG
    (
      AC_EVENT_DB_ID ASC ,
      AC_EVENT_ID ASC
    ) ;
ALTER TABLE FNC_XACTION_LOG ADD CONSTRAINT "pk_FNC_XACTION_LOG" PRIMARY KEY ( XACTION_DB_ID, XACTION_ID ) ;
ALTER TABLE FNC_XACTION_LOG ADD CONSTRAINT IX_FNCXACTIONLOGALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE GRP_DEFN
  (
    GRP_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    GRP_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    GRP_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    GRP_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE GRP_DEFN ADD CHECK ( GRP_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE GRP_DEFN ADD CHECK ( GRP_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE GRP_DEFN ADD CHECK ( GRP_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE GRP_DEFN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE GRP_DEFN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN GRP_DEFN.GRP_DEFN_DB_ID
IS
  'This is a foreign key to the GRP_DEFN table.' ;
  COMMENT ON COLUMN GRP_DEFN.GRP_DEFN_ID
IS
  'This is a foreign key to the GRP_DEFN table.' ;
  COMMENT ON COLUMN GRP_DEFN.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN GRP_DEFN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN GRP_DEFN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN GRP_DEFN.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN GRP_DEFN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE GRP_DEFN ADD CONSTRAINT PK_GRP_DEFN PRIMARY KEY ( GRP_DEFN_DB_ID, GRP_DEFN_ID ) ;
ALTER TABLE GRP_DEFN ADD CONSTRAINT IX_GRPDEFNALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE GRP_DEFN_LIC
  (
    GRP_DEFN_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    GRP_DEFN_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    GRP_DEFN_LIC_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LIC_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    LIC_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE GRP_DEFN_LIC ADD CHECK ( GRP_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE GRP_DEFN_LIC ADD CHECK ( GRP_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE GRP_DEFN_LIC ADD CHECK ( GRP_DEFN_LIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE GRP_DEFN_LIC ADD CHECK ( LIC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE GRP_DEFN_LIC ADD CHECK ( LIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE GRP_DEFN_LIC ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE GRP_DEFN_LIC ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN GRP_DEFN_LIC.GRP_DEFN_LIC_ID
IS
  'This is a primary key for GRP_DEFN_LIC' ;
  COMMENT ON COLUMN GRP_DEFN_LIC.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN GRP_DEFN_LIC.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN GRP_DEFN_LIC.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN GRP_DEFN_LIC.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN GRP_DEFN_LIC.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_LICDEFN_GRPDEFNLIC ON GRP_DEFN_LIC
    (
      LIC_DB_ID ASC ,
      LIC_ID ASC
    ) ;
  CREATE INDEX IX_GRPDEFN_GRPDEFNLIC ON GRP_DEFN_LIC
    (
      GRP_DEFN_DB_ID ASC ,
      GRP_DEFN_ID ASC
    ) ;
ALTER TABLE GRP_DEFN_LIC ADD CONSTRAINT PK_GRP_DEFN_LIC PRIMARY KEY ( GRP_DEFN_ID, GRP_DEFN_DB_ID, GRP_DEFN_LIC_ID ) ;


CREATE TABLE IETM_ASSMBL
  (
    IETM_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD      VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE IETM_ASSMBL ADD CHECK ( IETM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE IETM_ASSMBL ADD CHECK ( IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE IETM_ASSMBL ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE IETM_ASSMBL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE IETM_ASSMBL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE IETM_ASSMBL
IS
  'IETM: This entity defines the list of Interactive Electronic Tech Manuals for each assembly type. Also defined here is the access knowledge for Maintenix to launch the IETM interaction from select points in the client software.' ;
  COMMENT ON COLUMN IETM_ASSMBL.IETM_DB_ID
IS
  'PK.  FK to IETM_IETM.' ;
  COMMENT ON COLUMN IETM_ASSMBL.IETM_ID
IS
  'PK.  FK to IETM_IETM.' ;
  COMMENT ON COLUMN IETM_ASSMBL.ASSMBL_DB_ID
IS
  'PK.  FK to EQP_ASSMBL.' ;
  COMMENT ON COLUMN IETM_ASSMBL.ASSMBL_CD
IS
  'PK.  FK to EQP_ASSMBL.' ;
  COMMENT ON COLUMN IETM_ASSMBL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN IETM_ASSMBL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN IETM_ASSMBL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN IETM_ASSMBL.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN IETM_ASSMBL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPASSMBL_IETMASSMBL ON IETM_ASSMBL
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
  CREATE INDEX IX_IETMIETM_IETMASSMBL ON IETM_ASSMBL
    (
      IETM_DB_ID ASC ,
      IETM_ID ASC
    ) ;
ALTER TABLE IETM_ASSMBL ADD CONSTRAINT PK_IETM_ASSMBL PRIMARY KEY ( IETM_DB_ID, IETM_ID, ASSMBL_DB_ID, ASSMBL_CD ) ;


CREATE TABLE IETM_IETM
  (
    IETM_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_CD           VARCHAR2 (8) NOT NULL DEFERRABLE ,
    IETM_NAME         VARCHAR2 (40) NOT NULL DEFERRABLE ,
    IETM_LDESC        VARCHAR2 (4000) ,
    CMDLINE_APP_LDESC VARCHAR2 (4000) ,
    PREFIX_LDESC      VARCHAR2 (4000) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE IETM_IETM ADD CHECK ( IETM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE IETM_IETM ADD CHECK ( IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE IETM_IETM ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE IETM_IETM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE IETM_IETM
IS
  'IETM: This entity defines the list of Interactive Electronic Tech Manuals for each assembly type. Also defined here is the access knowledge for Maintenix to launch the IETM interaction from select points in the client software.' ;
  COMMENT ON COLUMN IETM_IETM.IETM_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN IETM_IETM.IETM_ID
IS
  'Unique ID assigned from Sequence IETM_ID_SEQ' ;
  COMMENT ON COLUMN IETM_IETM.IETM_CD
IS
  'A user entered code that identifies the IETM (typically a type like AMM, IPC, etc...)' ;
  COMMENT ON COLUMN IETM_IETM.IETM_NAME
IS
  'A short name used to label the IETM.' ;
  COMMENT ON COLUMN IETM_IETM.IETM_LDESC
IS
  'A long description for the Technical Publication.' ;
  COMMENT ON COLUMN IETM_IETM.CMDLINE_APP_LDESC
IS
  'The Operating System command line required to launch the IETM browser/viewer. May be a thick client program or a WEB browser.' ;
  COMMENT ON COLUMN IETM_IETM.PREFIX_LDESC
IS
  'This column will be used to store the IETM "common prefix", to be used for ALL topics in the IETM.' ;
  COMMENT ON COLUMN IETM_IETM.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN IETM_IETM.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN IETM_IETM.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN IETM_IETM.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN IETM_IETM.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE IETM_IETM ADD CONSTRAINT PK_IETM_IETM PRIMARY KEY ( IETM_DB_ID, IETM_ID ) ;
ALTER TABLE IETM_IETM ADD CONSTRAINT IX_IETMIETMALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE IETM_TOPIC
  (
    IETM_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_TOPIC_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    TOPIC_SDESC        VARCHAR2 (80) NOT NULL DEFERRABLE ,
    CMDLINE_PARM_LDESC VARCHAR2 (4000) ,
    PRINT_BOOL         NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    IETM_TYPE_DB_ID    NUMBER (10) ,
    IETM_TYPE_CD       VARCHAR2 (8) ,
    DESC_LDESC         VARCHAR2 (4000) ,
    TOPIC_NOTE         VARCHAR2 (4000) ,
    ATTACH_TYPE_DB_ID  NUMBER (10) ,
    ATTACH_TYPE_CD     VARCHAR2 (8) ,
    ATTACH_BLOB BLOB ,
    ATTACH_FILENAME     VARCHAR2 (255) ,
    ATTACH_CONTENT_TYPE VARCHAR2 (80) ,
    TASKDEFN_CXT_LDESC  VARCHAR2 (4000) ,
    TASK_CXT_LDESC      VARCHAR2 (4000) ,
    APPL_EFF_LDESC      VARCHAR2 (400) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE IETM_TOPIC ADD CHECK ( IETM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE IETM_TOPIC ADD CHECK ( IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE IETM_TOPIC ADD CHECK ( IETM_TOPIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE IETM_TOPIC ADD CHECK ( PRINT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE IETM_TOPIC ADD CHECK ( IETM_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE IETM_TOPIC ADD CHECK ( ATTACH_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE IETM_TOPIC ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE IETM_TOPIC ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE IETM_TOPIC
IS
  'IETM Entry Topics: This entity is used to publish to Maintenix all of the entry points that an IETM offers to an external system (ie, interface specification). The entry points are mapped to Maintenix Tasks, Failure Modes..' ;
  COMMENT ON COLUMN IETM_TOPIC.IETM_DB_ID
IS
  'FK to IETM_IETM.' ;
  COMMENT ON COLUMN IETM_TOPIC.IETM_ID
IS
  'FK to IETM_IETM.' ;
  COMMENT ON COLUMN IETM_TOPIC.IETM_TOPIC_ID
IS
  'Unique ID (from 1 to n) within the IETM.' ;
  COMMENT ON COLUMN IETM_TOPIC.TOPIC_SDESC
IS
  'A description for labelling the IETM Topic (typically the table of contents name for the section).' ;
  COMMENT ON COLUMN IETM_TOPIC.CMDLINE_PARM_LDESC
IS
  'Any Operating System command line parameters or arguments that allow the browser or viewer defined in IETM_IETM to find this specific topic''s context.' ;
  COMMENT ON COLUMN IETM_TOPIC.PRINT_BOOL
IS
  'Determines whether an IETM topic is printable.' ;
  COMMENT ON COLUMN IETM_TOPIC.IETM_TYPE_DB_ID
IS
  'FK to REF_IETM_TYPE.' ;
  COMMENT ON COLUMN IETM_TOPIC.IETM_TYPE_CD
IS
  'FK to REF_IETM_TYPE.' ;
  COMMENT ON COLUMN IETM_TOPIC.DESC_LDESC
IS
  'A long detailed description for the term - displayed for explanation purposes only.
' ;
  COMMENT ON COLUMN IETM_TOPIC.TOPIC_NOTE
IS
  'Topic Note for each ietm topic stored here.' ;
  COMMENT ON COLUMN IETM_TOPIC.ATTACH_TYPE_DB_ID
IS
  'FK IETM_TOPIC.  If adding an attachment as an IETM topic, then these columns are used to specify the type of IETM topic that you are creating.' ;
  COMMENT ON COLUMN IETM_TOPIC.ATTACH_TYPE_CD
IS
  'FK IETM_TOPIC.  If adding an attachment as an IETM topic, then these columns are used to specify the type of IETM topic that you are creating.' ;
  COMMENT ON COLUMN IETM_TOPIC.ATTACH_BLOB
IS
  'FK IETM_TOPIC.  If adding an attachment as an IETM topic, then these columns are used to specify the type of IETM topic that you are creating.' ;
  COMMENT ON COLUMN IETM_TOPIC.ATTACH_FILENAME
IS
  'Attachment filename (without path) to be used when saved to the local filesystem.
' ;
  COMMENT ON COLUMN IETM_TOPIC.ATTACH_CONTENT_TYPE
IS
  'The MIME type, used to help the browser to identify the attachment file type when saving.' ;
  COMMENT ON COLUMN IETM_TOPIC.TASKDEFN_CXT_LDESC
IS
  'This column will be used to store the Task Definition context for a technical reference.' ;
  COMMENT ON COLUMN IETM_TOPIC.TASK_CXT_LDESC
IS
  'This column will be used to store the Task context for a technical reference.' ;
  COMMENT ON COLUMN IETM_TOPIC.APPL_EFF_LDESC
IS
  'This is the applicability range of the IETM topic.' ;
  COMMENT ON COLUMN IETM_TOPIC.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN IETM_TOPIC.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN IETM_TOPIC.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN IETM_TOPIC.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN IETM_TOPIC.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_IETMIETM_IETMTOPIC ON IETM_TOPIC
    (
      IETM_DB_ID ASC ,
      IETM_ID ASC
    ) ;
ALTER TABLE IETM_TOPIC ADD CONSTRAINT PK_IETM_TOPIC PRIMARY KEY ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) ;


CREATE TABLE IETM_TOPIC_CARRIER
  (
    IETM_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_TOPIC_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    CARRIER_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    CARRIER_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE IETM_TOPIC_CARRIER ADD CHECK ( IETM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE IETM_TOPIC_CARRIER ADD CHECK ( IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE IETM_TOPIC_CARRIER ADD CHECK ( IETM_TOPIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE IETM_TOPIC_CARRIER ADD CHECK ( CARRIER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE IETM_TOPIC_CARRIER ADD CHECK ( CARRIER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE IETM_TOPIC_CARRIER ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE IETM_TOPIC_CARRIER ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE IETM_TOPIC_CARRIER
IS
  'This table maps IETM topics to operators.' ;
  COMMENT ON COLUMN IETM_TOPIC_CARRIER.IETM_DB_ID
IS
  'This is a foreign key to IETM_TOPIC table.' ;
  COMMENT ON COLUMN IETM_TOPIC_CARRIER.IETM_ID
IS
  'This is a foreign key to IETM_TOPIC table.' ;
  COMMENT ON COLUMN IETM_TOPIC_CARRIER.IETM_TOPIC_ID
IS
  'This is a foreign key to IETM_TOPIC table.' ;
  COMMENT ON COLUMN IETM_TOPIC_CARRIER.CARRIER_DB_ID
IS
  'This is a foreign key to ORG_CARRIER table.' ;
  COMMENT ON COLUMN IETM_TOPIC_CARRIER.CARRIER_ID
IS
  'This is a foreign key to ORG_CARRIER table.' ;
  CREATE INDEX IX_IETMTOPIC_IETMTOPICCARRIER ON IETM_TOPIC_CARRIER
    (
      IETM_DB_ID ASC ,
      IETM_ID ASC ,
      IETM_TOPIC_ID ASC
    ) ;
  CREATE INDEX IX_ORGCARRIER_IETMTOPICCARRIER ON IETM_TOPIC_CARRIER
    (
      CARRIER_DB_ID ASC ,
      CARRIER_ID ASC
    ) ;
ALTER TABLE IETM_TOPIC_CARRIER ADD CONSTRAINT PK_IETM_TOPIC_CARRIER PRIMARY KEY ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID, CARRIER_DB_ID, CARRIER_ID ) ;


CREATE TABLE INT_BP_AUTHORIZATION
  (
    REF_TYPE       VARCHAR2 (20) NOT NULL DEFERRABLE ,
    REF_NAME       VARCHAR2 (200) NOT NULL DEFERRABLE ,
    METHOD_NAME    VARCHAR2 (200) NOT NULL DEFERRABLE ,
    RESOURCE_CD    VARCHAR2 (200) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INT_BP_AUTHORIZATION ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INT_BP_AUTHORIZATION ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN INT_BP_AUTHORIZATION.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN INT_BP_AUTHORIZATION.CREATION_DT
IS
  'The database server?s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INT_BP_AUTHORIZATION.REVISION_DT
IS
  'The database server?s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INT_BP_AUTHORIZATION.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INT_BP_AUTHORIZATION.REVISION_USER
IS
  'The user that last modified the record. ' ;
ALTER TABLE INT_BP_AUTHORIZATION ADD CONSTRAINT "pk_INT_BP_AUTHORIZATION" PRIMARY KEY ( REF_TYPE, REF_NAME, METHOD_NAME ) ;


CREATE TABLE INT_BP_LOOKUP
  (
    NAMESPACE           VARCHAR2 (100) NOT NULL DEFERRABLE ,
    ROOT_NAME           VARCHAR2 (100) NOT NULL DEFERRABLE ,
    REF_TYPE            VARCHAR2 (20) NOT NULL DEFERRABLE ,
    REF_NAME            VARCHAR2 (200) NOT NULL DEFERRABLE ,
    METHOD_NAME         VARCHAR2 (200) NOT NULL DEFERRABLE ,
    INT_LOGGING_TYPE_CD VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INT_BP_LOOKUP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INT_BP_LOOKUP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN INT_BP_LOOKUP.INT_LOGGING_TYPE_CD
IS
  'FK to REF_INT_LOGGING_TYPE' ;
  COMMENT ON COLUMN INT_BP_LOOKUP.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN INT_BP_LOOKUP.CREATION_DT
IS
  'The database server?s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INT_BP_LOOKUP.REVISION_DT
IS
  'The database server?s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INT_BP_LOOKUP.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INT_BP_LOOKUP.REVISION_USER
IS
  'The user that last modified the record. ' ;
ALTER TABLE INT_BP_LOOKUP ADD CONSTRAINT PK_INT_BP_LOOKUP PRIMARY KEY ( NAMESPACE, ROOT_NAME ) ;


CREATE TABLE INT_CACHE
  (
    KEY RAW (16) NOT NULL ,
    CACHE_NAME VARCHAR2 (20) NOT NULL ,
    CACHE_BLOB BLOB ,
    CONSTRAINT PK_INT_CACHE PRIMARY KEY ( KEY, CACHE_NAME )
  )
  ORGANIZATION INDEX ;


CREATE TABLE INT_DEST_LOOKUP
  (
    SUBSCRIPTION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SUBSCRIPTION_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    NAMESPACE          VARCHAR2 (100) NOT NULL DEFERRABLE ,
    ROOT_NAME          VARCHAR2 (100) NOT NULL DEFERRABLE ,
    URL                VARCHAR2 (100) NOT NULL DEFERRABLE ,
    USERNAME           VARCHAR2 (80) ,
    PASSWORD           VARCHAR2 (100) ,
    HIST_BOOL          NUMBER (1) DEFAULT 0 ,
    STYLESHEET_PATH    VARCHAR2 (100) ,
    DESTINATION        VARCHAR2 (20) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INT_DEST_LOOKUP ADD CHECK ( SUBSCRIPTION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_DEST_LOOKUP ADD CHECK ( SUBSCRIPTION_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_DEST_LOOKUP ADD CHECK ( HIST_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE INT_DEST_LOOKUP ADD CHECK ( RSTAT_CD  IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INT_DEST_LOOKUP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN INT_DEST_LOOKUP.SUBSCRIPTION_DB_ID
IS
  'Database identifier for each subscriber that wishes to be notified. ' ;
  COMMENT ON COLUMN INT_DEST_LOOKUP.SUBSCRIPTION_ID
IS
  'Identifier for each subscriber that wishes to be notified. ' ;
  COMMENT ON COLUMN INT_DEST_LOOKUP.NAMESPACE
IS
  'Response root namespace for subscription' ;
  COMMENT ON COLUMN INT_DEST_LOOKUP.ROOT_NAME
IS
  'Response root name for subscription' ;
  COMMENT ON COLUMN INT_DEST_LOOKUP.URL
IS
  'URL of the web services that needs to be notified.' ;
  COMMENT ON COLUMN INT_DEST_LOOKUP.USERNAME
IS
  'Username to log into web service' ;
  COMMENT ON COLUMN INT_DEST_LOOKUP.PASSWORD
IS
  'Password to log into web service' ;
  COMMENT ON COLUMN INT_DEST_LOOKUP.HIST_BOOL
IS
  'Indicates whether of the not the subscription is historic.' ;
  COMMENT ON COLUMN INT_DEST_LOOKUP.STYLESHEET_PATH
IS
  'Pointer to any XSLT stylesheet in the resource/stylesheet directory.' ;
  COMMENT ON COLUMN INT_DEST_LOOKUP.DESTINATION
IS
  'This field identifies the destination type (ex. JMS or WS)' ;
  COMMENT ON COLUMN INT_DEST_LOOKUP.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INT_DEST_LOOKUP.CREATION_DT
IS
  'The database server?s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INT_DEST_LOOKUP.REVISION_DT
IS
  'The database server?s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INT_DEST_LOOKUP.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INT_DEST_LOOKUP.REVISION_USER
IS
  'The user that last modified the record. ' ;
ALTER TABLE INT_DEST_LOOKUP ADD CONSTRAINT PK_INT_DEST_LOOKUP PRIMARY KEY ( SUBSCRIPTION_DB_ID, SUBSCRIPTION_ID ) ;


CREATE TABLE INT_ERROR_LOG
  (
    QUEUE_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    ERROR_SEVERITY_SYS_CD VARCHAR2 (20) ,
    ERROR_SEVERITY_CD     VARCHAR2 (80) ,
    ERROR_MSG CLOB NOT NULL DEFERRABLE ,
    ERROR_MSG_SOURCE  VARCHAR2 (40) ,
    ERROR_MSG_CONTEXT VARCHAR2 (40) ,
    ERROR_MSG_NOTES CLOB ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INT_ERROR_LOG ADD CHECK ( QUEUE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_ERROR_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INT_ERROR_LOG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN INT_ERROR_LOG.QUEUE_ID
IS
  'Identifier for each record in the queuing table' ;
  COMMENT ON COLUMN INT_ERROR_LOG.ERROR_SEVERITY_SYS_CD
IS
  'System severity code for the message error.' ;
  COMMENT ON COLUMN INT_ERROR_LOG.ERROR_SEVERITY_CD
IS
  'Severity code for the message error.' ;
  COMMENT ON COLUMN INT_ERROR_LOG.ERROR_MSG
IS
  'Any error messages that occurred from process the message. ' ;
  COMMENT ON COLUMN INT_ERROR_LOG.ERROR_MSG_SOURCE
IS
  'Source of the error message' ;
  COMMENT ON COLUMN INT_ERROR_LOG.ERROR_MSG_CONTEXT
IS
  'Context of the error message' ;
  COMMENT ON COLUMN INT_ERROR_LOG.ERROR_MSG_NOTES
IS
  'Notes about the error.' ;
  COMMENT ON COLUMN INT_ERROR_LOG.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN INT_ERROR_LOG.CREATION_DT
IS
  'The database server?s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN INT_ERROR_LOG.REVISION_DT
IS
  'The database server?s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INT_ERROR_LOG.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INT_ERROR_LOG.REVISION_USER
IS
  'The user that last modified the record. ' ;
ALTER TABLE INT_ERROR_LOG ADD CONSTRAINT PK_INT_ERROR_LOG PRIMARY KEY ( QUEUE_ID ) ;


CREATE TABLE INT_EVENT_CONFIG
  (
    EVENT_TYPE_CD        VARCHAR2 (50) NOT NULL ,
    ENABLED_BOOL         NUMBER (1) DEFAULT 0 NOT NULL ,
    BEFORE_SNAPSHOT_BOOL NUMBER (1) DEFAULT 0 NOT NULL ,
    AFTER_SNAPSHOT_BOOL  NUMBER (1) DEFAULT 0 NOT NULL ,
    RSTAT_CD             NUMBER (3) DEFAULT 0 NOT NULL ,
    REVISION_NO          NUMBER (10) DEFAULT 1 NOT NULL ,
    CTRL_DB_ID           NUMBER (10) NOT NULL ,
    CREATION_DT          DATE NOT NULL ,
    CREATION_DB_ID       NUMBER (10) NOT NULL ,
    REVISION_DT          DATE NOT NULL ,
    REVISION_DB_ID       NUMBER (10) NOT NULL ,
    REVISION_USER        VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE INT_EVENT_CONFIG ADD CHECK ( ENABLED_BOOL         IN (0,1)) ;
ALTER TABLE INT_EVENT_CONFIG ADD CHECK ( BEFORE_SNAPSHOT_BOOL IN (0, 1)) ;
ALTER TABLE INT_EVENT_CONFIG ADD CHECK ( AFTER_SNAPSHOT_BOOL  IN (0, 1)) ;
ALTER TABLE INT_EVENT_CONFIG ADD CHECK ( RSTAT_CD             IN (0, 1, 2, 3)) ;
ALTER TABLE INT_EVENT_CONFIG ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE INT_EVENT_CONFIG ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE INT_EVENT_CONFIG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON TABLE INT_EVENT_CONFIG
IS
  'Contains information about PubSub Configuration for events' ;
ALTER TABLE INT_EVENT_CONFIG ADD CONSTRAINT PK_INT_EVENT_CONFIG PRIMARY KEY ( EVENT_TYPE_CD ) ;


CREATE TABLE INT_INBOUND_QUEUE_LOG
  (
    QUEUE_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ORIG_QUEUE_ID NUMBER (10) ,
    REQ_TYPE      VARCHAR2 (100) ,
    REQ_SUB_TYPE  VARCHAR2 (100) ,
    REQ_SOURCE    VARCHAR2 (100) ,
    MSG_ID        VARCHAR2 (80) NOT NULL DEFERRABLE ,
    MSG CLOB ,
    STATUS_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    STATUS_CD      VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DELIVERY_DB_ID NUMBER (10) ,
    DELIVERY_CD    VARCHAR2 (16) ,
    STREAM_CD      VARCHAR2 (16) ,
    EXTERNAL_KEY   VARCHAR2 (100) ,
    INTERNAL_KEY   VARCHAR2 (100) ,
    MX_MSG_DATE    DATE ,
    HIST_BOOL      NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    START_DT       DATE ,
    END_DT         DATE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INT_INBOUND_QUEUE_LOG ADD CHECK ( QUEUE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_INBOUND_QUEUE_LOG ADD CHECK ( ORIG_QUEUE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_INBOUND_QUEUE_LOG ADD CHECK ( STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_INBOUND_QUEUE_LOG ADD CHECK ( DELIVERY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_INBOUND_QUEUE_LOG ADD CHECK ( HIST_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE INT_INBOUND_QUEUE_LOG ADD CHECK ( RSTAT_CD  IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INT_INBOUND_QUEUE_LOG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INT_INBOUND_QUEUE_LOG
IS
  'Table used to faciliate the processing of messages in a particular order. the The messages from the queue are transferred into this intermediate table.  Some data elements will be extracted prior to inserting the message into the table so that these attributes can be stored in the table' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.QUEUE_ID
IS
  'Identifier for each record in the queuing table' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.ORIG_QUEUE_ID
IS
  'Identifier for each record in the queuing table' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.REQ_TYPE
IS
  'Namespace of the input request message or event.' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.REQ_SUB_TYPE
IS
  'XML message name i.e. the root element''s name' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.REQ_SOURCE
IS
  'Original source of message, e.g. msg or web service.' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.MSG_ID
IS
  'Unique identifier contained in the msg_id attribute of the XML message''s root element.' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.MSG
IS
  'Message Content.' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.STATUS_DB_ID
IS
  'Status Database Identifier' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.STATUS_CD
IS
  'Status Code' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.DELIVERY_DB_ID
IS
  'Database Id for delivery type' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.DELIVERY_CD
IS
  'String code for delivery type' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.STREAM_CD
IS
  'The name representing the ordered stream, if this message belongs to an ordered stream.' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.EXTERNAL_KEY
IS
  'Key value from the external system where applicable.' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.INTERNAL_KEY
IS
  'Key value used internally to represent this message where applicable.' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.MX_MSG_DATE
IS
  'Business logic message date.' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.HIST_BOOL
IS
  'Indicates whether of the not the message is historic.' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.START_DT
IS
  'Date that message was received' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.END_DT
IS
  'Date response/error was returned' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.CREATION_DT
IS
  'The database server?s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.REVISION_DT
IS
  'The database server?s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INT_INBOUND_QUEUE_LOG.REVISION_USER
IS
  'The user that last modified the record. ' ;
  CREATE INDEX IX_IDX_INTINBQUELOG_MSGID ON INT_INBOUND_QUEUE_LOG
    (
      MSG_ID ASC
    ) ;
  CREATE INDEX IX_INTINBQUELOG_STRMCD_MSGID ON INT_INBOUND_QUEUE_LOG
    (
      STREAM_CD ASC ,
      MSG_ID ASC
    ) ;
ALTER TABLE INT_INBOUND_QUEUE_LOG ADD CONSTRAINT PK_INT_INBOUND_QUEUE_LOG PRIMARY KEY ( QUEUE_ID ) ;


CREATE TABLE INT_MESSAGE_ORDER
  (
    STREAM_CD                 VARCHAR2 (16) NOT NULL DEFERRABLE ,
    STREAM_SDESC              VARCHAR2 (80) ,
    SEQ_NUMBER_LAST_PROCESSED NUMBER (20) NOT NULL DEFERRABLE ,
    SEQ_NUMBER_NEXT           NUMBER (20) NOT NULL DEFERRABLE ,
    RSTAT_CD                  NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT               DATE NOT NULL DEFERRABLE ,
    REVISION_DT               DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER             VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INT_MESSAGE_ORDER ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INT_MESSAGE_ORDER ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN INT_MESSAGE_ORDER.STREAM_CD
IS
  'The name representing the ordered stream.' ;
  COMMENT ON COLUMN INT_MESSAGE_ORDER.STREAM_SDESC
IS
  'The description of the ordered stream.' ;
  COMMENT ON COLUMN INT_MESSAGE_ORDER.SEQ_NUMBER_LAST_PROCESSED
IS
  'The sequence number of the last message that was processed in this ordered stream.' ;
  COMMENT ON COLUMN INT_MESSAGE_ORDER.SEQ_NUMBER_NEXT
IS
  'The expected sequence number of the next message that should be processed in this ordered stream.' ;
  COMMENT ON COLUMN INT_MESSAGE_ORDER.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INT_MESSAGE_ORDER.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INT_MESSAGE_ORDER.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INT_MESSAGE_ORDER.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE INT_MESSAGE_ORDER ADD CONSTRAINT PK_INT_MESSAGE_ORDER PRIMARY KEY ( STREAM_CD ) ;


CREATE TABLE INT_MSG_PUBLISH
  (
    MSG_ID      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    CREATION_DT DATE NOT NULL DEFERRABLE
  ) ;


CREATE TABLE INT_NOTIFICATION_LOG
  (
    QUEUE_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    SUBSCRIPTION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SUBSCRIPTION_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    SEND_DT            DATE ,
    ERROR_SDESC        VARCHAR2 (80) ,
    SUCCESS            NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INT_NOTIFICATION_LOG ADD CHECK ( QUEUE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_NOTIFICATION_LOG ADD CHECK ( SUBSCRIPTION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_NOTIFICATION_LOG ADD CHECK ( SUBSCRIPTION_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_NOTIFICATION_LOG ADD CHECK ( SUCCESS  IN (0, 1)) DEFERRABLE ;
ALTER TABLE INT_NOTIFICATION_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INT_NOTIFICATION_LOG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN INT_NOTIFICATION_LOG.QUEUE_ID
IS
  'Identifier for each record in the queuing table' ;
  COMMENT ON COLUMN INT_NOTIFICATION_LOG.SUBSCRIPTION_DB_ID
IS
  'Database identifier for each subscriber that wishes to be notified. ' ;
  COMMENT ON COLUMN INT_NOTIFICATION_LOG.SUBSCRIPTION_ID
IS
  'Identifier for each subscriber that wishes to be notified. ' ;
  COMMENT ON COLUMN INT_NOTIFICATION_LOG.SEND_DT
IS
  'Date and time the subscriber was notified. ' ;
  COMMENT ON COLUMN INT_NOTIFICATION_LOG.ERROR_SDESC
IS
  'Error description' ;
  COMMENT ON COLUMN INT_NOTIFICATION_LOG.SUCCESS
IS
  'Success or failure of the notification' ;
  COMMENT ON COLUMN INT_NOTIFICATION_LOG.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INT_NOTIFICATION_LOG.CREATION_DT
IS
  'The database server?s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INT_NOTIFICATION_LOG.REVISION_DT
IS
  'The database server?s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INT_NOTIFICATION_LOG.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INT_NOTIFICATION_LOG.REVISION_USER
IS
  'The user that last modified the record. ' ;
ALTER TABLE INT_NOTIFICATION_LOG ADD CONSTRAINT PK_INT_NOTIFICATION_LOG PRIMARY KEY ( QUEUE_ID, SUBSCRIPTION_DB_ID, SUBSCRIPTION_ID ) ;


CREATE TABLE INT_ORDER_EXCEPTION
  (
    ORDER_EXCEPTION_ID RAW (16) NOT NULL DEFERRABLE ,
    RPN                VARCHAR2 (40) ,
    UNP                NUMBER (15,5) ,
    QTY_ADJUST_QTO     NUMBER (5) ,
    QTY_ADJUST_QTO_UNT VARCHAR2 (2) ,
    MFR                VARCHAR2 (16) ,
    STATUS             VARCHAR2 (10) ,
    REMARKS            VARCHAR2 (4000) ,
    CPO                VARCHAR2 (32) NOT NULL DEFERRABLE ,
    SCD                DATE ,
    SCD_QTO            NUMBER (5) ,
    UNP_ICR            VARCHAR2 (3) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO        NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INT_ORDER_EXCEPTION ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INT_ORDER_EXCEPTION ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_ORDER_EXCEPTION ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_ORDER_EXCEPTION ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_ORDER_EXCEPTION ADD CONSTRAINT PK_INT_ORDER_EXCEPTION PRIMARY KEY ( ORDER_EXCEPTION_ID ) ;


CREATE TABLE INT_OUTBOUND_QUEUE_LOG
  (
    QUEUE_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    RSP_TYPE        VARCHAR2 (100) ,
    RSP_SUB_TYPE    VARCHAR2 (100) ,
    RSP_SOURCE      VARCHAR2 (100) ,
    RSP_DESTINATION VARCHAR2 (100) ,
    MSG_ID          VARCHAR2 (80) NOT NULL DEFERRABLE ,
    MSG CLOB ,
    RSP_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RSP_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INT_OUTBOUND_QUEUE_LOG ADD CHECK ( QUEUE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_OUTBOUND_QUEUE_LOG ADD CHECK ( RSP_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_OUTBOUND_QUEUE_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INT_OUTBOUND_QUEUE_LOG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN INT_OUTBOUND_QUEUE_LOG.QUEUE_ID
IS
  'Identifier for each record in the queuing table' ;
  COMMENT ON COLUMN INT_OUTBOUND_QUEUE_LOG.RSP_TYPE
IS
  'Namespace of the input request message or event.' ;
  COMMENT ON COLUMN INT_OUTBOUND_QUEUE_LOG.RSP_SUB_TYPE
IS
  'XML message name i.e. the root element''s name.' ;
  COMMENT ON COLUMN INT_OUTBOUND_QUEUE_LOG.RSP_SOURCE
IS
  'Original source of message, e.g. msg or web service.' ;
  COMMENT ON COLUMN INT_OUTBOUND_QUEUE_LOG.RSP_DESTINATION
IS
  'Intended destination of message.' ;
  COMMENT ON COLUMN INT_OUTBOUND_QUEUE_LOG.MSG_ID
IS
  'Unique identifier contained in the msg_id attribute of the XML message''s root element.' ;
  COMMENT ON COLUMN INT_OUTBOUND_QUEUE_LOG.MSG
IS
  'Message Content.' ;
  COMMENT ON COLUMN INT_OUTBOUND_QUEUE_LOG.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INT_OUTBOUND_QUEUE_LOG.CREATION_DT
IS
  'The database server?s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INT_OUTBOUND_QUEUE_LOG.REVISION_DT
IS
  'The database server?s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INT_OUTBOUND_QUEUE_LOG.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INT_OUTBOUND_QUEUE_LOG.REVISION_USER
IS
  'The user that last modified the record.' ;
ALTER TABLE INT_OUTBOUND_QUEUE_LOG ADD CONSTRAINT PK_INT_OUTBOUND_QUEUE_LOG PRIMARY KEY ( QUEUE_ID ) ;


CREATE TABLE INT_PROCESS
  (
    NAMESPACE VARCHAR2 (200) NOT NULL DEFERRABLE ,
    NAME      VARCHAR2 (200) NOT NULL DEFERRABLE ,
    TYPE      VARCHAR2 (32) NOT NULL DEFERRABLE ,
    PROCESS CLOB ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INT_PROCESS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INT_PROCESS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_PROCESS ADD CONSTRAINT PK_INT_PROCESS PRIMARY KEY ( NAMESPACE, NAME ) ;


CREATE TABLE INT_STEP_LOG
  (
    STEP_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    NH_STEP_ID      NUMBER (10) ,
    QUEUE_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    STEP_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    STEP_TYPE_CD    VARCHAR2 (10) NOT NULL DEFERRABLE ,
    STATUS_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    STATUS_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    SIBLING_ORDER   NUMBER (10) NOT NULL DEFERRABLE ,
    STEP_NAME       VARCHAR2 (128) NOT NULL DEFERRABLE ,
    OUTPUT_MSG CLOB ,
    ERROR_MSG CLOB ,
    START_DT       DATE ,
    END_DT         DATE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INT_STEP_LOG ADD CHECK ( STEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_STEP_LOG ADD CHECK ( NH_STEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_STEP_LOG ADD CHECK ( QUEUE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_STEP_LOG ADD CHECK ( STEP_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_STEP_LOG ADD CHECK ( STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INT_STEP_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INT_STEP_LOG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN INT_STEP_LOG.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN INT_STEP_LOG.CREATION_DT
IS
  'The database server?s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INT_STEP_LOG.REVISION_DT
IS
  'The database server?s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INT_STEP_LOG.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INT_STEP_LOG.REVISION_USER
IS
  'The user that last modified the record. ' ;
  CREATE INDEX IX_INT_IN_QUEUE_LOG_INTSTEPLOG ON INT_STEP_LOG
    ( QUEUE_ID ASC
    ) ;
ALTER TABLE INT_STEP_LOG ADD CONSTRAINT PK_INT_STEP_LOG PRIMARY KEY ( STEP_ID ) ;


CREATE TABLE INV_AC_FLIGHT_PLAN
  (
    INV_NO_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    FLIGHT_PLAN_ORD NUMBER (4) NOT NULL DEFERRABLE ,
    ARR_LEG_ID RAW (16) ,
    DEP_LEG_ID RAW (16) ,
    LOC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_AC_FLIGHT_PLAN ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_AC_FLIGHT_PLAN ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_AC_FLIGHT_PLAN ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_AC_FLIGHT_PLAN ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_AC_FLIGHT_PLAN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_AC_FLIGHT_PLAN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_AC_FLIGHT_PLAN
IS
  'Defines the location an inventory item will fly to.' ;
  COMMENT ON COLUMN INV_AC_FLIGHT_PLAN.INV_NO_DB_ID
IS
  'Inventory Database Id.  Not a FK Link to the INV_INV table.  This table is dynamically populated at run time.' ;
  COMMENT ON COLUMN INV_AC_FLIGHT_PLAN.INV_NO_ID
IS
  'Inventory Database Id.  Not a FK Link to the INV_INV table.  This table is dynamically populated at run time.' ;
  COMMENT ON COLUMN INV_AC_FLIGHT_PLAN.FLIGHT_PLAN_ORD
IS
  'The index of flights for the aircraft listed in the table.  They are listed in order of occurrence.' ;
  COMMENT ON COLUMN INV_AC_FLIGHT_PLAN.ARR_LEG_ID
IS
  'FK to FL_LEG table.  Represents the arrival flight.' ;
  COMMENT ON COLUMN INV_AC_FLIGHT_PLAN.DEP_LEG_ID
IS
  'FK to FL_LEG table.  Represents the departure flight.' ;
  COMMENT ON COLUMN INV_AC_FLIGHT_PLAN.LOC_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN INV_AC_FLIGHT_PLAN.LOC_ID
IS
  'Unique identifier serving as part of the primary key, and assigned from the sequence LOC_ID_SEQ' ;
  COMMENT ON COLUMN INV_AC_FLIGHT_PLAN.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_AC_FLIGHT_PLAN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_AC_FLIGHT_PLAN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_AC_FLIGHT_PLAN.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_AC_FLIGHT_PLAN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVLOC_INVACFLIGHTPLAN ON INV_AC_FLIGHT_PLAN
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
  CREATE INDEX IX_ARRFLLEG_INVACFLPLAN ON INV_AC_FLIGHT_PLAN
    (
      ARR_LEG_ID ASC
    ) ;
  CREATE INDEX IX_DEPFLLEG_INVACFLPLAN ON INV_AC_FLIGHT_PLAN
    (
      DEP_LEG_ID ASC
    ) ;
ALTER TABLE INV_AC_FLIGHT_PLAN ADD CONSTRAINT PK_INV_AC_FLIGHT_PLAN PRIMARY KEY ( INV_NO_DB_ID, INV_NO_ID, FLIGHT_PLAN_ORD ) ;


CREATE TABLE INV_AC_REG
  (
    INV_NO_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    INV_OPER_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    INV_OPER_CD            VARCHAR2 (8) NOT NULL DEFERRABLE ,
    REG_BODY_DB_ID         NUMBER (10) ,
    REG_BODY_CD            VARCHAR2 (8) ,
    INV_CAPABILITY_DB_ID   NUMBER (10) ,
    INV_CAPABILITY_CD      VARCHAR2 (8) ,
    COUNTRY_DB_ID          NUMBER (10) ,
    COUNTRY_CD             VARCHAR2 (8) ,
    FORECAST_MODEL_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    FORECAST_MODEL_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    AC_REG_CD              VARCHAR2 (10) NOT NULL DEFERRABLE ,
    AIRWORTH_CD            VARCHAR2 (40) ,
    PRIVATE_BOOL           NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    PREVENT_LPA_BOOL       NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ISSUE_ACCOUNT_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ISSUE_ACCOUNT_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    VAR_NO_OEM             VARCHAR2 (40) ,
    LINE_NO_OEM            VARCHAR2 (40) ,
    FIN_NO_CD              VARCHAR2 (40) ,
    INV_OPER_CHANGE_REASON VARCHAR2 (150) ,
    ETOPS_BOOL             NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE ,
    LIC_DB_ID              NUMBER (10) ,
    LIC_ID                 NUMBER (10)
  ) ;
ALTER TABLE INV_AC_REG ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_AC_REG ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_AC_REG ADD CHECK ( INV_OPER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_AC_REG ADD CHECK ( REG_BODY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_AC_REG ADD CHECK ( INV_CAPABILITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_AC_REG ADD CHECK ( COUNTRY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_AC_REG ADD CHECK ( FORECAST_MODEL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_AC_REG ADD CHECK ( FORECAST_MODEL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_AC_REG ADD CHECK ( PRIVATE_BOOL     IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_AC_REG ADD CHECK ( PREVENT_LPA_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_AC_REG ADD CHECK ( ISSUE_ACCOUNT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_AC_REG ADD CHECK ( ISSUE_ACCOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_AC_REG ADD CHECK ( ETOPS_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_AC_REG ADD CHECK ( RSTAT_CD   IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_AC_REG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_AC_REG ADD CHECK ( LIC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_AC_REG ADD CHECK ( LIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_AC_REG
IS
  'Aircraft Registration: This entity represents the additional attributes required by aircraft, above and beyond those recorded for all inventory. Aircraft are specialized Inventory items (ie. inv_class = "ACFT") that can have unique events assigned to them (i.e. flights, maintenance releases, etc...). This is a specific node in the inventory GEN-SPEC construct and will always be the highest node in the INV_INV hierarchy.' ;
  COMMENT ON COLUMN INV_AC_REG.INV_NO_DB_ID
IS
  'FK to INV_INV. Reference to the standard inventory attributes for the aircraft.' ;
  COMMENT ON COLUMN INV_AC_REG.INV_NO_ID
IS
  'FK to INV_INV. Reference to the standard inventory attributes for the aircraft.' ;
  COMMENT ON COLUMN INV_AC_REG.INV_OPER_DB_ID
IS
  'FK to REF_INV_OPER. Defines overall serviceability of the aircraft.' ;
  COMMENT ON COLUMN INV_AC_REG.INV_OPER_CD
IS
  'FK to REF_INV_OPER. Defines overall serviceability of the aircraft.' ;
  COMMENT ON COLUMN INV_AC_REG.REG_BODY_DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN INV_AC_REG.REG_BODY_CD
IS
  'A unique, user entered value that defines the PK of this reference term.' ;
  COMMENT ON COLUMN INV_AC_REG.INV_CAPABILITY_DB_ID
IS
  'FK to REF_INV_CAPABILITY. Defines restricted flight conditions.' ;
  COMMENT ON COLUMN INV_AC_REG.INV_CAPABILITY_CD
IS
  'FK to REF_INV_CAPABILITY. Defines restricted flight conditions.' ;
  COMMENT ON COLUMN INV_AC_REG.COUNTRY_DB_ID
IS
  'FK to REF_COUNTRY. The country where this aircraft is registered' ;
  COMMENT ON COLUMN INV_AC_REG.COUNTRY_CD
IS
  'FK to REF_COUNTRY. The country where this aircraft is registered' ;
  COMMENT ON COLUMN INV_AC_REG.FORECAST_MODEL_DB_ID
IS
  'FK to FC_MODEL - the forecast model currently used by this aircraft.' ;
  COMMENT ON COLUMN INV_AC_REG.FORECAST_MODEL_ID
IS
  'FK to FC_MODEL - the forecast model currently used by this aircraft.' ;
  COMMENT ON COLUMN INV_AC_REG.AC_REG_CD
IS
  'The registration code for the aircraft - IATA country letter followed by unique identifier.' ;
  COMMENT ON COLUMN INV_AC_REG.AIRWORTH_CD
IS
  'The regulatory body''s Airworthiness designation code.' ;
  COMMENT ON COLUMN INV_AC_REG.PRIVATE_BOOL
IS
  'Indicates if the aircraft is private or commercial.' ;
  COMMENT ON COLUMN INV_AC_REG.PREVENT_LPA_BOOL
IS
  'This column allows you to prevent line planning automation to make changes to any work packages associated with this aircraft.' ;
  COMMENT ON COLUMN INV_AC_REG.ISSUE_ACCOUNT_DB_ID
IS
  'This is foreign ket to FNC_ACCOUNT. This is optional for all tasks.' ;
  COMMENT ON COLUMN INV_AC_REG.ISSUE_ACCOUNT_ID
IS
  'This is foreign ket to FNC_ACCOUNT. This is optional for all tasks.' ;
  COMMENT ON COLUMN INV_AC_REG.VAR_NO_OEM
IS
  'Variable number from the original equipment manufacturer.' ;
  COMMENT ON COLUMN INV_AC_REG.LINE_NO_OEM
IS
  'Line number original eqiupment manufacturer.' ;
  COMMENT ON COLUMN INV_AC_REG.FIN_NO_CD
IS
  'Fin number code.' ;
  COMMENT ON COLUMN INV_AC_REG.INV_OPER_CHANGE_REASON
IS
  'This will store reasons for change constant value used in INV_STATUS.CalculateStatusRecord' ;
  COMMENT ON COLUMN INV_AC_REG.ETOPS_BOOL
IS
  'This is the ETOPS identifier for this aircraft.' ;
  COMMENT ON COLUMN INV_AC_REG.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_AC_REG.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_AC_REG.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_AC_REG.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_AC_REG.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  COMMENT ON COLUMN INV_AC_REG.LIC_DB_ID
IS
  'optional foriegn key to license table that is associated with this aircraft.' ;
  COMMENT ON COLUMN INV_AC_REG.LIC_ID
IS
  'optional foriegn key to license table that is associated with this aircraft.' ;
  CREATE INDEX IX_INV_AC_REG_IE1 ON INV_AC_REG
    ( AC_REG_CD ASC
    ) ;
  CREATE INDEX IX_AC_REG_CD_LOWER ON INV_AC_REG
    ( LOWER(AC_REG_CD)
    ) ;
  CREATE INDEX IX_FNCACCOUNT_INVACREG ON INV_AC_REG
    (
      ISSUE_ACCOUNT_DB_ID ASC ,
      ISSUE_ACCOUNT_ID ASC
    ) ;
  CREATE INDEX IX_FCMODEL_INVACREG ON INV_AC_REG
    (
      FORECAST_MODEL_DB_ID ASC ,
      FORECAST_MODEL_ID ASC
    ) ;
  CREATE INDEX IX_LICDEFN_INVACREG ON INV_AC_REG
    (
      LIC_DB_ID ASC ,
      LIC_ID ASC
    ) ;
ALTER TABLE INV_AC_REG ADD CONSTRAINT PK_INV_AC_REG PRIMARY KEY ( INV_NO_DB_ID, INV_NO_ID ) ;


CREATE TABLE INV_AC_REG_TO_FP
  (
    INV_NO_DB_ID   NUMBER (10) NOT NULL ,
    INV_NO_ID      NUMBER (10) NOT NULL ,
    EXPORT_BOOL    NUMBER (1) NOT NULL ,
    RSTAT_CD       NUMBER (3) DEFAULT 0 NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE INV_AC_REG_TO_FP ADD CHECK ( EXPORT_BOOL IN (0, 1)) ;
ALTER TABLE INV_AC_REG_TO_FP ADD CHECK ( RSTAT_CD    IN (0, 1, 2, 3)) ;
ALTER TABLE INV_AC_REG_TO_FP ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE INV_AC_REG_TO_FP ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE INV_AC_REG_TO_FP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON COLUMN INV_AC_REG_TO_FP.INV_NO_DB_ID
IS
  'The aircraft inventory''s database id.' ;
  COMMENT ON COLUMN INV_AC_REG_TO_FP.INV_NO_ID
IS
  'The aircraft inventory''s id.' ;
  COMMENT ON COLUMN INV_AC_REG_TO_FP.EXPORT_BOOL
IS
  'A boolean indicating whether or not the associated aircraft inventory shall be exported to Fleet Planner.' ;
  COMMENT ON COLUMN INV_AC_REG_TO_FP.RSTAT_CD
IS
  'Status of the record.' ;
  COMMENT ON COLUMN INV_AC_REG_TO_FP.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN INV_AC_REG_TO_FP.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN INV_AC_REG_TO_FP.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN INV_AC_REG_TO_FP.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN INV_AC_REG_TO_FP.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN INV_AC_REG_TO_FP.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN INV_AC_REG_TO_FP.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
CREATE UNIQUE INDEX IX_EXPORTBOOL_INVACREGTOFP ON INV_AC_REG_TO_FP ( INV_NO_ID ASC , INV_NO_DB_ID ASC , EXPORT_BOOL ASC ) ;
ALTER TABLE INV_AC_REG_TO_FP ADD CONSTRAINT PK_INV_AC_REG_TO_FP PRIMARY KEY ( INV_NO_DB_ID, INV_NO_ID ) ;


CREATE TABLE INV_ADVSRY
  (
    INV_NO_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ADVSRY_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    ADVSRY_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ACTIVE_BOOL    NUMBER (1) DEFAULT 0 ,
    CLEAR_NOTE     VARCHAR2 (4000) ,
    CLEAR_DT       DATE ,
    CLEAR_HR_DB_ID NUMBER (10) ,
    CLEAR_HR_ID    NUMBER (10) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_ADVSRY ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_ADVSRY ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_ADVSRY ADD CHECK ( ADVSRY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_ADVSRY ADD CHECK ( ADVSRY_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_ADVSRY ADD CHECK ( ACTIVE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_ADVSRY ADD CHECK ( CLEAR_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_ADVSRY ADD CHECK ( CLEAR_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_ADVSRY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_ADVSRY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_ADVSRY
IS
  'This table will associate the advisory with a serial/batch number.  When the relationship is flagged as active, the serial/batch number is flagged with the advisory.  To clear the flag, the ACTIVE_BOOL is set to zero.  The advisory remains associated with the serial/batch number for historical record keeping.' ;
  COMMENT ON COLUMN INV_ADVSRY.INV_NO_DB_ID
IS
  'PFK to inv_inv. The inventory being associated to the advisory.' ;
  COMMENT ON COLUMN INV_ADVSRY.INV_NO_ID
IS
  'PFK to inv_inv. The inventory being associated to the advisory.' ;
  COMMENT ON COLUMN INV_ADVSRY.ADVSRY_DB_ID
IS
  'PFK to eqp_advsry. The advisory being associated to the inventory.' ;
  COMMENT ON COLUMN INV_ADVSRY.ADVSRY_ID
IS
  'PFK to eqp_advsry. The advisory being associated to the inventory.' ;
  COMMENT ON COLUMN INV_ADVSRY.ACTIVE_BOOL
IS
  'Boolean flag to indicate if this advisory is currently active.  When the flag is set to true, the serial/batch number is under investigation according to the advisory.' ;
  COMMENT ON COLUMN INV_ADVSRY.CLEAR_NOTE
IS
  'This note field contains any notes the user entered when clearing the advisory from the inventory record.' ;
  COMMENT ON COLUMN INV_ADVSRY.CLEAR_DT
IS
  'Timestamp of advisory clear.' ;
  COMMENT ON COLUMN INV_ADVSRY.CLEAR_HR_DB_ID
IS
  'FK to org_hr.  The user who cleared the advisory from this inventory.' ;
  COMMENT ON COLUMN INV_ADVSRY.CLEAR_HR_ID
IS
  'FK to org_hr.  The user who cleared the advisory from this inventory.' ;
  COMMENT ON COLUMN INV_ADVSRY.RSTAT_CD
IS
  'FK to MIM_RSTAT' ;
  COMMENT ON COLUMN INV_ADVSRY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_ADVSRY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_ADVSRY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_ADVSRY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVINV_INVADVSRY ON INV_ADVSRY
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_INVADVSRY ON INV_ADVSRY
    (
      CLEAR_HR_DB_ID ASC ,
      CLEAR_HR_ID ASC
    ) ;
  CREATE INDEX IX_EQPADVSRY_INVADVSRY ON INV_ADVSRY
    (
      ADVSRY_DB_ID ASC ,
      ADVSRY_ID ASC
    ) ;
ALTER TABLE INV_ADVSRY ADD CONSTRAINT PK_INV_ADVSRY PRIMARY KEY ( INV_NO_DB_ID, INV_NO_ID, ADVSRY_DB_ID, ADVSRY_ID ) ;


CREATE TABLE INV_ASSOCIATION
  (
    INV_NO_DB_ID   NUMBER (10) NOT NULL ,
    INV_NO_ID      NUMBER (10) NOT NULL ,
    ASSOCIATION_ID NUMBER (10) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL
  ) ;
ALTER TABLE INV_ASSOCIATION ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
COMMENT ON TABLE INV_ASSOCIATION
IS
  'Table holds association between inventories with each inventory belonging to only one association at any point in time.' ;
  COMMENT ON COLUMN INV_ASSOCIATION.INV_NO_DB_ID
IS
  'Primary Key for INV_ASSOCIATION And Foreign Key for INV_INV.' ;
  COMMENT ON COLUMN INV_ASSOCIATION.INV_NO_ID
IS
  'Primary Key for INV_ASSOCIATION And Foreign Key for INV_INV.' ;
  COMMENT ON COLUMN INV_ASSOCIATION.RSTAT_CD
IS
  'Status of the record.' ;
  COMMENT ON COLUMN INV_ASSOCIATION.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN INV_ASSOCIATION.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN INV_ASSOCIATION.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.
For new tables with single-column keys, this column replaces the DB_ID column of the legacy multi-column primary keys.' ;
  COMMENT ON COLUMN INV_ASSOCIATION.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN INV_ASSOCIATION.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN INV_ASSOCIATION.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_INV_ASSOCIATION_ASSO_ID ON INV_ASSOCIATION
    (
      ASSOCIATION_ID ASC
    ) ;
ALTER TABLE INV_ASSOCIATION ADD CONSTRAINT PK_INV_ASSOCIATION PRIMARY KEY ( INV_NO_ID, INV_NO_DB_ID ) ;


CREATE TABLE INV_ATTACH
  (
    INV_NO_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ATTACH_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    ATTACH_TYPE_DB_ID NUMBER (10) ,
    ATTACH_TYPE_CD    VARCHAR2 (8) ,
    ATTACH_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    ATTACH_LDESC      VARCHAR2 (4000) ,
    ATTACH_NOTE       VARCHAR2 (4000) ,
    BLOB_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_ATTACH ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_ATTACH ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_ATTACH ADD CHECK ( INV_NO_ATTACH_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_ATTACH ADD CHECK ( ATTACH_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_ATTACH ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_ATTACH ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_ATTACH ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_ATTACH ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_ATTACH
IS
  'Inventory Current Usage: This entity records the current usage counts (running totals) for a log card component. It is accurate to the last recorded usage transaction and is updated on a per transaction basis.' ;
  COMMENT ON COLUMN INV_ATTACH.ATTACH_TYPE_DB_ID
IS
  'Attachement type database identifier.' ;
  COMMENT ON COLUMN INV_ATTACH.ATTACH_TYPE_CD
IS
  'Attachement type code.' ;
  COMMENT ON COLUMN INV_ATTACH.ATTACH_SDESC
IS
  'The short description of the attachement. ' ;
  COMMENT ON COLUMN INV_ATTACH.ATTACH_LDESC
IS
  'The long description of the attachement.' ;
  COMMENT ON COLUMN INV_ATTACH.ATTACH_NOTE
IS
  'Attachement note.' ;
  COMMENT ON COLUMN INV_ATTACH.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_ATTACH.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_ATTACH.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_ATTACH.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_ATTACH.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVINV_INVATTACH ON INV_ATTACH
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_FK_CORBLOBINFO_INVATTACH ON INV_ATTACH
    (
      BLOB_DB_ID ASC ,
      BLOB_ID ASC
    ) ;
ALTER TABLE INV_ATTACH ADD CONSTRAINT PK_INV_ATTACH PRIMARY KEY ( INV_NO_DB_ID, INV_NO_ID, INV_NO_ATTACH_ID ) ;


CREATE TABLE INV_CND_CHG_EVENT
  (
    event_db_id        NUMBER (10) NOT NULL ,
    event_id           NUMBER (10) NOT NULL ,
    stage_reason_db_id NUMBER (10) ,
    stage_reason_cd    VARCHAR2 (16) ,
    editor_hr_db_id    NUMBER (10) ,
    editor_hr_id       NUMBER (10) ,
    event_status_db_id NUMBER (10) ,
    event_status_cd    VARCHAR2 (16) ,
    event_reason_db_id NUMBER (10) ,
    event_reason_cd    VARCHAR2 (8) ,
    data_source_db_id  NUMBER (10) ,
    data_source_cd     VARCHAR2 (8) ,
    h_event_db_id      NUMBER (10) ,
    h_event_id         NUMBER (10) ,
    event_sdesc        VARCHAR2 (500) NOT NULL ,
    ext_key_sdesc      VARCHAR2 (80) ,
    seq_err_bool       NUMBER (1) DEFAULT 0 NOT NULL ,
    event_ldesc        VARCHAR2 (4000) ,
    event_dt           DATE ,
    sched_start_dt     DATE ,
    sub_event_ord      NUMBER (4) ,
    alt_id RAW (16) NOT NULL ,
    rstat_cd       NUMBER (3) NOT NULL ,
    revision_no    NUMBER (10) NOT NULL ,
    ctrl_db_id     NUMBER (10) NOT NULL ,
    creation_dt    DATE NOT NULL ,
    revision_dt    DATE NOT NULL ,
    revision_db_id NUMBER (10) NOT NULL ,
    revision_user  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE INV_CND_CHG_EVENT ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_CND_CHG_EVENT ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_CND_CHG_EVENT ADD CHECK ( seq_err_bool IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_CND_CHG_EVENT ADD CHECK ( rstat_cd     IN (0, 1, 2, 3)) DEFERRABLE ;
COMMENT ON TABLE INV_CND_CHG_EVENT
IS
  'Inventory Change (AC) Event.  This class enumerates all of the change actions (i.e. data records, fault records, etc.) that are entered into the system against an inventory item. It is the foundation for all recorded transactions against assets and is driven in sequence by time and usage. Events can be historical in nature, can be current or can be in the future. An event has
a) a lifecycle
b) a duration
c) records completed actions for FAA purposes
d) records pending actions for FAA purposes
e) records technical log related information
f) records journey log related information' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.event_db_id
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.event_id
IS
  'Unique idenifier assigned from Sequence EVENT_ID_SEQ.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.stage_reason_db_id
IS
  'FK to REF_STAGE_REASON' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.stage_reason_cd
IS
  'FK to REF_STAGE_REASON.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.editor_hr_db_id
IS
  'FK to ORG_HR. The current editor of the event record.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.editor_hr_id
IS
  'FK to ORG_HR. The current editor of the event record.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.event_status_db_id
IS
  'The last recorded status of the workflow. FK to REF_EVENT_STATUS' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.event_status_cd
IS
  'The last recorded status of the workflow. FK to REF_EVENT_STATUS' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.event_reason_db_id
IS
  'FK to REF_EVENT_REASON. Identifies main reason for event occurrence.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.event_reason_cd
IS
  'FK to REF_EVENT_REASON. Identifies main reason for event occurrence.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.data_source_db_id
IS
  'FK to REF_DATA_SOURCE.  Identifies the method that the system will use to retrieve actual data.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.data_source_cd
IS
  'FK to REF_DATA_SOURCE.  Identifies the method that the system will use to retrieve actual data.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.h_event_db_id
IS
  'FK to INV_CND_CHG_EVENT.  Corresponds to the highest Event under which this Event is grouped.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.h_event_id
IS
  'FK to INV_CND_CHG_EVENT.  Corresponds to the highest Event under which this Event is grouped.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.event_sdesc
IS
  'A short label used for the event. Frequently generated by the system.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.ext_key_sdesc
IS
  'A field used to store an external system''s PK value.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.seq_err_bool
IS
  'Indicates if the event was recorded out of chronological sequence.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.event_ldesc
IS
  'A long description for the event.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.event_dt
IS
  'Local time that the event actually ended.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.sched_start_dt
IS
  'Scheduled local time to start the event.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.sub_event_ord
IS
  'Defines the hierarchy of a series of related events.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.rstat_cd
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.revision_no
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.creation_dt
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.revision_dt
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.revision_db_id
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_CND_CHG_EVENT.revision_user
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INV_CND_CHG_EVENT_SDESC_LW ON INV_CND_CHG_EVENT
    (
      LOWER(EVENT_SDESC)
    ) ;
  CREATE INDEX IX_INV_CND_CHG_EVENT_EVTEVTH ON INV_CND_CHG_EVENT
    (
      h_event_db_id ASC ,
      h_event_id ASC
    ) ;
  CREATE INDEX IX_INV_CND_CHG_EVENT_EVTSDESC ON INV_CND_CHG_EVENT
    (
      event_sdesc ASC
    ) ;
  CREATE INDEX IX_INVCNDCHGEVT_EXTKEYSDESC ON INV_CND_CHG_EVENT
    (
      ext_key_sdesc ASC
    ) ;
  CREATE INDEX IX_INVCNDCHGEVT_TYPESTATUS ON INV_CND_CHG_EVENT
    (
      event_status_db_id ASC ,
      event_status_cd ASC
    ) ;
  CREATE INDEX IX_ORGHR_INV_CND_CHG_EVENT ON INV_CND_CHG_EVENT
    (
      editor_hr_db_id ASC ,
      editor_hr_id ASC
    ) ;
ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT PK_INV_CND_CHG_EVENT PRIMARY KEY ( event_db_id, event_id ) ;
ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT IX_INV_CND_CHG_EVENTALTID_UNQ UNIQUE ( alt_id ) ;


CREATE TABLE INV_CND_CHG_INV
  (
    event_db_id         NUMBER (10) NOT NULL ,
    event_id            NUMBER (10) NOT NULL ,
    event_inv_id        NUMBER (10) NOT NULL ,
    inv_no_db_id        NUMBER (10) NOT NULL ,
    inv_no_id           NUMBER (10) NOT NULL ,
    nh_inv_no_db_id     NUMBER (10) ,
    nh_inv_no_id        NUMBER (10) ,
    assmbl_inv_no_db_id NUMBER (10) ,
    assmbl_inv_no_id    NUMBER (10) ,
    h_inv_no_db_id      NUMBER (10) ,
    h_inv_no_id         NUMBER (10) ,
    assmbl_db_id        NUMBER (10) ,
    assmbl_cd           VARCHAR2 (8) ,
    assmbl_bom_id       NUMBER (10) ,
    assmbl_pos_id       NUMBER (10) ,
    part_no_db_id       NUMBER (10) ,
    part_no_id          NUMBER (10) ,
    bom_part_db_id      NUMBER (10) ,
    bom_part_id         NUMBER (10) ,
    main_inv_bool       NUMBER (1) DEFAULT 0 NOT NULL ,
    rstat_cd            NUMBER (3) NOT NULL ,
    revision_no         NUMBER (10) NOT NULL ,
    ctrl_db_id          NUMBER (10) NOT NULL ,
    creation_dt         DATE NOT NULL ,
    revision_dt         DATE NOT NULL ,
    revision_db_id      NUMBER (10) NOT NULL ,
    revision_user       VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE INV_CND_CHG_INV ADD CHECK ( main_inv_bool IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_CND_CHG_INV ADD CHECK ( rstat_cd      IN (0, 1, 2, 3)) DEFERRABLE ;
COMMENT ON TABLE INV_CND_CHG_INV
IS
  'Inventory Change (AC) Event Inventory Configuration: This entity is used to determine which log card an event should be filed against. It also captures the log card''s asset configuration (ie, exact component, assembly, engine, aircraft, etc...) at the time the event was completed. It is the foundation for reconstructing configurations at points in history.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.event_db_id
IS
  'FK to EVT_EVENT.  The event the log card should be filed against.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.event_id
IS
  'FK to EVT_EVENT.  The event the log card should be filed against.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.event_inv_id
IS
  'Number assigned (1..n) in context of the event.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.inv_no_db_id
IS
  'FK to INV_INV. The immediate item that the event is assigned to.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.inv_no_id
IS
  'FK to INV_INV. The immediate item that the event is assigned to.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.nh_inv_no_db_id
IS
  'FK to INV_INV. The immediate item''s immediate parent at the time of the event.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.nh_inv_no_id
IS
  'FK to INV_INV. The immediate item''s immediate parent at the time of the event.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.assmbl_inv_no_db_id
IS
  'FK to INV_INV. The immediate item''s immediate parent assembly at the time of the event.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.assmbl_inv_no_id
IS
  'FK to INV_INV. The immediate item''s immediate parent assembly at the time of the event.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.h_inv_no_db_id
IS
  'FK to INV_INV. The immediate item''s highest parent at the time of the event.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.h_inv_no_id
IS
  'FK to INV_INV. The immediate item''s highest parent at the time of the event.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.assmbl_db_id
IS
  'FK to EQP_ASSMBL_BOM_POS. The position of the immediate item at the time of the event.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.assmbl_cd
IS
  'FK to EQP_ASSMBL_BOM_POS. The position of the immediate item at the time of the event.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.assmbl_bom_id
IS
  'FK to EQP_ASSMBL_BOM_POS. The position of the immediate item at the time of the event.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.assmbl_pos_id
IS
  'FK to EQP_ASSMBL_BOM_POS. The position of the immediate item at the time of the event.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.part_no_db_id
IS
  'FK to EQP_PART_NO. The part number of the immediate item at the time of the event.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.part_no_id
IS
  'FK to EQP_PART_NO. The part number of the immediate item at the time of the event.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.bom_part_db_id
IS
  'FK to EQP_BOM_PART.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.bom_part_id
IS
  'FK to EQP_BOM_PART.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.main_inv_bool
IS
  'Indicates that this item is THE immediate item which always carries the event.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.rstat_cd
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.revision_no
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.ctrl_db_id
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.creation_dt
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.revision_dt
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.revision_db_id
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV.revision_user
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPASSMBLPOS_EVTINVCNDCHG ON INV_CND_CHG_INV
    (
      assmbl_db_id ASC ,
      assmbl_cd ASC ,
      assmbl_bom_id ASC ,
      assmbl_pos_id ASC
    ) ;
  CREATE INDEX IX_EQPBOMPART_EVTINVCNDCHG ON INV_CND_CHG_INV
    (
      bom_part_db_id ASC ,
      bom_part_id ASC
    ) ;
  CREATE INDEX IX_EQPPARTNO_EVTINVCNDCHG ON INV_CND_CHG_INV
    (
      part_no_db_id ASC ,
      part_no_id ASC
    ) ;
  CREATE INDEX IX_EVTINVCNDCHG_EVTEVENT ON INV_CND_CHG_INV
    (
      inv_no_db_id ASC ,
      inv_no_id ASC ,
      event_db_id ASC ,
      event_id ASC ,
      main_inv_bool ASC
    ) ;
  CREATE INDEX IX_ININV_EVTINVCNDCHG ON INV_CND_CHG_INV
    (
      assmbl_inv_no_db_id ASC ,
      assmbl_inv_no_id ASC
    ) ;
  CREATE INDEX IX_INVINV_EVTINVCNDCHG ON INV_CND_CHG_INV
    (
      h_inv_no_db_id ASC ,
      h_inv_no_id ASC
    ) ;
  CREATE INDEX IX_INVIN_EVTINVCNDCHG ON INV_CND_CHG_INV
    (
      inv_no_db_id ASC ,
      inv_no_id ASC
    ) ;
  CREATE INDEX IX_INV_INV_EVTINVCNDCHG_IE ON INV_CND_CHG_INV
    (
      event_db_id ASC ,
      event_id ASC ,
      inv_no_db_id ASC ,
      inv_no_id ASC
    ) ;
  CREATE INDEX IX_IVINV_EVTINVCNDCHG ON INV_CND_CHG_INV
    (
      nh_inv_no_db_id ASC ,
      nh_inv_no_id ASC
    ) ;
  CREATE INDEX IX_MAIN_EVT_EVTINVCNDCHG ON INV_CND_CHG_INV
    (
      event_db_id ASC ,
      event_id ASC ,
      main_inv_bool ASC
    ) ;
  CREATE INDEX IX_MAIN_INV_EVTINVCNDCHG ON INV_CND_CHG_INV
    (
      inv_no_db_id ASC ,
      inv_no_id ASC ,
      main_inv_bool ASC
    ) ;
  CREATE INDEX IX_MAIN_INV_EVT_EVTINVCNDCHG ON INV_CND_CHG_INV
    (
      event_db_id ASC ,
      event_id ASC ,
      inv_no_db_id ASC ,
      inv_no_id ASC ,
      main_inv_bool ASC
    ) ;
ALTER TABLE INV_CND_CHG_INV ADD CONSTRAINT PK_INV_CND_CHG_INV PRIMARY KEY ( event_db_id, event_id, event_inv_id ) ;


CREATE TABLE INV_CND_CHG_INV_USAGE
  (
    event_db_id     NUMBER (10) NOT NULL ,
    event_id        NUMBER (10) NOT NULL ,
    event_inv_id    NUMBER (10) NOT NULL ,
    data_type_db_id NUMBER (10) NOT NULL ,
    data_type_id    NUMBER (10) NOT NULL ,
    tsn_qt FLOAT NOT NULL ,
    tso_qt FLOAT NOT NULL ,
    tsi_qt FLOAT NOT NULL ,
    assmbl_tsn_qt FLOAT ,
    assmbl_tso_qt FLOAT ,
    h_tsn_qt FLOAT ,
    h_tso_qt FLOAT ,
    nh_tsn_qt FLOAT ,
    nh_tso_qt FLOAT ,
    negated_bool   NUMBER (1) DEFAULT 0 NOT NULL ,
    rstat_cd       NUMBER (3) NOT NULL ,
    revision_no    NUMBER (10) NOT NULL ,
    ctrl_db_id     NUMBER (10) NOT NULL ,
    creation_dt    DATE NOT NULL ,
    revision_dt    DATE NOT NULL ,
    revision_db_id NUMBER (10) NOT NULL ,
    revision_user  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE INV_CND_CHG_INV_USAGE ADD CHECK ( negated_bool IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_CND_CHG_INV_USAGE ADD CHECK ( rstat_cd     IN (0, 1, 2, 3)) DEFERRABLE ;
COMMENT ON TABLE INV_CND_CHG_INV_USAGE
IS
  'Event Usage: The usage values (TSN and TSO) at the time of the event are captured in this entity. This is required for historical auditing, scheduling and usage auditing.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.event_db_id
IS
  'FK to EVT_INV.  Determines the event the log card was filed against.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.event_id
IS
  'FK to EVT_INV.  Determines the event the log card was filed against.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.event_inv_id
IS
  'FK to EVT_INV.  Determines the event the log card was filed against.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.data_type_db_id
IS
  'FK to MIM_DATA_TYPE.  Identifies the main usage parameter for this event.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.data_type_id
IS
  'FK to MIM_DATA_TYPE.  Identifies the main usage parameter for this event.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.tsn_qt
IS
  'The total usage since new on the item when the event occurred' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.tso_qt
IS
  'The total usage since overhaul on the item when the event occurred' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.tsi_qt
IS
  'Whenever a usage snapshot is taken on an event, we will record the TSI_QT as well as the TSN_QT and the TSO_QT. This value can be taken directly from the new INV_CURR_USAGE.TSI_QT column.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.assmbl_tsn_qt
IS
  'The total usage since new on the item''s next most immediate parent assembly when the event occurred' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.assmbl_tso_qt
IS
  'The total usage since overhaul on the item''s next most immediate parent assembly when the event occurred' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.h_tsn_qt
IS
  'The total usage since new on the item''s highest parent when the event occurred' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.h_tso_qt
IS
  'The total usage since overhaul on the item''s highest parent when the event occurred' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.nh_tsn_qt
IS
  'The total usage since new on the item''s next highest parent when the event occurred' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.nh_tso_qt
IS
  'The total usage since overhaul on the item''s next highest parent when the event occurred' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.negated_bool
IS
  'Indicates that the usage record was negated' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.rstat_cd
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.revision_no
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.ctrl_db_id
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.creation_dt
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.revision_dt
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.revision_db_id
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.revision_user
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EVTINV_INVCNDCHGUSAGE ON INV_CND_CHG_INV_USAGE
    (
      event_db_id ASC ,
      event_id ASC ,
      event_inv_id ASC
    ) ;
  CREATE INDEX IX_MDATATYPE_INVCNDCHGUSAGE ON INV_CND_CHG_INV_USAGE
    (
      data_type_db_id ASC ,
      data_type_id ASC
    ) ;
ALTER TABLE INV_CND_CHG_INV_USAGE ADD CONSTRAINT PK_INV_CND_CHG_INV_USAGE PRIMARY KEY ( event_db_id, event_id, event_inv_id, data_type_db_id, data_type_id ) ;


CREATE TABLE INV_CSGN_XCHG
  (
    INV_XFER_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    INV_XFER_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RTRN_INV_NO_DB_ID NUMBER (10) ,
    RTRN_INV_NO_ID    NUMBER (10) ,
    PO_DB_ID          NUMBER (10) ,
    PO_ID             NUMBER (10) ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_CSGN_XCHG ADD CHECK ( INV_XFER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_CSGN_XCHG ADD CHECK ( INV_XFER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_CSGN_XCHG ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_CSGN_XCHG ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_CSGN_XCHG ADD CHECK ( RTRN_INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_CSGN_XCHG ADD CHECK ( RTRN_INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_CSGN_XCHG ADD CHECK ( PO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_CSGN_XCHG ADD CHECK ( PO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_CSGN_XCHG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_CSGN_XCHG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_INVINV_INVCSGNXCHG ON INV_CSGN_XCHG
  (
    INV_NO_DB_ID ASC ,
    INV_NO_ID ASC
  ) ;
CREATE INDEX IX_POHEADER_INVCSGNXCHG ON INV_CSGN_XCHG
  (
    PO_DB_ID ASC ,
    PO_ID ASC
  ) ;
ALTER TABLE INV_CSGN_XCHG ADD CONSTRAINT PK_INV_CSGN_XCHG PRIMARY KEY ( INV_XFER_DB_ID, INV_XFER_ID ) ;


CREATE TABLE INV_CURR_USAGE
  (
    INV_NO_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    TSN_QT FLOAT NOT NULL DEFERRABLE ,
    TSO_QT FLOAT NOT NULL DEFERRABLE ,
    TSI_QT FLOAT NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_CURR_USAGE ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_CURR_USAGE ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_CURR_USAGE ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_CURR_USAGE ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_CURR_USAGE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_CURR_USAGE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_CURR_USAGE
IS
  'Inventory Current Usage: This entity records the current usage counts (running totals) for a log card component. It is accurate to the last recorded usage transaction and is updated on a per transaction basis.' ;
  COMMENT ON COLUMN INV_CURR_USAGE.INV_NO_DB_ID
IS
  'FK to INV_INV. The inventory on which the usage has been accrued.' ;
  COMMENT ON COLUMN INV_CURR_USAGE.INV_NO_ID
IS
  'FK to INV_INV. The inventory on which the usage has been accrued.' ;
  COMMENT ON COLUMN INV_CURR_USAGE.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN INV_CURR_USAGE.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN INV_CURR_USAGE.TSN_QT
IS
  'Time since new - current total.' ;
  COMMENT ON COLUMN INV_CURR_USAGE.TSO_QT
IS
  'Time since overhaul - current total.' ;
  COMMENT ON COLUMN INV_CURR_USAGE.TSI_QT
IS
  'This column is used to record the "Time Since Install" for a component. It is reset to 0 when a component is installed, and it accumulates usage just like TSN and TSO.' ;
  COMMENT ON COLUMN INV_CURR_USAGE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_CURR_USAGE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_CURR_USAGE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_CURR_USAGE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_CURR_USAGE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_MDATATYPE_INVCURRUSAGE ON INV_CURR_USAGE
    (
      DATA_TYPE_DB_ID ASC ,
      DATA_TYPE_ID ASC
    ) ;
  CREATE INDEX IX_INVINV_INVCURRUSAGE ON INV_CURR_USAGE
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
ALTER TABLE INV_CURR_USAGE ADD CONSTRAINT PK_INV_CURR_USAGE PRIMARY KEY ( INV_NO_DB_ID, INV_NO_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID ) ;


CREATE TABLE INV_DAMAGE
  (
    DAMAGE_DB_ID   NUMBER (10) NOT NULL ,
    DAMAGE_ID      NUMBER (10) NOT NULL ,
    INV_NO_DB_ID   NUMBER (10) NOT NULL ,
    INV_NO_ID      NUMBER (10) NOT NULL ,
    FAULT_DB_ID    NUMBER (10) ,
    FAULT_ID       NUMBER (10) ,
    LOCATION_MDESC VARCHAR2 (200) NOT NULL ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE INV_DAMAGE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
COMMENT ON COLUMN INV_DAMAGE.DAMAGE_DB_ID
IS
  ' Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN INV_DAMAGE.DAMAGE_ID
IS
  'Unique identifier serving as part of the primary key, and assigned from the sequence DAMAGE_LOC_ID_SEQ.' ;
  COMMENT ON COLUMN INV_DAMAGE.INV_NO_DB_ID
IS
  'FK to inv_inv. the inventory that the damage location was recorded against.' ;
  COMMENT ON COLUMN INV_DAMAGE.INV_NO_ID
IS
  'FK to inv_inv. the inventory that the damage location was recorded against.' ;
  COMMENT ON COLUMN INV_DAMAGE.FAULT_DB_ID
IS
  'FK to sd_fault. the fault that the damage location was recorded against.' ;
  COMMENT ON COLUMN INV_DAMAGE.FAULT_ID
IS
  'FK to sd_fault. the fault that the damage location was recorded against.' ;
  COMMENT ON COLUMN INV_DAMAGE.LOCATION_MDESC
IS
  'Records location information.' ;
  COMMENT ON COLUMN INV_DAMAGE.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.' ;
  COMMENT ON COLUMN INV_DAMAGE.CTRL_DB_ID
IS
  'The identifier of the database that owns the record. The meaning of this column may be specific to the entity' ;
  COMMENT ON COLUMN INV_DAMAGE.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN INV_DAMAGE.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN INV_DAMAGE.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN INV_DAMAGE.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_INVINV_INVDAMAGE ON INV_DAMAGE
    (
      INV_NO_ID ASC ,
      INV_NO_DB_ID ASC
    ) ;
CREATE UNIQUE INDEX IX_SDFAULT_INVDAMAGE ON INV_DAMAGE
  (
    FAULT_ID ASC , FAULT_DB_ID ASC
  )
  ;
ALTER TABLE INV_DAMAGE ADD CONSTRAINT PK_INV_DAMAGE PRIMARY KEY ( DAMAGE_ID, DAMAGE_DB_ID ) ;


CREATE TABLE INV_IETM
  (
    INV_NO_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_IETM_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_TYPE_DB_ID    NUMBER (10) ,
    IETM_TYPE_CD       VARCHAR2 (8) ,
    IETM_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    IETM_LDESC         VARCHAR2 (4000) ,
    CMDLINE_PARM_LDESC VARCHAR2 (4000) ,
    IETM_NOTE          VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL
  ) ;
ALTER TABLE INV_IETM ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_IETM ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_IETM ADD CHECK ( INV_NO_IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_IETM ADD CHECK ( IETM_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_IETM ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_IETM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_IETM
IS
  'Every part number can have a list of IETM links and attachments. IETM links can be used to add URL hyperlinks to a part number for such things as:
1. Hazardous Materials web site
2. Illustrated Parts Catalogue web site
3. Manufacturer?s Information web site' ;
  COMMENT ON COLUMN INV_IETM.IETM_SDESC
IS
  'Short description of the ietm link or attachment.' ;
  COMMENT ON COLUMN INV_IETM.IETM_LDESC
IS
  'Long description of the ietm link or attachment.' ;
  COMMENT ON COLUMN INV_IETM.IETM_NOTE
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_IETM.RSTAT_CD
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN INV_IETM.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN INV_IETM.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN INV_IETM.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN INV_IETM.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  COMMENT ON COLUMN INV_IETM.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.' ;
  CREATE INDEX IX_INVINV_INVIETM ON INV_IETM
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
ALTER TABLE INV_IETM ADD CONSTRAINT "pk_INV_IETM" PRIMARY KEY ( INV_NO_DB_ID, INV_NO_ID, INV_NO_IETM_ID ) ;
ALTER TABLE INV_IETM ADD CONSTRAINT IX_INVIETMALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE INV_INSTALL
  (
    INV_INSTALL_ID RAW (16) DEFAULT sys_guid() NOT NULL ,
    EVENT_DB_ID         NUMBER (10) NOT NULL ,
    EVENT_ID            NUMBER (10) NOT NULL ,
    INV_NO_DB_ID        NUMBER (10) NOT NULL ,
    INV_NO_ID           NUMBER (10) NOT NULL ,
    NH_INV_NO_DB_ID     NUMBER (10) ,
    NH_INV_NO_ID        NUMBER (10) ,
    ASSMBL_INV_NO_DB_ID NUMBER (10) ,
    ASSMBL_INV_NO_ID    NUMBER (10) ,
    H_INV_NO_DB_ID      NUMBER (10) ,
    H_INV_NO_ID         NUMBER (10) ,
    EVENT_DT            DATE ,
    MAIN_INV_BOOL       NUMBER (1) DEFAULT 0 NOT NULL ,
    RSTAT_CD            NUMBER (3) NOT NULL ,
    CTRL_DB_ID          NUMBER (10) NOT NULL ,
    REVISION_NO         NUMBER (10) NOT NULL ,
    CREATION_DB_ID      NUMBER (10) NOT NULL ,
    CREATION_DT         DATE NOT NULL ,
    REVISION_DT         DATE NOT NULL ,
    REVISION_DB_ID      NUMBER (10) NOT NULL ,
    REVISION_USER       VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE INV_INSTALL ADD CONSTRAINT INVINST_RSTAT_CD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE INV_INSTALL ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE INV_INSTALL ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE INV_INSTALL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON TABLE INV_INSTALL
IS
  'Inventory Install: This entity is used to record that an inventory item is installed to a parent inventory item during configuration change. It is the foundation for retrieving historic configuration information about inventory items at any time.' ;
  COMMENT ON COLUMN INV_INSTALL.INV_INSTALL_ID
IS
  'PK to INV_INSTALL_ID' ;
  COMMENT ON COLUMN INV_INSTALL.EVENT_DB_ID
IS
  'FK to EVT_EVENT.  The event that log card should be filed against.' ;
  COMMENT ON COLUMN INV_INSTALL.EVENT_ID
IS
  'FK to EVT_EVENT.  The event that log card should be filed against.' ;
  COMMENT ON COLUMN INV_INSTALL.INV_NO_DB_ID
IS
  'FK to INV_INV. The immediate item that the event is assigned to.' ;
  COMMENT ON COLUMN INV_INSTALL.INV_NO_ID
IS
  'FK to INV_INV. The immediate item that the event is assigned to.' ;
  COMMENT ON COLUMN INV_INSTALL.NH_INV_NO_DB_ID
IS
  'FK to INV_INV. The immediate item''s immediate parent at the time of the event.' ;
  COMMENT ON COLUMN INV_INSTALL.NH_INV_NO_ID
IS
  'FK to INV_INV. The immediate item''s immediate parent at the time of the event.' ;
  COMMENT ON COLUMN INV_INSTALL.ASSMBL_INV_NO_DB_ID
IS
  'FK to INV_INV. The immediate item''s immediate parent assembly at the time of the event.' ;
  COMMENT ON COLUMN INV_INSTALL.ASSMBL_INV_NO_ID
IS
  'FK to INV_INV. The immediate item''s immediate parent assembly at the time of the event.' ;
  COMMENT ON COLUMN INV_INSTALL.H_INV_NO_DB_ID
IS
  'FK to INV_INV. The immediate item''s highest parent at the time of the event.' ;
  COMMENT ON COLUMN INV_INSTALL.H_INV_NO_ID
IS
  'FK to INV_INV. The immediate item''s highest parent at the time of the event.' ;
  COMMENT ON COLUMN INV_INSTALL.EVENT_DT
IS
  'The local time at the time that the inventory item is actually installed. This is the same time as the time of the configuration change event.' ;
  COMMENT ON COLUMN INV_INSTALL.MAIN_INV_BOOL
IS
  'Indicates that this item is THE immediate item which always carries the event.' ;
  COMMENT ON COLUMN INV_INSTALL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access for the record.' ;
  COMMENT ON COLUMN INV_INSTALL.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN INV_INSTALL.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN INV_INSTALL.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN INV_INSTALL.CREATION_DT
IS
  'The data and time at which the record was inserted.' ;
  COMMENT ON COLUMN INV_INSTALL.REVISION_DT
IS
  'The data and time at which the record was updated.' ;
  COMMENT ON COLUMN INV_INSTALL.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN INV_INSTALL.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_INVINST_HINV_EVTDT_IDX ON INV_INSTALL
    (
      H_INV_NO_DB_ID ASC ,
      H_INV_NO_ID ASC ,
      EVENT_DT ASC
    ) ;
  CREATE INDEX IX_INVINST_EVENT_ID ON INV_INSTALL
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
  CREATE INDEX IX_INVINST_INV_ID ON INV_INSTALL
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVINST_H_INV_ID ON INV_INSTALL
    (
      H_INV_NO_DB_ID ASC ,
      H_INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVINST_ASSMBL_INV_ID ON INV_INSTALL
    (
      ASSMBL_INV_NO_DB_ID ASC ,
      ASSMBL_INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVINST_NH_INV_ID ON INV_INSTALL
    (
      NH_INV_NO_DB_ID ASC ,
      NH_INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVINST_INV_EVTDT ON INV_INSTALL
    (
      INV_NO_ID ASC ,
      INV_NO_DB_ID ASC ,
      EVENT_DT ASC
    ) ;
ALTER TABLE INV_INSTALL ADD CONSTRAINT PK_INV_INSTALL PRIMARY KEY ( INV_INSTALL_ID ) ;


CREATE TABLE INV_INV
  (
    INV_NO_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    INV_CLASS_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    INV_CLASS_CD         VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BOM_PART_DB_ID       NUMBER (10) ,
    BOM_PART_ID          NUMBER (10) ,
    LOC_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID        NUMBER (10) ,
    PART_NO_ID           NUMBER (10) ,
    AUTHORITY_DB_ID      NUMBER (10) ,
    AUTHORITY_ID         NUMBER (10) ,
    H_INV_NO_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    H_INV_NO_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_INV_NO_DB_ID  NUMBER (10) ,
    ASSMBL_INV_NO_ID     NUMBER (10) ,
    NH_INV_NO_DB_ID      NUMBER (10) ,
    NH_INV_NO_ID         NUMBER (10) ,
    VENDOR_DB_ID         NUMBER (10) ,
    VENDOR_ID            NUMBER (10) ,
    INV_COND_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    INV_COND_CD          VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID         NUMBER (10) ,
    ASSMBL_CD            VARCHAR2 (8) ,
    ASSMBL_BOM_ID        NUMBER (10) ,
    ASSMBL_POS_ID        NUMBER (10) ,
    ORIG_ASSMBL_DB_ID    NUMBER (10) ,
    ORIG_ASSMBL_CD       VARCHAR2 (8) ,
    ASSMBL_SUBTYPE_DB_ID NUMBER (10) ,
    ASSMBL_SUBTYPE_ID    NUMBER (10) ,
    OWNER_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    OWNER_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    RECEIVE_COND_DB_ID   NUMBER (10) ,
    RECEIVE_COND_CD      VARCHAR2 (8) ,
    SCHED_DB_ID          NUMBER (10) ,
    SCHED_ID             NUMBER (10) ,
    SCHED_PART_ID        NUMBER (10) ,
    SCHED_RMVD_PART_ID   NUMBER (10) ,
    INV_NO_SDESC         VARCHAR2 (400) ,
    ICN_NO_SDESC         VARCHAR2 (80) ,
    SERIAL_NO_OEM        VARCHAR2 (40) ,
    LOT_OEM_TAG          VARCHAR2 (80) ,
    MANUFACT_DT          DATE ,
    PO_REF_SDESC         VARCHAR2 (80) ,
    RECEIVED_DT          DATE ,
    INSTALL_DT           DATE ,
    INSTALL_GDT          DATE ,
    USED_BOOL            NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    COMPLETE_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    LOCKED_BOOL          NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RESERVED_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    PICKED_BOOL          NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    SEVERITY_CD          VARCHAR2 (8) ,
    BARCODE_SDESC        VARCHAR2 (80) NOT NULL DEFERRABLE ,
    NOTE                 VARCHAR2 (4000) ,
    BIN_QT FLOAT ,
    SHELF_EXPIRY_DT DATE ,
    RESERVE_QT FLOAT ,
    BATCH_NO_OEM          VARCHAR2 (40) ,
    FINANCE_STATUS_CD     VARCHAR2 (8) DEFAULT 'INSP' NOT NULL DEFERRABLE ,
    PO_DB_ID              NUMBER (10) ,
    PO_ID                 NUMBER (10) ,
    PO_LINE_ID            NUMBER (10) ,
    APPL_EFF_CD           VARCHAR2 (8) ,
    MOD_STATUS_NOTE       VARCHAR2 (200) ,
    ISSUED_BOOL           NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    NOT_FOUND_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CTRL_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    OWNER_TYPE_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    OWNER_TYPE_CD         VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PREVENT_SYNCH_BOOL    NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    CARRIER_DB_ID         NUMBER (10) ,
    CARRIER_ID            NUMBER (10) ,
    RELEASE_REMARKS_LDESC VARCHAR2 (4000) ,
    RELEASE_NUMBER_SDESC  VARCHAR2 (80) ,
    RELEASE_DT            DATE ,
    CONFIG_POS_SDESC      VARCHAR2 (240) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_INV ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( INV_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( BOM_PART_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( BOM_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CONSTRAINT CK_INVINV_AUTH_DBID CHECK ( AUTHORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CONSTRAINT CK_INVINV_AUTH_ID CHECK ( AUTHORITY_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( H_INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( H_INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( ASSMBL_INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( ASSMBL_INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( NH_INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( NH_INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( INV_COND_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( ASSMBL_BOM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( ASSMBL_POS_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( ORIG_ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( ASSMBL_SUBTYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( ASSMBL_SUBTYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( OWNER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( OWNER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( RECEIVE_COND_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( SCHED_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( SCHED_RMVD_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( USED_BOOL         IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( COMPLETE_BOOL     IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( LOCKED_BOOL       IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( RESERVED_BOOL     IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( PICKED_BOOL       IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( FINANCE_STATUS_CD IN ('NEW', 'INSP', 'RCVD')) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( PO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( PO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( PO_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( ISSUED_BOOL    IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( NOT_FOUND_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( OWNER_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( PREVENT_SYNCH_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( CARRIER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( CARRIER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_INV ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_INV
IS
  'Inventory: This class contains all inventory. This is the most generalized inventory structure in the model. It enumerates the current configuration of all inventory and provides the structure of assemblies through the recursive hierarchical links to the  next highest,  highest and next highest assembly. This tree is pruned and grafted with each completed configuration change transaction. This is the primary source for the Technical Log.' ;
  COMMENT ON COLUMN INV_INV.INV_NO_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN INV_INV.INV_NO_ID
IS
  'Unique identifier assigned from Sequence INV_NO_ID_SEQ.' ;
  COMMENT ON COLUMN INV_INV.INV_CLASS_DB_ID
IS
  'FK to REF_INV_CLASS. Identifies the class of the inventory, which is used to activate various Maintenix functionality.' ;
  COMMENT ON COLUMN INV_INV.INV_CLASS_CD
IS
  'FK to REF_INV_CLASS. Identifies the class of the inventory, which is used to activate various Maintenix functionality.' ;
  COMMENT ON COLUMN INV_INV.BOM_PART_DB_ID
IS
  'FK to EQP_BOM_PART. This identifies the bill of material item which the given part number is an alternate for.
' ;
  COMMENT ON COLUMN INV_INV.BOM_PART_ID
IS
  'FK to EQP_BOM_PART. This identifies the bill of material item which the given part number is an alternate for.' ;
  COMMENT ON COLUMN INV_INV.LOC_DB_ID
IS
  'FK to INV_LOC. Represents the geographic location where the location is stored.' ;
  COMMENT ON COLUMN INV_INV.LOC_ID
IS
  'FK to INV_LOC. Represents the geographic location where the location is stored.' ;
  COMMENT ON COLUMN INV_INV.PART_NO_DB_ID
IS
  'FK to EQP_PART_NO. The part number which this inventory item is an instance of.' ;
  COMMENT ON COLUMN INV_INV.PART_NO_ID
IS
  'FK to EQP_PART_NO. The part number which this inventory item is an instance of.' ;
  COMMENT ON COLUMN INV_INV.AUTHORITY_DB_ID
IS
  'FK to ORG_AUTHORITY.' ;
  COMMENT ON COLUMN INV_INV.AUTHORITY_ID
IS
  'FK to ORG_AUTHORITY.' ;
  COMMENT ON COLUMN INV_INV.H_INV_NO_DB_ID
IS
  'FK to INV_INV. Identifies the highest inventory. Since inventory are organized hierarchically, this value indicates the "highest" inventory in the tree. A root inventory always has a reference to itself.' ;
  COMMENT ON COLUMN INV_INV.H_INV_NO_ID
IS
  'FK to INV_INV. Identifies the highest inventory. Since inventory are organized hierarchically, this value indicates the "highest" inventory in the tree. A root inventory always has a reference to itself.' ;
  COMMENT ON COLUMN INV_INV.ASSMBL_INV_NO_DB_ID
IS
  'FK to INV_INV. Identifies the parent assembly inventory. Since inventory are organized hierarchically, this value indicates the "next highest inventory of type assembly" in the tree. If this is a loose assembly item, then this will be a reference to itself. If this inventory item is not currently installed on an assembly, then this will be NULL.' ;
  COMMENT ON COLUMN INV_INV.ASSMBL_INV_NO_ID
IS
  'FK to INV_INV. Identifies the parent assembly inventory. Since inventory are organized hierarchically, this value indicates the "next highest inventory of type assembly" in the tree. If this is a loose assembly item, then this will be a reference to itself. If this inventory item is not currently installed on an assembly, then this will be NULL.' ;
  COMMENT ON COLUMN INV_INV.NH_INV_NO_DB_ID
IS
  'FK to INV_INV. Identifies the parent inventory. Since inventory are organized hierarchically, this value indicates the "next highest" inventory in the tree. A root inventory always has a value of NULL.' ;
  COMMENT ON COLUMN INV_INV.NH_INV_NO_ID
IS
  'FK to INV_INV. Identifies the parent inventory. Since inventory are organized hierarchically, this value indicates the "next highest" inventory in the tree. A root inventory always has a value of NULL.' ;
  COMMENT ON COLUMN INV_INV.VENDOR_DB_ID
IS
  'FK to ORG_VENDOR. The vendor from which this inventory item was purchased.' ;
  COMMENT ON COLUMN INV_INV.VENDOR_ID
IS
  'FK to ORG_VENDOR. The vendor from which this inventory item was purchased.' ;
  COMMENT ON COLUMN INV_INV.INV_COND_DB_ID
IS
  'FK to REF_INV_COND. The condition of the inventory. This is used by maintenance personnel to determine whether inventory is serviceable or not.' ;
  COMMENT ON COLUMN INV_INV.INV_COND_CD
IS
  'FK to REF_INV_COND. The condition of the inventory. This is used by maintenance personnel to determine whether inventory is serviceable or not.' ;
  COMMENT ON COLUMN INV_INV.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL_POS. This is used by log card inventory (ie. inv_class_cd = "LOG"). It identifies the log card position that this inventory is currently being used for.' ;
  COMMENT ON COLUMN INV_INV.ASSMBL_CD
IS
  'FK to EQP_ASSMBL_POS. This is used by log card inventory (ie. inv_class_cd = "LOG"). It identifies the log card position that this inventory is currently being used for.' ;
  COMMENT ON COLUMN INV_INV.ASSMBL_BOM_ID
IS
  'FK to EQP_ASSMBL_POS. This is used by log card inventory (ie. inv_class_cd = "LOG"). It identifies the log card position that this inventory is currently being used for.' ;
  COMMENT ON COLUMN INV_INV.ASSMBL_POS_ID
IS
  'FK to EQP_ASSMBL_POS. This is used by log card inventory (ie. inv_class_cd = "LOG"). It identifies the log card position that this inventory is currently being used for.' ;
  COMMENT ON COLUMN INV_INV.ORIG_ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL. This is used by assembly inventory (inv_class_cd = "ASSY"). It identifies the assembly which this inventory item represents.' ;
  COMMENT ON COLUMN INV_INV.ORIG_ASSMBL_CD
IS
  'FK to EQP_ASSMBL. This is used by assembly inventory (inv_class_cd = "ASSY"). It identifies the assembly which this inventory item represents.' ;
  COMMENT ON COLUMN INV_INV.ASSMBL_SUBTYPE_DB_ID
IS
  'FK to EQP_ASSMBL_SUBTYPE.  Identifies the subtype of the assembly (ACFT only.)' ;
  COMMENT ON COLUMN INV_INV.ASSMBL_SUBTYPE_ID
IS
  'FK to EQP_ASSMBL_SUBTYPE.  Identifies the subtype of the assembly (ACFT only.)' ;
  COMMENT ON COLUMN INV_INV.OWNER_DB_ID
IS
  'FK to INV_OWNER. Identifies the owner of the inventory item.' ;
  COMMENT ON COLUMN INV_INV.OWNER_ID
IS
  'FK to INV_OWNER. Identifies the owner of the inventory item.' ;
  COMMENT ON COLUMN INV_INV.RECEIVE_COND_DB_ID
IS
  'FK to REF_RECEIVED_COND.' ;
  COMMENT ON COLUMN INV_INV.RECEIVE_COND_CD
IS
  'FK to REF_RECEIVED_COND.' ;
  COMMENT ON COLUMN INV_INV.INV_NO_SDESC
IS
  'A name used to label the item.' ;
  COMMENT ON COLUMN INV_INV.ICN_NO_SDESC
IS
  'The inventory control number. It is used as an alternate, organization-specific serial number for the item.' ;
  COMMENT ON COLUMN INV_INV.SERIAL_NO_OEM
IS
  'The original equipment manufacturer''s serial number.' ;
  COMMENT ON COLUMN INV_INV.LOT_OEM_TAG
IS
  'The original equipment manufacturer''s lot number for this batch of parts.' ;
  COMMENT ON COLUMN INV_INV.MANUFACT_DT
IS
  'The date the item was manufactured.' ;
  COMMENT ON COLUMN INV_INV.PO_REF_SDESC
IS
  'A reference to the purchase order tag under which this inventory item was bought.' ;
  COMMENT ON COLUMN INV_INV.RECEIVED_DT
IS
  'The date the part was received by the current owner.' ;
  COMMENT ON COLUMN INV_INV.INSTALL_DT
IS
  'The date the part was installed.' ;
  COMMENT ON COLUMN INV_INV.INSTALL_GDT
IS
  'The GMT for the item''s installation.' ;
  COMMENT ON COLUMN INV_INV.USED_BOOL
IS
  'Indicates if the part was used when it entered service.' ;
  COMMENT ON COLUMN INV_INV.COMPLETE_BOOL
IS
  'Indicates if all sub-logcards are currently installed in the structure.' ;
  COMMENT ON COLUMN INV_INV.LOCKED_BOOL
IS
  'Indicates if the user has locked the item (and all of its sub-items).' ;
  COMMENT ON COLUMN INV_INV.RESERVED_BOOL
IS
  'Indicator of whether the inventory item is reserved or not.  This is only applicable for serialized inventory.' ;
  COMMENT ON COLUMN INV_INV.PICKED_BOOL
IS
  'This field when true shows that inventory have been picked for shipement. ' ;
  COMMENT ON COLUMN INV_INV.SEVERITY_CD
IS
  'The severity of the item.' ;
  COMMENT ON COLUMN INV_INV.BARCODE_SDESC
IS
  'User entered barcode.  Used for equipment that already has a barcode or RFID identification built in.' ;
  COMMENT ON COLUMN INV_INV.NOTE
IS
  'Any miscellaneous note for the inventory item' ;
  COMMENT ON COLUMN INV_INV.BIN_QT
IS
  'The number of items in this batch. This attribute is only used by batch and quantity controlled inventory (inv_class_cd=BATCH or QTY)' ;
  COMMENT ON COLUMN INV_INV.SHELF_EXPIRY_DT
IS
  'This column is used to indicate the shelf life expiry date for a piece of inventory.' ;
  COMMENT ON COLUMN INV_INV.RESERVE_QT
IS
  'The number of reserved items in a batch.' ;
  COMMENT ON COLUMN INV_INV.BATCH_NO_OEM
IS
  'This column is used to record the OEM Batch No of an inventory item. This is commonly used for batch inventory, although it is also possible to specify an OEM Batch No for a serialized component.' ;
  COMMENT ON COLUMN INV_INV.FINANCE_STATUS_CD
IS
  'Indicates whether the inventory item has been counted as an inventory asset.' ;
  COMMENT ON COLUMN INV_INV.PO_DB_ID
IS
  'FK PO_LINE.' ;
  COMMENT ON COLUMN INV_INV.PO_ID
IS
  'FK PO_LINE.' ;
  COMMENT ON COLUMN INV_INV.PO_LINE_ID
IS
  'FK PO_LINE.' ;
  COMMENT ON COLUMN INV_INV.APPL_EFF_CD
IS
  'This is the applicability code for an assembly inventory' ;
  COMMENT ON COLUMN INV_INV.ISSUED_BOOL
IS
  'Indicates whether or not the inventory has been issued or not.
' ;
  COMMENT ON COLUMN INV_INV.NOT_FOUND_BOOL
IS
  'If the storeroom clerks cannot find an inventory item, they will temporarily mark it as Not Found.' ;
  COMMENT ON COLUMN INV_INV.CTRL_DB_ID
IS
  'Used for replicated db''s only.' ;
  COMMENT ON COLUMN INV_INV.PREVENT_SYNCH_BOOL
IS
  'This boolean indicates that the inventory item should not be automatically synchronized. This should only be set to true for highest level inventory.' ;
  COMMENT ON COLUMN INV_INV.RELEASE_REMARKS_LDESC
IS
  'inventory release remarks.  Used inspecting an inventory item as servicable.' ;
  COMMENT ON COLUMN INV_INV.RELEASE_NUMBER_SDESC
IS
  'release number associated with an inventory item.' ;
  COMMENT ON COLUMN INV_INV.RELEASE_DT
IS
  'release date of inventory.' ;
  COMMENT ON COLUMN INV_INV.CONFIG_POS_SDESC
IS
  'This is the config position description for an inventory' ;
  COMMENT ON COLUMN INV_INV.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.' ;
  COMMENT ON COLUMN INV_INV.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_INV.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_INV.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_INV.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_INV.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INV_INV_SERIAL_OEM ON INV_INV
    ( SERIAL_NO_OEM ASC
    ) ;
  CREATE INDEX IX_INV_INV_INV_NO_SDESC ON INV_INV
    ( INV_NO_SDESC ASC
    ) ;
  CREATE INDEX IX_UQ_INVBARCODESDESC ON INV_INV
    ( BARCODE_SDESC ASC
    ) ;
  CREATE INDEX IX_EQPASSMBL_INVINV ON INV_INV
    (
      ORIG_ASSMBL_DB_ID ASC ,
      ORIG_ASSMBL_CD ASC
    ) ;
  CREATE INDEX IX_EQPASSMBLPOS_INVINV ON INV_INV
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC ,
      ASSMBL_BOM_ID ASC ,
      ASSMBL_POS_ID ASC
    ) ;
  CREATE INDEX IX_EQPBOMPART_INVINV ON INV_INV
    (
      BOM_PART_DB_ID ASC ,
      BOM_PART_ID ASC
    ) ;
  CREATE INDEX IX_EQPPARTNO_INVINV ON INV_INV
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVINV_INVINVASS ON INV_INV
    (
      ASSMBL_INV_NO_DB_ID ASC ,
      ASSMBL_INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVINV_INVINVH ON INV_INV
    (
      H_INV_NO_DB_ID ASC ,
      H_INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_ININV_INVINVNH ON INV_INV
    (
      NH_INV_NO_DB_ID ASC ,
      NH_INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVLOC_INVINV ON INV_INV
    ( LOC_DB_ID ASC , LOC_ID ASC
    ) ;
  CREATE INDEX IX_INVOWNER_INVINV ON INV_INV
    (
      OWNER_DB_ID ASC ,
      OWNER_ID ASC
    ) ;
  CREATE INDEX IX_ORGAUTHORITY_INVINV ON INV_INV
    (
      AUTHORITY_DB_ID ASC ,
      AUTHORITY_ID ASC
    ) ;
  CREATE INDEX IX_ORGCARRIER_INVINV ON INV_INV
    (
      CARRIER_DB_ID ASC ,
      CARRIER_ID ASC
    ) ;
  CREATE INDEX IX_ORGVENDOR_INVINV ON INV_INV
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
  CREATE INDEX IX_SHEDRMVDPART_INVINV ON INV_INV
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC ,
      SCHED_PART_ID ASC ,
      SCHED_RMVD_PART_ID ASC
    ) ;
  CREATE INDEX IX_POLINE_INVINV ON INV_INV
    (
      PO_DB_ID ASC ,
      PO_ID ASC ,
      PO_LINE_ID ASC
    ) ;
  CREATE INDEX IX_EQPASSMBLSUBTYPE_INVINV ON INV_INV
    (
      ASSMBL_SUBTYPE_DB_ID ASC ,
      ASSMBL_SUBTYPE_ID ASC
    ) ;
  CREATE INDEX IX_INVINV_REFINVCLASS ON INV_INV
    (
      INV_CLASS_CD ASC ,
      INV_CLASS_DB_ID ASC
    ) ;
  CREATE INDEX IX_RECEIVEDDT_INVINV ON INV_INV
    ( RECEIVED_DT ASC
    ) ;
ALTER TABLE INV_INV ADD CONSTRAINT PK_INV_INV PRIMARY KEY ( INV_NO_DB_ID, INV_NO_ID ) ;
ALTER TABLE INV_INV ADD CONSTRAINT IX_INVINVALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE INV_INV_OEM_ASSMBL
  (
    INV_NO_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    OEM_ASSMBL_INV_NO_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    OEM_ASSMBL_INV_NO_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD                NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER           VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_INV_OEM_ASSMBL ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV_OEM_ASSMBL ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV_OEM_ASSMBL ADD CHECK ( OEM_ASSMBL_INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV_OEM_ASSMBL ADD CHECK ( OEM_ASSMBL_INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_INV_OEM_ASSMBL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_INV_OEM_ASSMBL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN INV_INV_OEM_ASSMBL.OEM_ASSMBL_INV_NO_DB_ID
IS
  'defines oem assembly this inventory was originally associated with.' ;
  COMMENT ON COLUMN INV_INV_OEM_ASSMBL.OEM_ASSMBL_INV_NO_ID
IS
  'FK TO INV INV TABLE.  THIS DEFINES THE ASSEMBLY THIS PEICE OF IVENTORY INITIALLY CAME OFF TO HELP MAP BACK TO ORIGINAL WARRANTY.' ;
  COMMENT ON COLUMN INV_INV_OEM_ASSMBL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN INV_INV_OEM_ASSMBL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN INV_INV_OEM_ASSMBL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN INV_INV_OEM_ASSMBL.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN INV_INV_OEM_ASSMBL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_INVINV_INVINVOEMASSMB_ITEM ON INV_INV_OEM_ASSMBL
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX "IX_INV INV_INVINVOEMASSMB_ASSM" ON INV_INV_OEM_ASSMBL
    (
      OEM_ASSMBL_INV_NO_DB_ID ASC ,
      OEM_ASSMBL_INV_NO_ID ASC
    ) ;
ALTER TABLE INV_INV_OEM_ASSMBL ADD CONSTRAINT PK_INV_INV_OEM_ASSMBL PRIMARY KEY ( INV_NO_DB_ID, INV_NO_ID, OEM_ASSMBL_INV_NO_DB_ID, OEM_ASSMBL_INV_NO_ID ) ;


CREATE TABLE INV_KIT
  (
    INV_NO_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    KIT_COMPLETE_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    KIT_SEALED_BOOL   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_KIT ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_KIT ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_KIT ADD CHECK ( KIT_COMPLETE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_KIT ADD CHECK ( KIT_SEALED_BOOL   IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_KIT ADD CHECK ( RSTAT_CD          IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_KIT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_KIT
IS
  'Kit: A kit inventory is a container which holds inventory inside of it.
This table contains the kit specific attributes that apply to kits only.' ;
ALTER TABLE INV_KIT ADD CONSTRAINT PK_INV_KIT PRIMARY KEY ( INV_NO_DB_ID, INV_NO_ID ) ;


CREATE TABLE INV_KIT_MAP
  (
    INV_NO_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    KIT_INV_NO_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    KIT_INV_NO_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    EQP_KIT_PART_GROUP_DB_ID NUMBER (10) ,
    EQP_KIT_PART_GROUP_ID    NUMBER (10) ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_KIT_MAP ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_KIT_MAP ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_KIT_MAP ADD CHECK ( KIT_INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_KIT_MAP ADD CHECK ( KIT_INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_KIT_MAP ADD CHECK ( EQP_KIT_PART_GROUP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_KIT_MAP ADD CHECK ( EQP_KIT_PART_GROUP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_KIT_MAP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_KIT_MAP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_KIT_MAP
IS
  'Kit: A kit inventory is a container which holds inventory inside of it.
This table maps the kit inventory to the inventory records that are inside of it.  An inventory can only be in a single kit at a time.' ;
  CREATE INDEX IX_EQPKITPARTGROUPS_INVKITMAP ON INV_KIT_MAP
    (
      EQP_KIT_PART_GROUP_DB_ID ASC ,
      EQP_KIT_PART_GROUP_ID ASC
    ) ;
  CREATE INDEX IX_INVKIT_INVKITMAP ON INV_KIT_MAP
    (
      KIT_INV_NO_DB_ID ASC ,
      KIT_INV_NO_ID ASC
    ) ;
ALTER TABLE INV_KIT_MAP ADD CONSTRAINT PK_INV_KIT_MAP PRIMARY KEY ( INV_NO_DB_ID, INV_NO_ID ) ;


CREATE TABLE INV_LOC
  (
    LOC_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_TYPE_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_TYPE_CD           VARCHAR2 (8) NOT NULL DEFERRABLE ,
    SUPPLY_LOC_DB_ID      NUMBER (10) ,
    SUPPLY_LOC_ID         NUMBER (10) ,
    SUPPLY_BOOL           NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    DEFAULT_DOCK_BOOL     NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    NO_HUB_AUTO_RSRV_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    NO_AUTO_RSRV_BOOL     NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    HUB_LOC_DB_ID         NUMBER (10) ,
    HUB_LOC_ID            NUMBER (10) ,
    SHIPPING_TIME FLOAT ,
    COUNTRY_DB_ID NUMBER (10) ,
    COUNTRY_CD    VARCHAR2 (8) ,
    STATE_CD      VARCHAR2 (8) ,
    TRACK_CAPACITY_QT FLOAT ,
    MIN_GROUND_TIME_QT FLOAT ,
    INBOUND_FLIGHTS_QT FLOAT ,
    DURATION_BUFFER_QT FLOAT ,
    NH_LOC_DB_ID          NUMBER (10) ,
    NH_LOC_ID             NUMBER (10) ,
    PREDRAW_SCHED_DB_ID   NUMBER (10) ,
    PREDRAW_SCHED_ID      NUMBER (10) ,
    LOC_CD                VARCHAR2 (2000) NOT NULL DEFERRABLE ,
    EXT_KEY_SDESC         VARCHAR2 (2000) ,
    LOC_NAME              VARCHAR2 (40) NOT NULL DEFERRABLE ,
    VENDOR_DB_ID          NUMBER (10) ,
    VENDOR_ID             NUMBER (10) ,
    ADDRESS_PMAIL_1       VARCHAR2 (4000) ,
    ADDRESS_PMAIL_2       VARCHAR2 (4000) ,
    CITY_NAME             VARCHAR2 (40) ,
    ZIP_CD                VARCHAR2 (20) ,
    TIMEZONE_CD           VARCHAR2 (50) NOT NULL DEFERRABLE ,
    OVERNIGHT_SHIFT_DB_ID NUMBER (10) ,
    OVERNIGHT_SHIFT_ID    NUMBER (10) ,
    ALT_ID RAW (16) NOT NULL ,
    AUTO_ISSUE_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_LOC ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC ADD CHECK ( LOC_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC ADD CHECK ( SUPPLY_LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC ADD CHECK ( SUPPLY_LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC ADD CHECK ( SUPPLY_BOOL       IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_LOC ADD CHECK ( DEFAULT_DOCK_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_LOC ADD CHECK ( HUB_LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC ADD CHECK ( HUB_LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC ADD CHECK ( COUNTRY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC ADD CHECK ( NH_LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC ADD CHECK ( NH_LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC ADD CHECK ( PREDRAW_SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC ADD CHECK ( PREDRAW_SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC ADD CHECK ( OVERNIGHT_SHIFT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC ADD CHECK ( OVERNIGHT_SHIFT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_LOC ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_LOC
IS
  'Inventory Location.  An Inventory Location is any organizational or geographical location that contains resources such as Inventory and Work Departments. The geographical locations are organized hierarchically and are identified with a Type. This location hierarchy provides a framework for navigation to assets.' ;
  COMMENT ON COLUMN INV_LOC.LOC_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN INV_LOC.LOC_ID
IS
  'Unique identifier serving as part of the primary key, and assigned from the sequence LOC_ID_SEQ' ;
  COMMENT ON COLUMN INV_LOC.LOC_TYPE_DB_ID
IS
  'FK to REF_LOC_TYPE. The location type is used to categorize locations. It can be used by users to help identify special locations (eg. airports, supply rooms, etc.)' ;
  COMMENT ON COLUMN INV_LOC.LOC_TYPE_CD
IS
  'FK to REF_LOC_TYPE. The location type is used to categorize locations. It can be used by users to help identify special locations (eg. airports, supply rooms, etc.)' ;
  COMMENT ON COLUMN INV_LOC.SUPPLY_LOC_DB_ID
IS
  'This is a link to the supply location for a given location. This is a shortcut link to simplify queries. This value will be used to identify if a move is local or remote. If a move is between a two locations with the same supply location than the move is considered local, otherwise it is a remote move. This link points to itself for supply location. ' ;
  COMMENT ON COLUMN INV_LOC.SUPPLY_LOC_ID
IS
  'This is a link to the supply location for a given location. This is a shortcut link to simplify queries. This value will be used to identify if a move is local or remote. If a move is between a two locations with the same supply location than the move is considered local, otherwise it is a remote move. This link points to itself for supply location. ' ;
  COMMENT ON COLUMN INV_LOC.SUPPLY_BOOL
IS
  'This feature identifies if this location is a supply location. Only one location in any given branch of location hierarchy can be marked as supply location (i.e. One supply location can never be a descendant of another). Normally an airport will be marked as a supply location. ' ;
  COMMENT ON COLUMN INV_LOC.DEFAULT_DOCK_BOOL
IS
  'This is used to indicate that a dock location is the default one for an airport. The default value is 0.' ;
  COMMENT ON COLUMN INV_LOC.NO_HUB_AUTO_RSRV_BOOL
IS
  'True if auto reservation from hub is prevented' ;
  COMMENT ON COLUMN INV_LOC.NO_AUTO_RSRV_BOOL
IS
  'True if the location is ignored for auto reservation for the supply location it belongs' ;
  COMMENT ON COLUMN INV_LOC.HUB_LOC_DB_ID
IS
  'This is used to indicate the hub airport for a satellite airport. ' ;
  COMMENT ON COLUMN INV_LOC.HUB_LOC_ID
IS
  'This is used to indicate the hub airport for a satellite airport.' ;
  COMMENT ON COLUMN INV_LOC.SHIPPING_TIME
IS
  'This is normal shipping time from the hub to the satelite.' ;
  COMMENT ON COLUMN INV_LOC.COUNTRY_DB_ID
IS
  'FK to REF_COUNTRY.' ;
  COMMENT ON COLUMN INV_LOC.COUNTRY_CD
IS
  'FK to REF_COUNTRY.' ;
  COMMENT ON COLUMN INV_LOC.STATE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN INV_LOC.TRACK_CAPACITY_QT
IS
  'The total track capacity for the given station.' ;
  COMMENT ON COLUMN INV_LOC.MIN_GROUND_TIME_QT
IS
  'This column allows you to setup minimum time an aircraft has to be at this line location. ' ;
  COMMENT ON COLUMN INV_LOC.INBOUND_FLIGHTS_QT
IS
  'This is the average number of inbound flights arriving at the given airport each day. It is the primary way to decide which airports should receive the most stock.' ;
  COMMENT ON COLUMN INV_LOC.DURATION_BUFFER_QT
IS
  'This column allows you to define additional time needed to execute each maintenance task in this line location. ' ;
  COMMENT ON COLUMN INV_LOC.NH_LOC_DB_ID
IS
  'FK to INV_LOC. Identifies the parent of this location. Since locations are organized hierarchically, this value indicates the "next highest" location in the tree. A root location always has a value of NULL.' ;
  COMMENT ON COLUMN INV_LOC.NH_LOC_ID
IS
  'FK to INV_LOC. Identifies the parent of this location. Since locations are organized hierarchically, this value indicates the "next highest" location in the tree. A root location always has a value of NULL.' ;
  COMMENT ON COLUMN INV_LOC.PREDRAW_SCHED_DB_ID
IS
  'FK to SCHED_STASK.  If this is a pre-draw bin location, then this is a link to the work order for this pre-draw location.' ;
  COMMENT ON COLUMN INV_LOC.PREDRAW_SCHED_ID
IS
  'FK to SCHED_STASK.  If this is a pre-draw bin location, then this is a link to the work order for this pre-draw location.' ;
  COMMENT ON COLUMN INV_LOC.LOC_CD
IS
  'A computed field that concatenates this locations'' LOC_SUB_CD with those of each of its parent''s (a hierarchical code).' ;
  COMMENT ON COLUMN INV_LOC.EXT_KEY_SDESC
IS
  'A field used to store an external system''s PK value. 
' ;
  COMMENT ON COLUMN INV_LOC.LOC_NAME
IS
  'A name used to label this location.' ;
  COMMENT ON COLUMN INV_LOC.VENDOR_DB_ID
IS
  'FK to ORG_VENDOR. Identifies the vendor for locations of type VENHGR, VENTRK, VENLINE.' ;
  COMMENT ON COLUMN INV_LOC.VENDOR_ID
IS
  'FK to ORG_VENDOR. Identifies the vendor for locations of type VENHGR, VENTRK, VENLINE.' ;
  COMMENT ON COLUMN INV_LOC.ADDRESS_PMAIL_1
IS
  'Address' ;
  COMMENT ON COLUMN INV_LOC.ADDRESS_PMAIL_2
IS
  'Address two.' ;
  COMMENT ON COLUMN INV_LOC.CITY_NAME
IS
  'City name.' ;
  COMMENT ON COLUMN INV_LOC.ZIP_CD
IS
  'Zip Code.' ;
  COMMENT ON COLUMN INV_LOC.TIMEZONE_CD
IS
  'FK to REF_TIMEZONE.  Used to determine the offset of times associated with this location (for flights/tasks/stock/etc/)' ;
  COMMENT ON COLUMN INV_LOC.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.' ;
  COMMENT ON COLUMN INV_LOC.AUTO_ISSUE_BOOL
IS
  'Identifies whether a location is enabled for auto issue of parts. This feature can only be enabled  for Vendor Line (ref_loc_type.loc_type_cd = VENLINE)and Vendor Track (ref_loc_type.loc_type_cd = VENTRK) locations.' ;
  COMMENT ON COLUMN INV_LOC.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_LOC.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_LOC.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_LOC.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_LOC.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
CREATE UNIQUE INDEX IX_INV_LOC_LOCCD ON INV_LOC
  (
    LOC_CD ASC
  )
  ;
  CREATE INDEX IX_INV_LOC_REFLOCTYPE_FK ON INV_LOC
    (
      LOC_TYPE_DB_ID ASC ,
      LOC_TYPE_CD ASC
    ) ;
  CREATE INDEX IX_INVLOC_INVLOC ON INV_LOC
    (
      NH_LOC_DB_ID ASC ,
      NH_LOC_ID ASC
    ) ;
  CREATE INDEX IX_SUPPLY_LOC_INVLOC ON INV_LOC
    (
      SUPPLY_LOC_DB_ID ASC ,
      SUPPLY_LOC_ID ASC
    ) ;
  CREATE INDEX IX_HUBINVLOC_INV_LOC ON INV_LOC
    (
      HUB_LOC_DB_ID ASC ,
      HUB_LOC_ID ASC
    ) ;
  CREATE INDEX IX_ORGVENDOR_INVLOC ON INV_LOC
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
  CREATE INDEX IX_SCHED_STASK_INVLOC ON INV_LOC
    (
      PREDRAW_SCHED_DB_ID ASC ,
      PREDRAW_SCHED_ID ASC
    ) ;
  CREATE INDEX IX_SHIFTSHIFT_INVLOC ON INV_LOC
    (
      OVERNIGHT_SHIFT_DB_ID ASC ,
      OVERNIGHT_SHIFT_ID ASC
    ) ;
ALTER TABLE INV_LOC ADD CONSTRAINT PK_INV_LOC PRIMARY KEY ( LOC_DB_ID, LOC_ID ) ;
ALTER TABLE INV_LOC ADD CONSTRAINT IX_INVLOCALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE INV_LOC_BIN
  (
    LOC_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    MIN_QT FLOAT ,
    MAX_QT FLOAT ,
    OWNER_DB_ID    NUMBER (10) ,
    OWNER_ID       NUMBER (10) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_LOC_BIN ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_BIN ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_BIN ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_BIN ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_BIN ADD CHECK ( OWNER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_BIN ADD CHECK ( OWNER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_BIN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_LOC_BIN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN INV_LOC_BIN.LOC_DB_ID
IS
  'FK to INV_LOC.' ;
  COMMENT ON COLUMN INV_LOC_BIN.LOC_ID
IS
  'FK to INV_LOC.' ;
  COMMENT ON COLUMN INV_LOC_BIN.PART_NO_DB_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN INV_LOC_BIN.PART_NO_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN INV_LOC_BIN.MIN_QT
IS
  'Set up generally as a warning rule for a particular bench stock location.  Minimum number that should be in stock.' ;
  COMMENT ON COLUMN INV_LOC_BIN.MAX_QT
IS
  'Represents the size constraint for a particular bin.  Some bins can only contain a set order of items.' ;
  COMMENT ON COLUMN INV_LOC_BIN.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN INV_LOC_BIN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_LOC_BIN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN INV_LOC_BIN.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN INV_LOC_BIN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EQP_PART_NO_INVLOCBIN ON INV_LOC_BIN
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_INV_LOC_INVLOCBIN ON INV_LOC_BIN
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
  CREATE INDEX IX_INVOWNER_INVLOCBIN ON INV_LOC_BIN
    (
      OWNER_DB_ID ASC ,
      OWNER_ID ASC
    ) ;
ALTER TABLE INV_LOC_BIN ADD CONSTRAINT PK_INV_LOC_BIN PRIMARY KEY ( LOC_DB_ID, LOC_ID, PART_NO_DB_ID, PART_NO_ID ) ;


CREATE TABLE INV_LOC_BIN_LOG
  (
    INV_LOC_BIN_LOG_ID NUMBER (10) NOT NULL ,
    LOC_DB_ID          NUMBER (10) NOT NULL ,
    LOC_ID             NUMBER (10) NOT NULL ,
    PART_NO_DB_ID      NUMBER (10) NOT NULL ,
    PART_NO_ID         NUMBER (10) NOT NULL ,
    LOG_TYPE_CD        VARCHAR2 (8) ,
    LOG_GROUP_CD       VARCHAR2 (8) ,
    LOG_GDT            DATE ,
    COUNT_EXPECTED_QT FLOAT ,
    COUNT_ACTUAL_QT FLOAT ,
    HR_DB_ID       NUMBER (10) NOT NULL ,
    HR_ID          NUMBER (10) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
COMMENT ON COLUMN INV_LOC_BIN_LOG.LOC_DB_ID
IS
  'FK to INV_LOC.' ;
  COMMENT ON COLUMN INV_LOC_BIN_LOG.LOC_ID
IS
  'FK to INV_LOC.' ;
  COMMENT ON COLUMN INV_LOC_BIN_LOG.PART_NO_DB_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN INV_LOC_BIN_LOG.PART_NO_ID
IS
  'FK to EQP_PART_NO' ;
  COMMENT ON COLUMN INV_LOC_BIN_LOG.LOG_TYPE_CD
IS
  'Type of the log' ;
  COMMENT ON COLUMN INV_LOC_BIN_LOG.LOG_GROUP_CD
IS
  'Log group' ;
  COMMENT ON COLUMN INV_LOC_BIN_LOG.LOG_GDT
IS
  'Date/time when the log is saved' ;
  COMMENT ON COLUMN INV_LOC_BIN_LOG.COUNT_EXPECTED_QT
IS
  'the expected inventory count at the time the log is saved.' ;
  COMMENT ON COLUMN INV_LOC_BIN_LOG.COUNT_ACTUAL_QT
IS
  'the actual  inventory count at the time the log is saved.' ;
  COMMENT ON COLUMN INV_LOC_BIN_LOG.HR_DB_ID
IS
  'User who trigger the creation of this log.' ;
  COMMENT ON COLUMN INV_LOC_BIN_LOG.HR_ID
IS
  'User who trigger the creation of this log.' ;
  COMMENT ON COLUMN INV_LOC_BIN_LOG.RSTAT_CD
IS
  'Status of the record.
' ;
  COMMENT ON COLUMN INV_LOC_BIN_LOG.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_LOC_BIN_LOG.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_LOC_BIN_LOG.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_LOC_BIN_LOG.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGHR_INVLOCBINLOG ON INV_LOC_BIN_LOG
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
  CREATE INDEX IX_INVLOC_INVLOCBINLOG ON INV_LOC_BIN_LOG
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
  CREATE INDEX IX_EQPPARTNO_INVLOCBINLOG ON INV_LOC_BIN_LOG
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
ALTER TABLE INV_LOC_BIN_LOG ADD CONSTRAINT PK_INV_LOC_BIN_LOG PRIMARY KEY ( INV_LOC_BIN_LOG_ID ) ;


CREATE TABLE INV_LOC_CAPABILITY
  (
    LOC_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    WORK_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WORK_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_LOC_CAPABILITY ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_CAPABILITY ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_CAPABILITY ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_CAPABILITY ADD CHECK ( WORK_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_CAPABILITY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_LOC_CAPABILITY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_LOC_CAPABILITY
IS
  'Location Capability: Defines the major roles (work types) of each work department. Examples can be rotary balancing, welding, fabrication, etc...' ;
  COMMENT ON COLUMN INV_LOC_CAPABILITY.LOC_DB_ID
IS
  'FK to INV_LOC. The location that has this particular capability.' ;
  COMMENT ON COLUMN INV_LOC_CAPABILITY.LOC_ID
IS
  'FK to INV_LOC. The location that has this particular capability.' ;
  COMMENT ON COLUMN INV_LOC_CAPABILITY.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL.' ;
  COMMENT ON COLUMN INV_LOC_CAPABILITY.ASSMBL_CD
IS
  'FK to EQP_ASSMBL.' ;
  COMMENT ON COLUMN INV_LOC_CAPABILITY.WORK_TYPE_DB_ID
IS
  'FK to REF_WORK_TYPE. The type of work that the location has capability for (in combination with the assembly)' ;
  COMMENT ON COLUMN INV_LOC_CAPABILITY.WORK_TYPE_CD
IS
  'FK to REF_WORK_TYPE. The type of work that the location has capability for (in combination with the assembly)' ;
  COMMENT ON COLUMN INV_LOC_CAPABILITY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_LOC_CAPABILITY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_LOC_CAPABILITY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_LOC_CAPABILITY.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_LOC_CAPABILITY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPASSMBL_INVLOCCAPABILITY ON INV_LOC_CAPABILITY
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
  CREATE INDEX IX_INVLOC_INVLOCCAPABILITY ON INV_LOC_CAPABILITY
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
ALTER TABLE INV_LOC_CAPABILITY ADD CONSTRAINT PK_INV_LOC_CAPABILITY PRIMARY KEY ( LOC_DB_ID, LOC_ID, ASSMBL_DB_ID, ASSMBL_CD, WORK_TYPE_DB_ID, WORK_TYPE_CD ) ;


CREATE TABLE INV_LOC_CONTACT
  (
    LOC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    CONTACT_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    CONTACT_NAME   VARCHAR2 (40) ,
    JOB_TITLE      VARCHAR2 (80) ,
    PHONE_PH       VARCHAR2 (40) ,
    FAX_PH         VARCHAR2 (40) ,
    ADDRESS_EMAIL  VARCHAR2 (80) ,
    DEFAULT_BOOL   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    HR_DB_ID       NUMBER (10) ,
    HR_ID          NUMBER (10) ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_LOC_CONTACT ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_CONTACT ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_CONTACT ADD CHECK ( CONTACT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_CONTACT ADD CHECK ( DEFAULT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_LOC_CONTACT ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_CONTACT ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_CONTACT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_LOC_CONTACT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN INV_LOC_CONTACT.LOC_DB_ID
IS
  'FK to INV_LOC.' ;
  COMMENT ON COLUMN INV_LOC_CONTACT.LOC_ID
IS
  'FK to INV_LOC.' ;
  COMMENT ON COLUMN INV_LOC_CONTACT.CONTACT_ID
IS
  'PK CONTACT_ID_SEQ.' ;
  COMMENT ON COLUMN INV_LOC_CONTACT.CONTACT_NAME
IS
  'Contact Name' ;
  COMMENT ON COLUMN INV_LOC_CONTACT.JOB_TITLE
IS
  'Job Title' ;
  COMMENT ON COLUMN INV_LOC_CONTACT.PHONE_PH
IS
  'Phone Number' ;
  COMMENT ON COLUMN INV_LOC_CONTACT.FAX_PH
IS
  'Fax Number.' ;
  COMMENT ON COLUMN INV_LOC_CONTACT.ADDRESS_EMAIL
IS
  'Fax Number.' ;
  COMMENT ON COLUMN INV_LOC_CONTACT.DEFAULT_BOOL
IS
  'Indicates whether the listed Vendor is the default.' ;
  COMMENT ON COLUMN INV_LOC_CONTACT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  COMMENT ON COLUMN INV_LOC_CONTACT.RSTAT_CD
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN INV_LOC_CONTACT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_LOC_CONTACT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN INV_LOC_CONTACT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  CREATE INDEX IX_INVLOC_INVLOCCONTACT ON INV_LOC_CONTACT
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_INVLOCCONTACT ON INV_LOC_CONTACT
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
ALTER TABLE INV_LOC_CONTACT ADD CONSTRAINT "pk_INV_LOC_CONTACT" PRIMARY KEY ( LOC_DB_ID, LOC_ID, CONTACT_ID ) ;


CREATE TABLE INV_LOC_DEPT
  (
    LOC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    DEPT_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    DEPT_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_LOC_DEPT ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_DEPT ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_DEPT ADD CHECK ( DEPT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_DEPT ADD CHECK ( DEPT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_DEPT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_LOC_DEPT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_LOC_DEPT
IS
  'Location Departments: This entity lists all of the departments that are assigned to a particular location. This could include maintenance departments, supply departments, etc.' ;
  COMMENT ON COLUMN INV_LOC_DEPT.LOC_DB_ID
IS
  'FK to INV_LOC.' ;
  COMMENT ON COLUMN INV_LOC_DEPT.LOC_ID
IS
  'FK to INV_LOC.' ;
  COMMENT ON COLUMN INV_LOC_DEPT.DEPT_ID
IS
  'FK to ORG_WORK_DEPT.' ;
  COMMENT ON COLUMN INV_LOC_DEPT.DEPT_DB_ID
IS
  'FK to ORG_WORK_DEPT.' ;
  COMMENT ON COLUMN INV_LOC_DEPT.RSTAT_CD
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN INV_LOC_DEPT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_LOC_DEPT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_LOC_DEPT.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_LOC_DEPT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVLOC_INVLOCDEPT ON INV_LOC_DEPT
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
  CREATE INDEX IX_ORGWORKDEPT_INVLOCDEPT ON INV_LOC_DEPT
    (
      DEPT_DB_ID ASC ,
      DEPT_ID ASC
    ) ;
ALTER TABLE INV_LOC_DEPT ADD CONSTRAINT PK_INV_LOC_DEPT PRIMARY KEY ( LOC_DB_ID, LOC_ID, DEPT_ID, DEPT_DB_ID ) ;


CREATE TABLE INV_LOC_INV_RECOUNT
  (
    LOC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    PART_COUNT_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    INV_RECOUNT_ID NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID   NUMBER (10) ,
    INV_NO_ID      NUMBER (10) ,
    HR_DB_ID       NUMBER (10) ,
    HR_ID          NUMBER (10) ,
    RECOUNT_DT     DATE ,
    SERIAL_NO_OEM  VARCHAR2 (40) ,
    COUNT_EXPECT_QT FLOAT ,
    COUNT_ACTUAL_QT FLOAT ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_LOC_INV_RECOUNT ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_INV_RECOUNT ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_INV_RECOUNT ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_INV_RECOUNT ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_INV_RECOUNT ADD CHECK ( PART_COUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_INV_RECOUNT ADD CHECK ( INV_RECOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_INV_RECOUNT ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_INV_RECOUNT ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_INV_RECOUNT ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_INV_RECOUNT ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_INV_RECOUNT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_LOC_INV_RECOUNT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_LOC_INV_RECOUNT
IS
  'Records the recounting of inventory at a location.' ;
  COMMENT ON COLUMN INV_LOC_INV_RECOUNT.LOC_DB_ID
IS
  'FK to INV_LOC_PART_COUNT.' ;
  COMMENT ON COLUMN INV_LOC_INV_RECOUNT.LOC_ID
IS
  'FK to INV_LOC_PART_COUNT.' ;
  COMMENT ON COLUMN INV_LOC_INV_RECOUNT.PART_NO_DB_ID
IS
  'FK to INV_LOC_PART_COUNT.' ;
  COMMENT ON COLUMN INV_LOC_INV_RECOUNT.PART_NO_ID
IS
  'FK to INV_LOC_PART_COUNT.' ;
  COMMENT ON COLUMN INV_LOC_INV_RECOUNT.INV_RECOUNT_ID
IS
  'This is a unique id for the recount row. It is generated from a sequence.' ;
  COMMENT ON COLUMN INV_LOC_INV_RECOUNT.INV_NO_DB_ID
IS
  'FK to INV_INV.' ;
  COMMENT ON COLUMN INV_LOC_INV_RECOUNT.INV_NO_ID
IS
  'FK to INV_INV.' ;
  COMMENT ON COLUMN INV_LOC_INV_RECOUNT.HR_DB_ID
IS
  'FK to ORG_HR.  The storeroom clerk that performed the recount.' ;
  COMMENT ON COLUMN INV_LOC_INV_RECOUNT.HR_ID
IS
  'FK to ORG_HR.  The storeroom clerk that performed the recount.' ;
  COMMENT ON COLUMN INV_LOC_INV_RECOUNT.RECOUNT_DT
IS
  'This is the date when the recount occurred.' ;
  COMMENT ON COLUMN INV_LOC_INV_RECOUNT.SERIAL_NO_OEM
IS
  'This is the serial number (or batch number) of the inventory record that was counted. This column is necessary in situations where the user enters a serial number that is not currently in the system.' ;
  COMMENT ON COLUMN INV_LOC_INV_RECOUNT.COUNT_EXPECT_QT
IS
  'This is the quantity that was expected by the system.' ;
  COMMENT ON COLUMN INV_LOC_INV_RECOUNT.COUNT_ACTUAL_QT
IS
  'This is the quantity that was counted by the storeroom clerk. ' ;
  COMMENT ON COLUMN INV_LOC_INV_RECOUNT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_LOC_INV_RECOUNT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_LOC_INV_RECOUNT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_LOC_INV_RECOUNT.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_LOC_INV_RECOUNT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INV_INV_INVLOCINVRECOUNT ON INV_LOC_INV_RECOUNT
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_ORG_HR_INVLOCINVRECOUNT ON INV_LOC_INV_RECOUNT
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
  CREATE INDEX IX_INVLOCPARTCT_INVLOCINVRECT ON INV_LOC_INV_RECOUNT
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC ,
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC ,
      PART_COUNT_ID ASC
    ) ;
ALTER TABLE INV_LOC_INV_RECOUNT ADD CONSTRAINT PK_INV_LOC_INV_RECOUNT PRIMARY KEY ( LOC_DB_ID, LOC_ID, PART_NO_DB_ID, PART_NO_ID, PART_COUNT_ID, INV_RECOUNT_ID ) ;


CREATE TABLE INV_LOC_LABOUR_CAPACITY
  (
    LOC_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_CD    VARCHAR2 (8) CONSTRAINT NN_INVLCLABSKILL NOT NULL DEFERRABLE ,
    HOURS_PER_DAY_QT FLOAT NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) CONSTRAINT NN_LOCLABCAPREVDB NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) CONSTRAINT NN_REVLOCLABCAP NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_LOC_LABOUR_CAPACITY ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_LABOUR_CAPACITY ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_LABOUR_CAPACITY ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_LABOUR_CAPACITY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_LOC_LABOUR_CAPACITY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_LOC_LABOUR_CAPACITY
IS
  'Allows for Maintenix to record the capacity of work that a particular station can perform.' ;
  COMMENT ON COLUMN INV_LOC_LABOUR_CAPACITY.LOC_DB_ID
IS
  'FK to INV_LOC.' ;
  COMMENT ON COLUMN INV_LOC_LABOUR_CAPACITY.LOC_ID
IS
  'FK to INV_LOC.' ;
  COMMENT ON COLUMN INV_LOC_LABOUR_CAPACITY.LABOUR_SKILL_DB_ID
IS
  'FK to REF_LABOUR_SKILL.' ;
  COMMENT ON COLUMN INV_LOC_LABOUR_CAPACITY.LABOUR_SKILL_CD
IS
  'FK to REF_LABOUR_SKILL.' ;
  COMMENT ON COLUMN INV_LOC_LABOUR_CAPACITY.HOURS_PER_DAY_QT
IS
  'The number of hours in a day a particular labour skill is available. ' ;
  COMMENT ON COLUMN INV_LOC_LABOUR_CAPACITY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_LOC_LABOUR_CAPACITY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN INV_LOC_LABOUR_CAPACITY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN INV_LOC_LABOUR_CAPACITY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN INV_LOC_LABOUR_CAPACITY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_INVLOC_INVLOCLABRCAPACITY ON INV_LOC_LABOUR_CAPACITY
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
ALTER TABLE INV_LOC_LABOUR_CAPACITY ADD CONSTRAINT "pk_INV_LOC_LABOUR_CAPACITY" PRIMARY KEY ( LOC_DB_ID, LOC_ID, LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) ;


CREATE TABLE INV_LOC_ORG
  (
    LOC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_LOC_ORG ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_ORG ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_ORG ADD CHECK ( ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_ORG ADD CHECK ( ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_ORG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_LOC_ORG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_LOC_ORG
IS
  'Models associations between organizations (ORG_ORG) and inventory locations (INV_LOC).' ;
  COMMENT ON COLUMN INV_LOC_ORG.LOC_DB_ID
IS
  'FK to INV_LOC. A location that is associated with an organization.' ;
  COMMENT ON COLUMN INV_LOC_ORG.LOC_ID
IS
  'FK to INV_LOC. A location that is associated with an organization.' ;
  COMMENT ON COLUMN INV_LOC_ORG.ORG_DB_ID
IS
  'FK to ORG_ORG. An organization that is associated with a location.' ;
  COMMENT ON COLUMN INV_LOC_ORG.ORG_ID
IS
  'FK to ORG_ORG. An organization that is associated with a location.' ;
  COMMENT ON COLUMN INV_LOC_ORG.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN INV_LOC_ORG.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_LOC_ORG.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_LOC_ORG.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_LOC_ORG.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVLOC_INVLOCORG ON INV_LOC_ORG
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
  CREATE INDEX IX_ORGORG_INVLOCORG ON INV_LOC_ORG
    (
      ORG_DB_ID ASC ,
      ORG_ID ASC
    ) ;
ALTER TABLE INV_LOC_ORG ADD CONSTRAINT PK_INV_LOC_ORG PRIMARY KEY ( LOC_DB_ID, LOC_ID, ORG_DB_ID, ORG_ID ) ;


CREATE TABLE INV_LOC_PART_COUNT
  (
    LOC_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    PART_COUNT_ID NUMBER (10) NOT NULL DEFERRABLE ,
    HR_DB_ID      NUMBER (10) ,
    HR_ID         NUMBER (10) ,
    LAST_COUNT_DT DATE ,
    NEXT_COUNT_DT DATE ,
    COUNT_EXPECT_QT FLOAT ,
    COUNT_ACTUAL_QT FLOAT ,
    COUNT_ACCEPT_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    REQ_RECOUNT_BOOL  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    HIST_BOOL         NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_LOC_PART_COUNT ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_PART_COUNT ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_PART_COUNT ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_PART_COUNT ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_PART_COUNT ADD CHECK ( PART_COUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_PART_COUNT ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_PART_COUNT ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_PART_COUNT ADD CHECK ( COUNT_ACCEPT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_LOC_PART_COUNT ADD CHECK ( REQ_RECOUNT_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_LOC_PART_COUNT ADD CHECK ( HIST_BOOL         IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_LOC_PART_COUNT ADD CHECK ( RSTAT_CD          IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_LOC_PART_COUNT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_LOC_PART_COUNT
IS
  'A record of the counting of inventory (by part number) at a location.' ;
  COMMENT ON COLUMN INV_LOC_PART_COUNT.LOC_DB_ID
IS
  'FK to INV_LOC.' ;
  COMMENT ON COLUMN INV_LOC_PART_COUNT.LOC_ID
IS
  'FK to INV_LOC.' ;
  COMMENT ON COLUMN INV_LOC_PART_COUNT.PART_NO_DB_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN INV_LOC_PART_COUNT.PART_NO_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN INV_LOC_PART_COUNT.HR_DB_ID
IS
  'FK to ORG_HR.  The storeroom clerk that actually performed the count.' ;
  COMMENT ON COLUMN INV_LOC_PART_COUNT.HR_ID
IS
  'FK to ORG_HR.  The storeroom clerk that actually performed the count.' ;
  COMMENT ON COLUMN INV_LOC_PART_COUNT.LAST_COUNT_DT
IS
  'The date that the count was last performed.' ;
  COMMENT ON COLUMN INV_LOC_PART_COUNT.NEXT_COUNT_DT
IS
  'The date before which the next count should be performed.' ;
  COMMENT ON COLUMN INV_LOC_PART_COUNT.COUNT_EXPECT_QT
IS
  'This is what the system thought the number of items should be.' ;
  COMMENT ON COLUMN INV_LOC_PART_COUNT.COUNT_ACTUAL_QT
IS
  'This is the number of items that the storeroom clerk counted.' ;
  COMMENT ON COLUMN INV_LOC_PART_COUNT.COUNT_ACCEPT_BOOL
IS
  'This is set to 1 if the material controller accepts a difference between the expected count and the actual count.' ;
  COMMENT ON COLUMN INV_LOC_PART_COUNT.REQ_RECOUNT_BOOL
IS
  'This is set to 1 if the material controller requests a recount of the part number.' ;
  COMMENT ON COLUMN INV_LOC_PART_COUNT.HIST_BOOL
IS
  'This is set to 1 if the part count is no longer the latest record.' ;
  COMMENT ON COLUMN INV_LOC_PART_COUNT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_LOC_PART_COUNT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_LOC_PART_COUNT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN INV_LOC_PART_COUNT.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_LOC_PART_COUNT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPPARTNO_INVLOCPARTCT ON INV_LOC_PART_COUNT
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVLOC_INVLOCPARTCT ON INV_LOC_PART_COUNT
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
  CREATE INDEX IX_ORG_HR_INVLOCPARTCOUNT ON INV_LOC_PART_COUNT
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
ALTER TABLE INV_LOC_PART_COUNT ADD CONSTRAINT PK_INV_LOC_PART_COUNT PRIMARY KEY ( LOC_DB_ID, LOC_ID, PART_NO_DB_ID, PART_NO_ID, PART_COUNT_ID ) ;


CREATE TABLE INV_LOC_PREF_MAP
  (
    LOC_DB_ID      NUMBER (10) NOT NULL ,
    LOC_ID         NUMBER (10) NOT NULL ,
    PREF_LOC_DB_ID NUMBER (10) NOT NULL ,
    PREF_LOC_ID    NUMBER (10) NOT NULL ,
    PRIORITY_ORD   NUMBER (10) NOT NULL ,
    RSTAT_CD       NUMBER (3) DEFAULT 0 NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE INV_LOC_PREF_MAP ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE INV_LOC_PREF_MAP ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE INV_LOC_PREF_MAP ADD CHECK ( PREF_LOC_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE INV_LOC_PREF_MAP ADD CHECK ( PREF_LOC_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE INV_LOC_PREF_MAP ADD CHECK ( PRIORITY_ORD BETWEEN 1 AND 2) ;
ALTER TABLE INV_LOC_PREF_MAP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE INV_LOC_PREF_MAP ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE INV_LOC_PREF_MAP ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE INV_LOC_PREF_MAP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON TABLE INV_LOC_PREF_MAP
IS
  'Mapping of maintenance locations to preferred servicable store locations.' ;
  COMMENT ON COLUMN INV_LOC_PREF_MAP.LOC_DB_ID
IS
  'FK to INV_LOC' ;
  COMMENT ON COLUMN INV_LOC_PREF_MAP.LOC_ID
IS
  'FK to INV_LOC' ;
  COMMENT ON COLUMN INV_LOC_PREF_MAP.PREF_LOC_DB_ID
IS
  'FK to preferred INV_LOC' ;
  COMMENT ON COLUMN INV_LOC_PREF_MAP.PREF_LOC_ID
IS
  'FK to preferred INV_LOC' ;
  COMMENT ON COLUMN INV_LOC_PREF_MAP.PRIORITY_ORD
IS
  'Priority order of location PREF_LOC_ID given location LOC_ID' ;
  COMMENT ON COLUMN INV_LOC_PREF_MAP.RSTAT_CD
IS
  'Status of the record.' ;
  COMMENT ON COLUMN INV_LOC_PREF_MAP.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN INV_LOC_PREF_MAP.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN INV_LOC_PREF_MAP.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN INV_LOC_PREF_MAP.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN INV_LOC_PREF_MAP.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN INV_LOC_PREF_MAP.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN INV_LOC_PREF_MAP.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_INV_LOC_PREF_MAP ON INV_LOC_PREF_MAP
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
  CREATE INDEX IX_PREF_LOC_INV_LOC ON INV_LOC_PREF_MAP
    (
      PREF_LOC_DB_ID ASC ,
      PREF_LOC_ID ASC
    ) ;
ALTER TABLE INV_LOC_PREF_MAP ADD CONSTRAINT PK_INV_LOC_PREF_MAP PRIMARY KEY ( LOC_DB_ID, LOC_ID, PREF_LOC_DB_ID, PREF_LOC_ID ) ;
ALTER TABLE INV_LOC_PREF_MAP ADD CONSTRAINT IX_INV_LOC_PREF_MAP_UNQ UNIQUE ( LOC_DB_ID , LOC_ID , PRIORITY_ORD ) ;


CREATE TABLE INV_LOC_PRINTER
  (
    LOC_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_PRINTER_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    PRINTER_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PRINTER_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PRINTER_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    PRINTER_PARM       VARCHAR2 (2000) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_LOC_PRINTER ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_PRINTER ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_PRINTER ADD CHECK ( LOC_PRINTER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_PRINTER ADD CHECK ( PRINTER_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_PRINTER ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_LOC_PRINTER ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_LOC_PRINTER
IS
  'Each location can have multiple printers.  Each printer has a type.' ;
  COMMENT ON COLUMN INV_LOC_PRINTER.LOC_DB_ID
IS
  'FK to INV_LOC' ;
  COMMENT ON COLUMN INV_LOC_PRINTER.LOC_ID
IS
  'FK to INV_LOC' ;
  COMMENT ON COLUMN INV_LOC_PRINTER.LOC_PRINTER_ID
IS
  'Number assigned (1..n) in context of the location.' ;
  COMMENT ON COLUMN INV_LOC_PRINTER.PRINTER_TYPE_DB_ID
IS
  'FK to REF_PRINTER_TYPE' ;
  COMMENT ON COLUMN INV_LOC_PRINTER.PRINTER_TYPE_CD
IS
  'FK to REF_PRINTER_TYPE' ;
  COMMENT ON COLUMN INV_LOC_PRINTER.PRINTER_SDESC
IS
  'Printer short description.' ;
  COMMENT ON COLUMN INV_LOC_PRINTER.PRINTER_PARM
IS
  'Type specific connectivity information.' ;
  COMMENT ON COLUMN INV_LOC_PRINTER.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_LOC_PRINTER.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_LOC_PRINTER.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_LOC_PRINTER.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_LOC_PRINTER.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVLOC_INVLOCPRINTER ON INV_LOC_PRINTER
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
ALTER TABLE INV_LOC_PRINTER ADD CONSTRAINT "pk_INV_LOC_PRINTER" PRIMARY KEY ( LOC_DB_ID, LOC_ID, LOC_PRINTER_ID ) ;


CREATE TABLE INV_LOC_PRINTER_JOB
  (
    LOC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_PRINTER_ID NUMBER (10) NOT NULL DEFERRABLE ,
    JOB_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    JOB_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DEFAULT_BOOL   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_LOC_PRINTER_JOB ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_PRINTER_JOB ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_PRINTER_JOB ADD CHECK ( LOC_PRINTER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_PRINTER_JOB ADD CHECK ( JOB_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_PRINTER_JOB ADD CHECK ( DEFAULT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_LOC_PRINTER_JOB ADD CHECK ( RSTAT_CD     IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_LOC_PRINTER_JOB ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_LOC_PRINTER_JOB
IS
  'This table will map job types to printers, per location. Each location can have at most one printer mapped to a given type. No mapping indicates that the location does not support printing of this job type.' ;
  COMMENT ON COLUMN INV_LOC_PRINTER_JOB.LOC_DB_ID
IS
  'FK to INV_LOC' ;
  COMMENT ON COLUMN INV_LOC_PRINTER_JOB.LOC_ID
IS
  'FK to INV_LOC' ;
  COMMENT ON COLUMN INV_LOC_PRINTER_JOB.LOC_PRINTER_ID
IS
  'Number assigned (1..n) in context of the location.' ;
  COMMENT ON COLUMN INV_LOC_PRINTER_JOB.JOB_TYPE_DB_ID
IS
  'FK to REF_JOB_TYPE' ;
  COMMENT ON COLUMN INV_LOC_PRINTER_JOB.JOB_TYPE_CD
IS
  'FK to REF_JOB_TYPE' ;
  COMMENT ON COLUMN INV_LOC_PRINTER_JOB.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_LOC_PRINTER_JOB.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_LOC_PRINTER_JOB.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_LOC_PRINTER_JOB.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_LOC_PRINTER_JOB.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVLOCPRNTR_INVLOCPRNTRJOB ON INV_LOC_PRINTER_JOB
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC ,
      LOC_PRINTER_ID ASC
    ) ;
ALTER TABLE INV_LOC_PRINTER_JOB ADD CONSTRAINT "pk_INV_LOC_PRINTER_JOB" PRIMARY KEY ( LOC_DB_ID, LOC_ID, LOC_PRINTER_ID, JOB_TYPE_DB_ID, JOB_TYPE_CD ) ;


CREATE TABLE INV_LOC_REPAIR
  (
    LOC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_LOC_REPAIR ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_REPAIR ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_REPAIR ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_REPAIR ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_REPAIR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_LOC_REPAIR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN INV_LOC_REPAIR.LOC_DB_ID
IS
  'FK to INV_LOC.' ;
  COMMENT ON COLUMN INV_LOC_REPAIR.LOC_ID
IS
  'FK to INV_LOC.' ;
  COMMENT ON COLUMN INV_LOC_REPAIR.PART_NO_DB_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN INV_LOC_REPAIR.PART_NO_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN INV_LOC_REPAIR.RSTAT_CD
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN INV_LOC_REPAIR.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN INV_LOC_REPAIR.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_LOC_REPAIR.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN INV_LOC_REPAIR.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EQPPRTNO_INVLCREPAIR ON INV_LOC_REPAIR
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVLOC_INVLCREPAIR ON INV_LOC_REPAIR
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
ALTER TABLE INV_LOC_REPAIR ADD CONSTRAINT "pk_INV_LOC_REPAIR" PRIMARY KEY ( LOC_DB_ID, LOC_ID, PART_NO_DB_ID, PART_NO_ID ) ;


CREATE TABLE INV_LOC_STOCK
  (
    LOC_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    STOCK_NO_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    STOCK_NO_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    OWNER_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    OWNER_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    STOCK_LOW_ACTN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    STOCK_LOW_ACTN_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    MIN_REORDER_QT FLOAT ,
    REORDER_QT FLOAT NOT NULL DEFERRABLE ,
    MAX_QT FLOAT ,
    WEIGHT_FACTOR_QT FLOAT ,
    ALLOC_PCT FLOAT ,
    IGNORE_OWNER_BOOL NUMBER (1) DEFAULT 0 ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE ,
    BATCH_SIZE FLOAT ,
    ALT_ID RAW (16) NOT NULL
  ) ;
ALTER TABLE INV_LOC_STOCK ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_STOCK ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_STOCK ADD CHECK ( STOCK_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_STOCK ADD CHECK ( STOCK_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_STOCK ADD CHECK ( OWNER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_STOCK ADD CHECK ( OWNER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_STOCK ADD CHECK ( STOCK_LOW_ACTN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_STOCK ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_LOC_STOCK ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_LOC_STOCK
IS
  'Records information about a stock number in reference to its given location.' ;
  COMMENT ON COLUMN INV_LOC_STOCK.LOC_DB_ID
IS
  'FK to INV_LOC.' ;
  COMMENT ON COLUMN INV_LOC_STOCK.LOC_ID
IS
  'FK to INV_LOC.' ;
  COMMENT ON COLUMN INV_LOC_STOCK.STOCK_NO_DB_ID
IS
  'FK to EQP_STOCK_NO.' ;
  COMMENT ON COLUMN INV_LOC_STOCK.STOCK_NO_ID
IS
  'FK to EQP_STOCK_NO.' ;
  COMMENT ON COLUMN INV_LOC_STOCK.STOCK_LOW_ACTN_DB_ID
IS
  'FK to REF_STOCK_LOW_ACTION.' ;
  COMMENT ON COLUMN INV_LOC_STOCK.STOCK_LOW_ACTN_CD
IS
  'FK to REF_STOCK_LOW_ACTION.' ;
  COMMENT ON COLUMN INV_LOC_STOCK.MIN_REORDER_QT
IS
  'This attribute defines the minimum quantity that should be ordered when the stock level falls below the level defined by REODER_QT.' ;
  COMMENT ON COLUMN INV_LOC_STOCK.REORDER_QT
IS
  'This attribute defines the reorder level.  When the stock on hand falls below this level, a quantity (defined by MIN_REORDER_QT) should be ordered to meet future demand.' ;
  COMMENT ON COLUMN INV_LOC_STOCK.MAX_QT
IS
  'The maximum quantity to store at this location.' ;
  COMMENT ON COLUMN INV_LOC_STOCK.WEIGHT_FACTOR_QT
IS
  'This weighting factor allows you to weight one station higher than another in the calculation. ' ;
  COMMENT ON COLUMN INV_LOC_STOCK.ALLOC_PCT
IS
  'Percentage of total supply of stock to be allocated here' ;
  COMMENT ON COLUMN INV_LOC_STOCK.IGNORE_OWNER_BOOL
IS
  'Determines whether the stock owner is considered in stock low assessments for a stock level and in subsequent stock distribution requests.' ;
  COMMENT ON COLUMN INV_LOC_STOCK.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN INV_LOC_STOCK.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN INV_LOC_STOCK.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN INV_LOC_STOCK.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN INV_LOC_STOCK.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  COMMENT ON COLUMN INV_LOC_STOCK.BATCH_SIZE
IS
  'Reorder quantity for a location. It can be bigger or smaller value then the reorder quantity for the entire stock.' ;
  COMMENT ON COLUMN INV_LOC_STOCK.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.' ;
  CREATE INDEX IX_INV_LOC_INVLOCSTOCK ON INV_LOC_STOCK
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
  CREATE INDEX IX_INVOWNER_INVLOCSTOCK ON INV_LOC_STOCK
    (
      OWNER_DB_ID ASC ,
      OWNER_ID ASC
    ) ;
  CREATE INDEX IX_EQP_STOCK_NO_INVLOCSTOCK ON INV_LOC_STOCK
    (
      STOCK_NO_DB_ID ASC ,
      STOCK_NO_ID ASC
    ) ;
ALTER TABLE INV_LOC_STOCK ADD CONSTRAINT PK_INV_LOC_STOCK PRIMARY KEY ( LOC_DB_ID, LOC_ID, STOCK_NO_DB_ID, STOCK_NO_ID, OWNER_DB_ID, OWNER_ID ) ;
ALTER TABLE INV_LOC_STOCK ADD CONSTRAINT IX_INVLOCSTOCKALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE INV_LOC_TO_FP
  (
    LOC_DB_ID      NUMBER (10) NOT NULL ,
    LOC_ID         NUMBER (10) NOT NULL ,
    EXPORT_BOOL    NUMBER (1) NOT NULL ,
    RSTAT_CD       NUMBER (3) DEFAULT 0 NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE INV_LOC_TO_FP ADD CHECK ( EXPORT_BOOL IN (0, 1)) ;
ALTER TABLE INV_LOC_TO_FP ADD CHECK ( RSTAT_CD    IN (0, 1, 2, 3)) ;
ALTER TABLE INV_LOC_TO_FP ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE INV_LOC_TO_FP ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE INV_LOC_TO_FP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON COLUMN INV_LOC_TO_FP.LOC_DB_ID
IS
  'The location''s database id.' ;
  COMMENT ON COLUMN INV_LOC_TO_FP.LOC_ID
IS
  'The location''s id.' ;
  COMMENT ON COLUMN INV_LOC_TO_FP.EXPORT_BOOL
IS
  'A boolean indicating whether or not the associated location shall be exported to Fleet Planner.' ;
  COMMENT ON COLUMN INV_LOC_TO_FP.RSTAT_CD
IS
  'Status of the record.' ;
  COMMENT ON COLUMN INV_LOC_TO_FP.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN INV_LOC_TO_FP.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN INV_LOC_TO_FP.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN INV_LOC_TO_FP.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN INV_LOC_TO_FP.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN INV_LOC_TO_FP.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN INV_LOC_TO_FP.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
CREATE UNIQUE INDEX IX_EXPORTBOOL_INVLOCTOFP ON INV_LOC_TO_FP ( LOC_ID ASC , LOC_DB_ID ASC , EXPORT_BOOL ASC ) ;
ALTER TABLE INV_LOC_TO_FP ADD CONSTRAINT PK_INV_LOC_TO_FP PRIMARY KEY ( LOC_DB_ID, LOC_ID ) ;


CREATE TABLE INV_LOC_WT_CAPABILITY
  (
    LOC_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    WORK_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WORK_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO     NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_LOC_WT_CAPABILITY ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_WT_CAPABILITY ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_WT_CAPABILITY ADD CHECK ( WORK_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_WT_CAPABILITY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_LOC_WT_CAPABILITY ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_WT_CAPABILITY ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_LOC_WT_CAPABILITY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN INV_LOC_WT_CAPABILITY.LOC_DB_ID
IS
  'FK to INV_LOC. The location that has this particular capability.' ;
  COMMENT ON COLUMN INV_LOC_WT_CAPABILITY.LOC_ID
IS
  'FK to INV_LOC. The location that has this particular capability.' ;
  COMMENT ON COLUMN INV_LOC_WT_CAPABILITY.WORK_TYPE_DB_ID
IS
  'FK to REF_WORK_TYPE. The type of work that the location has capability ' ;
  COMMENT ON COLUMN INV_LOC_WT_CAPABILITY.WORK_TYPE_CD
IS
  'FK to REF_WORK_TYPE. The type of work that the location has capability ' ;
  COMMENT ON COLUMN INV_LOC_WT_CAPABILITY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_LOC_WT_CAPABILITY.REVISION_NO
IS
  'A number incremented each time the record is modified' ;
  COMMENT ON COLUMN INV_LOC_WT_CAPABILITY.CTRL_DB_ID
IS
  'The identifier of the database that owns the record' ;
  COMMENT ON COLUMN INV_LOC_WT_CAPABILITY.CREATION_DT
IS
  'The data and time at which the record was inserted' ;
  COMMENT ON COLUMN INV_LOC_WT_CAPABILITY.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record' ;
  COMMENT ON COLUMN INV_LOC_WT_CAPABILITY.REVISION_DT
IS
  'The data and time at which the record was last updated' ;
  COMMENT ON COLUMN INV_LOC_WT_CAPABILITY.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN INV_LOC_WT_CAPABILITY.REVISION_USER
IS
  'The name of the user that last updated the record' ;
  CREATE INDEX IX_INVLOC_INVLOCWTCAPABILITY ON INV_LOC_WT_CAPABILITY
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
ALTER TABLE INV_LOC_WT_CAPABILITY ADD CONSTRAINT PK_INV_LOC_WT_CAPABILITY PRIMARY KEY ( LOC_DB_ID, LOC_ID, WORK_TYPE_DB_ID, WORK_TYPE_CD ) ;


CREATE TABLE INV_LOC_ZONE
  (
    LOC_DB_ID      NUMBER (10) NOT NULL ,
    LOC_ID         NUMBER (10) NOT NULL ,
    ROUTE_ORDER    NUMBER (10) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE INV_LOC_ZONE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
COMMENT ON COLUMN INV_LOC_ZONE.LOC_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN INV_LOC_ZONE.LOC_ID
IS
  'Unique identifier serving as part of the primary key, and assigned from the sequence LOC_ID_SEQ' ;
  COMMENT ON COLUMN INV_LOC_ZONE.ROUTE_ORDER
IS
  'BIN location routing order' ;
  COMMENT ON COLUMN INV_LOC_ZONE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_LOC_ZONE.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN INV_LOC_ZONE.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN INV_LOC_ZONE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_LOC_ZONE.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN INV_LOC_ZONE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_LOC_ZONE.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_LOC_ZONE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE INV_LOC_ZONE ADD CONSTRAINT PK_INV_LOC_ZONE PRIMARY KEY ( LOC_DB_ID, LOC_ID ) ;


CREATE TABLE INV_OIL_STATUS_LOG
  (
    INV_NO_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    OIL_STATUS_LOG_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    OIL_STATUS_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    OIL_STATUS_CD       VARCHAR2 (16) NOT NULL DEFERRABLE ,
    LOG_DT              DATE NOT NULL DEFERRABLE ,
    LOG_ACTION_DB_ID    NUMBER (10) ,
    LOG_ACTION_CD       VARCHAR2 (16) ,
    LOG_REASON_DB_ID    NUMBER (10) ,
    LOG_REASON_CD       VARCHAR2 (16) ,
    CURRENT_STATUS_BOOL NUMBER (1) DEFAULT 0 ,
    OIL_RATE_SNAPSHOT_QT FLOAT ,
    MANUAL_MODE_BOOL NUMBER (1) DEFAULT 0 ,
    HR_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID      NUMBER (10) ,
    SCHED_ID         NUMBER (10) ,
    NOTE_MDESC       VARCHAR2 (500) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_OIL_STATUS_LOG ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_LOG ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_LOG ADD CHECK ( OIL_STATUS_LOG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_LOG ADD CHECK ( OIL_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_LOG ADD CHECK ( LOG_ACTION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_LOG ADD CHECK ( LOG_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_LOG ADD CHECK ( CURRENT_STATUS_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_LOG ADD CHECK ( MANUAL_MODE_BOOL    IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_LOG ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_LOG ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_LOG ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_LOG ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_LOG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_OIL_STATUS_LOG
IS
  'This table contains the oil consumption status change history (log) of the inventory.  A record is added every time the OC status of an inventory changes.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.INV_NO_DB_ID
IS
  'FK to INV_INV. The inventory to which this status applies.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.INV_NO_ID
IS
  'FK to INV_INV. The inventory to which this status applies.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.OIL_STATUS_LOG_ID
IS
  'Unique identifier assigned from Sequence INV_OIL_STATUS_LOG_ID_SEQ' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.OIL_STATUS_DB_ID
IS
  'FK to REF_OIL_STATUS. The oil consumption status.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.OIL_STATUS_CD
IS
  'FK to REF_OIL_STATUS. The oil consumption status.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.LOG_DT
IS
  'Timestamp of the log.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.LOG_ACTION_DB_ID
IS
  'FK to REF_LOG_ACTION. The log action code.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.LOG_ACTION_CD
IS
  'FK to REF_LOG_ACTION. The log action code.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.LOG_REASON_DB_ID
IS
  'FK to REF_LOG_REASON. The log reason code.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.LOG_REASON_CD
IS
  'FK to REF_LOG_REASON. The log reason code.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.CURRENT_STATUS_BOOL
IS
  'Flag to indicate if this is the inventory?s current status.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.OIL_RATE_SNAPSHOT_QT
IS
  'Snapshot of the oil consumption rate when the status changed.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.MANUAL_MODE_BOOL
IS
  'Flag to indicate that the oil consumption status updates are in manual mode.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.HR_DB_ID
IS
  'FK to ORG_HR.  User id who changed the status, will be System for automatic changes or the end user who manually changed the status.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.HR_ID
IS
  'FK to ORG_HR.  User id who changed the status, will be System for automatic changes or the end user who manually changed the status.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.SCHED_DB_ID
IS
  'FK to SCHED_STASK. The task which triggered the automatic status change.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.SCHED_ID
IS
  'FK to SCHED_STASK. The task which triggered the automatic status change.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.NOTE_MDESC
IS
  'Note provided during change of status, may be a user note if status was changed manually.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_LOG.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVINV_INVOILSTATUSLOG ON INV_OIL_STATUS_LOG
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_INVOILSTATUSLOG ON INV_OIL_STATUS_LOG
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDSTASK_INVOILSTATUSLOG ON INV_OIL_STATUS_LOG
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
ALTER TABLE INV_OIL_STATUS_LOG ADD CONSTRAINT PK_INV_OIL_STATUS_LOG PRIMARY KEY ( INV_NO_DB_ID, INV_NO_ID, OIL_STATUS_LOG_ID ) ;
ALTER TABLE INV_OIL_STATUS_LOG ADD CONSTRAINT IX_INVOILSTATLOGALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE INV_OIL_STATUS_RATE
  (
    EVENT_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_INV_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    OIL_STATUS_INV_NO_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    OIL_STATUS_INV_NO_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    OIL_STATUS_LOG_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    DELTA_TIME_QT FLOAT ,
    CURRENT_RATE_BOOL NUMBER (1) DEFAULT 0 ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_OIL_STATUS_RATE ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_RATE ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_RATE ADD CHECK ( EVENT_INV_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_RATE ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_RATE ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_RATE ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_RATE ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_RATE ADD CHECK ( OIL_STATUS_INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_RATE ADD CHECK ( OIL_STATUS_INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_RATE ADD CHECK ( OIL_STATUS_LOG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_RATE ADD CHECK ( CURRENT_RATE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_RATE ADD CHECK ( RSTAT_CD          IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_OIL_STATUS_RATE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_OIL_STATUS_RATE
IS
  'This table is used to map each oil uptake record with the oil consumption status the inventory was in right after the measurement was taken (after status update if there were any).' ;
  COMMENT ON COLUMN INV_OIL_STATUS_RATE.EVENT_DB_ID
IS
  'FK to INV_PARM_DATA' ;
  COMMENT ON COLUMN INV_OIL_STATUS_RATE.EVENT_ID
IS
  'FK to INV_PARM_DATA' ;
  COMMENT ON COLUMN INV_OIL_STATUS_RATE.EVENT_INV_ID
IS
  'FK to INV_PARM_DATA' ;
  COMMENT ON COLUMN INV_OIL_STATUS_RATE.DATA_TYPE_DB_ID
IS
  'FK to INV_PARM_DATA' ;
  COMMENT ON COLUMN INV_OIL_STATUS_RATE.DATA_TYPE_ID
IS
  'FK to INV_PARM_DATA' ;
  COMMENT ON COLUMN INV_OIL_STATUS_RATE.INV_NO_DB_ID
IS
  'FK to INV_PARM_DATA' ;
  COMMENT ON COLUMN INV_OIL_STATUS_RATE.INV_NO_ID
IS
  'FK to INV_PARM_DATA' ;
  COMMENT ON COLUMN INV_OIL_STATUS_RATE.OIL_STATUS_INV_NO_DB_ID
IS
  'FK to INV_OIL_STATUS_LOG.  The unique id of the oil status log.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_RATE.OIL_STATUS_INV_NO_ID
IS
  'FK to INV_OIL_STATUS_LOG.  The unique id of the oil status log.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_RATE.OIL_STATUS_LOG_ID
IS
  'FK to INV_OIL_STATUS_LOG.  The unique id of the oil status log.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_RATE.DELTA_TIME_QT
IS
  'The delta between the current and previous values of the time parameter. ' ;
  COMMENT ON COLUMN INV_OIL_STATUS_RATE.CURRENT_RATE_BOOL
IS
  'Flag to indicate if this is the most recent oil uptake record.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_RATE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_RATE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_RATE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_RATE.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_OIL_STATUS_RATE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVOILSTLOG_INVOILSTRATE ON INV_OIL_STATUS_RATE
    (
      OIL_STATUS_INV_NO_DB_ID ASC ,
      OIL_STATUS_INV_NO_ID ASC ,
      OIL_STATUS_LOG_ID ASC
    ) ;
ALTER TABLE INV_OIL_STATUS_RATE ADD CONSTRAINT PK_INV_OIL_STATUS_RATE PRIMARY KEY ( EVENT_DB_ID, EVENT_ID, EVENT_INV_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID, INV_NO_DB_ID, INV_NO_ID ) ;


CREATE TABLE INV_OWNER
  (
    OWNER_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    OWNER_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    OWNER_CD     VARCHAR2 (16) NOT NULL DEFERRABLE ,
    OWNER_NAME   VARCHAR2 (40) NOT NULL DEFERRABLE ,
    LOCAL_BOOL   NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    DEFAULT_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ORG_DB_ID    NUMBER (10) ,
    ORG_ID       NUMBER (10) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_OWNER ADD CHECK ( OWNER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OWNER ADD CHECK ( OWNER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OWNER ADD CHECK ( LOCAL_BOOL   IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_OWNER ADD CHECK ( DEFAULT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_OWNER ADD CHECK ( ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OWNER ADD CHECK ( ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_OWNER ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_OWNER ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_OWNER
IS
  'Inventory Owner.  An Inventory Owner is group or department that has ownership or responsibiliy of Inventory and Locations.  Owners may not necessarily operate or maintain the Inventory. Ownership does drive access and viewing privelages on assets.' ;
  COMMENT ON COLUMN INV_OWNER.OWNER_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN INV_OWNER.OWNER_ID
IS
  'Unique idenifier assigned from Sequence OWNER_ID_SEQ.' ;
  COMMENT ON COLUMN INV_OWNER.OWNER_CD
IS
  'A user-entered code that helps identify the owner.' ;
  COMMENT ON COLUMN INV_OWNER.OWNER_NAME
IS
  'A name used to label the owner.' ;
  COMMENT ON COLUMN INV_OWNER.LOCAL_BOOL
IS
  'Indicates whether the owner is considered local or not.' ;
  COMMENT ON COLUMN INV_OWNER.DEFAULT_BOOL
IS
  'Indicates whether this is the default local owner or not.' ;
  COMMENT ON COLUMN INV_OWNER.ORG_DB_ID
IS
  'FK to ORG_ORG.  The organizations that represents this owner in the organization hierarchy (and acts as the carrier''s hook into the permission matrix.)' ;
  COMMENT ON COLUMN INV_OWNER.ORG_ID
IS
  'FK to ORG_ORG.  The organizations that represents this carrier in the organization hierarchy (and acts as the carrier''s hook into the permission matrix.)' ;
  COMMENT ON COLUMN INV_OWNER.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_OWNER.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_OWNER.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_OWNER.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_OWNER.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGORG_INVOWNER ON INV_OWNER
    ( ORG_DB_ID ASC , ORG_ID ASC
    ) ;
ALTER TABLE INV_OWNER ADD CONSTRAINT PK_INV_OWNER PRIMARY KEY ( OWNER_DB_ID, OWNER_ID ) ;
ALTER TABLE INV_OWNER ADD CONSTRAINT IX_INVOWNERALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE INV_PARM_DATA
  (
    EVENT_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_INV_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_VALUE_DB_ID NUMBER (10) ,
    DATA_VALUE_CD    VARCHAR2 (8) ,
    PARM_QT FLOAT ,
    DATA_ORD           NUMBER (4) ,
    PARM_DT            DATE ,
    PARM_TEXT          VARCHAR2 (4000) ,
    REC_ENG_UNIT_DB_ID NUMBER (10) ,
    REC_ENG_UNIT_CD    VARCHAR2 (8) ,
    REC_PARM_QT FLOAT ,
    NA_NOTE        VARCHAR2 (1000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_PARM_DATA ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_PARM_DATA ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_PARM_DATA ADD CHECK ( EVENT_INV_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_PARM_DATA ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_PARM_DATA ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_PARM_DATA ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_PARM_DATA ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_PARM_DATA ADD CHECK ( DATA_VALUE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_PARM_DATA ADD CHECK ( REC_ENG_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_PARM_DATA ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_PARM_DATA ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_PARM_DATA
IS
  'Inventory Parametric data: Used to record miscellaneous numeric values (non-usage or maintenance scheduling values) for each event. Examples would be metrics recorded in a flight like oil quantity, fuel, etc...' ;
  COMMENT ON COLUMN INV_PARM_DATA.EVENT_DB_ID
IS
  'FK to EVT_INV.' ;
  COMMENT ON COLUMN INV_PARM_DATA.EVENT_ID
IS
  'FK to EVT_INV.' ;
  COMMENT ON COLUMN INV_PARM_DATA.EVENT_INV_ID
IS
  'FK to EVT_INV.' ;
  COMMENT ON COLUMN INV_PARM_DATA.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE' ;
  COMMENT ON COLUMN INV_PARM_DATA.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE' ;
  COMMENT ON COLUMN INV_PARM_DATA.INV_NO_DB_ID
IS
  'FK to INV_INV. The inventory on which the measurement was taken (may differ from the event inventory).' ;
  COMMENT ON COLUMN INV_PARM_DATA.INV_NO_ID
IS
  'FK to INV_INV. The inventory on which the measurement was taken (may differ from the event inventory).' ;
  COMMENT ON COLUMN INV_PARM_DATA.DATA_VALUE_DB_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN INV_PARM_DATA.DATA_VALUE_CD
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN INV_PARM_DATA.PARM_QT
IS
  'The numeric quantity for DATA_TYPE_ID units.' ;
  COMMENT ON COLUMN INV_PARM_DATA.DATA_ORD
IS
  'An index to order the paramaters in context of the event.' ;
  COMMENT ON COLUMN INV_PARM_DATA.PARM_DT
IS
  'Records date time measurements where domain type cd = ''CME''.' ;
  COMMENT ON COLUMN INV_PARM_DATA.PARM_TEXT
IS
  'Freeform text based measurements.' ;
  COMMENT ON COLUMN INV_PARM_DATA.REC_ENG_UNIT_DB_ID
IS
  'FK to REF_ENG_UNIT.  The recorded (actual) unit of measurement (may be an alternative unit of measurement).' ;
  COMMENT ON COLUMN INV_PARM_DATA.REC_ENG_UNIT_CD
IS
  'FK to REF_ENG_UNIT.  The recorded (actual) unit of measurement (may be an alternative unit of measurement).' ;
  COMMENT ON COLUMN INV_PARM_DATA.REC_PARM_QT
IS
  'The recorded (actual) value of the measurement.' ;
  COMMENT ON COLUMN INV_PARM_DATA.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN INV_PARM_DATA.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_PARM_DATA.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_PARM_DATA.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN INV_PARM_DATA.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_MDATATYPE_INVPARMDATA ON INV_PARM_DATA
    (
      DATA_TYPE_DB_ID ASC ,
      DATA_TYPE_ID ASC
    ) ;
  CREATE INDEX IX_EVTINV_INVPARMDATA ON INV_PARM_DATA
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC ,
      EVENT_INV_ID ASC
    ) ;
  CREATE INDEX IX_INVINV_INVPARMDATA ON INV_PARM_DATA
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
ALTER TABLE INV_PARM_DATA ADD CONSTRAINT PK_INV_PARM_DATA PRIMARY KEY ( EVENT_DB_ID, EVENT_ID, EVENT_INV_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID, INV_NO_DB_ID, INV_NO_ID ) ;


CREATE TABLE INV_POS_DESC_QUEUE
  (
    INV_NO_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_POS_DESC_QUEUE ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_POS_DESC_QUEUE ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_POS_DESC_QUEUE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_POS_DESC_QUEUE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN INV_POS_DESC_QUEUE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN INV_POS_DESC_QUEUE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN INV_POS_DESC_QUEUE.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN INV_POS_DESC_QUEUE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVINV_INVPOSDESCQUEUE ON INV_POS_DESC_QUEUE
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;


CREATE TABLE INV_RELIABILITY_NOTE
  (
    INV_NO_DB_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID                   NUMBER (10) NOT NULL DEFERRABLE ,
    RELIABILITY_NOTE_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RELIABILITY_NOTE_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RELIABILITY_NOTE_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RELIABILITY_NOTE            VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    ISSUE_HR_DB_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    ISSUE_HR_ID                 NUMBER (10) NOT NULL DEFERRABLE ,
    ISSUE_DT                    DATE NOT NULL DEFERRABLE ,
    RESOLVED_BOOL               NUMBER (1) DEFAULT 0 ,
    RESOLVE_NOTE                VARCHAR2 (4000) ,
    RESOLVE_HR_DB_ID            NUMBER (10) ,
    RESOLVE_HR_ID               NUMBER (10) ,
    RESOLVE_DT                  DATE ,
    RSTAT_CD                    NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT                 DATE NOT NULL DEFERRABLE ,
    REVISION_DT                 DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER               VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_RELIABILITY_NOTE ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_RELIABILITY_NOTE ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_RELIABILITY_NOTE ADD CHECK ( RELIABILITY_NOTE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_RELIABILITY_NOTE ADD CHECK ( RELIABILITY_NOTE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_RELIABILITY_NOTE ADD CHECK ( ISSUE_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_RELIABILITY_NOTE ADD CHECK ( ISSUE_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_RELIABILITY_NOTE ADD CHECK ( RESOLVED_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_RELIABILITY_NOTE ADD CHECK ( RESOLVE_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_RELIABILITY_NOTE ADD CHECK ( RESOLVE_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_RELIABILITY_NOTE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_RELIABILITY_NOTE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_RELIABILITY_NOTE
IS
  'This table contains the details of a reliability note. a reliability note is used to track inventory with reliability problems.' ;
  COMMENT ON COLUMN INV_RELIABILITY_NOTE.INV_NO_DB_ID
IS
  'PFK to inv_inv. the inventory that the reliability note was recorded against.' ;
  COMMENT ON COLUMN INV_RELIABILITY_NOTE.INV_NO_ID
IS
  'PFK to inv_inv. the inventory that the reliability note was recorded against.' ;
  COMMENT ON COLUMN INV_RELIABILITY_NOTE.RELIABILITY_NOTE_ID
IS
  'Unique identifier assigned from Sequence INV_RELIABILITY_NOTE_ID_SEQ' ;
  COMMENT ON COLUMN INV_RELIABILITY_NOTE.RELIABILITY_NOTE_TYPE_DB_ID
IS
  'FK to REF_RELIABILITY_NOTE_TYPE' ;
  COMMENT ON COLUMN INV_RELIABILITY_NOTE.RELIABILITY_NOTE_TYPE_CD
IS
  'FK to REF_RELIABILITY_NOTE_TYPE' ;
  COMMENT ON COLUMN INV_RELIABILITY_NOTE.RELIABILITY_NOTE
IS
  'Records the content of the reliability note.' ;
  COMMENT ON COLUMN INV_RELIABILITY_NOTE.ISSUE_HR_DB_ID
IS
  'FK to ORG_HR.  Records the id of the user who issued/added the reliability note.' ;
  COMMENT ON COLUMN INV_RELIABILITY_NOTE.ISSUE_HR_ID
IS
  'FK to ORG_HR.  Records the id of the user who issued/added the reliability note.' ;
  COMMENT ON COLUMN INV_RELIABILITY_NOTE.ISSUE_DT
IS
  'Records the date when the reliability note was issued/added.' ;
  COMMENT ON COLUMN INV_RELIABILITY_NOTE.RESOLVED_BOOL
IS
  'Boolean flag to indicate if the Reliability Note is resolved or not.' ;
  COMMENT ON COLUMN INV_RELIABILITY_NOTE.RESOLVE_NOTE
IS
  'Records the resolution note.' ;
  COMMENT ON COLUMN INV_RELIABILITY_NOTE.RESOLVE_HR_DB_ID
IS
  'FK to ORG_HR.  Records the id of the user who entered the resolution note.' ;
  COMMENT ON COLUMN INV_RELIABILITY_NOTE.RESOLVE_HR_ID
IS
  'FK to ORG_HR.  Records the id of the user who entered the resolution note.' ;
  COMMENT ON COLUMN INV_RELIABILITY_NOTE.RESOLVE_DT
IS
  'Records the date when the resolution note was entered.' ;
  COMMENT ON COLUMN INV_RELIABILITY_NOTE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN INV_RELIABILITY_NOTE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN INV_RELIABILITY_NOTE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN INV_RELIABILITY_NOTE.REVISION_DB_ID
IS
  'The database identifer captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN INV_RELIABILITY_NOTE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_INVINV_INVRELNOTE ON INV_RELIABILITY_NOTE
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_ISSUEORGHR_INVRELNOTE ON INV_RELIABILITY_NOTE
    (
      ISSUE_HR_DB_ID ASC ,
      ISSUE_HR_ID ASC
    ) ;
  CREATE INDEX IX_RESOLVEORGHR_INVRELNOTE ON INV_RELIABILITY_NOTE
    (
      RESOLVE_HR_DB_ID ASC ,
      RESOLVE_HR_ID ASC
    ) ;
ALTER TABLE INV_RELIABILITY_NOTE ADD CONSTRAINT PK_INV_RELIABILITY_NOTE PRIMARY KEY ( INV_NO_DB_ID, INV_NO_ID, RELIABILITY_NOTE_ID ) ;


CREATE TABLE INV_REMOVE
  (
    INV_REMOVE_ID RAW (16) DEFAULT sys_guid() NOT NULL ,
    EVENT_DB_ID         NUMBER (10) NOT NULL ,
    EVENT_ID            NUMBER (10) NOT NULL ,
    INV_NO_DB_ID        NUMBER (10) NOT NULL ,
    INV_NO_ID           NUMBER (10) NOT NULL ,
    NH_INV_NO_DB_ID     NUMBER (10) ,
    NH_INV_NO_ID        NUMBER (10) ,
    ASSMBL_INV_NO_DB_ID NUMBER (10) ,
    ASSMBL_INV_NO_ID    NUMBER (10) ,
    H_INV_NO_DB_ID      NUMBER (10) ,
    H_INV_NO_ID         NUMBER (10) ,
    EVENT_DT            DATE ,
    MAIN_INV_BOOL       NUMBER (1) DEFAULT 0 NOT NULL ,
    RSTAT_CD            NUMBER (3) NOT NULL ,
    CTRL_DB_ID          NUMBER (10) NOT NULL ,
    REVISION_NO         NUMBER (10) NOT NULL ,
    CREATION_DB_ID      NUMBER (10) NOT NULL ,
    CREATION_DT         DATE NOT NULL ,
    REVISION_DT         DATE NOT NULL ,
    REVISION_DB_ID      NUMBER (10) NOT NULL ,
    REVISION_USER       VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE INV_REMOVE ADD CONSTRAINT CK_INV_RMVL_RSTAT_CD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE INV_REMOVE ADD CONSTRAINT CK_INV_RMVL_CTRL_DB_ID CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE INV_REMOVE ADD CONSTRAINT CK_INV_RMVL_CREATION_DB_ID CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE INV_REMOVE ADD CONSTRAINT CK_INV_RMVL_REVISION_DB_ID CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON TABLE INV_REMOVE
IS
  'Inventory Remove: This entity is used to record that an inventory item is removed from a parent inventory item during configuration change. It is the foundation for retrieving historic configuration information about inventory items at any time.' ;
  COMMENT ON COLUMN INV_REMOVE.INV_REMOVE_ID
IS
  'PK to INV_REMOVE_ID' ;
  COMMENT ON COLUMN INV_REMOVE.EVENT_DB_ID
IS
  'FK to EVT_EVENT.  The event that log card should be filed against.' ;
  COMMENT ON COLUMN INV_REMOVE.EVENT_ID
IS
  'FK to EVT_EVENT.  The event that log card should be filed against.' ;
  COMMENT ON COLUMN INV_REMOVE.INV_NO_DB_ID
IS
  'FK to INV_INV. The immediate item that the event is assigned to.' ;
  COMMENT ON COLUMN INV_REMOVE.INV_NO_ID
IS
  'FK to INV_INV. The immediate item that the event is assigned to.' ;
  COMMENT ON COLUMN INV_REMOVE.NH_INV_NO_DB_ID
IS
  'FK to INV_INV. The immediate item''s immediate parent at the time of the event.' ;
  COMMENT ON COLUMN INV_REMOVE.NH_INV_NO_ID
IS
  'FK to INV_INV. The immediate item''s immediate parent at the time of the event.' ;
  COMMENT ON COLUMN INV_REMOVE.ASSMBL_INV_NO_DB_ID
IS
  'FK to INV_INV. The immediate item''s immediate parent assembly at the time of the event.' ;
  COMMENT ON COLUMN INV_REMOVE.ASSMBL_INV_NO_ID
IS
  'FK to INV_INV. The immediate item''s immediate parent assembly at the time of the event.' ;
  COMMENT ON COLUMN INV_REMOVE.H_INV_NO_DB_ID
IS
  'FK to INV_INV. The immediate item''s highest parent at the time of the event.' ;
  COMMENT ON COLUMN INV_REMOVE.H_INV_NO_ID
IS
  'FK to INV_INV. The immediate item''s highest parent at the time of the event.' ;
  COMMENT ON COLUMN INV_REMOVE.EVENT_DT
IS
  'The local time at the time that the inventory item is actually removed. This is the same time as the time of the configuration change event.' ;
  COMMENT ON COLUMN INV_REMOVE.MAIN_INV_BOOL
IS
  'Indicates that this item is THE immediate item which always carries the event.' ;
  COMMENT ON COLUMN INV_REMOVE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access for the record.' ;
  COMMENT ON COLUMN INV_REMOVE.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN INV_REMOVE.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN INV_REMOVE.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN INV_REMOVE.CREATION_DT
IS
  'The data and time at which the record was inserted.' ;
  COMMENT ON COLUMN INV_REMOVE.REVISION_DT
IS
  'The data and time at which the record was updated.' ;
  COMMENT ON COLUMN INV_REMOVE.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN INV_REMOVE.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_INVRMVL_HINV_EVTDT ON INV_REMOVE
    (
      H_INV_NO_DB_ID ASC ,
      H_INV_NO_ID ASC ,
      EVENT_DT ASC
    ) ;
  CREATE INDEX IX_INVRMVL_EVENT_ID ON INV_REMOVE
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
  CREATE INDEX IX_INVRMVL_INV_ID ON INV_REMOVE
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVRMVL_H_INV_ID ON INV_REMOVE
    (
      H_INV_NO_DB_ID ASC ,
      H_INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVRMVL_ASSMBL_INV_ID ON INV_REMOVE
    (
      ASSMBL_INV_NO_DB_ID ASC ,
      ASSMBL_INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVRMVL_NH_INV_ID ON INV_REMOVE
    (
      NH_INV_NO_DB_ID ASC ,
      NH_INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVRMVL_INV_EVTDT ON INV_REMOVE
    (
      INV_NO_ID ASC ,
      INV_NO_DB_ID ASC ,
      EVENT_DT ASC
    ) ;
ALTER TABLE INV_REMOVE ADD CONSTRAINT PK_INV_REMOVE PRIMARY KEY ( INV_REMOVE_ID ) ;


CREATE TABLE INV_SYNC_QUEUE
  (
    INV_NO_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    QUEUE_DATE   DATE NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_SYNC_QUEUE ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_SYNC_QUEUE ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_SYNC_QUEUE
IS
  'This queue table contains the inventory keys that baseline sync needs to evaluate for synchronization.  The BaselineSyncJobBean scans this table for entries.' ;
  COMMENT ON COLUMN INV_SYNC_QUEUE.QUEUE_DATE
IS
  'The date when the inventory was queued as needing synchronization.' ;
ALTER TABLE INV_SYNC_QUEUE ADD CONSTRAINT PK_INV_SYNC_QUEUE PRIMARY KEY ( INV_NO_DB_ID, INV_NO_ID ) ;


CREATE TABLE INV_XFER
  (
    XFER_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    XFER_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    XFER_TYPE_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    XFER_TYPE_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID     NUMBER (10) ,
    INV_NO_ID        NUMBER (10) ,
    INIT_EVENT_DB_ID NUMBER (10) ,
    INIT_EVENT_ID    NUMBER (10) ,
    RECV_BY_HR_DB_ID NUMBER (10) ,
    RECV_BY_HR_ID    NUMBER (10) ,
    XFER_QT FLOAT ,
    UNIT_PRICE       NUMBER (15,5) ,
    PRINTED_BOOL     NUMBER (1) DEFAULT 1 ,
    KIT_INV_NO_DB_ID NUMBER (10) ,
    KIT_INV_NO_ID    NUMBER (10) ,
    QTY_UNIT_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    QTY_UNIT_CD      VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE INV_XFER ADD CHECK ( XFER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_XFER ADD CHECK ( XFER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_XFER ADD CHECK ( XFER_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_XFER ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_XFER ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_XFER ADD CHECK ( INIT_EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_XFER ADD CHECK ( INIT_EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_XFER ADD CHECK ( RECV_BY_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_XFER ADD CHECK ( RECV_BY_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_XFER ADD CHECK ( PRINTED_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE INV_XFER ADD CHECK ( KIT_INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_XFER ADD CHECK ( KIT_INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE INV_XFER ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE INV_XFER ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE INV_XFER
IS
  'Stores information about inventory transfers.  Transfers deal with inventory movement on a local level.' ;
  COMMENT ON COLUMN INV_XFER.XFER_DB_ID
IS
  'FK to EVT_EVENT (with GEN classification of EVENT_TYPE_CD = ''LX'').  Primary key is transcribed onto this entity.' ;
  COMMENT ON COLUMN INV_XFER.XFER_ID
IS
  'FK to EVT_EVENT (with GEN classification of EVENT_TYPE_CD = ''LX'').  Primary key is transcribed onto this entity.' ;
  COMMENT ON COLUMN INV_XFER.XFER_TYPE_DB_ID
IS
  'FK to REF_XFER_TYPE.' ;
  COMMENT ON COLUMN INV_XFER.XFER_TYPE_CD
IS
  'FK to REF_XFER_TYPE.' ;
  COMMENT ON COLUMN INV_XFER.INV_NO_DB_ID
IS
  'FK to inv_inv.  Inventory being transferred.' ;
  COMMENT ON COLUMN INV_XFER.INV_NO_ID
IS
  'FK to inv_inv.  Inventory being transferred.' ;
  COMMENT ON COLUMN INV_XFER.INIT_EVENT_DB_ID
IS
  'FK EVT_EVENT. Event that caused the transfer to be inititated.' ;
  COMMENT ON COLUMN INV_XFER.INIT_EVENT_ID
IS
  'FK EVT_EVENT. Event that caused the transfer to be inititated.' ;
  COMMENT ON COLUMN INV_XFER.RECV_BY_HR_DB_ID
IS
  'FK to ORG_HR.' ;
  COMMENT ON COLUMN INV_XFER.RECV_BY_HR_ID
IS
  'FK to ORG_HR.' ;
  COMMENT ON COLUMN INV_XFER.XFER_QT
IS
  'Transfer quantity.' ;
  COMMENT ON COLUMN INV_XFER.UNIT_PRICE
IS
  'Unit prices associated with the inventory trasfer.' ;
  COMMENT ON COLUMN INV_XFER.QTY_UNIT_DB_ID
IS
  'Unit of measure for the transfer quantity. FK to REF_QTY_UNIT.' ;
  COMMENT ON COLUMN INV_XFER.QTY_UNIT_CD
IS
  'Unit of measure for the transfer quantity. FK to REF_QTY_UNIT.' ;
  COMMENT ON COLUMN INV_XFER.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN INV_XFER.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN INV_XFER.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN INV_XFER.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN INV_XFER.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EVTEVENTINIT_INVXFER ON INV_XFER
    (
      INIT_EVENT_DB_ID ASC ,
      INIT_EVENT_ID ASC
    ) ;
  CREATE INDEX IX_INVIN_INVXFER ON INV_XFER
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_INVXFER ON INV_XFER
    (
      RECV_BY_HR_DB_ID ASC ,
      RECV_BY_HR_ID ASC
    ) ;
  CREATE INDEX IX_INVKIT_INVXFER ON INV_XFER
    (
      KIT_INV_NO_DB_ID ASC ,
      KIT_INV_NO_ID ASC
    ) ;
ALTER TABLE INV_XFER ADD CONSTRAINT "pk_INV_XFER" PRIMARY KEY ( XFER_DB_ID, XFER_ID ) ;
ALTER TABLE INV_XFER ADD CONSTRAINT IX_INVXFERALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE JOB_FAILURE_QUEUE
  (
    FAIL_KEY       VARCHAR2 (20) NOT NULL DEFERRABLE ,
    FAIL_TYPE      VARCHAR2 (30) NOT NULL DEFERRABLE ,
    FAIL_COUNT     NUMBER NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE JOB_FAILURE_QUEUE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE JOB_FAILURE_QUEUE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE JOB_FAILURE_QUEUE
IS
  'Work Department: Work departments are the specific sub-organizations that execute maintenance. Scheduling levels and distributes work to departments.' ;
  COMMENT ON COLUMN JOB_FAILURE_QUEUE.FAIL_KEY
IS
  'String representation of the primary key for the entity that triggered this failure' ;
  COMMENT ON COLUMN JOB_FAILURE_QUEUE.FAIL_TYPE
IS
  'The type of failure' ;
  COMMENT ON COLUMN JOB_FAILURE_QUEUE.FAIL_COUNT
IS
  'The running total for the number of times the failure has occured' ;
  COMMENT ON COLUMN JOB_FAILURE_QUEUE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN JOB_FAILURE_QUEUE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN JOB_FAILURE_QUEUE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN JOB_FAILURE_QUEUE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN JOB_FAILURE_QUEUE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_JOBFAILQ_FAILTYPE ON JOB_FAILURE_QUEUE
    ( FAIL_TYPE ASC
    ) ;
ALTER TABLE JOB_FAILURE_QUEUE ADD CONSTRAINT PK_JOB_FAILURE_QUEUE PRIMARY KEY ( FAIL_KEY, FAIL_TYPE ) ;


CREATE TABLE KIT_SYNC_QUEUE
  (
    INV_NO_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE KIT_SYNC_QUEUE ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE KIT_SYNC_QUEUE ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE KIT_SYNC_QUEUE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE KIT_SYNC_QUEUE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE KIT_SYNC_QUEUE
IS
  'Kit: A kit inventory is a container which holds inventory inside of it.
This table contains a list of kits that need to be synchronized to ensure that their attributes are correct.' ;
  CREATE INDEX IX_INVINV_KITSYNCQUEUE ON KIT_SYNC_QUEUE
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;


CREATE TABLE LIC_DEFN
  (
    LIC_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    LIC_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    CARRIER_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    CARRIER_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    LIC_TYPE_DB_ID    NUMBER (10) ,
    LIC_TYPE_CD       VARCHAR2 (16) ,
    LIC_CAT_DB_ID     NUMBER (10) ,
    LIC_CAT_CD        VARCHAR2 (8) ,
    LIC_CLASS_DB_ID   NUMBER (10) ,
    LIC_CLASS_CD      VARCHAR2 (8) ,
    LIC_STATUS_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    LIC_STATUS_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    LIC_CD            VARCHAR2 (40) NOT NULL DEFERRABLE ,
    LIC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    LIC_LDESC         VARCHAR2 (4000) ,
    PRINT_ONCARD_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    EXTRA_PAY_BOOL    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID      NUMBER (10) ,
    ASSMBL_CD         VARCHAR2 (8) ,
    EXP_INTERVAL      INTEGER ,
    LAST_EVALUATED    DATE ,
    LAST_UPDATED      DATE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LIC_DEFN ADD CHECK ( LIC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LIC_DEFN ADD CHECK ( LIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LIC_DEFN ADD CHECK ( CARRIER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LIC_DEFN ADD CHECK ( CARRIER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LIC_DEFN ADD CHECK ( LIC_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LIC_DEFN ADD CHECK ( LIC_CAT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LIC_DEFN ADD CHECK ( LIC_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LIC_DEFN ADD CHECK ( LIC_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LIC_DEFN ADD CHECK ( PRINT_ONCARD_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE LIC_DEFN ADD CHECK ( EXTRA_PAY_BOOL    IN (0, 1)) DEFERRABLE ;
ALTER TABLE LIC_DEFN ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LIC_DEFN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LIC_DEFN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LIC_DEFN
IS
  'This table allows you to setup details of the license definition.' ;
  COMMENT ON COLUMN LIC_DEFN.LIC_DB_ID
IS
  'This is a primary key for the license definition.' ;
  COMMENT ON COLUMN LIC_DEFN.LIC_ID
IS
  'This is a primary key for the license definition.' ;
  COMMENT ON COLUMN LIC_DEFN.LIC_CD
IS
  'This is a unique identification code for the license (aka License Number)' ;
  COMMENT ON COLUMN LIC_DEFN.LIC_SDESC
IS
  'This is a name of the license definition.' ;
  COMMENT ON COLUMN LIC_DEFN.LIC_LDESC
IS
  'This is a description of the license definition.' ;
  COMMENT ON COLUMN LIC_DEFN.PRINT_ONCARD_BOOL
IS
  'Indicates if the license should be included on the License Card Report.' ;
  COMMENT ON COLUMN LIC_DEFN.EXTRA_PAY_BOOL
IS
  'Indicates if human resource with this license will require extra pay.' ;
  COMMENT ON COLUMN LIC_DEFN.EXP_INTERVAL
IS
  'Expiry interval, this license will expire so many months after it becomes effective. ' ;
  COMMENT ON COLUMN LIC_DEFN.LAST_EVALUATED
IS
  'used to determine if the message driven bean that recalcualtes a license definition (and all users associated with it) was last synced.' ;
  COMMENT ON COLUMN LIC_DEFN.LAST_UPDATED
IS
  'this datetime indicates a change to the license definition.  If it''s after last evaluated, this means the license needs to be sycned.' ;
  COMMENT ON COLUMN LIC_DEFN.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN LIC_DEFN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN LIC_DEFN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN LIC_DEFN.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN LIC_DEFN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPASSMBL_LICDEFN ON LIC_DEFN
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
  CREATE INDEX IX_ORGCARRIER_LICDEFN ON LIC_DEFN
    (
      CARRIER_DB_ID ASC ,
      CARRIER_ID ASC
    ) ;
ALTER TABLE LIC_DEFN ADD CONSTRAINT PK_LIC_DEFN PRIMARY KEY ( LIC_DB_ID, LIC_ID ) ;
ALTER TABLE LIC_DEFN ADD CONSTRAINT IX_LICDEFNALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE LIC_DEFN_PREREQ
  (
    LIC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LIC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    LIC_PREREQ_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    GRP_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    GRP_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LIC_DEFN_PREREQ ADD CHECK ( LIC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LIC_DEFN_PREREQ ADD CHECK ( LIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LIC_DEFN_PREREQ ADD CHECK ( LIC_PREREQ_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LIC_DEFN_PREREQ ADD CHECK ( GRP_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LIC_DEFN_PREREQ ADD CHECK ( GRP_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LIC_DEFN_PREREQ ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LIC_DEFN_PREREQ ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN LIC_DEFN_PREREQ.LIC_PREREQ_ID
IS
  'This is the primary key' ;
  COMMENT ON COLUMN LIC_DEFN_PREREQ.GRP_DEFN_DB_ID
IS
  'This is a foreign key to the GRP_DEFN table.' ;
  COMMENT ON COLUMN LIC_DEFN_PREREQ.GRP_DEFN_ID
IS
  'This is a foreign key to the GRP_DEFN table.' ;
  COMMENT ON COLUMN LIC_DEFN_PREREQ.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN LIC_DEFN_PREREQ.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN LIC_DEFN_PREREQ.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN LIC_DEFN_PREREQ.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN LIC_DEFN_PREREQ.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_LICDEFN_LICDEFNPREREQ ON LIC_DEFN_PREREQ
    (
      LIC_DB_ID ASC ,
      LIC_ID ASC
    ) ;
  CREATE INDEX IX_GRPDEFN_LICDEFNPREREQ ON LIC_DEFN_PREREQ
    (
      GRP_DEFN_DB_ID ASC ,
      GRP_DEFN_ID ASC
    ) ;
ALTER TABLE LIC_DEFN_PREREQ ADD CONSTRAINT PK_LIC_DEFN_PREREQ PRIMARY KEY ( LIC_DB_ID, LIC_ID, LIC_PREREQ_ID ) ;


CREATE TABLE LPA_FLEET
  (
    FLEET_DB_ID                    NUMBER (10) NOT NULL DEFERRABLE ,
    FLEET_CD                       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    SERVICE_CHECK_BOOL             NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    SERVICE_BLOCK_DEFN_DB_ID       NUMBER (10) ,
    SERVICE_BLOCK_DEFN_ID          NUMBER (10) ,
    SERVICE_WP_NAME_TEMPLATE       VARCHAR2 (4000) ,
    SERVICE_WP_TASK_SUBCLASS_DB_ID NUMBER (10) ,
    SERVICE_WP_TASK_SUBCLASS_CD    VARCHAR2 (8) ,
    TURN_CHECK_BOOL                NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    TURN_BLOCK_DEFN_DB_ID          NUMBER (10) ,
    TURN_BLOCK_DEFN_ID             NUMBER (10) ,
    TURN_WP_NAME_TEMPLATE          VARCHAR2 (4000) ,
    TURN_WP_TASK_SUBCLASS_DB_ID    NUMBER (10) ,
    TURN_WP_TASK_SUBCLASS_CD       VARCHAR2 (8) ,
    RSTAT_CD                       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT                    DATE NOT NULL DEFERRABLE ,
    REVISION_DT                    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID                 NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER                  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LPA_FLEET ADD CHECK ( FLEET_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_FLEET ADD CHECK ( SERVICE_CHECK_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE LPA_FLEET ADD CHECK ( SERVICE_BLOCK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_FLEET ADD CHECK ( SERVICE_BLOCK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_FLEET ADD CHECK ( SERVICE_WP_TASK_SUBCLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_FLEET ADD CHECK ( TURN_CHECK_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE LPA_FLEET ADD CHECK ( TURN_BLOCK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_FLEET ADD CHECK ( TURN_BLOCK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_FLEET ADD CHECK ( TURN_WP_TASK_SUBCLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_FLEET ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LPA_FLEET ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LPA_FLEET
IS
  'Specifies the line planning automation settings for each fleet (i.e. aircraft assembly)' ;
  COMMENT ON COLUMN LPA_FLEET.FLEET_DB_ID
IS
  'FK to EQP_ASSMBL' ;
  COMMENT ON COLUMN LPA_FLEET.FLEET_CD
IS
  'FK to EQP_ASSMBL' ;
  COMMENT ON COLUMN LPA_FLEET.SERVICE_CHECK_BOOL
IS
  'Indicates if service check planning is enabled for this assembly. When true, work packages for service checks will be created and scheduled as needed.' ;
  COMMENT ON COLUMN LPA_FLEET.SERVICE_BLOCK_DEFN_DB_ID
IS
  'FK to TASK_DEFN. Block definition of the service check.' ;
  COMMENT ON COLUMN LPA_FLEET.SERVICE_BLOCK_DEFN_ID
IS
  'FK to TASK_DEFN. Block definition of the service check.' ;
  COMMENT ON COLUMN LPA_FLEET.SERVICE_WP_NAME_TEMPLATE
IS
  'The template from which to generate the service check work package name.' ;
  COMMENT ON COLUMN LPA_FLEET.SERVICE_WP_TASK_SUBCLASS_DB_ID
IS
  'FK to REF_TASK_SUBCLASS. Optional task subclass that will be applied to the generated service check work package.' ;
  COMMENT ON COLUMN LPA_FLEET.SERVICE_WP_TASK_SUBCLASS_CD
IS
  'FK to REF_TASK_SUBCLASS. Optional task subclass that will be applied to the generated service check work package.
' ;
  COMMENT ON COLUMN LPA_FLEET.TURN_CHECK_BOOL
IS
  'Indicates if turn check planning is enabled for this assembly. When true, work packages for turn checks will be created and scheduled as needed.' ;
  COMMENT ON COLUMN LPA_FLEET.TURN_BLOCK_DEFN_DB_ID
IS
  'FK to TASK_DEFN. Task definition for the turn check block.' ;
  COMMENT ON COLUMN LPA_FLEET.TURN_BLOCK_DEFN_ID
IS
  'FK to TASK_DEFN. Task definition for the turn check block.' ;
  COMMENT ON COLUMN LPA_FLEET.TURN_WP_NAME_TEMPLATE
IS
  'The template from which to generate the turn check work package name.' ;
  COMMENT ON COLUMN LPA_FLEET.TURN_WP_TASK_SUBCLASS_DB_ID
IS
  'FK to REF_TASK_SUBCLASS. Optional task subclass that will be applied to the generated service check work package.' ;
  COMMENT ON COLUMN LPA_FLEET.TURN_WP_TASK_SUBCLASS_CD
IS
  'FK to REF_TASK_SUBCLASS. Optional task subclass that will be applied to the generated service check work package.' ;
  COMMENT ON COLUMN LPA_FLEET.RSTAT_CD
IS
  'Status of the record.' ;
  COMMENT ON COLUMN LPA_FLEET.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN LPA_FLEET.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN LPA_FLEET.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN LPA_FLEET.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_REFTASKSUBCL_LPAFLEETSRVC ON LPA_FLEET
    (
      SERVICE_WP_TASK_SUBCLASS_DB_ID ASC ,
      SERVICE_WP_TASK_SUBCLASS_CD ASC
    ) ;
  CREATE INDEX IX_REFTASKSUBCL_LPAFLEETTURN ON LPA_FLEET
    (
      TURN_WP_TASK_SUBCLASS_DB_ID ASC ,
      TURN_WP_TASK_SUBCLASS_CD ASC
    ) ;
  CREATE INDEX IX_TASKDEFN_LPAFLEETSRVC ON LPA_FLEET
    (
      SERVICE_BLOCK_DEFN_DB_ID ASC ,
      SERVICE_BLOCK_DEFN_ID ASC
    ) ;
  CREATE INDEX IX_TASKDEFN_LPAFLEETTURN ON LPA_FLEET
    (
      TURN_BLOCK_DEFN_DB_ID ASC ,
      TURN_BLOCK_DEFN_ID ASC
    ) ;
ALTER TABLE LPA_FLEET ADD CONSTRAINT PK_LPA_FLEET PRIMARY KEY ( FLEET_DB_ID, FLEET_CD ) ;


CREATE TABLE LPA_LOG
  (
    LPA_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    LPA_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LPA_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    LOG_START_DT     DATE NOT NULL DEFERRABLE ,
    LOG_END_DT       DATE ,
    DEF_SCHED_RANGE_QT FLOAT NOT NULL DEFERRABLE ,
    DEF_PLAN_YIELD_PCT FLOAT NOT NULL DEFERRABLE ,
    USER_SCHED_RANGE_QT FLOAT ,
    HR_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    LOCKED_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LPA_LOG ADD CHECK ( LPA_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_LOG ADD CHECK ( LPA_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_LOG ADD CHECK ( DEF_PLAN_YIELD_PCT BETWEEN 0 AND 1) DEFERRABLE ;
ALTER TABLE LPA_LOG ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_LOG ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_LOG ADD CHECK ( LOCKED_BOOL IN (0, 1)) DEFERRABLE ;
COMMENT ON TABLE LPA_LOG
IS
  'Lists the various types of time off that can be recorded for a user.' ;
  COMMENT ON COLUMN LPA_LOG.LOG_START_DT
IS
  'This column represents start of the line planning automation' ;
  COMMENT ON COLUMN LPA_LOG.LOG_END_DT
IS
  'This column represents end of the line planning automation' ;
  COMMENT ON COLUMN LPA_LOG.DEF_SCHED_RANGE_QT
IS
  'This column represents global scheduling range captured during line planning automation. ' ;
  COMMENT ON COLUMN LPA_LOG.DEF_PLAN_YIELD_PCT
IS
  'This column represents global planning yield captured during line planning automation. ' ;
  COMMENT ON COLUMN LPA_LOG.USER_SCHED_RANGE_QT
IS
  'This column represents scheduling range entered by user captured during line planning automation. ' ;
  COMMENT ON COLUMN LPA_LOG.HR_DB_ID
IS
  'This column represents line planner that executed the line planning automation.' ;
  COMMENT ON COLUMN LPA_LOG.HR_ID
IS
  'This column represents line planner that executed the line planning automation.' ;
  COMMENT ON COLUMN LPA_LOG.LOCKED_BOOL
IS
  'This column indicates whether line planning automation is locked. ' ;
  CREATE INDEX IX_ORGHR_LPALOG ON LPA_LOG
    ( HR_DB_ID ASC , HR_ID ASC
    ) ;
ALTER TABLE LPA_LOG ADD CONSTRAINT PK_LPA_LOG PRIMARY KEY ( LPA_DB_ID ) ;


CREATE TABLE LPA_MAINT_OP_CONFLICT
  (
    LPA_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    STASK_MAINT_OP_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    MAINT_OP_CONFLICT_ID NUMBER (10) NOT NULL DEFERRABLE ,
    CONFLICT_SDESC       VARCHAR2 (80) NOT NULL DEFERRABLE ,
    CONFLICT_LDESC       VARCHAR2 (4000)
  ) ;
ALTER TABLE LPA_MAINT_OP_CONFLICT ADD CHECK ( LPA_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_MAINT_OP_CONFLICT ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_MAINT_OP_CONFLICT ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_MAINT_OP_CONFLICT ADD CHECK ( STASK_MAINT_OP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_MAINT_OP_CONFLICT ADD CHECK ( MAINT_OP_CONFLICT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LPA_MAINT_OP_CONFLICT
IS
  'Lists the various types of time off that can be recorded for a user.' ;
  COMMENT ON COLUMN LPA_MAINT_OP_CONFLICT.CONFLICT_SDESC
IS
  'Short description of the conflict.' ;
  COMMENT ON COLUMN LPA_MAINT_OP_CONFLICT.CONFLICT_LDESC
IS
  'Long description of the conflict.' ;
  CREATE INDEX IX_LPASTASKMAINTOP_LPAMAINOPCO ON LPA_MAINT_OP_CONFLICT
    (
      LPA_DB_ID ASC ,
      SCHED_DB_ID ASC ,
      SCHED_ID ASC ,
      STASK_MAINT_OP_ID ASC
    ) ;
ALTER TABLE LPA_MAINT_OP_CONFLICT ADD CONSTRAINT PK_LPA_MAINT_OP_CONFLICT PRIMARY KEY ( LPA_DB_ID, SCHED_DB_ID, SCHED_ID, STASK_MAINT_OP_ID, MAINT_OP_CONFLICT_ID ) ;


CREATE TABLE LPA_RUN
  (
    RUN_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    LPA_RUN_STATUS_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    LPA_RUN_STATUS_CD     VARCHAR2 (16) NOT NULL DEFERRABLE ,
    FLEET_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    FLEET_CD              VARCHAR2 (8) NOT NULL DEFERRABLE ,
    REQUESTED_BY_HR_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REQUESTED_BY_HR_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    PLANNING_START_DT     DATE NOT NULL DEFERRABLE ,
    PLANNING_RANGE_DAYS   NUMBER (2) NOT NULL DEFERRABLE ,
    PLANNING_END_DT       DATE NOT NULL DEFERRABLE ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LPA_RUN ADD CHECK ( RUN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_RUN ADD CHECK ( LPA_RUN_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_RUN ADD CHECK ( FLEET_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_RUN ADD CHECK ( REQUESTED_BY_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_RUN ADD CHECK ( REQUESTED_BY_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_RUN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LPA_RUN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LPA_RUN
IS
  'Lists the basic line planning automation runs that were requested.' ;
  COMMENT ON COLUMN LPA_RUN.LPA_RUN_STATUS_DB_ID
IS
  'The status of the automation run as it relates to an aircraft assembly
FK to REF_LPA_RUN_STATUS' ;
  COMMENT ON COLUMN LPA_RUN.LPA_RUN_STATUS_CD
IS
  'The status of the automation run as it relates to an aircraft assembly
FK to REF_LPA_RUN_STATUS' ;
  COMMENT ON COLUMN LPA_RUN.FLEET_DB_ID
IS
  'The fleet against which to run line planning automation.
FK to the LPA_FLEET' ;
  COMMENT ON COLUMN LPA_RUN.FLEET_CD
IS
  'The fleet against which to run line planning automation.
FK to the LPA_FLEET' ;
  COMMENT ON COLUMN LPA_RUN.REQUESTED_BY_HR_DB_ID
IS
  'The human resource who requested a run of line planning automation.
FK to ORG_HR
' ;
  COMMENT ON COLUMN LPA_RUN.REQUESTED_BY_HR_ID
IS
  'The human resource who requested a run of line planning automation.
FK to ORG_HR
' ;
  COMMENT ON COLUMN LPA_RUN.PLANNING_START_DT
IS
  'The start of the planning window.' ;
  COMMENT ON COLUMN LPA_RUN.PLANNING_RANGE_DAYS
IS
  'The duration of the planning window in days.' ;
  COMMENT ON COLUMN LPA_RUN.PLANNING_END_DT
IS
  'The end of the planning window; calculated by adding the planning range to the planning start.' ;
  COMMENT ON COLUMN LPA_RUN.RSTAT_CD
IS
  'Status of the record.' ;
  COMMENT ON COLUMN LPA_RUN.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN LPA_RUN.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN LPA_RUN.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN LPA_RUN.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_ORGHR_LPARUN ON LPA_RUN
    (
      REQUESTED_BY_HR_DB_ID ASC ,
      REQUESTED_BY_HR_ID ASC
    ) ;
  CREATE INDEX IX_LPAFLEET_LPARUN ON LPA_RUN
    (
      FLEET_DB_ID ASC ,
      FLEET_CD ASC
    ) ;
ALTER TABLE LPA_RUN ADD CONSTRAINT PK_LPA_RUN PRIMARY KEY ( RUN_ID ) ;


CREATE TABLE LPA_RUN_INV
  (
    RUN_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LPA_RUN_INV ADD CHECK ( RUN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_RUN_INV ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_RUN_INV ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_RUN_INV ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LPA_RUN_INV ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN LPA_RUN_INV.RUN_ID
IS
  'FK to LPA_RUN' ;
  COMMENT ON COLUMN LPA_RUN_INV.INV_NO_DB_ID
IS
  'An aircraft against which to run line planning automation.
FK to INV_AC_REG' ;
  COMMENT ON COLUMN LPA_RUN_INV.INV_NO_ID
IS
  'An aircraft against which to run line planning automation.
FK to INV_AC_REG' ;
  COMMENT ON COLUMN LPA_RUN_INV.RSTAT_CD
IS
  'Status of the record.' ;
  COMMENT ON COLUMN LPA_RUN_INV.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN LPA_RUN_INV.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN LPA_RUN_INV.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN LPA_RUN_INV.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_INVACREG_LPARUNINV ON LPA_RUN_INV
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_LPARUN_LPARUNINV ON LPA_RUN_INV
    ( RUN_ID ASC
    ) ;
ALTER TABLE LPA_RUN_INV ADD CONSTRAINT PK_LPA_RUN_INV PRIMARY KEY ( RUN_ID, INV_NO_DB_ID, INV_NO_ID ) ;


CREATE TABLE LPA_RUN_ISSUE
  (
    RUN_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    RUN_ISSUE_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    LPA_ISSUE_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LPA_ISSUE_TYPE_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    LPA_ISSUE_NOTE       VARCHAR2 (4000) ,
    INV_NO_DB_ID         NUMBER (10) ,
    INV_NO_ID            NUMBER (10) ,
    INV_NO_LDESC         VARCHAR2 (400) ,
    BLOCK_DB_ID          NUMBER (10) ,
    BLOCK_ID             NUMBER (10) ,
    BLOCK_LDESC          VARCHAR2 (4000) ,
    WP_DB_ID             NUMBER (10) ,
    WP_ID                NUMBER (10) ,
    WP_LDESC             VARCHAR2 (4000) ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LPA_RUN_ISSUE ADD CHECK ( RUN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_RUN_ISSUE ADD CHECK ( RUN_ISSUE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_RUN_ISSUE ADD CHECK ( LPA_ISSUE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_RUN_ISSUE ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_RUN_ISSUE ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_RUN_ISSUE ADD CHECK ( BLOCK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_RUN_ISSUE ADD CHECK ( BLOCK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_RUN_ISSUE ADD CHECK ( WP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_RUN_ISSUE ADD CHECK ( WP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_RUN_ISSUE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LPA_RUN_ISSUE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LPA_RUN_ISSUE
IS
  'Records the issues raised against each run of line planning automation.' ;
  COMMENT ON COLUMN LPA_RUN_ISSUE.RUN_ID
IS
  'FK to LPA_RUN' ;
  COMMENT ON COLUMN LPA_RUN_ISSUE.RUN_ISSUE_ID
IS
  'Starts from 1 for each run.' ;
  COMMENT ON COLUMN LPA_RUN_ISSUE.LPA_ISSUE_TYPE_DB_ID
IS
  'The type of issue encountered
FK to REF_LPA_ISSUE_TYPE' ;
  COMMENT ON COLUMN LPA_RUN_ISSUE.LPA_ISSUE_TYPE_CD
IS
  'The type of issue encountered
FK to REF_LPA_ISSUE_TYPE' ;
  COMMENT ON COLUMN LPA_RUN_ISSUE.LPA_ISSUE_NOTE
IS
  'An optional message providing additional context about the issue.' ;
  COMMENT ON COLUMN LPA_RUN_ISSUE.INV_NO_DB_ID
IS
  'The specific aircraft (if any) against which the issue was logged. 
If the issue raised is not specific to a particular aircraft, the value will be the blank.
FK to LPA_RUN_INV' ;
  COMMENT ON COLUMN LPA_RUN_ISSUE.INV_NO_ID
IS
  'The specific aircraft (if any) against which the issue was logged. 
If the issue raised is not specific to a particular aircraft, the value will be the blank.
FK to LPA_RUN_INV
' ;
  COMMENT ON COLUMN LPA_RUN_ISSUE.INV_NO_LDESC
IS
  'The description of the aircraft (if any) at the time the issue was raised. 
Copied from INV_INV.INV_NO_SDESC' ;
  COMMENT ON COLUMN LPA_RUN_ISSUE.BLOCK_DB_ID
IS
  'The specific block task (if any) against which the issue was logged.
If the issue raised is not specific to a particular block, the value will be the blank.
FK to SCHED_STASK' ;
  COMMENT ON COLUMN LPA_RUN_ISSUE.BLOCK_ID
IS
  'The specific block task (if any) against which the issue was logged.
If the issue raised is not specific to a particular block, the value will be the blank.
FK to SCHED_STASK' ;
  COMMENT ON COLUMN LPA_RUN_ISSUE.BLOCK_LDESC
IS
  'The description of the block task (if any) at the time the issue was raised.
Copied from EVT_EVENT.EVENT_LDESC
' ;
  COMMENT ON COLUMN LPA_RUN_ISSUE.WP_DB_ID
IS
  'The work package (if any) against which the issue was logged.
If the issue raised is not specific to a particular work package, the value will be the blank.
FK to SCHED_STASK' ;
  COMMENT ON COLUMN LPA_RUN_ISSUE.WP_ID
IS
  'The work package (if any) against which the issue was logged.
If the issue raised is not specific to a particular work package, the value will be the blank.
FK to SCHED_STASK' ;
  COMMENT ON COLUMN LPA_RUN_ISSUE.WP_LDESC
IS
  'The description of the work package (if any) at the time the issue was raised. 
Copied from EVT_EVENT.EVENT_LDESC' ;
  COMMENT ON COLUMN LPA_RUN_ISSUE.RSTAT_CD
IS
  'Status of the record.' ;
  COMMENT ON COLUMN LPA_RUN_ISSUE.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN LPA_RUN_ISSUE.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN LPA_RUN_ISSUE.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN LPA_RUN_ISSUE.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_SCHEDSTASK_LPARUINISSUE ON LPA_RUN_ISSUE
    (
      BLOCK_DB_ID ASC ,
      BLOCK_ID ASC
    ) ;
  CREATE INDEX IX_WPSCHEDSTASK_LPARUNISSUE ON LPA_RUN_ISSUE
    (
      WP_DB_ID ASC ,
      WP_ID ASC
    ) ;
  CREATE INDEX IX_LPARUN_LPARUNISSUE ON LPA_RUN_ISSUE
    ( RUN_ID ASC
    ) ;
  CREATE INDEX IX_LPARUNINV_LPARUNISSUE ON LPA_RUN_ISSUE
    (
      RUN_ID ASC ,
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
ALTER TABLE LPA_RUN_ISSUE ADD CONSTRAINT PK_LPA_RUN_ISSUE PRIMARY KEY ( RUN_ID, RUN_ISSUE_ID ) ;


CREATE TABLE LPA_SERVICE_WORK_TYPE
  (
    FLEET_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    FLEET_CD        VARCHAR2 (8) NOT NULL DEFERRABLE ,
    WORK_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WORK_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LPA_SERVICE_WORK_TYPE ADD CHECK ( FLEET_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_SERVICE_WORK_TYPE ADD CHECK ( WORK_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_SERVICE_WORK_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LPA_SERVICE_WORK_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LPA_SERVICE_WORK_TYPE
IS
  'Lists the work types associated with a service check; work packages generated by line planning automation will have these work types assigned and will be scheduled only to work locations with these work types.' ;
  COMMENT ON COLUMN LPA_SERVICE_WORK_TYPE.FLEET_DB_ID
IS
  'FK to LPA_FLEET' ;
  COMMENT ON COLUMN LPA_SERVICE_WORK_TYPE.FLEET_CD
IS
  'FK to LPA_FLEET' ;
  COMMENT ON COLUMN LPA_SERVICE_WORK_TYPE.WORK_TYPE_DB_ID
IS
  'FK to REF_WORK_TYPE. Work type that will be applied to the generated service check work package.' ;
  COMMENT ON COLUMN LPA_SERVICE_WORK_TYPE.WORK_TYPE_CD
IS
  'FK to REF_WORK_TYPE. Work type that will be applied to the generated service check work package.' ;
  COMMENT ON COLUMN LPA_SERVICE_WORK_TYPE.RSTAT_CD
IS
  'Status of the record.' ;
  COMMENT ON COLUMN LPA_SERVICE_WORK_TYPE.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN LPA_SERVICE_WORK_TYPE.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN LPA_SERVICE_WORK_TYPE.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN LPA_SERVICE_WORK_TYPE.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_LPAFLEET_LPASRVCWTYPE ON LPA_SERVICE_WORK_TYPE
    (
      FLEET_DB_ID ASC ,
      FLEET_CD ASC
    ) ;
ALTER TABLE LPA_SERVICE_WORK_TYPE ADD CONSTRAINT PK_LPA_SERVICE_WORK_TYPE PRIMARY KEY ( FLEET_DB_ID, FLEET_CD, WORK_TYPE_DB_ID, WORK_TYPE_CD ) ;


CREATE TABLE LPA_STASK
  (
    LPA_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_PRIORITY_DB_ID  NUMBER (10) ,
    TASK_PRIORITY_CD     VARCHAR2 (8) ,
    SCHED_PRIORITY_DB_ID NUMBER (10) ,
    SCHED_PRIORITY_CD    VARCHAR2 (8) ,
    SCHED_DEAD_DT        DATE ,
    EST_DURATION_QT FLOAT NOT NULL DEFERRABLE ,
    WORK_TYPE     VARCHAR2 (4000) ,
    RESOLVED_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LPA_STASK ADD CHECK ( LPA_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_STASK ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_STASK ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_STASK ADD CHECK ( TASK_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_STASK ADD CHECK ( SCHED_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_STASK ADD CHECK ( RESOLVED_BOOL IN (0, 1)) DEFERRABLE ;
COMMENT ON TABLE LPA_STASK
IS
  'Lists the various types of time off that can be recorded for a user.' ;
  COMMENT ON COLUMN LPA_STASK.TASK_PRIORITY_DB_ID
IS
  'This column represents priority of the task at the time line planning automation was executed. ' ;
  COMMENT ON COLUMN LPA_STASK.TASK_PRIORITY_CD
IS
  'This column represents priority of the task at the time line planning automation was executed. ' ;
  COMMENT ON COLUMN LPA_STASK.SCHED_PRIORITY_DB_ID
IS
  'This column represents scheduling priority of the task, this priority is calculated based on the due date of the task. ' ;
  COMMENT ON COLUMN LPA_STASK.SCHED_PRIORITY_CD
IS
  'This column represents scheduling priority of the task, this priority is calculated based on the due date of the task. ' ;
  COMMENT ON COLUMN LPA_STASK.SCHED_DEAD_DT
IS
  'This column represents task deadline at the time line planning automation was executed. ' ;
  COMMENT ON COLUMN LPA_STASK.EST_DURATION_QT
IS
  'This column shows task estimated duration at the time line planning automation was executed. ' ;
  COMMENT ON COLUMN LPA_STASK.WORK_TYPE
IS
  'This column shows task work types. Work types separated by a coma. ' ;
  COMMENT ON COLUMN LPA_STASK.RESOLVED_BOOL
IS
  'This column indicated if the task conflicts were resolved by the planner. ' ;
  CREATE INDEX IX_SCHEDSTASK_LPASTASK ON LPA_STASK
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_LPALOG_LPASTASK ON LPA_STASK
    ( LPA_DB_ID ASC
    ) ;
ALTER TABLE LPA_STASK ADD CONSTRAINT PK_LPA_STASK PRIMARY KEY ( LPA_DB_ID, SCHED_DB_ID, SCHED_ID ) ;


CREATE TABLE LPA_STASK_MAINT_OP
  (
    LPA_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    STASK_MAINT_OP_ID NUMBER (10) NOT NULL DEFERRABLE ,
    OPP_START_DT      DATE ,
    OPP_END_DT        DATE ,
    LOC_DB_ID         NUMBER (10) ,
    LOC_ID            NUMBER (10)
  ) ;
ALTER TABLE LPA_STASK_MAINT_OP ADD CHECK ( LPA_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_STASK_MAINT_OP ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_STASK_MAINT_OP ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_STASK_MAINT_OP ADD CHECK ( STASK_MAINT_OP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_STASK_MAINT_OP ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_STASK_MAINT_OP ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LPA_STASK_MAINT_OP
IS
  'Lists the various types of time off that can be recorded for a user.' ;
  COMMENT ON COLUMN LPA_STASK_MAINT_OP.STASK_MAINT_OP_ID
IS
  'This is maintenance opportunity unique id. It should be inserted in the order the conflict was found, therefore could be used as ordering column on line planning log page. The order in which maintenance task visited each maintenance opportunity.' ;
  COMMENT ON COLUMN LPA_STASK_MAINT_OP.OPP_START_DT
IS
  'Start of the maintenance opportunity.' ;
  COMMENT ON COLUMN LPA_STASK_MAINT_OP.OPP_END_DT
IS
  'End of the maintenance opportunity.' ;
  COMMENT ON COLUMN LPA_STASK_MAINT_OP.LOC_DB_ID
IS
  'Line maintenance location representing the maintenance opportunity.' ;
  COMMENT ON COLUMN LPA_STASK_MAINT_OP.LOC_ID
IS
  'Line maintenance location representing the maintenance opportunity.' ;
  CREATE INDEX IX_INVLOC_LPASTASKMAINTOP ON LPA_STASK_MAINT_OP
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
  CREATE INDEX IX_LPASTASK_LPASTASKMAINTOP ON LPA_STASK_MAINT_OP
    (
      LPA_DB_ID ASC ,
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
ALTER TABLE LPA_STASK_MAINT_OP ADD CONSTRAINT PK_LPA_STASK_MAINT_OP PRIMARY KEY ( LPA_DB_ID, SCHED_DB_ID, SCHED_ID, STASK_MAINT_OP_ID ) ;


CREATE TABLE LPA_TURN_WORK_TYPE
  (
    FLEET_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    FLEET_CD        VARCHAR2 (8) NOT NULL DEFERRABLE ,
    WORK_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WORK_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LPA_TURN_WORK_TYPE ADD CHECK ( FLEET_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_TURN_WORK_TYPE ADD CHECK ( WORK_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LPA_TURN_WORK_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LPA_TURN_WORK_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LPA_TURN_WORK_TYPE
IS
  'Lists the work types associated with a turn check; work packages generated by line planning automation will have these work types assigned and will be scheduled only to work locations with these work types.' ;
  COMMENT ON COLUMN LPA_TURN_WORK_TYPE.FLEET_DB_ID
IS
  'FK to LPA_FLEET' ;
  COMMENT ON COLUMN LPA_TURN_WORK_TYPE.FLEET_CD
IS
  'FK to LPA_FLEET' ;
  COMMENT ON COLUMN LPA_TURN_WORK_TYPE.WORK_TYPE_DB_ID
IS
  'FK to REF_WORK_TYPE. Work type that will be applied to the generated turn check work package.' ;
  COMMENT ON COLUMN LPA_TURN_WORK_TYPE.WORK_TYPE_CD
IS
  'FK to REF_WORK_TYPE. Work type that will be applied to the generated turn check work package.' ;
  COMMENT ON COLUMN LPA_TURN_WORK_TYPE.RSTAT_CD
IS
  'Status of the record. ' ;
  COMMENT ON COLUMN LPA_TURN_WORK_TYPE.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN LPA_TURN_WORK_TYPE.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN LPA_TURN_WORK_TYPE.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN LPA_TURN_WORK_TYPE.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_LPAFLEET_LPATURNWTYPE ON LPA_TURN_WORK_TYPE
    (
      FLEET_DB_ID ASC ,
      FLEET_CD ASC
    ) ;
ALTER TABLE LPA_TURN_WORK_TYPE ADD CONSTRAINT PK_LPA_TURN_WORK_TYPE PRIMARY KEY ( FLEET_DB_ID, FLEET_CD, WORK_TYPE_DB_ID, WORK_TYPE_CD ) ;


CREATE TABLE LRP_EVENT
  (
    LRP_EVENT_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_EVENT_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_INV_INV_ID  NUMBER (10) ,
    LRP_SDESC       VARCHAR2 (80) ,
    LRP_LDESC       VARCHAR2 (4000) ,
    START_DT        DATE NOT NULL DEFERRABLE ,
    END_DT          DATE NOT NULL DEFERRABLE ,
    DURATION_DAYS FLOAT ,
    LRP_LOC_DB_ID      NUMBER (10) ,
    LRP_LOC_ID         NUMBER (10) ,
    ACTUAL_START_DT    DATE ,
    ACTUAL_END_DT      DATE ,
    ACTUAL_LOC_DB_ID   NUMBER (10) ,
    ACTUAL_LOC_ID      NUMBER (10) ,
    EVENT_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_STATUS_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    SCHED_DB_ID        NUMBER (10) ,
    SCHED_ID           NUMBER (10) ,
    LOCK_HR_DB_ID      NUMBER (10) ,
    LOCK_HR_ID         NUMBER (10) ,
    LOCK_BOOL          NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    LOCK_DT            DATE ,
    LOCK_LDESC         VARCHAR2 (4000) ,
    OVERFLOW_LDESC     VARCHAR2 (4000) ,
    CONTACT_NAME       VARCHAR2 (40) ,
    CONTACT_EMAIL      VARCHAR2 (80) ,
    CONTACT_PH_NO      VARCHAR2 (40) ,
    CONTACT_CELL_NO    VARCHAR2 (40) ,
    CONTACT_FAX_NO     VARCHAR2 (40) ,
    SOFT_DELETE_BOOL   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    TYPE               VARCHAR2 (40) NOT NULL DEFERRABLE ,
    CALC_DUR_BUFFER FLOAT ,
    ACTUAL_DUR_BUFFER_DAYS FLOAT DEFAULT 0 NOT NULL DEFERRABLE ,
    ACTUAL_DUR_BUFFER_PCT FLOAT DEFAULT 0 NOT NULL DEFERRABLE ,
    BUCKET_CALC_BOOL NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LRP_EVENT ADD CHECK ( LRP_EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT ADD CHECK ( LRP_EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT ADD CHECK ( LRP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT ADD CHECK ( LRP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT ADD CHECK ( LRP_INV_INV_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT ADD CHECK ( LRP_LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT ADD CHECK ( LRP_LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT ADD CHECK ( ACTUAL_LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT ADD CHECK ( ACTUAL_LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT ADD CHECK ( EVENT_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT ADD CHECK ( LOCK_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT ADD CHECK ( LOCK_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT ADD CHECK ( LOCK_BOOL        IN (0, 1)) DEFERRABLE ;
ALTER TABLE LRP_EVENT ADD CHECK ( SOFT_DELETE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE LRP_EVENT ADD CHECK ( ACTUAL_DUR_BUFFER_PCT BETWEEN 0 AND 1) DEFERRABLE ;
ALTER TABLE LRP_EVENT ADD CHECK ( BUCKET_CALC_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE LRP_EVENT ADD CHECK ( RSTAT_CD         IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LRP_EVENT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LRP_EVENT
IS
  'This table stores the work packages associated with the plan.' ;
  COMMENT ON COLUMN LRP_EVENT.LRP_EVENT_DB_ID
IS
  'Primary key for the Event' ;
  COMMENT ON COLUMN LRP_EVENT.LRP_EVENT_ID
IS
  'Primary key for the Event' ;
  COMMENT ON COLUMN LRP_EVENT.LRP_DB_ID
IS
  'Foreign key to the Long Range Plan' ;
  COMMENT ON COLUMN LRP_EVENT.LRP_ID
IS
  'Foreign key to the Long Range Plan' ;
  COMMENT ON COLUMN LRP_EVENT.LRP_INV_INV_ID
IS
  'The aircraft for this event. PK compose of LRP_DB_ID:LRP_ID:LRP_INV_INV_ID.' ;
  COMMENT ON COLUMN LRP_EVENT.LRP_SDESC
IS
  'Name of the event' ;
  COMMENT ON COLUMN LRP_EVENT.LRP_LDESC
IS
  'Description of the event' ;
  COMMENT ON COLUMN LRP_EVENT.START_DT
IS
  'The scheduled start date of event' ;
  COMMENT ON COLUMN LRP_EVENT.END_DT
IS
  'The scheduled end date of event' ;
  COMMENT ON COLUMN LRP_EVENT.DURATION_DAYS
IS
  'Custom duration in days of this event' ;
  COMMENT ON COLUMN LRP_EVENT.LRP_LOC_DB_ID
IS
  'The scheduled location of this event.' ;
  COMMENT ON COLUMN LRP_EVENT.LRP_LOC_ID
IS
  'The scheduled location of this event.' ;
  COMMENT ON COLUMN LRP_EVENT.ACTUAL_START_DT
IS
  'The actual start date of this event in Maintenix.' ;
  COMMENT ON COLUMN LRP_EVENT.ACTUAL_END_DT
IS
  'The actual end date of this event in Maintenix.' ;
  COMMENT ON COLUMN LRP_EVENT.ACTUAL_LOC_DB_ID
IS
  'The actual location this event in Maintenix is scheduled to (loc_db_id)' ;
  COMMENT ON COLUMN LRP_EVENT.ACTUAL_LOC_ID
IS
  'The actual location this event in Maintenix is scheduled to (loc_id)' ;
  COMMENT ON COLUMN LRP_EVENT.EVENT_STATUS_DB_ID
IS
  'The status of this event.' ;
  COMMENT ON COLUMN LRP_EVENT.EVENT_STATUS_CD
IS
  'The status of this event.' ;
  COMMENT ON COLUMN LRP_EVENT.SCHED_DB_ID
IS
  'Primary key of the Maintenix work package this event references.' ;
  COMMENT ON COLUMN LRP_EVENT.SCHED_ID
IS
  'Primary key of the Maintenix work package this event references.' ;
  COMMENT ON COLUMN LRP_EVENT.LOCK_HR_DB_ID
IS
  'The human resource who lock this event.' ;
  COMMENT ON COLUMN LRP_EVENT.LOCK_HR_ID
IS
  'The human resource who lock this event.' ;
  COMMENT ON COLUMN LRP_EVENT.LOCK_BOOL
IS
  'Boolean flag to indicate if this event is locked.' ;
  COMMENT ON COLUMN LRP_EVENT.LOCK_DT
IS
  'Date this event is locked.' ;
  COMMENT ON COLUMN LRP_EVENT.LOCK_LDESC
IS
  'The reason for locking this event.' ;
  COMMENT ON COLUMN LRP_EVENT.OVERFLOW_LDESC
IS
  'The reason for not scheduling this event.' ;
  COMMENT ON COLUMN LRP_EVENT.CONTACT_NAME
IS
  'Contact person''s name for this event.' ;
  COMMENT ON COLUMN LRP_EVENT.CONTACT_EMAIL
IS
  'Contact person''s email for this event.' ;
  COMMENT ON COLUMN LRP_EVENT.CONTACT_PH_NO
IS
  'Contact person''s phone number for this event.' ;
  COMMENT ON COLUMN LRP_EVENT.CONTACT_CELL_NO
IS
  'Contact person''s cell phone number for this event.' ;
  COMMENT ON COLUMN LRP_EVENT.CONTACT_FAX_NO
IS
  'Contact person''s fax number for this event.' ;
  COMMENT ON COLUMN LRP_EVENT.SOFT_DELETE_BOOL
IS
  'A boolean flag to indicate if this event is soft deleted (i.e. hidden in the LRP Gantt view) but not deleted in memory.' ;
  COMMENT ON COLUMN LRP_EVENT.TYPE
IS
  'Work Package type.  Valid entries should be limited to AIRCRAFT, LOCATION, WORK_EVENT.' ;
  COMMENT ON COLUMN LRP_EVENT.CALC_DUR_BUFFER
IS
  'The calculated duration buffer based on the duration buffers of the assigned blocks/tasks.' ;
  COMMENT ON COLUMN LRP_EVENT.ACTUAL_DUR_BUFFER_DAYS
IS
  'The actual duration buffer (in days/hours) based on the duration buffers of the assigned blocks/tasks. This can be overwritten by the user.' ;
  COMMENT ON COLUMN LRP_EVENT.ACTUAL_DUR_BUFFER_PCT
IS
  'The actual duration buffer (in percent) based on the duration buffers of the assigned blocks/tasks. This can be overwritten by the user.' ;
  COMMENT ON COLUMN LRP_EVENT.BUCKET_CALC_BOOL
IS
  'This column indicates if the event planning type buckets are calculated or entered by the user (custom). ' ;
  COMMENT ON COLUMN LRP_EVENT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN LRP_EVENT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN LRP_EVENT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN LRP_EVENT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN LRP_EVENT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGHR_LRPEVENT ON LRP_EVENT
    (
      LOCK_HR_DB_ID ASC ,
      LOCK_HR_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDSTASK_LRPEVENT ON LRP_EVENT
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_LRPPLAN_LRPEVENT ON LRP_EVENT
    ( LRP_DB_ID ASC , LRP_ID ASC
    ) ;
  CREATE INDEX IX_LRPINV_LRPEVENT ON LRP_EVENT
    (
      LRP_DB_ID ASC ,
      LRP_ID ASC ,
      LRP_INV_INV_ID ASC
    ) ;
  CREATE INDEX IX_LRPLOC_LRPEVENT ON LRP_EVENT
    (
      LRP_DB_ID ASC ,
      LRP_ID ASC ,
      LRP_LOC_DB_ID ASC ,
      LRP_LOC_ID ASC
    ) ;
  CREATE INDEX IX_ACTLRPLOC_LRPEVENT ON LRP_EVENT
    (
      LRP_DB_ID ASC ,
      LRP_ID ASC ,
      ACTUAL_LOC_DB_ID ASC ,
      ACTUAL_LOC_ID ASC
    ) ;
ALTER TABLE LRP_EVENT ADD CONSTRAINT PK_LRP_EVENT PRIMARY KEY ( LRP_EVENT_DB_ID, LRP_EVENT_ID ) ;


CREATE TABLE LRP_EVENT_BUCKET
  (
    LRP_EVENT_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_EVENT_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_PLAN_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_PLAN_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ROUTINE_HRS         NUMBER (8,2) NOT NULL DEFERRABLE ,
    NR_FACTOR           NUMBER (3,2) NOT NULL DEFERRABLE ,
    NR_HRS              NUMBER (8,2) NOT NULL DEFERRABLE ,
    TOTAL_HRS           NUMBER (10,2) NOT NULL DEFERRABLE ,
    ASSIGNED_HRS        NUMBER (8,2) NOT NULL DEFERRABLE ,
    FILL_PCT            NUMBER (10) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LRP_EVENT_BUCKET ADD CHECK ( LRP_EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_BUCKET ADD CHECK ( LRP_EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_BUCKET ADD CHECK ( LRP_PLAN_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_BUCKET ADD CHECK ( LRP_PLAN_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_BUCKET ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LRP_EVENT_BUCKET ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LRP_EVENT_BUCKET
IS
  'This table stores Buckets (Planning Types with attributes) for a work event.' ;
  COMMENT ON COLUMN LRP_EVENT_BUCKET.ROUTINE_HRS
IS
  'The ratio of non-routine hours to routine hours for the task definition for the planning type' ;
  COMMENT ON COLUMN LRP_EVENT_BUCKET.NR_FACTOR
IS
  'The ratio of non-routine hours to routine hours for the task definition for the planning type' ;
  COMMENT ON COLUMN LRP_EVENT_BUCKET.NR_HRS
IS
  'Non-routine manhours for the task definition for the planning type' ;
  COMMENT ON COLUMN LRP_EVENT_BUCKET.TOTAL_HRS
IS
  'Sum of routine and non-routine manhours for the task definition for the planning type' ;
  COMMENT ON COLUMN LRP_EVENT_BUCKET.ASSIGNED_HRS
IS
  'Sum of actual hours assigned to a work package for the planning type.' ;
  COMMENT ON COLUMN LRP_EVENT_BUCKET.FILL_PCT
IS
  'Fill percentage is the sum of assigned tasks? manhours /Total Manhours for the Planning Type' ;
  CREATE INDEX IX_LRPEVT_EVTBKT ON LRP_EVENT_BUCKET
    (
      LRP_EVENT_DB_ID ASC ,
      LRP_EVENT_ID ASC
    ) ;
  CREATE INDEX IX_LRPPTYP_EVTBKT ON LRP_EVENT_BUCKET
    (
      LRP_PLAN_TYPE_DB_ID ASC ,
      LRP_PLAN_TYPE_ID ASC
    ) ;
ALTER TABLE LRP_EVENT_BUCKET ADD CONSTRAINT PK_LRP_EVENT_BUCKET PRIMARY KEY ( LRP_EVENT_DB_ID, LRP_EVENT_ID, LRP_PLAN_TYPE_DB_ID, LRP_PLAN_TYPE_ID ) ;


CREATE TABLE LRP_EVENT_USAGES
  (
    LRP_EVENT_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_EVENT_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    TSN_QT FLOAT NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LRP_EVENT_USAGES ADD CHECK ( LRP_EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_USAGES ADD CHECK ( LRP_EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_USAGES ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_USAGES ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_USAGES ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LRP_EVENT_USAGES ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LRP_EVENT_USAGES
IS
  'This table stores usages for a work package.' ;
  COMMENT ON COLUMN LRP_EVENT_USAGES.LRP_EVENT_DB_ID
IS
  'Primary key for the Event Usage' ;
  COMMENT ON COLUMN LRP_EVENT_USAGES.LRP_EVENT_ID
IS
  'Primary key for the Event Usage' ;
  COMMENT ON COLUMN LRP_EVENT_USAGES.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE' ;
  COMMENT ON COLUMN LRP_EVENT_USAGES.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE' ;
  COMMENT ON COLUMN LRP_EVENT_USAGES.TSN_QT
IS
  'Time since new- current total.' ;
  COMMENT ON COLUMN LRP_EVENT_USAGES.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN LRP_EVENT_USAGES.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN LRP_EVENT_USAGES.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN LRP_EVENT_USAGES.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN LRP_EVENT_USAGES.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_MDATATYPE_LRPEVENTUSAGES ON LRP_EVENT_USAGES
    (
      DATA_TYPE_DB_ID ASC ,
      DATA_TYPE_ID ASC
    ) ;
  CREATE INDEX IX_LRPEVENT_LRPEVENTUSAGES ON LRP_EVENT_USAGES
    (
      LRP_EVENT_DB_ID ASC ,
      LRP_EVENT_ID ASC
    ) ;
ALTER TABLE LRP_EVENT_USAGES ADD CONSTRAINT PK_LRP_EVENT_USAGES PRIMARY KEY ( LRP_EVENT_DB_ID, LRP_EVENT_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID ) ;


CREATE TABLE LRP_EVENT_WORKSCOPE
  (
    LRP_WORKSCOPE_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_WORKSCOPE_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_EVENT_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_EVENT_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RULE_TASK_DB_ID      NUMBER (10) ,
    RULE_TASK_ID         NUMBER (10) ,
    RULE_DATA_TYPE_DB_ID NUMBER (10) ,
    RULE_DATA_TYPE_ID    NUMBER (10) ,
    DEADLINE_DT          DATE NOT NULL DEFERRABLE ,
    DRIVER_BOOL          NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    MAN_HOURS            NUMBER (8,2) NOT NULL DEFERRABLE ,
    YIELD_PCT FLOAT ,
    SCHED_DB_ID          NUMBER (10) ,
    SCHED_ID             NUMBER (10) ,
    PREV_WORKSCOPE_DB_ID NUMBER (10) ,
    PREV_WORKSCOPE_ID    NUMBER (10) ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LRP_EVENT_WORKSCOPE ADD CHECK ( LRP_WORKSCOPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_WORKSCOPE ADD CHECK ( LRP_WORKSCOPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_WORKSCOPE ADD CHECK ( LRP_EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_WORKSCOPE ADD CHECK ( LRP_EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_WORKSCOPE ADD CHECK ( LRP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_WORKSCOPE ADD CHECK ( LRP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_WORKSCOPE ADD CHECK ( TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_WORKSCOPE ADD CHECK ( TASK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_WORKSCOPE ADD CHECK ( RULE_TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_WORKSCOPE ADD CHECK ( RULE_TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_WORKSCOPE ADD CHECK ( RULE_DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_WORKSCOPE ADD CHECK ( RULE_DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_WORKSCOPE ADD CHECK ( DRIVER_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE LRP_EVENT_WORKSCOPE ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_WORKSCOPE ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_WORKSCOPE ADD CHECK ( PREV_WORKSCOPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_WORKSCOPE ADD CHECK ( PREV_WORKSCOPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EVENT_WORKSCOPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LRP_EVENT_WORKSCOPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LRP_EVENT_WORKSCOPE
IS
  'This table stores workscope of the work packages.' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.LRP_WORKSCOPE_DB_ID
IS
  'Primary key for the Event Workscope' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.LRP_WORKSCOPE_ID
IS
  'Primary key for the Event Workscope' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.LRP_EVENT_DB_ID
IS
  'Foreign key of event this workscope is under.' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.LRP_EVENT_ID
IS
  'Foreign key of event this workscope is under.' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.LRP_DB_ID
IS
  'Foreign key to the Long Range Plan.' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.LRP_ID
IS
  'Foreign key to the Long Range Plan.' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.TASK_DEFN_DB_ID
IS
  'Foreign key to the task definition.' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.TASK_DEFN_ID
IS
  'Foreign key to the task definition.' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.RULE_TASK_DB_ID
IS
  'Primary key of driving scheduling rule' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.RULE_TASK_ID
IS
  'Primary key of driving scheduling rule' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.RULE_DATA_TYPE_DB_ID
IS
  'Primary key of driving scheduling rule' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.RULE_DATA_TYPE_ID
IS
  'Primary key of driving scheduling rule' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.DEADLINE_DT
IS
  'The deadline of the in scope block/req.' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.DRIVER_BOOL
IS
  'Boolean flag to indicate which block/req is the driver for the event.' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.MAN_HOURS
IS
  'The man hours of the in scope block/req.' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.YIELD_PCT
IS
  'The yield percent of the in scope block/req' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.SCHED_DB_ID
IS
  'Primary key of the Maintenix task this in scope block/req references.' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.SCHED_ID
IS
  'Primary key of the Maintenix task this in scope block/req references.' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.PREV_WORKSCOPE_DB_ID
IS
  'Primary key of previous dependent workscope' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.PREV_WORKSCOPE_ID
IS
  'Primary key of previous dependent workscope' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN LRP_EVENT_WORKSCOPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_SCHEDSTASK_WORKSCOPE ON LRP_EVENT_WORKSCOPE
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_TASKSCHEDRULE_LRPEVENTWORKS ON LRP_EVENT_WORKSCOPE
    (
      RULE_TASK_DB_ID ASC ,
      RULE_TASK_ID ASC ,
      RULE_DATA_TYPE_DB_ID ASC ,
      RULE_DATA_TYPE_ID ASC
    ) ;
  CREATE INDEX IX_LRPTASKDEFN_LRPEVENTWORKSCO ON LRP_EVENT_WORKSCOPE
    (
      LRP_DB_ID ASC ,
      LRP_ID ASC ,
      TASK_DEFN_DB_ID ASC ,
      TASK_DEFN_ID ASC
    ) ;
  CREATE INDEX IX_LRPEVENT_WORKSCOPE ON LRP_EVENT_WORKSCOPE
    (
      LRP_EVENT_DB_ID ASC ,
      LRP_EVENT_ID ASC
    ) ;
  CREATE INDEX IX_PREVEVENTWORKSCOPE_EVENTWOR ON LRP_EVENT_WORKSCOPE
    (
      PREV_WORKSCOPE_DB_ID ASC ,
      PREV_WORKSCOPE_ID ASC
    ) ;
ALTER TABLE LRP_EVENT_WORKSCOPE ADD CONSTRAINT PK_LRP_EVENT_WORKSCOPE PRIMARY KEY ( LRP_WORKSCOPE_DB_ID, LRP_WORKSCOPE_ID ) ;


CREATE TABLE LRP_EXTRACTION_RULE
  (
    LRP_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RULE_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    RULE_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LRP_EXTRACTION_RULE ADD CHECK ( LRP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EXTRACTION_RULE ADD CHECK ( LRP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EXTRACTION_RULE ADD CHECK ( RULE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EXTRACTION_RULE ADD CHECK ( RULE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_EXTRACTION_RULE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LRP_EXTRACTION_RULE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LRP_EXTRACTION_RULE
IS
  'This table stores the plan''s extraction rules used to dictate how many aircraft can be out of service at any one time.' ;
  COMMENT ON COLUMN LRP_EXTRACTION_RULE.LRP_DB_ID
IS
  'FK to LRP_PLAN - the LRP plan that is associated with the extraction rule.' ;
  COMMENT ON COLUMN LRP_EXTRACTION_RULE.LRP_ID
IS
  'FK to LRP_PLAN - the LRP plan that is associated with the extraction rule.' ;
  COMMENT ON COLUMN LRP_EXTRACTION_RULE.RULE_DB_ID
IS
  'FK to ER_HEADER - the extraction rule that has been associated with the LRP.' ;
  COMMENT ON COLUMN LRP_EXTRACTION_RULE.RULE_ID
IS
  'FK to ER_HEADER - the extraction rule that has been associated with the LRP.' ;
  COMMENT ON COLUMN LRP_EXTRACTION_RULE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN LRP_EXTRACTION_RULE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN LRP_EXTRACTION_RULE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN LRP_EXTRACTION_RULE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN LRP_EXTRACTION_RULE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_LRPPLAN_LRPEXRULE ON LRP_EXTRACTION_RULE
    (
      LRP_DB_ID ASC ,
      LRP_ID ASC
    ) ;
  CREATE INDEX IX_ERHEADER_LRPEXRULE ON LRP_EXTRACTION_RULE
    (
      RULE_DB_ID ASC ,
      RULE_ID ASC
    ) ;
ALTER TABLE LRP_EXTRACTION_RULE ADD CONSTRAINT PK_LRP_EXTRACTION_RULE PRIMARY KEY ( LRP_DB_ID, LRP_ID, RULE_DB_ID, RULE_ID ) ;


CREATE TABLE LRP_INV_ADHOC_PLAN
  (
    INV_NO_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    PUBLISHED_DT   DATE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LRP_INV_ADHOC_PLAN ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_ADHOC_PLAN ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_ADHOC_PLAN ADD CHECK ( LRP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_ADHOC_PLAN ADD CHECK ( LRP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_ADHOC_PLAN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LRP_INV_ADHOC_PLAN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LRP_INV_ADHOC_PLAN
IS
  'Defines which plan was last published with a given aircraft that has an ad hoc work package.' ;
  COMMENT ON COLUMN LRP_INV_ADHOC_PLAN.INV_NO_DB_ID
IS
  'Foreign key to the inventory.' ;
  COMMENT ON COLUMN LRP_INV_ADHOC_PLAN.INV_NO_ID
IS
  'Foreign key to the inventory.' ;
  COMMENT ON COLUMN LRP_INV_ADHOC_PLAN.LRP_DB_ID
IS
  'Foreign key to the Long Range Plan.' ;
  COMMENT ON COLUMN LRP_INV_ADHOC_PLAN.LRP_ID
IS
  'Foreign key to the Long Range Plan.' ;
  COMMENT ON COLUMN LRP_INV_ADHOC_PLAN.PUBLISHED_DT
IS
  'Date of publication.' ;
  COMMENT ON COLUMN LRP_INV_ADHOC_PLAN.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN LRP_INV_ADHOC_PLAN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN LRP_INV_ADHOC_PLAN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN LRP_INV_ADHOC_PLAN.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN LRP_INV_ADHOC_PLAN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_LRPPLAN_LRPINVADHOCPLAN ON LRP_INV_ADHOC_PLAN
    (
      LRP_DB_ID ASC ,
      LRP_ID ASC
    ) ;
ALTER TABLE LRP_INV_ADHOC_PLAN ADD CONSTRAINT PK_LRP_INV_ADHOC_PLAN PRIMARY KEY ( INV_NO_DB_ID, INV_NO_ID ) ;


CREATE TABLE LRP_INV_INV
  (
    LRP_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_INV_INV_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID         NUMBER (10) ,
    INV_NO_ID            NUMBER (10) ,
    ASSMBL_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD            VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ASSMBL_SUBTYPE_DB_ID NUMBER (10) ,
    ASSMBL_SUBTYPE_ID    NUMBER (10) ,
    CARRIER_DB_ID        NUMBER (10) ,
    CARRIER_ID           NUMBER (10) ,
    FORECAST_MODEL_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FORECAST_MODEL_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    AC_REG_CD            VARCHAR2 (10) ,
    SERIAL_NO_OEM        VARCHAR2 (40) ,
    APPL_EFF_CD          VARCHAR2 (8) ,
    INDUCTION_DT         DATE NOT NULL DEFERRABLE ,
    RETIREMENT_DT        DATE ,
    MANUFACT_DT          DATE ,
    LRP_PRIORITY_DB_ID   NUMBER (10) ,
    LRP_PRIORITY_CD      VARCHAR2 (8) ,
    READ_ONLY_BOOL       NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    AH_EVT_CTRL_BOOL     NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LRP_INV_INV ADD CHECK ( LRP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_INV ADD CHECK ( LRP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_INV ADD CHECK ( LRP_INV_INV_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_INV ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_INV ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_INV ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_INV ADD CHECK ( ASSMBL_SUBTYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_INV ADD CHECK ( ASSMBL_SUBTYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_INV ADD CHECK ( CARRIER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_INV ADD CHECK ( CARRIER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_INV ADD CHECK ( FORECAST_MODEL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_INV ADD CHECK ( FORECAST_MODEL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_INV ADD CHECK ( LRP_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_INV ADD CHECK ( READ_ONLY_BOOL   IN (0, 1)) DEFERRABLE ;
ALTER TABLE LRP_INV_INV ADD CHECK ( AH_EVT_CTRL_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE LRP_INV_INV ADD CHECK ( RSTAT_CD         IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LRP_INV_INV ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LRP_INV_INV
IS
  'This table defines the aircraft assigned to given plan as well as stores a copy of the relevant aircraft information.' ;
  COMMENT ON COLUMN LRP_INV_INV.LRP_DB_ID
IS
  'FK to LRP_PLAN. Denotes the long range plan this aircraft is used for.' ;
  COMMENT ON COLUMN LRP_INV_INV.LRP_ID
IS
  'FK to LRP_PLAN. Denotes the long range plan this aircraft is used for.' ;
  COMMENT ON COLUMN LRP_INV_INV.LRP_INV_INV_ID
IS
  'Sequential id' ;
  COMMENT ON COLUMN LRP_INV_INV.INV_NO_DB_ID
IS
  'FK to INV_INV. This points to the inventory (aircraft) in Maintenix.' ;
  COMMENT ON COLUMN LRP_INV_INV.INV_NO_ID
IS
  'FK to INV_INV. This points to the inventory (aircraft) in Maintenix.' ;
  COMMENT ON COLUMN LRP_INV_INV.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL. Denotes the assembly the future aircraft is on.' ;
  COMMENT ON COLUMN LRP_INV_INV.ASSMBL_CD
IS
  'FK to EQP_ASSMBL. Denotes the assembly the future aircraft is on.' ;
  COMMENT ON COLUMN LRP_INV_INV.ASSMBL_SUBTYPE_DB_ID
IS
  'FK to EQP_ASSMBL_SUBTYPE.  Denotes the future aircraft''s assembly subtype.' ;
  COMMENT ON COLUMN LRP_INV_INV.ASSMBL_SUBTYPE_ID
IS
  'FK to EQP_ASSMBL_SUBTYPE.  Denotes the future aircraft''s assembly subtype.' ;
  COMMENT ON COLUMN LRP_INV_INV.CARRIER_DB_ID
IS
  'FK to ORG_CARRIER. Denotes the operator the future aircraft uses.' ;
  COMMENT ON COLUMN LRP_INV_INV.CARRIER_ID
IS
  'FK to ORG_CARRIER. Denotes the operator the future aircraft uses.' ;
  COMMENT ON COLUMN LRP_INV_INV.FORECAST_MODEL_DB_ID
IS
  'FK to FC_MODEL. Denotes the forecast model the future aircraft is using.' ;
  COMMENT ON COLUMN LRP_INV_INV.FORECAST_MODEL_ID
IS
  'FK to FC_MODEL. Denotes the forecast model the future aircraft is using.' ;
  COMMENT ON COLUMN LRP_INV_INV.AC_REG_CD
IS
  'The registration code of the future aircraft' ;
  COMMENT ON COLUMN LRP_INV_INV.SERIAL_NO_OEM
IS
  'The serial number of future aircrafts' ;
  COMMENT ON COLUMN LRP_INV_INV.APPL_EFF_CD
IS
  'Applicability code of future aircraft' ;
  COMMENT ON COLUMN LRP_INV_INV.INDUCTION_DT
IS
  'Aircraft induction date' ;
  COMMENT ON COLUMN LRP_INV_INV.RETIREMENT_DT
IS
  'Retirement date of future and existing aircrafts' ;
  COMMENT ON COLUMN LRP_INV_INV.MANUFACT_DT
IS
  'Manufacturer date of future and existing aircrafts' ;
  COMMENT ON COLUMN LRP_INV_INV.LRP_PRIORITY_DB_ID
IS
  'FK to REF_LRP_PRIORITY.   Identifies the priority of the inventory.' ;
  COMMENT ON COLUMN LRP_INV_INV.LRP_PRIORITY_CD
IS
  'FK to REF_LRP_PRIORITY.   Identifies the priority of the inventory.' ;
  COMMENT ON COLUMN LRP_INV_INV.READ_ONLY_BOOL
IS
  'This column indicates if the inventory has been defined as read only for the plan.' ;
  COMMENT ON COLUMN LRP_INV_INV.AH_EVT_CTRL_BOOL
IS
  'This column indicates the ad hoc event control status of the inventory for the plan.' ;
  COMMENT ON COLUMN LRP_INV_INV.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN LRP_INV_INV.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN LRP_INV_INV.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN LRP_INV_INV.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN LRP_INV_INV.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EQPASSMBL_LRPINVINV ON LRP_INV_INV
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
  CREATE INDEX IX_INVINV_LRPINVINV ON LRP_INV_INV
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_ORGCARRIER_LRPINVINV ON LRP_INV_INV
    (
      CARRIER_DB_ID ASC ,
      CARRIER_ID ASC
    ) ;
  CREATE INDEX IX_FCMODEL_LRPINVINV ON LRP_INV_INV
    (
      FORECAST_MODEL_DB_ID ASC ,
      FORECAST_MODEL_ID ASC
    ) ;
  CREATE INDEX IX_LRPPLAN_LRPINVINV ON LRP_INV_INV
    (
      LRP_DB_ID ASC ,
      LRP_ID ASC
    ) ;
  CREATE INDEX IX_EQPASSMBLSUBTYPE_LRPINVINV ON LRP_INV_INV
    (
      ASSMBL_SUBTYPE_DB_ID ASC ,
      ASSMBL_SUBTYPE_ID ASC
    ) ;
ALTER TABLE LRP_INV_INV ADD CONSTRAINT PK_LRP_INV_INV PRIMARY KEY ( LRP_DB_ID, LRP_ID, LRP_INV_INV_ID ) ;


CREATE TABLE LRP_INV_TASK_PLAN
  (
    INV_NO_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    PUBLISHED_DT    DATE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LRP_INV_TASK_PLAN ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_TASK_PLAN ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_TASK_PLAN ADD CHECK ( TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_TASK_PLAN ADD CHECK ( TASK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_TASK_PLAN ADD CHECK ( LRP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_TASK_PLAN ADD CHECK ( LRP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_INV_TASK_PLAN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LRP_INV_TASK_PLAN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LRP_INV_TASK_PLAN
IS
  'Defines which plan was last published for a given task definition on a specific inventory.' ;
  COMMENT ON COLUMN LRP_INV_TASK_PLAN.INV_NO_DB_ID
IS
  'Foreign key to the inventory.' ;
  COMMENT ON COLUMN LRP_INV_TASK_PLAN.INV_NO_ID
IS
  'Foreign key to the inventory.' ;
  COMMENT ON COLUMN LRP_INV_TASK_PLAN.TASK_DEFN_DB_ID
IS
  'Foreign key to the task definition.' ;
  COMMENT ON COLUMN LRP_INV_TASK_PLAN.TASK_DEFN_ID
IS
  'Foreign key to the task definition.' ;
  COMMENT ON COLUMN LRP_INV_TASK_PLAN.LRP_DB_ID
IS
  'Foreign key to the Long Range Plan.' ;
  COMMENT ON COLUMN LRP_INV_TASK_PLAN.LRP_ID
IS
  'Foreign key to the Long Range Plan.' ;
  COMMENT ON COLUMN LRP_INV_TASK_PLAN.PUBLISHED_DT
IS
  'Date of publication.' ;
  COMMENT ON COLUMN LRP_INV_TASK_PLAN.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN LRP_INV_TASK_PLAN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN LRP_INV_TASK_PLAN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN LRP_INV_TASK_PLAN.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN LRP_INV_TASK_PLAN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVINV_LRPINVTASKPLAN ON LRP_INV_TASK_PLAN
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_TASKDEFN_LRPINVTASKPLAN ON LRP_INV_TASK_PLAN
    (
      TASK_DEFN_DB_ID ASC ,
      TASK_DEFN_ID ASC
    ) ;
  CREATE INDEX IX_LRPPLAN_LRPINVTASKPLAN ON LRP_INV_TASK_PLAN
    (
      LRP_DB_ID ASC ,
      LRP_ID ASC
    ) ;
ALTER TABLE LRP_INV_TASK_PLAN ADD CONSTRAINT PK_LRP_INV_TASK_PLAN PRIMARY KEY ( INV_NO_DB_ID, INV_NO_ID, TASK_DEFN_DB_ID, TASK_DEFN_ID ) ;


CREATE TABLE LRP_LOC
  (
    LRP_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    DEFAULT_CAPACITY FLOAT ,
    LABOR_RATE       NUMBER (15,5) DEFAULT 0 NOT NULL DEFERRABLE ,
    AH_EVT_CTRL_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    DURATION_MODE    VARCHAR2 (32) DEFAULT 'MX_DEFINITION' NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LRP_LOC ADD CHECK ( LRP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC ADD CHECK ( LRP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC ADD CHECK ( AH_EVT_CTRL_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE LRP_LOC ADD CHECK ( RSTAT_CD         IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LRP_LOC ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LRP_LOC
IS
  'Defines the locations assigned to given plan as well as stores a copy of the relevant location information.' ;
  COMMENT ON COLUMN LRP_LOC.LRP_DB_ID
IS
  'FK to LRP_PLAN. Denotes the long range plan this location is under.' ;
  COMMENT ON COLUMN LRP_LOC.LRP_ID
IS
  'FK to LRP_PLAN. Denotes the long range plan this location is under.' ;
  COMMENT ON COLUMN LRP_LOC.LOC_DB_ID
IS
  'FK to INV_LOC. Denotes the long range planning location.' ;
  COMMENT ON COLUMN LRP_LOC.LOC_ID
IS
  'FK to INV_LOC. Denotes the long range planning location.' ;
  COMMENT ON COLUMN LRP_LOC.DEFAULT_CAPACITY
IS
  'This is the default capacity of this long range planning location.' ;
  COMMENT ON COLUMN LRP_LOC.LABOR_RATE
IS
  'This is the labor rate of this long range planning location.' ;
  COMMENT ON COLUMN LRP_LOC.AH_EVT_CTRL_BOOL
IS
  'This column indicates if the task definition has been defined as read only for the plan.' ;
  COMMENT ON COLUMN LRP_LOC.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN LRP_LOC.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN LRP_LOC.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN LRP_LOC.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN LRP_LOC.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_INVLOC_LRPLOC ON LRP_LOC
    ( LOC_DB_ID ASC , LOC_ID ASC
    ) ;
  CREATE INDEX IX_LRPPLAN_LRPLOC ON LRP_LOC
    ( LRP_DB_ID ASC , LRP_ID ASC
    ) ;
  CREATE INDEX IX_FK_LRPLOC_REFLRPDURMODE ON LRP_LOC
    ( DURATION_MODE ASC
    ) ;
ALTER TABLE LRP_LOC ADD CONSTRAINT PK_LRP_LOC PRIMARY KEY ( LRP_DB_ID, LRP_ID, LOC_DB_ID, LOC_ID ) ;


CREATE TABLE LRP_LOC_ADHOC_PLAN
  (
    LOC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    PUBLISHED_DT   DATE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LRP_LOC_ADHOC_PLAN ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_ADHOC_PLAN ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_ADHOC_PLAN ADD CHECK ( LRP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_ADHOC_PLAN ADD CHECK ( LRP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_ADHOC_PLAN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LRP_LOC_ADHOC_PLAN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LRP_LOC_ADHOC_PLAN
IS
  'Defines which plan was last published with a given location that has an ad hoc work package.' ;
  COMMENT ON COLUMN LRP_LOC_ADHOC_PLAN.LOC_DB_ID
IS
  'Foreign key to the location' ;
  COMMENT ON COLUMN LRP_LOC_ADHOC_PLAN.LOC_ID
IS
  'Foreign key to the location' ;
  COMMENT ON COLUMN LRP_LOC_ADHOC_PLAN.LRP_DB_ID
IS
  'Foreign key to the Long Range Plan.' ;
  COMMENT ON COLUMN LRP_LOC_ADHOC_PLAN.LRP_ID
IS
  'Foreign key to the Long Range Plan.' ;
  COMMENT ON COLUMN LRP_LOC_ADHOC_PLAN.PUBLISHED_DT
IS
  'Date of publication.' ;
  COMMENT ON COLUMN LRP_LOC_ADHOC_PLAN.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN LRP_LOC_ADHOC_PLAN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN LRP_LOC_ADHOC_PLAN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN LRP_LOC_ADHOC_PLAN.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN LRP_LOC_ADHOC_PLAN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_LRPPLAN_LRPLOCADHOCPLAN ON LRP_LOC_ADHOC_PLAN
    (
      LRP_DB_ID ASC ,
      LRP_ID ASC
    ) ;
ALTER TABLE LRP_LOC_ADHOC_PLAN ADD CONSTRAINT PK_LRP_LOC_ADHOC_PLAN PRIMARY KEY ( LOC_DB_ID, LOC_ID ) ;


CREATE TABLE LRP_LOC_CAPABILITY
  (
    LOC_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD          VARCHAR2 (8) NOT NULL DEFERRABLE ,
    WORK_TYPE_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    WORK_TYPE_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    LRP_PRIORITY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_PRIORITY_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LRP_LOC_CAPABILITY ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAPABILITY ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAPABILITY ADD CHECK ( LRP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAPABILITY ADD CHECK ( LRP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAPABILITY ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAPABILITY ADD CHECK ( WORK_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAPABILITY ADD CHECK ( LRP_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAPABILITY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAPABILITY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LRP_LOC_CAPABILITY
IS
  'Defines the capabilities assigned to each location within a plan.' ;
  COMMENT ON COLUMN LRP_LOC_CAPABILITY.LOC_DB_ID
IS
  'Foreign key to the location.' ;
  COMMENT ON COLUMN LRP_LOC_CAPABILITY.LOC_ID
IS
  'Foreign key to the location.' ;
  COMMENT ON COLUMN LRP_LOC_CAPABILITY.LRP_DB_ID
IS
  'Foreign key to the Long Range Plan.' ;
  COMMENT ON COLUMN LRP_LOC_CAPABILITY.LRP_ID
IS
  'Foreign key to the Long Range Plan.' ;
  COMMENT ON COLUMN LRP_LOC_CAPABILITY.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL.' ;
  COMMENT ON COLUMN LRP_LOC_CAPABILITY.ASSMBL_CD
IS
  'FK to EQP_ASSMBL.' ;
  COMMENT ON COLUMN LRP_LOC_CAPABILITY.WORK_TYPE_DB_ID
IS
  'FK to REF_WORK_TYPE.' ;
  COMMENT ON COLUMN LRP_LOC_CAPABILITY.WORK_TYPE_CD
IS
  'FK to REF_WORK_TYPE. ' ;
  COMMENT ON COLUMN LRP_LOC_CAPABILITY.LRP_PRIORITY_DB_ID
IS
  'FK to REF_LRP_PRIORITY.' ;
  COMMENT ON COLUMN LRP_LOC_CAPABILITY.LRP_PRIORITY_CD
IS
  'FK to REF_LRP_PRIORITY.' ;
  COMMENT ON COLUMN LRP_LOC_CAPABILITY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN LRP_LOC_CAPABILITY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN LRP_LOC_CAPABILITY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN LRP_LOC_CAPABILITY.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN LRP_LOC_CAPABILITY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPASSMBL_LRPLOCCAP ON LRP_LOC_CAPABILITY
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
  CREATE INDEX IX_LRPLOC_LRPLOCCAP ON LRP_LOC_CAPABILITY
    (
      LRP_DB_ID ASC ,
      LRP_ID ASC ,
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
ALTER TABLE LRP_LOC_CAPABILITY ADD CONSTRAINT PK_LRP_LOC_CAPABILITY PRIMARY KEY ( LOC_DB_ID, LOC_ID, LRP_DB_ID, LRP_ID, ASSMBL_DB_ID, ASSMBL_CD, WORK_TYPE_DB_ID, WORK_TYPE_CD ) ;


CREATE TABLE LRP_LOC_CAPACITY
  (
    LRP_DB_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_ID                 NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_DB_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID                 NUMBER (10) NOT NULL DEFERRABLE ,
    CAPACITY_PATTERN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    CAPACITY_PATTERN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LRP_LOC_CAPACITY ADD CHECK ( LRP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAPACITY ADD CHECK ( LRP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAPACITY ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAPACITY ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAPACITY ADD CHECK ( CAPACITY_PATTERN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAPACITY ADD CHECK ( CAPACITY_PATTERN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAPACITY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAPACITY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LRP_LOC_CAPACITY
IS
  'Defines all the Capacity Patterns that are associated with a given location in the Long Range Planner.' ;
  COMMENT ON COLUMN LRP_LOC_CAPACITY.LRP_DB_ID
IS
  'Foreign key to the Long Range Plan.' ;
  COMMENT ON COLUMN LRP_LOC_CAPACITY.LRP_ID
IS
  'Foreign key to the Long Range Plan.' ;
  COMMENT ON COLUMN LRP_LOC_CAPACITY.LOC_DB_ID
IS
  'Foreign key to the location.' ;
  COMMENT ON COLUMN LRP_LOC_CAPACITY.LOC_ID
IS
  'Foreign key to the location.' ;
  COMMENT ON COLUMN LRP_LOC_CAPACITY.CAPACITY_PATTERN_DB_ID
IS
  'Foreign key for the capacity pattern' ;
  COMMENT ON COLUMN LRP_LOC_CAPACITY.CAPACITY_PATTERN_ID
IS
  'Foreign key for the capacity pattern' ;
  COMMENT ON COLUMN LRP_LOC_CAPACITY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN LRP_LOC_CAPACITY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN LRP_LOC_CAPACITY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN LRP_LOC_CAPACITY.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN LRP_LOC_CAPACITY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_LRPLOC_LRPLOCCAPACITY ON LRP_LOC_CAPACITY
    (
      LRP_DB_ID ASC ,
      LRP_ID ASC ,
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
  CREATE INDEX IX_CAPACITYPATTERN_LRPLOCCAPAC ON LRP_LOC_CAPACITY
    (
      CAPACITY_PATTERN_DB_ID ASC ,
      CAPACITY_PATTERN_ID ASC
    ) ;
ALTER TABLE LRP_LOC_CAPACITY ADD CONSTRAINT PK_LRP_LOC_CAPACITY PRIMARY KEY ( LRP_DB_ID, LRP_ID, LOC_DB_ID, LOC_ID, CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID ) ;


CREATE TABLE LRP_LOC_CAP_EXCEPT
  (
    LRP_DB_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_ID                 NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_DB_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID                 NUMBER (10) NOT NULL DEFERRABLE ,
    CAPACITY_PATTERN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    CAPACITY_PATTERN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    CAPACITY_EXCEPT_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    EFFECTIVE_FROM_DT      DATE NOT NULL DEFERRABLE ,
    EFFECTIVE_TO_DT        DATE NOT NULL DEFERRABLE ,
    RECURR_BOOL            NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LRP_LOC_CAP_EXCEPT ADD CHECK ( LRP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAP_EXCEPT ADD CHECK ( LRP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAP_EXCEPT ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAP_EXCEPT ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAP_EXCEPT ADD CHECK ( CAPACITY_PATTERN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAP_EXCEPT ADD CHECK ( CAPACITY_PATTERN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAP_EXCEPT ADD CHECK ( CAPACITY_EXCEPT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAP_EXCEPT ADD CHECK ( RECURR_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAP_EXCEPT ADD CHECK ( RSTAT_CD    IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAP_EXCEPT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LRP_LOC_CAP_EXCEPT
IS
  'Defines the Capacity Pattern Exceptions for a location in the Long Range Planner.' ;
  COMMENT ON COLUMN LRP_LOC_CAP_EXCEPT.CAPACITY_EXCEPT_ID
IS
  'Unique identifier for location capacities in the plan.' ;
  COMMENT ON COLUMN LRP_LOC_CAP_EXCEPT.EFFECTIVE_FROM_DT
IS
  'Day in which the capacity pattern is effective from for the location and plan.' ;
  COMMENT ON COLUMN LRP_LOC_CAP_EXCEPT.EFFECTIVE_TO_DT
IS
  'Day in which the capacity pattern is effective to for the location and plan.' ;
  COMMENT ON COLUMN LRP_LOC_CAP_EXCEPT.RECURR_BOOL
IS
  'Identifies if this day capacity has is recurring or not. 
1 = recurring; 0 = non-recurring 
' ;
  CREATE INDEX IX_LRPLOCCAPACITY_LRPLOCCAPEXC ON LRP_LOC_CAP_EXCEPT
    (
      LRP_DB_ID ASC ,
      LRP_ID ASC ,
      LOC_DB_ID ASC ,
      LOC_ID ASC ,
      CAPACITY_PATTERN_DB_ID ASC ,
      CAPACITY_PATTERN_ID ASC
    ) ;
ALTER TABLE LRP_LOC_CAP_EXCEPT ADD CONSTRAINT PK_LRP_LOC_CAP_EXCEPT PRIMARY KEY ( LRP_DB_ID, LRP_ID, LOC_DB_ID, LOC_ID, CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID, CAPACITY_EXCEPT_ID ) ;


CREATE TABLE LRP_LOC_CAP_STD
  (
    LRP_DB_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_ID                 NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_DB_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID                 NUMBER (10) NOT NULL DEFERRABLE ,
    CAPACITY_PATTERN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    CAPACITY_PATTERN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    CAPACITY_STD_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    EFFECTIVE_FROM_DT      DATE NOT NULL DEFERRABLE ,
    EFFECTIVE_TO_DT        DATE ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LRP_LOC_CAP_STD ADD CHECK ( LRP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAP_STD ADD CHECK ( LRP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAP_STD ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAP_STD ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAP_STD ADD CHECK ( CAPACITY_PATTERN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAP_STD ADD CHECK ( CAPACITY_PATTERN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAP_STD ADD CHECK ( CAPACITY_STD_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAP_STD ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LRP_LOC_CAP_STD ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LRP_LOC_CAP_STD
IS
  'Describes the Standard Capacity Patterns that are assigned to a location in the Long Range Planner.' ;
  COMMENT ON COLUMN LRP_LOC_CAP_STD.CAPACITY_STD_ID
IS
  'Unique identifier for location capacities in the plan.' ;
  COMMENT ON COLUMN LRP_LOC_CAP_STD.EFFECTIVE_FROM_DT
IS
  'Day in which the capacity pattern is effective from for the location and plan.' ;
  COMMENT ON COLUMN LRP_LOC_CAP_STD.EFFECTIVE_TO_DT
IS
  'Day in which the capacity pattern is effective to for the location and plan. NULL for Indefinite patterns.' ;
  CREATE INDEX IX_LRPLOCCAPACITY_LRPLOCCAPSTD ON LRP_LOC_CAP_STD
    (
      LRP_DB_ID ASC ,
      LRP_ID ASC ,
      LOC_DB_ID ASC ,
      LOC_ID ASC ,
      CAPACITY_PATTERN_DB_ID ASC ,
      CAPACITY_PATTERN_ID ASC
    ) ;
ALTER TABLE LRP_LOC_CAP_STD ADD CONSTRAINT PK_LRP_LOC_CAP_STD PRIMARY KEY ( LRP_DB_ID, LRP_ID, LOC_DB_ID, LOC_ID, CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID, CAPACITY_STD_ID ) ;


CREATE TABLE LRP_PLAN
  (
    LRP_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC       VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC       VARCHAR2 (4000) ,
    LOAD_ACTUAL_DT   DATE ,
    PUBLISHED_DT     DATE ,
    PUB_HR_DB_ID     NUMBER (10) ,
    PUB_HR_ID        NUMBER (10) ,
    CREATED_DT       DATE NOT NULL DEFERRABLE ,
    CREATED_HR_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    CREATED_HR_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    UPDATED_DT       DATE ,
    UPDATED_HR_DB_ID NUMBER (10) ,
    UPDATED_HR_ID    NUMBER (10) ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LRP_PLAN ADD CHECK ( LRP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN ADD CHECK ( LRP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN ADD CHECK ( PUB_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN ADD CHECK ( PUB_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN ADD CHECK ( CREATED_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN ADD CHECK ( CREATED_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN ADD CHECK ( UPDATED_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN ADD CHECK ( UPDATED_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LRP_PLAN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LRP_PLAN
IS
  'This table contains the structure of the LRP plan.' ;
  COMMENT ON COLUMN LRP_PLAN.LRP_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN LRP_PLAN.LRP_ID
IS
  'Unique identifier serving as part of the primary key, and assigned from the sequence LRP_ID_SEQ' ;
  COMMENT ON COLUMN LRP_PLAN.DESC_SDESC
IS
  'Name of long range plan.' ;
  COMMENT ON COLUMN LRP_PLAN.DESC_LDESC
IS
  'Description of long range plan' ;
  COMMENT ON COLUMN LRP_PLAN.LOAD_ACTUAL_DT
IS
  'The date when load actual was last executed on this plan.' ;
  COMMENT ON COLUMN LRP_PLAN.PUBLISHED_DT
IS
  'The date when the long range plan is published.' ;
  COMMENT ON COLUMN LRP_PLAN.PUB_HR_DB_ID
IS
  'The user who published the long range plan.' ;
  COMMENT ON COLUMN LRP_PLAN.PUB_HR_ID
IS
  'The user who published the long range plan.' ;
  COMMENT ON COLUMN LRP_PLAN.CREATED_DT
IS
  'The date when the long range plan is created.' ;
  COMMENT ON COLUMN LRP_PLAN.CREATED_HR_DB_ID
IS
  'The user who created the long range plan' ;
  COMMENT ON COLUMN LRP_PLAN.CREATED_HR_ID
IS
  'The user who created the long range plan' ;
  COMMENT ON COLUMN LRP_PLAN.UPDATED_DT
IS
  'The date when the long range plan is updated.
' ;
  COMMENT ON COLUMN LRP_PLAN.UPDATED_HR_DB_ID
IS
  'The user who updated the long range plan.' ;
  COMMENT ON COLUMN LRP_PLAN.UPDATED_HR_ID
IS
  'The user who updated the long range plan.' ;
  COMMENT ON COLUMN LRP_PLAN.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN LRP_PLAN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN LRP_PLAN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN LRP_PLAN.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN LRP_PLAN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_PUBHR_LRPPLAN ON LRP_PLAN
    (
      PUB_HR_DB_ID ASC ,
      PUB_HR_ID ASC
    ) ;
  CREATE INDEX IX_UPDATEHR_LRPPLAN ON LRP_PLAN
    (
      CREATED_HR_DB_ID ASC ,
      CREATED_HR_ID ASC
    ) ;
  CREATE INDEX IX_CREATEHR_LRPPLAN ON LRP_PLAN
    (
      UPDATED_HR_DB_ID ASC ,
      UPDATED_HR_ID ASC
    ) ;
ALTER TABLE LRP_PLAN ADD CONSTRAINT PK_LRP_PLAN PRIMARY KEY ( LRP_DB_ID, LRP_ID ) ;


CREATE TABLE LRP_PLAN_CONFIG
  (
    LRP_DB_ID                  NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_ID                     NUMBER (10) NOT NULL DEFERRABLE ,
    ADHOC_SEV_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    ADHOC_SEV_CD               VARCHAR2 (8) NOT NULL DEFERRABLE ,
    OVERFLOW_SEV_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    OVERFLOW_SEV_CD            VARCHAR2 (8) NOT NULL DEFERRABLE ,
    OVERLAP_SEV_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    OVERLAP_SEV_CD             VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DURLESSMIN_SEV_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    DURLESSMIN_SEV_CD          VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DURGRTMAX_SEV_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    DURGRTMAX_SEV_CD           VARCHAR2 (8) NOT NULL DEFERRABLE ,
    OVERDUE_SEV_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    OVERDUE_SEV_CD             VARCHAR2 (8) NOT NULL DEFERRABLE ,
    EXTDEAD_SEV_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    EXTDEAD_SEV_CD             VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PLANBFOREMINYD_SEV_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    PLANBFOREMINYD_SEV_CD      VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PLANAFTMAXYD_SEV_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    PLANAFTMAXYD_SEV_CD        VARCHAR2 (8) NOT NULL DEFERRABLE ,
    OUTOFSEQ_SEV_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    OUTOFSEQ_SEV_CD            VARCHAR2 (8) NOT NULL DEFERRABLE ,
    UPDATEACTUAL_SEV_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    UPDATEACTUAL_SEV_CD        VARCHAR2 (8) NOT NULL DEFERRABLE ,
    EXTRACTEXC_SEV_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    EXTRACTEXC_SEV_CD          VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PRIOREFFECTIVEDT_SEV_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PRIOREFFECTIVEDT_SEV_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    READONLY_SEV_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    READONLY_SEV_CD            VARCHAR2 (8) NOT NULL DEFERRABLE ,
    OVERRUNBKTS_SEV_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    OVERRUNBKTS_SEV_CD         VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD                   NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT                DATE NOT NULL DEFERRABLE ,
    REVISION_DT                DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER              VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LRP_PLAN_CONFIG ADD CHECK ( LRP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_CONFIG ADD CHECK ( LRP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_CONFIG ADD CHECK ( ADHOC_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_CONFIG ADD CHECK ( OVERFLOW_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_CONFIG ADD CHECK ( OVERLAP_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_CONFIG ADD CHECK ( DURLESSMIN_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_CONFIG ADD CHECK ( DURGRTMAX_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_CONFIG ADD CHECK ( OVERDUE_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_CONFIG ADD CHECK ( EXTDEAD_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_CONFIG ADD CHECK ( PLANBFOREMINYD_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_CONFIG ADD CHECK ( PLANAFTMAXYD_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_CONFIG ADD CHECK ( OUTOFSEQ_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_CONFIG ADD CHECK ( UPDATEACTUAL_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_CONFIG ADD CHECK ( EXTRACTEXC_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_CONFIG ADD CHECK ( PRIOREFFECTIVEDT_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_CONFIG ADD CHECK ( READONLY_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_CONFIG ADD CHECK ( OVERRUNBKTS_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_CONFIG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LRP_PLAN_CONFIG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LRP_PLAN_CONFIG
IS
  'This table stores the configurable UI options of a plan.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.LRP_DB_ID
IS
  'Foreign key to the Long Range Plan.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.LRP_ID
IS
  'Foreign key to the Long Range Plan.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.ADHOC_SEV_DB_ID
IS
  'Adhoc Work Packages severity database identifier.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.ADHOC_SEV_CD
IS
  'Adhoc Work Packages severity code. ' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.OVERFLOW_SEV_DB_ID
IS
  'Overflow severity database identifier.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.OVERFLOW_SEV_CD
IS
  'Overflow severity code.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.OVERLAP_SEV_DB_ID
IS
  'Overlap severity database identifier.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.OVERLAP_SEV_CD
IS
  'Overlap severity code.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.DURLESSMIN_SEV_DB_ID
IS
  'Duration less than minimum severity  database identifier.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.DURLESSMIN_SEV_CD
IS
  'Duration less than minimum severity code.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.DURGRTMAX_SEV_DB_ID
IS
  'Duration greater than maximum severity database identifier.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.DURGRTMAX_SEV_CD
IS
  'Duration greater than maximum severity code.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.OVERDUE_SEV_DB_ID
IS
  'Overdue severity database identifier.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.OVERDUE_SEV_CD
IS
  'Overdue severity code.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.EXTDEAD_SEV_DB_ID
IS
  'Extended Deadline severity database identifier.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.EXTDEAD_SEV_CD
IS
  'Extended Deadline severity code.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.PLANBFOREMINYD_SEV_DB_ID
IS
  'Planned before minimum yield severity database identifier.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.PLANBFOREMINYD_SEV_CD
IS
  'Planned before minimum yield severity database code.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.PLANAFTMAXYD_SEV_DB_ID
IS
  'Planned after maximum yield severity database identifier.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.PLANAFTMAXYD_SEV_CD
IS
  'Planned after maximum yield severity code.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.OUTOFSEQ_SEV_DB_ID
IS
  'Out of sequence severity db id' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.OUTOFSEQ_SEV_CD
IS
  'Out of sequence severity code' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.UPDATEACTUAL_SEV_DB_ID
IS
  'Update to Actuals severity db id' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.UPDATEACTUAL_SEV_CD
IS
  'Update to Actuals severity code' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.EXTRACTEXC_SEV_DB_ID
IS
  'Extraction limit exceeded severity database identifier.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.EXTRACTEXC_SEV_CD
IS
  'Extraction limit exceeded severity code.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.PRIOREFFECTIVEDT_SEV_DB_ID
IS
  'Prior to effective date severity db id' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.PRIOREFFECTIVEDT_SEV_CD
IS
  'Prior to effective date severity code' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.READONLY_SEV_DB_ID
IS
  'Read only severity database identifier.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.READONLY_SEV_CD
IS
  'Read only severity code.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.OVERRUNBKTS_SEV_DB_ID
IS
  'DbId for severity of Overrun Buckets option in Gantt Configuration.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.OVERRUNBKTS_SEV_CD
IS
  'Severity Code of the severity for Overrun Buckets option in Gantt Configuration.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN LRP_PLAN_CONFIG.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE LRP_PLAN_CONFIG ADD CONSTRAINT PK_LRP_PLAN_CONFIG PRIMARY KEY ( LRP_DB_ID, LRP_ID ) ;


CREATE TABLE LRP_PLAN_TYPE
  (
    LRP_PLAN_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_PLAN_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    PLANNING_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PLANNING_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LRP_PLAN_TYPE ADD CHECK ( LRP_PLAN_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_TYPE ADD CHECK ( LRP_PLAN_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_TYPE ADD CHECK ( LRP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_TYPE ADD CHECK ( LRP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_TYPE ADD CHECK ( PLANNING_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_TYPE ADD CHECK ( PLANNING_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_PLAN_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LRP_PLAN_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LRP_PLAN_TYPE
IS
  'This table represents a Maintenix Planning Type (from EQP_PLANNING_TYPE) and other LRP-specific attributes.' ;
  COMMENT ON COLUMN LRP_PLAN_TYPE.LRP_PLAN_TYPE_DB_ID
IS
  'Primary key for the Plan?s Planning Type' ;
  COMMENT ON COLUMN LRP_PLAN_TYPE.LRP_PLAN_TYPE_ID
IS
  'Primary key for the Plan?s Planning Type' ;
  CREATE INDEX IX_LRPPLN_LRPPLNTYP ON LRP_PLAN_TYPE
    (
      LRP_DB_ID ASC ,
      LRP_ID ASC
    ) ;
  CREATE INDEX IX_LRPPTYP_EQPPTYPE ON LRP_PLAN_TYPE
    (
      PLANNING_TYPE_DB_ID ASC ,
      PLANNING_TYPE_ID ASC
    ) ;
ALTER TABLE LRP_PLAN_TYPE ADD CONSTRAINT PK_LRP_PLAN_TYPE PRIMARY KEY ( LRP_PLAN_TYPE_DB_ID, LRP_PLAN_TYPE_ID ) ;


CREATE TABLE LRP_TASK_BUCKET
  (
    TASK_PLAN_RANGE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_PLAN_RANGE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_PLAN_TYPE_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_PLAN_TYPE_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ROUTINE_HRS           NUMBER (8,2) NOT NULL DEFERRABLE ,
    NR_FACTOR             NUMBER (3,2) NOT NULL DEFERRABLE ,
    NR_HRS                NUMBER (8,2) NOT NULL DEFERRABLE ,
    TOTAL_HRS             NUMBER (10,2) NOT NULL DEFERRABLE ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LRP_TASK_BUCKET ADD CHECK ( TASK_PLAN_RANGE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_TASK_BUCKET ADD CHECK ( TASK_PLAN_RANGE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_TASK_BUCKET ADD CHECK ( LRP_PLAN_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_TASK_BUCKET ADD CHECK ( LRP_PLAN_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_TASK_BUCKET ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LRP_TASK_BUCKET ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LRP_TASK_BUCKET
IS
  'This table represents a Planning Type (and other attributes) associated with a Buffer (collection of LRP_TASK_BUCKET objects) for a task definition in LRP.' ;
  COMMENT ON COLUMN LRP_TASK_BUCKET.ROUTINE_HRS
IS
  'Routine manhours for the task definition for the planning type' ;
  COMMENT ON COLUMN LRP_TASK_BUCKET.NR_FACTOR
IS
  'The ratio of non-routine hours to routine hours for the task definition for the planning type' ;
  COMMENT ON COLUMN LRP_TASK_BUCKET.NR_HRS
IS
  'Non-routine manhours for the task definition for the planning type' ;
  COMMENT ON COLUMN LRP_TASK_BUCKET.TOTAL_HRS
IS
  'Sum of routine and non-routine manhours for the task definition for the planning type' ;
  CREATE INDEX IX_LRPTSKPLRNG_TBKT ON LRP_TASK_BUCKET
    (
      TASK_PLAN_RANGE_DB_ID ASC ,
      TASK_PLAN_RANGE_ID ASC
    ) ;
  CREATE INDEX IX_LRPPTYP_LRPTBKT ON LRP_TASK_BUCKET
    (
      LRP_PLAN_TYPE_DB_ID ASC ,
      LRP_PLAN_TYPE_ID ASC
    ) ;
ALTER TABLE LRP_TASK_BUCKET ADD CONSTRAINT PK_LRP_TASK_BUCKET PRIMARY KEY ( TASK_PLAN_RANGE_DB_ID, TASK_PLAN_RANGE_ID, LRP_PLAN_TYPE_DB_ID, LRP_PLAN_TYPE_ID ) ;


CREATE TABLE LRP_TASK_DEFN
  (
    LRP_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_ORD      NUMBER (4) ,
    EST_MATERIAL_COST NUMBER (15,5) NOT NULL DEFERRABLE ,
    MIN_YIELD_PCT FLOAT NOT NULL DEFERRABLE ,
    MAX_YIELD_PCT FLOAT NOT NULL DEFERRABLE ,
    DEFAULT_DURATION_DAYS FLOAT NOT NULL DEFERRABLE ,
    MIN_DURATION_DAYS FLOAT NOT NULL DEFERRABLE ,
    MAX_DURATION_DAYS FLOAT NOT NULL DEFERRABLE ,
    PREV_LRP_DB_ID       NUMBER (10) ,
    PREV_LRP_ID          NUMBER (10) ,
    PREV_TASK_DEFN_DB_ID NUMBER (10) ,
    PREV_TASK_DEFN_ID    NUMBER (10) ,
    READ_ONLY_BOOL       NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    DUR_BUFFER_PCT FLOAT DEFAULT 0 NOT NULL DEFERRABLE ,
    ROUTINE_HRS    NUMBER (8,2) DEFAULT 0 NOT NULL DEFERRABLE ,
    NR_HRS         NUMBER (8,2) DEFAULT 0 NOT NULL DEFERRABLE ,
    TOTAL_HRS      NUMBER (10,2) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LRP_TASK_DEFN ADD CHECK ( LRP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_TASK_DEFN ADD CHECK ( LRP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_TASK_DEFN ADD CHECK ( TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_TASK_DEFN ADD CHECK ( TASK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_TASK_DEFN ADD CHECK ( MIN_YIELD_PCT BETWEEN 0 AND 1) DEFERRABLE ;
ALTER TABLE LRP_TASK_DEFN ADD CHECK ( MAX_YIELD_PCT BETWEEN 0 AND 1) DEFERRABLE ;
ALTER TABLE LRP_TASK_DEFN ADD CHECK ( PREV_LRP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_TASK_DEFN ADD CHECK ( PREV_LRP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_TASK_DEFN ADD CHECK ( PREV_TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_TASK_DEFN ADD CHECK ( PREV_TASK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_TASK_DEFN ADD CHECK ( READ_ONLY_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE LRP_TASK_DEFN ADD CHECK ( RSTAT_CD       IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LRP_TASK_DEFN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LRP_TASK_DEFN
IS
  'Defines the task definitions that are assigned to a plan as well as stores a copy of the relevant task information.' ;
  COMMENT ON COLUMN LRP_TASK_DEFN.LRP_DB_ID
IS
  'FK to LRP_PLAN. The long range plan this block/requirement is for.' ;
  COMMENT ON COLUMN LRP_TASK_DEFN.TASK_DEFN_DB_ID
IS
  'FK to TASK_DEFN. This is the block/requirement use for the long range plan.' ;
  COMMENT ON COLUMN LRP_TASK_DEFN.PREV_LRP_DB_ID
IS
  'Previous dependent block/req task definition' ;
  COMMENT ON COLUMN LRP_TASK_DEFN.PREV_LRP_ID
IS
  'Previous dependent block/req task definition' ;
  COMMENT ON COLUMN LRP_TASK_DEFN.PREV_TASK_DEFN_DB_ID
IS
  'Previous dependent block/req task definition' ;
  COMMENT ON COLUMN LRP_TASK_DEFN.PREV_TASK_DEFN_ID
IS
  'Previous dependent block/req task definition' ;
  COMMENT ON COLUMN LRP_TASK_DEFN.READ_ONLY_BOOL
IS
  'This column indicates if the task definition has been defined as read only for the plan.' ;
  COMMENT ON COLUMN LRP_TASK_DEFN.DUR_BUFFER_PCT
IS
  'The duration buffer associated with the task definition represented as a percentage of the total task duration.' ;
  COMMENT ON COLUMN LRP_TASK_DEFN.ROUTINE_HRS
IS
  'This column is the routine manhours associated with the task definition. ' ;
  COMMENT ON COLUMN LRP_TASK_DEFN.NR_HRS
IS
  'This column is the non-routine manhours associated with the task definition.' ;
  COMMENT ON COLUMN LRP_TASK_DEFN.TOTAL_HRS
IS
  'This column is the total hours (routine + non routine hours) associated with the task definition.' ;
  COMMENT ON COLUMN LRP_TASK_DEFN.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN LRP_TASK_DEFN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN LRP_TASK_DEFN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN LRP_TASK_DEFN.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN LRP_TASK_DEFN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_TASKDEFN_LRPTASKDEFN ON LRP_TASK_DEFN
    (
      TASK_DEFN_DB_ID ASC ,
      TASK_DEFN_ID ASC
    ) ;
  CREATE INDEX IX_LRPPLAN_LRPTASKDEFN ON LRP_TASK_DEFN
    (
      LRP_DB_ID ASC ,
      LRP_ID ASC
    ) ;
  CREATE INDEX IX_LRPTASKDEFN_LRPTASKDEFN ON LRP_TASK_DEFN
    (
      PREV_LRP_DB_ID ASC ,
      PREV_LRP_ID ASC ,
      PREV_TASK_DEFN_DB_ID ASC ,
      PREV_TASK_DEFN_ID ASC
    ) ;
ALTER TABLE LRP_TASK_DEFN ADD CONSTRAINT PK_LRP_TASK_DEFN PRIMARY KEY ( LRP_DB_ID, LRP_ID, TASK_DEFN_DB_ID, TASK_DEFN_ID ) ;


CREATE TABLE LRP_TASK_PLAN_RANGE
  (
    TASK_PLAN_RANGE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_PLAN_RANGE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    EFFECTIVE_FROM_DT     DATE NOT NULL DEFERRABLE ,
    EFFECTIVE_TO_DT       DATE ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE LRP_TASK_PLAN_RANGE ADD CHECK ( TASK_PLAN_RANGE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_TASK_PLAN_RANGE ADD CHECK ( TASK_PLAN_RANGE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_TASK_PLAN_RANGE ADD CHECK ( LRP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_TASK_PLAN_RANGE ADD CHECK ( LRP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_TASK_PLAN_RANGE ADD CHECK ( TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_TASK_PLAN_RANGE ADD CHECK ( TASK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE LRP_TASK_PLAN_RANGE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE LRP_TASK_PLAN_RANGE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE LRP_TASK_PLAN_RANGE
IS
  'This table stores the Buffers (collection of Buckets/PlanningTypes associated with a specific date-range) for a task definition.' ;
  COMMENT ON COLUMN LRP_TASK_PLAN_RANGE.TASK_PLAN_RANGE_DB_ID
IS
  'Primary key for the Task Planning Type Range' ;
  COMMENT ON COLUMN LRP_TASK_PLAN_RANGE.TASK_PLAN_RANGE_ID
IS
  'Primary key for the Task Planning Type Range' ;
  COMMENT ON COLUMN LRP_TASK_PLAN_RANGE.EFFECTIVE_FROM_DT
IS
  'Date range always starts at the beginning of the month (e.g. 01-JAN-2010).' ;
  COMMENT ON COLUMN LRP_TASK_PLAN_RANGE.EFFECTIVE_TO_DT
IS
  'Date range always ends at the last of the month (i.e. 31-JAN-2012).' ;
  CREATE INDEX IX_LRPTDFN_TSKPRNG ON LRP_TASK_PLAN_RANGE
    (
      LRP_DB_ID ASC ,
      LRP_ID ASC ,
      TASK_DEFN_DB_ID ASC ,
      TASK_DEFN_ID ASC
    ) ;
ALTER TABLE LRP_TASK_PLAN_RANGE ADD CONSTRAINT PK_LRP_TASK_PLAN_RANGE PRIMARY KEY ( TASK_PLAN_RANGE_DB_ID, TASK_PLAN_RANGE_ID ) ;


CREATE TABLE MAINT_PRGM
  (
    MAINT_PRGM_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    MAINT_PRGM_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    MAINT_PRGM_DEFN_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    MAINT_PRGM_DEFN_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    MAINT_PRGM_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    MAINT_PRGM_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    MAINT_PRGM_CD           VARCHAR2 (200) NOT NULL DEFERRABLE ,
    MAINT_PRGM_SDESC        VARCHAR2 (200) NOT NULL DEFERRABLE ,
    MAINT_PRGM_LDESC        VARCHAR2 (4000) ,
    EXT_REF_SDESC           VARCHAR2 (80) ,
    REVISION_ORD            NUMBER (4) NOT NULL DEFERRABLE ,
    ACTV_HR_DB_ID           NUMBER (10) ,
    ACTV_HR_ID              NUMBER (10) ,
    ACTV_DT                 DATE ,
    ACTV_LDESC              VARCHAR2 (4000) ,
    ACTV_REF_SDESC          VARCHAR2 (80) ,
    LOCKED_BOOL             NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CARRIER_REVISION_ORD    NUMBER ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE MAINT_PRGM ADD CHECK ( MAINT_PRGM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM ADD CHECK ( MAINT_PRGM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM ADD CHECK ( MAINT_PRGM_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM ADD CHECK ( MAINT_PRGM_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM ADD CHECK ( MAINT_PRGM_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM ADD CHECK ( ACTV_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM ADD CHECK ( ACTV_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM ADD CHECK ( LOCKED_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE MAINT_PRGM ADD CHECK ( RSTAT_CD    IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE MAINT_PRGM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN MAINT_PRGM.MAINT_PRGM_DB_ID
IS
  'This is the primary key of a maintenance program.' ;
  COMMENT ON COLUMN MAINT_PRGM.MAINT_PRGM_ID
IS
  'This is the primary key of a maintenance program.' ;
  COMMENT ON COLUMN MAINT_PRGM.MAINT_PRGM_DEFN_DB_ID
IS
  'This is a foreign key to the maintenance program definition (MAINT_PRGM_DEFN).' ;
  COMMENT ON COLUMN MAINT_PRGM.MAINT_PRGM_DEFN_ID
IS
  'This is a foreign key to the maintenance program definition (MAINT_PRGM_DEFN).' ;
  COMMENT ON COLUMN MAINT_PRGM.MAINT_PRGM_STATUS_DB_ID
IS
  'This is a foreign key to the maintenance program status (REF_MAINT_PRGM_STATUS).' ;
  COMMENT ON COLUMN MAINT_PRGM.MAINT_PRGM_STATUS_CD
IS
  'This is a foreign key to the maintenance program status (REF_MAINT_PRGM_STATUS).' ;
  COMMENT ON COLUMN MAINT_PRGM.MAINT_PRGM_CD
IS
  'This is the maintenance program code. This field must be at least 200 characters.' ;
  COMMENT ON COLUMN MAINT_PRGM.MAINT_PRGM_SDESC
IS
  'This is the maintenance program name.' ;
  COMMENT ON COLUMN MAINT_PRGM.MAINT_PRGM_LDESC
IS
  'This is the maintenance program description.' ;
  COMMENT ON COLUMN MAINT_PRGM.EXT_REF_SDESC
IS
  'This is the maintenance program external revision number.' ;
  COMMENT ON COLUMN MAINT_PRGM.REVISION_ORD
IS
  'This is the maintenance program internal revision number.' ;
  COMMENT ON COLUMN MAINT_PRGM.ACTV_HR_DB_ID
IS
  'This is the human resource that activated the maintenance program.' ;
  COMMENT ON COLUMN MAINT_PRGM.ACTV_HR_ID
IS
  'This is the human resource that activated the maintenance program.' ;
  COMMENT ON COLUMN MAINT_PRGM.ACTV_DT
IS
  'This is the date that the maintenance program was activated.' ;
  COMMENT ON COLUMN MAINT_PRGM.ACTV_LDESC
IS
  'This is the maintenance program activation description.' ;
  COMMENT ON COLUMN MAINT_PRGM.ACTV_REF_SDESC
IS
  'This is the maintenance program activation reference.' ;
  COMMENT ON COLUMN MAINT_PRGM.LOCKED_BOOL
IS
  'This boolean indicates that the maintenance program is locked.' ;
  COMMENT ON COLUMN MAINT_PRGM.CARRIER_REVISION_ORD
IS
  'This is the operator?s revision number.' ;
  COMMENT ON COLUMN MAINT_PRGM.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN MAINT_PRGM.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN MAINT_PRGM.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN MAINT_PRGM.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN MAINT_PRGM.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_ORGHR_MAINTPRGM ON MAINT_PRGM
    (
      ACTV_HR_DB_ID ASC ,
      ACTV_HR_ID ASC
    ) ;
  CREATE INDEX IX_MAINTPRGMDEFN_MAINTPRGM ON MAINT_PRGM
    (
      MAINT_PRGM_DEFN_DB_ID ASC ,
      MAINT_PRGM_DEFN_ID ASC
    ) ;
ALTER TABLE MAINT_PRGM ADD CONSTRAINT PK_MAINT_PRGM PRIMARY KEY ( MAINT_PRGM_DB_ID, MAINT_PRGM_ID ) ;
ALTER TABLE MAINT_PRGM ADD CONSTRAINT IX_MAINTPRGMALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE MAINT_PRGM_CARRIER_MAP
  (
    MAINT_PRGM_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    MAINT_PRGM_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    CARRIER_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    CARRIER_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    LATEST_REVISION_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CARRIER_REVISION_ORD NUMBER ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE MAINT_PRGM_CARRIER_MAP ADD CHECK ( MAINT_PRGM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_CARRIER_MAP ADD CHECK ( MAINT_PRGM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_CARRIER_MAP ADD CHECK ( CARRIER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_CARRIER_MAP ADD CHECK ( CARRIER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_CARRIER_MAP ADD CHECK ( LATEST_REVISION_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_CARRIER_MAP ADD CHECK ( RSTAT_CD             IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_CARRIER_MAP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN MAINT_PRGM_CARRIER_MAP.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN MAINT_PRGM_CARRIER_MAP.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN MAINT_PRGM_CARRIER_MAP.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN MAINT_PRGM_CARRIER_MAP.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
CREATE UNIQUE INDEX IX_MAINTPRGM_MPCARMAP ON MAINT_PRGM_CARRIER_MAP
  (
    MAINT_PRGM_DB_ID ASC , MAINT_PRGM_ID ASC
  )
  ;
  CREATE INDEX IX_ORGCARRIER_MNTPGMCAR ON MAINT_PRGM_CARRIER_MAP
    (
      CARRIER_DB_ID ASC ,
      CARRIER_ID ASC
    ) ;
ALTER TABLE MAINT_PRGM_CARRIER_MAP ADD CONSTRAINT PK_MAINT_PRGM_CARRIER_MAP PRIMARY KEY ( MAINT_PRGM_DB_ID, MAINT_PRGM_ID, CARRIER_DB_ID, CARRIER_ID ) ;


CREATE TABLE MAINT_PRGM_CARRIER_TEMP_TASK
  (
    MAINT_PRGM_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    MAINT_PRGM_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    CARRIER_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    CARRIER_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO           NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CHECK ( MAINT_PRGM_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CHECK ( MAINT_PRGM_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CHECK ( CARRIER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CHECK ( CARRIER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CHECK ( TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CHECK ( TASK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE MAINT_PRGM_CARRIER_TEMP_TASK
IS
  'The MAINT_PRGM_TEMP_TASK table keeps track of the latest temporarily issued task for the maintenance program that was in REVISION at the time the task was temporarily issued.' ;
  COMMENT ON COLUMN MAINT_PRGM_CARRIER_TEMP_TASK.MAINT_PRGM_DEFN_DB_ID
IS
  'The foreign primary key for the maintenance program definition that has been temporarily issued for' ;
  COMMENT ON COLUMN MAINT_PRGM_CARRIER_TEMP_TASK.MAINT_PRGM_DEFN_ID
IS
  'The foreign primary key for the maintenance program definition that has been temporarily issued for' ;
  COMMENT ON COLUMN MAINT_PRGM_CARRIER_TEMP_TASK.CARRIER_DB_ID
IS
  'The foreign primary key for the carrier that has been temporarily issued for' ;
  COMMENT ON COLUMN MAINT_PRGM_CARRIER_TEMP_TASK.CARRIER_ID
IS
  'The foreign primary key for the carrier that has been temporarily issued for' ;
  COMMENT ON COLUMN MAINT_PRGM_CARRIER_TEMP_TASK.TASK_DEFN_DB_ID
IS
  'The foreign primary key for the task definition of the task that has been temporarily issued' ;
  COMMENT ON COLUMN MAINT_PRGM_CARRIER_TEMP_TASK.TASK_DEFN_ID
IS
  'The foreign primary key for the task definition of the task that has been temporarily issued' ;
  COMMENT ON COLUMN MAINT_PRGM_CARRIER_TEMP_TASK.TASK_DB_ID
IS
  'The foreign key of the task that has been temporarily issued' ;
  COMMENT ON COLUMN MAINT_PRGM_CARRIER_TEMP_TASK.TASK_ID
IS
  'The foreign key of the task that has been temporarily issued' ;
  COMMENT ON COLUMN MAINT_PRGM_CARRIER_TEMP_TASK.RSTAT_CD
IS
  'Status of the record ' ;
  COMMENT ON COLUMN MAINT_PRGM_CARRIER_TEMP_TASK.REVISION_NO
IS
  'A number incremented each time the record is modified ' ;
  COMMENT ON COLUMN MAINT_PRGM_CARRIER_TEMP_TASK.CTRL_DB_ID
IS
  'The identifier of the database that owns the record ' ;
  COMMENT ON COLUMN MAINT_PRGM_CARRIER_TEMP_TASK.CREATION_DT
IS
  'The data and time at which the record was inserted' ;
  COMMENT ON COLUMN MAINT_PRGM_CARRIER_TEMP_TASK.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record' ;
  COMMENT ON COLUMN MAINT_PRGM_CARRIER_TEMP_TASK.REVISION_DT
IS
  'The data and time at which the record was last updated' ;
  COMMENT ON COLUMN MAINT_PRGM_CARRIER_TEMP_TASK.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN MAINT_PRGM_CARRIER_TEMP_TASK.REVISION_USER
IS
  'The name of the user that last updated the record' ;
  CREATE INDEX IX_ORGCARRIER_MNTPRGMCRTMPTSK ON MAINT_PRGM_CARRIER_TEMP_TASK
    (
      CARRIER_DB_ID ASC ,
      CARRIER_ID ASC
    ) ;
  CREATE INDEX IX_TASKTASK_MNTPRGMCRTMPTSK ON MAINT_PRGM_CARRIER_TEMP_TASK
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
  CREATE INDEX IX_TASKDEFN_MNTPRGMCRTMPTSK ON MAINT_PRGM_CARRIER_TEMP_TASK
    (
      TASK_DEFN_DB_ID ASC ,
      TASK_DEFN_ID ASC
    ) ;
  CREATE INDEX IX_MNTPRGMDEFN_MNTPRGMCRTMPTSK ON MAINT_PRGM_CARRIER_TEMP_TASK
    (
      MAINT_PRGM_DEFN_DB_ID ASC ,
      MAINT_PRGM_DEFN_ID ASC
    ) ;
ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CONSTRAINT PK_MAINT_PRGM_CARRIER_TEMP_TAS PRIMARY KEY ( MAINT_PRGM_DEFN_DB_ID, MAINT_PRGM_DEFN_ID, CARRIER_DB_ID, CARRIER_ID, TASK_DEFN_DB_ID, TASK_DEFN_ID ) ;


CREATE TABLE MAINT_PRGM_DEFN
  (
    MAINT_PRGM_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    MAINT_PRGM_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD             VARCHAR2 (8) NOT NULL DEFERRABLE ,
    LAST_REVISION_ORD     NUMBER (4) NOT NULL DEFERRABLE ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE MAINT_PRGM_DEFN ADD CHECK ( MAINT_PRGM_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_DEFN ADD CHECK ( MAINT_PRGM_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_DEFN ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_DEFN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_DEFN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN MAINT_PRGM_DEFN.MAINT_PRGM_DEFN_DB_ID
IS
  'This is the primary key of a maintenance program definition.' ;
  COMMENT ON COLUMN MAINT_PRGM_DEFN.MAINT_PRGM_DEFN_ID
IS
  'This is the primary key of a maintenance program definition.' ;
  COMMENT ON COLUMN MAINT_PRGM_DEFN.ASSMBL_DB_ID
IS
  'This is the assembly that the maintenance program is on.' ;
  COMMENT ON COLUMN MAINT_PRGM_DEFN.ASSMBL_CD
IS
  'This is the assembly that the maintenance program is on.' ;
  COMMENT ON COLUMN MAINT_PRGM_DEFN.LAST_REVISION_ORD
IS
  'This is the latest revision number for the maintenance program.' ;
  COMMENT ON COLUMN MAINT_PRGM_DEFN.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN MAINT_PRGM_DEFN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN MAINT_PRGM_DEFN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN MAINT_PRGM_DEFN.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN MAINT_PRGM_DEFN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EQPASSMBL_MAINTPRGMDEFN ON MAINT_PRGM_DEFN
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
ALTER TABLE MAINT_PRGM_DEFN ADD CONSTRAINT PK_MAINT_PRGM_DEFN PRIMARY KEY ( MAINT_PRGM_DEFN_DB_ID, MAINT_PRGM_DEFN_ID ) ;


CREATE TABLE MAINT_PRGM_LOG
  (
    MAINT_PRGM_DB_ID NUMBER (10) NOT NULL ,
    MAINT_PRGM_ID    NUMBER (10) NOT NULL ,
    MAINT_LOG_ID     NUMBER (10) NOT NULL ,
    HR_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    LOG_DT           DATE NOT NULL DEFERRABLE ,
    LOG_ACTION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LOG_ACTION_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    LOG_REASON_DB_ID NUMBER (10) ,
    LOG_REASON_CD    VARCHAR2 (16) ,
    USER_NOTE        VARCHAR2 (4000) ,
    SYSTEM_NOTE      VARCHAR2 (4000) ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE MAINT_PRGM_LOG ADD CHECK ( MAINT_PRGM_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE MAINT_PRGM_LOG ADD CHECK ( MAINT_PRGM_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE MAINT_PRGM_LOG ADD CHECK ( MAINT_LOG_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE MAINT_PRGM_LOG ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_LOG ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_LOG ADD CHECK ( LOG_ACTION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_LOG ADD CHECK ( LOG_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_LOG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE MAINT_PRGM_LOG
IS
  'This table will store log information, such as lock/unlock history; it is similar to the TASK_TASK_LOG table.' ;
  COMMENT ON COLUMN MAINT_PRGM_LOG.MAINT_PRGM_DB_ID
IS
  'Foreign key to MAIN_PRGM table.' ;
  COMMENT ON COLUMN MAINT_PRGM_LOG.MAINT_PRGM_ID
IS
  'Foreign key to MAIN_PRGM table.' ;
  COMMENT ON COLUMN MAINT_PRGM_LOG.HR_DB_ID
IS
  'Foreign key to ORG_HR table.  These columns indicate the user who performed an action, such as locking/unlocking, on the Maintenance Program.' ;
  COMMENT ON COLUMN MAINT_PRGM_LOG.HR_ID
IS
  'Foreign key to ORG_HR table.  These columns indicate the user who performed an action, such as locking/unlocking, on the Maintenance Program.' ;
  COMMENT ON COLUMN MAINT_PRGM_LOG.LOG_DT
IS
  'Indicates the date/time at which the log entry is entered into the database.' ;
  COMMENT ON COLUMN MAINT_PRGM_LOG.LOG_ACTION_DB_ID
IS
  'Foreign key to the REF_LOG_ACTION table.' ;
  COMMENT ON COLUMN MAINT_PRGM_LOG.LOG_ACTION_CD
IS
  'Foreign key to the REF_LOG_ACTION table.' ;
  COMMENT ON COLUMN MAINT_PRGM_LOG.LOG_REASON_DB_ID
IS
  'Foreign key to the REF_LOG_REASON table. Two new entries will be created in this table for lock/unlock Maintenance Program history: MT_LOCK and MT_UNLOCK.' ;
  COMMENT ON COLUMN MAINT_PRGM_LOG.LOG_REASON_CD
IS
  'Foreign key to the REF_LOG_REASON table. Two new entries will be created in this table for lock/unlock Maintenance Program history: MT_LOCK and MT_UNLOCK.' ;
  COMMENT ON COLUMN MAINT_PRGM_LOG.USER_NOTE
IS
  'Stores the user entered notes. The lock/unlock Maintenance Program capability will not make use of this column.' ;
  COMMENT ON COLUMN MAINT_PRGM_LOG.SYSTEM_NOTE
IS
  'Stores notes programmatically generated by Maintenix, such as "Maintenance program locked.".' ;
  CREATE INDEX IX_ORGHR_MAINTPRGMLOG ON MAINT_PRGM_LOG
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
  CREATE INDEX IX_MAINTPRGM_MAINTPRGMLOG ON MAINT_PRGM_LOG
    (
      MAINT_PRGM_DB_ID ASC ,
      MAINT_PRGM_ID ASC
    ) ;
ALTER TABLE MAINT_PRGM_LOG ADD CONSTRAINT PK_MAINT_PRGM_LOG PRIMARY KEY ( MAINT_PRGM_DB_ID, MAINT_PRGM_ID, MAINT_LOG_ID ) ;
ALTER TABLE MAINT_PRGM_LOG ADD CONSTRAINT IX_MAINTPRGLOGMLOGID_UNQ UNIQUE ( MAINT_LOG_ID ) ;


CREATE TABLE MAINT_PRGM_TASK
  (
    MAINT_PRGM_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    MAINT_PRGM_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DB_ID            NUMBER (10) ,
    TASK_ID               NUMBER (10) ,
    ON_CONDITION_BOOL     NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    UNASSIGN_BOOL         NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    GROUP_CD              VARCHAR2 (80) ,
    TASK_REV_REASON_DB_ID NUMBER (10) ,
    TASK_REV_REASON_CD    VARCHAR2 (8) ,
    ACTION_NOTE           VARCHAR2 (4000) ,
    ACTION_HR_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    ACTION_HR_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    ACTION_DT             DATE NOT NULL DEFERRABLE ,
    ISSUE_ORD             NUMBER DEFAULT 1 NOT NULL DEFERRABLE ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE MAINT_PRGM_TASK ADD CHECK ( MAINT_PRGM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_TASK ADD CHECK ( MAINT_PRGM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_TASK ADD CHECK ( TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_TASK ADD CHECK ( TASK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_TASK ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_TASK ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_TASK ADD CHECK ( ON_CONDITION_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_TASK ADD CHECK ( UNASSIGN_BOOL     IN (0, 1)) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_TASK ADD CHECK ( TASK_REV_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_TASK ADD CHECK ( ACTION_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_TASK ADD CHECK ( ACTION_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_TASK ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE MAINT_PRGM_TASK ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN MAINT_PRGM_TASK.MAINT_PRGM_DB_ID
IS
  'This is a foreign key to the maintenance program (MAINT_PRGM).' ;
  COMMENT ON COLUMN MAINT_PRGM_TASK.MAINT_PRGM_ID
IS
  'This is a foreign key to the maintenance program (MAINT_PRGM).' ;
  COMMENT ON COLUMN MAINT_PRGM_TASK.TASK_DEFN_DB_ID
IS
  'This is a foreign key to the task definition (TASK_DEFN).' ;
  COMMENT ON COLUMN MAINT_PRGM_TASK.TASK_DEFN_ID
IS
  'This is a foreign key to the task definition (TASK_DEFN).' ;
  COMMENT ON COLUMN MAINT_PRGM_TASK.TASK_DB_ID
IS
  'This is a foreign key to the exact revision of the task definition (TASK_TASK).' ;
  COMMENT ON COLUMN MAINT_PRGM_TASK.TASK_ID
IS
  'This is a foreign key to the exact revision of the task definition (TASK_TASK).' ;
  COMMENT ON COLUMN MAINT_PRGM_TASK.ON_CONDITION_BOOL
IS
  'This indicates if the task is created is on condition.' ;
  COMMENT ON COLUMN MAINT_PRGM_TASK.UNASSIGN_BOOL
IS
  'This indicates if the task has been unassigned from the maintenance program.' ;
  COMMENT ON COLUMN MAINT_PRGM_TASK.GROUP_CD
IS
  'This is the grouping code of the task definition. This code can be used to generate reports for different sections of the maintenance program.' ;
  COMMENT ON COLUMN MAINT_PRGM_TASK.TASK_REV_REASON_DB_ID
IS
  'This is the reason provided when a task is assigned to or unassigned from the maintenance program. This is a foreign key to the task definition revision reason (REF_TASK_REV_REASON).' ;
  COMMENT ON COLUMN MAINT_PRGM_TASK.TASK_REV_REASON_CD
IS
  'This is the reason provided when a task is assigned to or unassigned from the maintenance program. This is a foreign key to the task definition revision reason (REF_TASK_REV_REASON).' ;
  COMMENT ON COLUMN MAINT_PRGM_TASK.ACTION_NOTE
IS
  'This is the note provided when a task is assigned to or unassigned from the maintenance program.' ;
  COMMENT ON COLUMN MAINT_PRGM_TASK.ACTION_HR_DB_ID
IS
  'This is the human resource that assigned the task to or unassigned the task from the maintenance program.' ;
  COMMENT ON COLUMN MAINT_PRGM_TASK.ACTION_HR_ID
IS
  'This is the human resource that assigned the task to or unassigned the task from the maintenance program.' ;
  COMMENT ON COLUMN MAINT_PRGM_TASK.ACTION_DT
IS
  'This is the date when the task is assigned to or unassigned from the maintenance program.' ;
  COMMENT ON COLUMN MAINT_PRGM_TASK.ISSUE_ORD
IS
  'This is the issue number for the task.' ;
  COMMENT ON COLUMN MAINT_PRGM_TASK.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN MAINT_PRGM_TASK.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN MAINT_PRGM_TASK.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN MAINT_PRGM_TASK.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN MAINT_PRGM_TASK.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_ORGHR_MAINTPRGMTASK ON MAINT_PRGM_TASK
    (
      ACTION_HR_DB_ID ASC ,
      ACTION_HR_ID ASC
    ) ;
  CREATE INDEX IX_TASKTASK_MAINTPRGMTASK ON MAINT_PRGM_TASK
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
  CREATE INDEX IX_TASKDEFN_MAINTPRGMTASK ON MAINT_PRGM_TASK
    (
      TASK_DEFN_DB_ID ASC ,
      TASK_DEFN_ID ASC
    ) ;
  CREATE INDEX IX_MAINTPRGM_MAINTPRGMTASK ON MAINT_PRGM_TASK
    (
      MAINT_PRGM_DB_ID ASC ,
      MAINT_PRGM_ID ASC
    ) ;
ALTER TABLE MAINT_PRGM_TASK ADD CONSTRAINT PK_MAINT_PRGM_TASK PRIMARY KEY ( MAINT_PRGM_DB_ID, MAINT_PRGM_ID, TASK_DEFN_DB_ID, TASK_DEFN_ID ) ;


CREATE TABLE MIM_CALC
  (
    CALC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    CALC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    CALC_MDESC      VARCHAR2 (500) ,
    EQN_LDESC       VARCHAR2 (4000) ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE MIM_CALC ADD CHECK ( CALC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_CALC ADD CHECK ( CALC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_CALC ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_CALC ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_CALC ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_CALC ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE MIM_CALC ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE MIM_CALC
IS
  'User Defined Calculations: Defines all customized usage parameters that require a calculation to derive the actual value stored in the system.' ;
  COMMENT ON COLUMN MIM_CALC.CALC_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN MIM_CALC.CALC_ID
IS
  'Unique identifier assigned from Sequence CALC_ID_SEQ.' ;
  COMMENT ON COLUMN MIM_CALC.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL' ;
  COMMENT ON COLUMN MIM_CALC.ASSMBL_CD
IS
  'FK to EQP_ASSMBL' ;
  COMMENT ON COLUMN MIM_CALC.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN MIM_CALC.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN MIM_CALC.CALC_MDESC
IS
  'A description of the calculation.' ;
  COMMENT ON COLUMN MIM_CALC.EQN_LDESC
IS
  'The PL/SQL code used for the calculation.' ;
  COMMENT ON COLUMN MIM_CALC.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN MIM_CALC.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN MIM_CALC.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN MIM_CALC.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN MIM_CALC.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQP_ASSMBL_MIMCALC_FK ON MIM_CALC
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
ALTER TABLE MIM_CALC ADD CONSTRAINT PK_MIM_CALC PRIMARY KEY ( CALC_DB_ID, CALC_ID ) ;


CREATE TABLE MIM_CALC_INPUT
  (
    CALC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    CALC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    INPUT_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID NUMBER (10) ,
    DATA_TYPE_ID    NUMBER (10) ,
    INPUT_CD        VARCHAR2 (80) ,
    INPUT_ORD       NUMBER (4) ,
    INPUT_QT FLOAT ,
    CONSTANT_BOOL  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE MIM_CALC_INPUT ADD CHECK ( CALC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_CALC_INPUT ADD CHECK ( CALC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_CALC_INPUT ADD CHECK ( INPUT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_CALC_INPUT ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_CALC_INPUT ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_CALC_INPUT ADD CHECK ( CONSTANT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE MIM_CALC_INPUT ADD CHECK ( RSTAT_CD      IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE MIM_CALC_INPUT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE MIM_CALC_INPUT
IS
  'Calculation Input Arguments: Enumerates all of the input values that need to be passed to the calculation procedure.' ;
  COMMENT ON COLUMN MIM_CALC_INPUT.CALC_DB_ID
IS
  'FK to MIM_CALC' ;
  COMMENT ON COLUMN MIM_CALC_INPUT.CALC_ID
IS
  'FK to MIM_CALC' ;
  COMMENT ON COLUMN MIM_CALC_INPUT.INPUT_ID
IS
  'A unique number (1..n) assigned in context of the calculation.' ;
  COMMENT ON COLUMN MIM_CALC_INPUT.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN MIM_CALC_INPUT.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN MIM_CALC_INPUT.INPUT_CD
IS
  'A name referenced in the calculation for argument matching.' ;
  COMMENT ON COLUMN MIM_CALC_INPUT.INPUT_ORD
IS
  'The ordinal for the placement of the argument in a set of calculation arguments.' ;
  COMMENT ON COLUMN MIM_CALC_INPUT.INPUT_QT
IS
  'The value for the argument if it is a constant. See CONSTANT_BOOL.' ;
  COMMENT ON COLUMN MIM_CALC_INPUT.CONSTANT_BOOL
IS
  'Indicates if a fixed value should always be passed into the equation or if the system should dynamically determine the input value through lookup.' ;
  COMMENT ON COLUMN MIM_CALC_INPUT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN MIM_CALC_INPUT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN MIM_CALC_INPUT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN MIM_CALC_INPUT.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN MIM_CALC_INPUT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE MIM_CALC_INPUT ADD CONSTRAINT PK_MIM_CALC_INPUT PRIMARY KEY ( CALC_DB_ID, CALC_ID, INPUT_ID ) ;


CREATE TABLE MIM_DATA_TYPE
  (
    DATA_TYPE_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ENG_UNIT_DB_ID    NUMBER (10) ,
    ENG_UNIT_CD       VARCHAR2 (8) ,
    DOMAIN_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DOMAIN_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ENTRY_PREC_QT     NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_CD      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DATA_TYPE_SDESC   VARCHAR2 (40) ,
    DATA_TYPE_MDESC   VARCHAR2 (500) ,
    FORECAST_BOOL     NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    UNIVERSAL_BOOL NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE MIM_DATA_TYPE ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_DATA_TYPE ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_DATA_TYPE ADD CHECK ( ENG_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_DATA_TYPE ADD CHECK ( DOMAIN_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_DATA_TYPE ADD CHECK ( ENTRY_PREC_QT BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_DATA_TYPE ADD CHECK ( FORECAST_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE MIM_DATA_TYPE ADD CHECK ( UNIVERSAL_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE MIM_DATA_TYPE ADD CHECK ( RSTAT_CD       IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE MIM_DATA_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE MIM_DATA_TYPE
IS
  'MIMOSA Data Type: This class models all indicators in the system and is based on the MIMOSA standard. It is further classified by engineering unit and domain type.' ;
  COMMENT ON COLUMN MIM_DATA_TYPE.DATA_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key. ' ;
  COMMENT ON COLUMN MIM_DATA_TYPE.DATA_TYPE_ID
IS
  'Unique identifier assigned from Sequence DATA_TYPE_ID_SEQ. ' ;
  COMMENT ON COLUMN MIM_DATA_TYPE.ENG_UNIT_DB_ID
IS
  'FK to REF_ENG_UNIT.' ;
  COMMENT ON COLUMN MIM_DATA_TYPE.ENG_UNIT_CD
IS
  'FK to REF_ENG_UNIT.' ;
  COMMENT ON COLUMN MIM_DATA_TYPE.DOMAIN_TYPE_DB_ID
IS
  'FK to REF_DOMAIN_TYPE.' ;
  COMMENT ON COLUMN MIM_DATA_TYPE.DOMAIN_TYPE_CD
IS
  'FK to REF_DOMAIN_TYPE.' ;
  COMMENT ON COLUMN MIM_DATA_TYPE.ENTRY_PREC_QT
IS
  'Entry Precision Quantity' ;
  COMMENT ON COLUMN MIM_DATA_TYPE.DATA_TYPE_CD
IS
  'A user assigned code that helps identify the parameter. ' ;
  COMMENT ON COLUMN MIM_DATA_TYPE.DATA_TYPE_SDESC
IS
  'A name used to label the parameter. ' ;
  COMMENT ON COLUMN MIM_DATA_TYPE.DATA_TYPE_MDESC
IS
  'A medium length description of the parameter. ' ;
  COMMENT ON COLUMN MIM_DATA_TYPE.FORECAST_BOOL
IS
  'Boolean flag indicating whether this datatype is used for forecasting' ;
  COMMENT ON COLUMN MIM_DATA_TYPE.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.' ;
  COMMENT ON COLUMN MIM_DATA_TYPE.UNIVERSAL_BOOL
IS
  'Boolean flag indicating if the measurement is universal to all assemblies or all assemblies of the same assembly class that the measurement is associated with.' ;
  COMMENT ON COLUMN MIM_DATA_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record. ' ;
  COMMENT ON COLUMN MIM_DATA_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN MIM_DATA_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN MIM_DATA_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN MIM_DATA_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE MIM_DATA_TYPE ADD CONSTRAINT "pk_MIM_DATA_TYPE" PRIMARY KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) ;
ALTER TABLE MIM_DATA_TYPE ADD CONSTRAINT IX_MIMDATATYPEALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE MIM_DATA_VALUE
  (
    DATA_TYPE_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_VALUE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_VALUE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE MIM_DATA_VALUE ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_DATA_VALUE ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_DATA_VALUE ADD CHECK ( DATA_VALUE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_DATA_VALUE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE MIM_DATA_VALUE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE MIM_DATA_VALUE
IS
  'The table MIM_DATA_VALUE is only used for data types with a domain type of ''CH''. Character data types represent dropdown lists, and this table will list all of the possible values for that data type.' ;
  COMMENT ON COLUMN MIM_DATA_VALUE.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN MIM_DATA_VALUE.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN MIM_DATA_VALUE.DATA_VALUE_DB_ID
IS
  'FK to MIM_DATA_VALUE.' ;
  COMMENT ON COLUMN MIM_DATA_VALUE.DATA_VALUE_CD
IS
  'FK to MIM_DATA_VALUE.' ;
  COMMENT ON COLUMN MIM_DATA_VALUE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN MIM_DATA_VALUE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN MIM_DATA_VALUE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN MIM_DATA_VALUE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN MIM_DATA_VALUE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE MIM_DATA_VALUE ADD CONSTRAINT "pk_MIM_DATA_VALUE" PRIMARY KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID, DATA_VALUE_DB_ID, DATA_VALUE_CD ) ;


CREATE TABLE MIM_DB
  (
    DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    SITE_CD        VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DB_TYPE_CD     VARCHAR2 (8) ,
    DB_NAME        VARCHAR2 (40) ,
    DB_LDESC       VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE MIM_DB ADD CHECK ( DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_DB ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE MIM_DB ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE MIM_DB
IS
  'MIMOSA Database.  This class defines a structure for the distributed system and is based on the MIMOSA standard.' ;
  COMMENT ON COLUMN MIM_DB.DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN MIM_DB.SITE_CD
IS
  'FK to MIM_SITE' ;
  COMMENT ON COLUMN MIM_DB.DB_TYPE_CD
IS
  'FK to REF_DB_TYPE' ;
  COMMENT ON COLUMN MIM_DB.DB_NAME
IS
  'Database (USER) name.' ;
  COMMENT ON COLUMN MIM_DB.DB_LDESC
IS
  'Database information.' ;
  COMMENT ON COLUMN MIM_DB.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN MIM_DB.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN MIM_DB.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN MIM_DB.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN MIM_DB.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE MIM_DB ADD CONSTRAINT PK_MIM_DB PRIMARY KEY ( DB_ID ) ;


CREATE TABLE MIM_LOCAL_DB
  (
    DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    EXEC_MODE_CD VARCHAR2 (8) ,
    COMPONENT_CD VARCHAR2 (8)
  ) ;
ALTER TABLE MIM_LOCAL_DB ADD CHECK ( DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE MIM_LOCAL_DB
IS
  'Local Database: A physical entity that records the actual entry in MIM_DB used by Tracker/Baseliner/Administrator. (Points to one MIM_DB entry).' ;
  COMMENT ON COLUMN MIM_LOCAL_DB.DB_ID
IS
  'FK to mim_db.' ;
  COMMENT ON COLUMN MIM_LOCAL_DB.EXEC_MODE_CD
IS
  'Indicates the READ/WRITE execution mode for the system. This is no longer used - replaced by REF_DB_TYPE on MIM_DB.' ;
  COMMENT ON COLUMN MIM_LOCAL_DB.COMPONENT_CD
IS
  'The organization code of the Maintenix instance.' ;
ALTER TABLE MIM_LOCAL_DB ADD CONSTRAINT PK_MIM_LOCAL_DB PRIMARY KEY ( DB_ID ) ;


CREATE TABLE MIM_PART_CHRDATA
  (
    ASSMBL_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ASSMBL_BOM_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE MIM_PART_CHRDATA ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_PART_CHRDATA ADD CHECK ( ASSMBL_BOM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_PART_CHRDATA ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_PART_CHRDATA ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_PART_CHRDATA ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE MIM_PART_CHRDATA ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE MIM_PART_CHRDATA
IS
  'MIMOSA Character DataType.  This class models all non-numeric indicators on a per equipment BOM entry position - it is the template of tracked non-numeric indicators.' ;
  COMMENT ON COLUMN MIM_PART_CHRDATA.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL_BOM' ;
  COMMENT ON COLUMN MIM_PART_CHRDATA.ASSMBL_CD
IS
  'FK to EQP_ASSMBL_BOM' ;
  COMMENT ON COLUMN MIM_PART_CHRDATA.ASSMBL_BOM_ID
IS
  'FK to EQP_ASSMBL_BOM' ;
  COMMENT ON COLUMN MIM_PART_CHRDATA.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN MIM_PART_CHRDATA.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN MIM_PART_CHRDATA.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN MIM_PART_CHRDATA.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN MIM_PART_CHRDATA.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN MIM_PART_CHRDATA.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN MIM_PART_CHRDATA.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE MIM_PART_CHRDATA ADD CONSTRAINT PK_MIM_PART_CHRDATA PRIMARY KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) ;


CREATE TABLE MIM_PART_INPUT
  (
    CALC_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    CALC_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    INPUT_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_PART_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_PART_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    INPUT_QT FLOAT ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE MIM_PART_INPUT ADD CHECK ( CALC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_PART_INPUT ADD CHECK ( CALC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_PART_INPUT ADD CHECK ( INPUT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_PART_INPUT ADD CHECK ( BOM_PART_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_PART_INPUT ADD CHECK ( BOM_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_PART_INPUT ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_PART_INPUT ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_PART_INPUT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE MIM_PART_INPUT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE MIM_PART_INPUT
IS
  'Calculation Part Dependencies: Identifies all of the part specific constants that are used in a usage calculation. So called ''K'' factors for adjusting usage are stored here.' ;
  COMMENT ON COLUMN MIM_PART_INPUT.CALC_DB_ID
IS
  'FK to MIM_CALC_INPUT' ;
  COMMENT ON COLUMN MIM_PART_INPUT.CALC_ID
IS
  'FK to MIM_CALC_INPUT' ;
  COMMENT ON COLUMN MIM_PART_INPUT.INPUT_ID
IS
  'FK to MIM_CALC_INPUT' ;
  COMMENT ON COLUMN MIM_PART_INPUT.BOM_PART_DB_ID
IS
  'FK to EQP_PART_BASELINE' ;
  COMMENT ON COLUMN MIM_PART_INPUT.BOM_PART_ID
IS
  'FK to EQP_PART_BASELINE' ;
  COMMENT ON COLUMN MIM_PART_INPUT.PART_NO_DB_ID
IS
  'FK to EQP_PART_BASELINE' ;
  COMMENT ON COLUMN MIM_PART_INPUT.PART_NO_ID
IS
  'FK to EQP_PART_BASELINE' ;
  COMMENT ON COLUMN MIM_PART_INPUT.INPUT_QT
IS
  'The numeric value for the part number specific constant used in the custom usage equation.' ;
  COMMENT ON COLUMN MIM_PART_INPUT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN MIM_PART_INPUT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN MIM_PART_INPUT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN MIM_PART_INPUT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN MIM_PART_INPUT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE MIM_PART_INPUT ADD CONSTRAINT PK_MIM_PART_INPUT PRIMARY KEY ( CALC_DB_ID, CALC_ID, INPUT_ID, BOM_PART_DB_ID, BOM_PART_ID, PART_NO_DB_ID, PART_NO_ID ) ;


CREATE TABLE MIM_PART_NUMDATA
  (
    ASSMBL_DB_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD                  VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ASSMBL_BOM_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_PART_NO_DB_ID       NUMBER (10) ,
    ASSMBL_PART_NO_ID          NUMBER (10) ,
    AGGREGATED_DATA_TYPE_DB_ID NUMBER (10) ,
    AGGREGATED_DATA_TYPE_ID    NUMBER (10) ,
    CUST_CALC_BOOL             NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    EQN_LDESC                  VARCHAR2 (4000) ,
    RSTAT_CD                   NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT                DATE NOT NULL DEFERRABLE ,
    REVISION_DT                DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER              VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE MIM_PART_NUMDATA ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_PART_NUMDATA ADD CHECK ( ASSMBL_BOM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_PART_NUMDATA ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_PART_NUMDATA ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE MIM_PART_NUMDATA ADD CHECK ( CUST_CALC_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE MIM_PART_NUMDATA ADD CHECK ( RSTAT_CD       IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE MIM_PART_NUMDATA ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE MIM_PART_NUMDATA
IS
  'MIMOSA Numeric DataType.  This class models all numeric indicators on a per equipment BOM entry position - it is the template of tracked numeric indicators.' ;
  COMMENT ON COLUMN MIM_PART_NUMDATA.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL_BOM' ;
  COMMENT ON COLUMN MIM_PART_NUMDATA.ASSMBL_CD
IS
  'FK to EQP_ASSMBL_BOM' ;
  COMMENT ON COLUMN MIM_PART_NUMDATA.ASSMBL_BOM_ID
IS
  'FK to EQP_ASSMBL_BOM' ;
  COMMENT ON COLUMN MIM_PART_NUMDATA.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN MIM_PART_NUMDATA.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN MIM_PART_NUMDATA.ASSMBL_PART_NO_DB_ID
IS
  'FK to EQP_PART_NO which is the assembly part number the data type associated to.' ;
  COMMENT ON COLUMN MIM_PART_NUMDATA.ASSMBL_PART_NO_ID
IS
  'FK to EQP_PART_NO which is the assembly part number the data type associated to.' ;
  COMMENT ON COLUMN MIM_PART_NUMDATA.AGGREGATED_DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE referencing to the super data type which contains the sum of values of the assembly part-specific usage parameters at each thrust rating.' ;
  COMMENT ON COLUMN MIM_PART_NUMDATA.AGGREGATED_DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE referencing to the super data type which contains the sum of values of the assembly part-specific usage parameters at each thrust rating.' ;
  COMMENT ON COLUMN MIM_PART_NUMDATA.CUST_CALC_BOOL
IS
  'Indicates if this usage parameter is calculated from a user defined calculation.' ;
  COMMENT ON COLUMN MIM_PART_NUMDATA.EQN_LDESC
IS
  'A string identifying the PL/SQL procedure or package method that performs the custom calculation.' ;
  COMMENT ON COLUMN MIM_PART_NUMDATA.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN MIM_PART_NUMDATA.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN MIM_PART_NUMDATA.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN MIM_PART_NUMDATA.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN MIM_PART_NUMDATA.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ASSMBL_PART_NO ON MIM_PART_NUMDATA
    (
      ASSMBL_PART_NO_DB_ID ASC ,
      ASSMBL_PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_AG_DATATYPE ON MIM_PART_NUMDATA
    (
      AGGREGATED_DATA_TYPE_DB_ID ASC ,
      AGGREGATED_DATA_TYPE_ID ASC
    ) ;
ALTER TABLE MIM_PART_NUMDATA ADD CONSTRAINT PK_MIM_PART_NUMDATA PRIMARY KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID ) ;


CREATE TABLE MIM_RSTAT
  (
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    RSTAT_SDESC    VARCHAR2 (80) ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE MIM_RSTAT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE MIM_RSTAT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE MIM_RSTAT
IS
  'MIMOSA Record Status.  This class enumerates all of the status objects. It is intended to provide an enterprise wide architecture for dealing with deleted rows when relational integrety must be retained and for shadow copies of data during replication.' ;
  COMMENT ON COLUMN MIM_RSTAT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN MIM_RSTAT.RSTAT_SDESC
IS
  'A description of the record status values.' ;
  COMMENT ON COLUMN MIM_RSTAT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN MIM_RSTAT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN MIM_RSTAT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN MIM_RSTAT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE MIM_RSTAT ADD CONSTRAINT "pk_MIM_RSTAT" PRIMARY KEY ( RSTAT_CD ) ;


CREATE TABLE MIM_SITE
  (
    SITE_CD        VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    SITE_NAME      VARCHAR2 (40) NOT NULL DEFERRABLE ,
    COMPANY_SDESC  VARCHAR2 (80) ,
    BUS_LDESC      VARCHAR2 (4000) ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE MIM_SITE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE MIM_SITE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE MIM_SITE
IS
  'MIMOSA Site.  This class is a container to collect together a number of databases, that together, operate at a site.' ;
  COMMENT ON COLUMN MIM_SITE.SITE_CD
IS
  'An enterprise-wide unqiue identifier for all sites that have Maintenix server.' ;
  COMMENT ON COLUMN MIM_SITE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN MIM_SITE.SITE_NAME
IS
  'A name used to label the site.' ;
  COMMENT ON COLUMN MIM_SITE.COMPANY_SDESC
IS
  'The name of the company who owns Maintenix at the site.' ;
  COMMENT ON COLUMN MIM_SITE.BUS_LDESC
IS
  'A description of the business operating Maintenix.' ;
  COMMENT ON COLUMN MIM_SITE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN MIM_SITE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN MIM_SITE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN MIM_SITE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE MIM_SITE ADD CONSTRAINT PK_MIM_SITE PRIMARY KEY ( SITE_CD ) ;


CREATE TABLE MT_CORE_FLEET_LIST
  (
    EVENT_DB_ID       NUMBER (10) ,
    EVENT_ID          NUMBER (10) ,
    TASK_INV_NO_DB_ID NUMBER (10) ,
    TASK_INV_NO_ID    NUMBER (10) ,
    REPL_SCHED_ID     NUMBER (10) ,
    BARCODE_SDESC     VARCHAR2 (80) ,
    DEVIATION_QT FLOAT ,
    USAGE_REM_QT FLOAT ,
    SCHED_DEAD_DT   DATE ,
    INVENTORY_KEY   VARCHAR2 (400) ,
    INV_NO_SDESC    VARCHAR2 (400) ,
    ASSMBL_CD       VARCHAR2 (8) ,
    AUTHORITY_DB_ID NUMBER (10) ,
    AUTHORITY_ID    NUMBER (10) ,
    DOMAIN_TYPE_CD  VARCHAR2 (8) ,
    ENG_UNIT_CD     VARCHAR2 (8) ,
    ENG_UNIT_MULT_QT FLOAT ,
    PRECISION_QT FLOAT ,
    SOFT_DEADLINE        NUMBER (1) ,
    PLAN_BY_DATE         DATE ,
    AC_INV_NO_DB_ID      NUMBER (10) ,
    AC_INV_NO_ID         NUMBER (10) ,
    DEADLINE_EVENT_DB_ID NUMBER (10) ,
    DEADLINE_EVENT_ID    NUMBER (10) ,
    SORT_DUE_DT          DATE ,
    EXT_SCHED_DEAD_DT    DATE ,
    CONFIG_POS_SDESC     VARCHAR2 (4000)
  ) ;
COMMENT ON TABLE MT_CORE_FLEET_LIST
IS
  'Topical aggregation table for materialized data related to Fleet Due List tab. Updated via trigger on MT_DRV_SCHED_INFO. The trigger excutes logic in MT_CORE_FLEET_LIST_PKG and will update rows as needed.

This table is transactional with changes in evt_sched_dead. A consequence is that it will always be in sync. However, before using for other pages or reports, please examine the logic found in the MT_CORE_FLEET_LIST_PKG and verify that the data conforms to your business needs.

For performance reasons, there are no defined constraints. This table relies on source table constraint enforcement.' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.EVENT_DB_ID
IS
  'FK to mt_drv_sched_info. The event in evt_sched_dead that is applicable to Fleet Due List.  ' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.EVENT_ID
IS
  'FK to mt_drv_sched_info. The event in evt_sched_dead that is applicable to Fleet Due List.  ' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.TASK_INV_NO_DB_ID
IS
  'FK to inv_inv. The inventory that is the main inventory on this task.' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.TASK_INV_NO_ID
IS
  'FK to inv_inv. The inventory that is the main inventory on this task.' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.REPL_SCHED_ID
IS
  'A reference to the replacement part requirement for replacement tasks and their sub-tasks.' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.BARCODE_SDESC
IS
  'Barcode defined for this task' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.DEVIATION_QT
IS
  'Reference to EVT_SCHED_DEAD. The amount by which the deadline can "slip" past its due date before being considered overdue.' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.USAGE_REM_QT
IS
  'Reference to EVT_SCHED_DEAD. The difference between the current usage count (DATA_TYPE_ID) and SCHED_DEAD_QT.' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.SCHED_DEAD_DT
IS
  'Reference to EVT_SCHED_DEAD. The scheduled deadline for the event.' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.INVENTORY_KEY
IS
  'Concatenated FK to aircraft inv_no_db_id and inv_no_id. ' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.INV_NO_SDESC
IS
  'Description of the aircraft' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.ASSMBL_CD
IS
  'Assembly code of the aircraft' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.AUTHORITY_DB_ID
IS
  'FK to authority assigned to aircraft in ORG_AUTHORITY.' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.AUTHORITY_ID
IS
  'FK to authority assigned to aircraft in ORG_AUTHORITY.' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.DOMAIN_TYPE_CD
IS
  'Reference to the drv_domain_type_cd in mt_drv_sched_info. ' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.ENG_UNIT_CD
IS
  'Reference to the drv_eng_unit_cd in mt_drv_sched_info. ' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.ENG_UNIT_MULT_QT
IS
  'Reference to the drv_eng_unit_cd in mt_drv_sched_info. ' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.PRECISION_QT
IS
  'Reference to the drv_precision_qt in mt_drv_sched_info. ' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.SOFT_DEADLINE
IS
  'Reference to soft_deadline_bool in sched_stask.' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.PLAN_BY_DATE
IS
  'Reference to plan_by_dtl in sched_stask.' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.AC_INV_NO_DB_ID
IS
  'FK to inv_inv of aircraft' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.AC_INV_NO_ID
IS
  'FK to inv_inv of aircraft. ' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.DEADLINE_EVENT_DB_ID
IS
  'Reference to the driving event in mt_drv_sched_info. ' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.DEADLINE_EVENT_ID
IS
  'Reference to the driving event in mt_drv_sched_info. ' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.SORT_DUE_DT
IS
  'Reference to sort_due_dt  in mt_drv_sched_info. ' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.EXT_SCHED_DEAD_DT
IS
  'Reference to the driving ext_dead_dt  in mt_drv_sched_info. ' ;
  COMMENT ON COLUMN MT_CORE_FLEET_LIST.CONFIG_POS_SDESC
IS
  'Calculated via call to get_inv_repl_sdesc global function.' ;
  CREATE INDEX IX_MT_CORE_FLEET_SORT ON MT_CORE_FLEET_LIST
    (
      SORT_DUE_DT ASC ,
      BARCODE_SDESC ASC
    ) ;
  CREATE INDEX IX_MT_CORE_FLEET_EVTEVENTID ON MT_CORE_FLEET_LIST
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;


CREATE TABLE MT_DRV_SCHED_INFO
  (
    EVENT_DB_ID       NUMBER (10) ,
    EVENT_ID          NUMBER (10) ,
    DRV_EVENT_DB_ID   NUMBER (10) ,
    DRV_EVENT_ID      NUMBER (10) ,
    EVT_EXT_DEAD_DT   DATE ,
    DRV_EXT_DEAD_DT   DATE ,
    EVT_SCHED_DEAD_DT DATE ,
    DRV_SCHED_DEAD_DT DATE ,
    EVT_PLAN_BY_DT    DATE ,
    DRV_PLAN_BY_DT    DATE ,
    DRV_DEVIATION_QT FLOAT ,
    DRV_USAGE_REM_QT FLOAT ,
    DRV_DOMAIN_TYPE_CD  VARCHAR2 (8) ,
    DRV_ENG_UNIT_CD     VARCHAR2 (8) ,
    DRV_PRECISION_QT    NUMBER (10) ,
    DRV_DATA_TYPE_CD    VARCHAR2 (80) ,
    DRV_DATA_TYPE_DB_ID NUMBER (10) ,
    DRV_DATA_TYPE_ID    NUMBER (10) ,
    SORT_DUE_DT         DATE
  ) ;
COMMENT ON TABLE MT_DRV_SCHED_INFO
IS
  'This is a materialization table that stores the relevant scheduling data for each driving event in the EVT_SCHED_DEAD table. It is kept consistant via trigger on EVT_SCHED_DEAD that uses logic in the mt_rep_int_evt_scded_pkg to then insert and or delete rows in this table.

Data is stored to remove the need to call functions to calculate date values at runtime. getExtendedDeadlineDt and getDueDate_PlanByDate do not need to be called and instead queries can directly use values stored in the table. 

The table itself stores a reference to the base task and the driving task. It then uses the driving tasks information (if driving task is different) for all columns with DRV_ prefix. For example drv_deviation_qt is determined by this logic: nvl(drv_tasks.deviation_qt   , base_task.deviation_qt). ' ;
  COMMENT ON COLUMN MT_DRV_SCHED_INFO.EVENT_DB_ID
IS
  'FK to evt_sched_dead.' ;
  COMMENT ON COLUMN MT_DRV_SCHED_INFO.EVENT_ID
IS
  'FK to evt_sched_dead.' ;
  COMMENT ON COLUMN MT_DRV_SCHED_INFO.DRV_EVENT_DB_ID
IS
  'Reference to evt_event_rel rel_event_db_id.' ;
  COMMENT ON COLUMN MT_DRV_SCHED_INFO.DRV_EVENT_ID
IS
  'Reference to evt_event_rel rel_event_id.' ;
  COMMENT ON COLUMN MT_DRV_SCHED_INFO.EVT_EXT_DEAD_DT
IS
  'Calculated value of extended deadline date for this event if it exists. ' ;
  COMMENT ON COLUMN MT_DRV_SCHED_INFO.DRV_EXT_DEAD_DT
IS
  'Calculated value of the driving tasks extended deadline date for this event if it exists. ' ;
  COMMENT ON COLUMN MT_DRV_SCHED_INFO.EVT_SCHED_DEAD_DT
IS
  'Tasks scheduled deadline date. ' ;
  COMMENT ON COLUMN MT_DRV_SCHED_INFO.DRV_SCHED_DEAD_DT
IS
  'Driving tasks scheduled deadline date' ;
  COMMENT ON COLUMN MT_DRV_SCHED_INFO.EVT_PLAN_BY_DT
IS
  'Tasks plan by date. ' ;
  COMMENT ON COLUMN MT_DRV_SCHED_INFO.DRV_PLAN_BY_DT
IS
  'Driving tasks plan by date. ' ;
  COMMENT ON COLUMN MT_DRV_SCHED_INFO.DRV_DEVIATION_QT
IS
  'Driving tasks  amount by which the deadline can "slip" past its due date before being considered overdue.' ;
  COMMENT ON COLUMN MT_DRV_SCHED_INFO.DRV_USAGE_REM_QT
IS
  'Driving tasks difference between the current usage count (DATA_TYPE_ID) and SCHED_DEAD_QT.' ;
  COMMENT ON COLUMN MT_DRV_SCHED_INFO.DRV_DOMAIN_TYPE_CD
IS
  'Driving tasks FK to REF_DOMAIN_TYPE.' ;
  COMMENT ON COLUMN MT_DRV_SCHED_INFO.DRV_ENG_UNIT_CD
IS
  'Driving tasks FK to REF_ENG_UNIT.' ;
  COMMENT ON COLUMN MT_DRV_SCHED_INFO.DRV_PRECISION_QT
IS
  'Driving tasks Entry Precision Quantity in mim_data_type.' ;
  COMMENT ON COLUMN MT_DRV_SCHED_INFO.DRV_DATA_TYPE_CD
IS
  'Driving tasks user assigned code that helps identify the parameter referenced in mim_data_type. ' ;
  COMMENT ON COLUMN MT_DRV_SCHED_INFO.DRV_DATA_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key. ' ;
  COMMENT ON COLUMN MT_DRV_SCHED_INFO.DRV_DATA_TYPE_ID
IS
  'Unique identifier assigned from Sequence DATA_TYPE_ID_SEQ. ' ;
  COMMENT ON COLUMN MT_DRV_SCHED_INFO.SORT_DUE_DT
IS
  'Calculated value that looks at base task plan by date, driving tasks plan by date, and finally extended deadline dates of both. The first non-null value is stored.' ;
  CREATE INDEX IX_MT_REPINT_DED ON MT_DRV_SCHED_INFO
    (
      DRV_EVENT_DB_ID ASC ,
      DRV_EVENT_ID ASC
    ) ;
  CREATE INDEX IX_MT_REPINT_EVT ON MT_DRV_SCHED_INFO
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
  CREATE INDEX IX_MTDRVSCH_DRVDT ON MT_DRV_SCHED_INFO
    (
      DRV_SCHED_DEAD_DT ASC
    ) ;


CREATE TABLE MT_ENH_APPLICABILITY
  (
    INV_NO_DB_ID   NUMBER (10) ,
    INV_NO_ID      NUMBER (10) ,
    BOM_PART_DB_ID NUMBER (10) ,
    BOM_PART_ID    NUMBER (10) ,
    PART_NO_DB_ID  NUMBER (10) ,
    PART_NO_ID     NUMBER (10)
  ) ;
COMMENT ON TABLE MT_ENH_APPLICABILITY
IS
  'Table that is secondary filtering (applicability) source for enhanced part search queries. Created and maintained from source tables via trigger as part of MX_CORE_GENERATE_PART_SEARCH_INDEX job. This aggregates changes made to the applicability of parts and then maps to inventory. In the query it uses inverse logic. That is, given an inventory, if I have a row returned then it is not applicable. ' ;
  COMMENT ON COLUMN MT_ENH_APPLICABILITY.INV_NO_DB_ID
IS
  'FK to inv_inv' ;
  COMMENT ON COLUMN MT_ENH_APPLICABILITY.INV_NO_ID
IS
  'FK to inv_inv' ;
  COMMENT ON COLUMN MT_ENH_APPLICABILITY.BOM_PART_DB_ID
IS
  'FK to eqp_part_baseline' ;
  COMMENT ON COLUMN MT_ENH_APPLICABILITY.BOM_PART_ID
IS
  'FK to eqp_part_baseline' ;
  COMMENT ON COLUMN MT_ENH_APPLICABILITY.PART_NO_DB_ID
IS
  'FK to eqp_part_no' ;
  COMMENT ON COLUMN MT_ENH_APPLICABILITY.PART_NO_ID
IS
  'FK to eqp_part_no' ;
  CREATE INDEX IX_MT_APPL_BOM ON MT_ENH_APPLICABILITY
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC ,
      BOM_PART_DB_ID ASC ,
      BOM_PART_ID ASC ,
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;


CREATE TABLE MT_ENH_BOM_APL_LOG
  (
    BOM_PART_DB_ID NUMBER (10) ,
    BOM_PART_ID    NUMBER (10) ,
    UD_DT          DATE
  ) ;
COMMENT ON TABLE MT_ENH_BOM_APL_LOG
IS
  'Logging table used for enhanced part search that will be consumed during MX_CORE_GENERATE_PART_SEARCH_INDEX job. Updated via trigger on eqp_bom_part' ;
  COMMENT ON COLUMN MT_ENH_BOM_APL_LOG.BOM_PART_DB_ID
IS
  'FK to eqp_bom_part' ;
  COMMENT ON COLUMN MT_ENH_BOM_APL_LOG.BOM_PART_ID
IS
  'FK to eqp_bom_part' ;
  COMMENT ON COLUMN MT_ENH_BOM_APL_LOG.UD_DT
IS
  'SYSDATE when last updated.' ;


CREATE TABLE MT_ENH_PART_NO_LOG
  (
    PART_NO_DB_ID NUMBER (10) ,
    PART_NO_ID    NUMBER (10) ,
    UD_DT         DATE
  ) ;
COMMENT ON TABLE MT_ENH_PART_NO_LOG
IS
  'Logging table used for enhanced part search that will be consumed during MX_CORE_GENERATE_PART_SEARCH_INDEX job. Updated via trigger on eqp_part_no.' ;
  COMMENT ON COLUMN MT_ENH_PART_NO_LOG.PART_NO_DB_ID
IS
  'FK to eqp_part_no' ;
  COMMENT ON COLUMN MT_ENH_PART_NO_LOG.PART_NO_ID
IS
  'FK to eqp_part_no' ;
  COMMENT ON COLUMN MT_ENH_PART_NO_LOG.UD_DT
IS
  'SYSDATE when last updated' ;


CREATE TABLE MT_ENH_PART_SEARCH
  (
    EQP_PART_NO_PART_NO_DB_ID    NUMBER (10) ,
    EQP_PART_NO_PART_NO_ID       NUMBER (10) ,
    EQP_BOM_PART_BOM_PART_DB_ID  NUMBER (10) ,
    EQP_BOM_PART_BOM_PART_ID     NUMBER (10) ,
    EQP_ASSMBL_POS_ASSMBL_DB_ID  NUMBER (10) ,
    EQP_ASSMBL_POS_ASSMBL_BOM_ID NUMBER (10) ,
    EQP_ASSMBL_POS_ASSMBL_POS_ID NUMBER (10) ,
    SUBASSY_POS_ASSMBL_POS_ID    NUMBER (10) ,
    EQP_PART_NO_ALT_ID           VARCHAR2 (64) ,
    EQP_PART_NO_PART_NO_OEM      VARCHAR2 (80) ,
    EQP_PART_NO_PART_NO_SDESC    VARCHAR2 (100) ,
    EQP_BOM_PART_ALT_ID          VARCHAR2 (64) ,
    EQP_BOM_PART_BOM_PART_CD     VARCHAR2 (128) ,
    EQP_BOM_PART_BOM_PART_NAME   VARCHAR2 (100) ,
    EQP_ASSMBL_POS_ASSMBL_CD     VARCHAR2 (8) ,
    EQP_ASSMBL_POS_EQP_POS_CD    VARCHAR2 (200) ,
    SUBASSY_POS_POS              VARCHAR2 (200) ,
    EQP_BOM_PART_CONDITIONS      VARCHAR2 (4000) ,
    REF_INV_CLASS_TRACKED        NUMBER (10) ,
    EQP_ASSMBL_ASSMBL_CLASS_CD   VARCHAR2 (8) ,
    EQP_BOM_PART_APPL_EFF_LDESC  VARCHAR2 (4000)
  ) ;
COMMENT ON TABLE MT_ENH_PART_SEARCH
IS
  'Table that is source for enhanced part search queries. Created and maintained from source tables via trigger as part of MX_CORE_GENERATE_PART_SEARCH_INDEX job. The job generates a materialization of the baseline information for a part.' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.EQP_PART_NO_PART_NO_DB_ID
IS
  'FK to eqp_part_no' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.EQP_PART_NO_PART_NO_ID
IS
  'FK  to eqp_part_no' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.EQP_BOM_PART_BOM_PART_DB_ID
IS
  'FK  to eqp_bom_part' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.EQP_BOM_PART_BOM_PART_ID
IS
  'FK  to eqp_bom_part' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.EQP_ASSMBL_POS_ASSMBL_DB_ID
IS
  'FK  to eqp_assmbl_pos' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.EQP_ASSMBL_POS_ASSMBL_BOM_ID
IS
  'FK  to eqp_assmbl_pos' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.EQP_ASSMBL_POS_ASSMBL_POS_ID
IS
  'FK  to eqp_assmbl_pos' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.SUBASSY_POS_ASSMBL_POS_ID
IS
  'Reference to eqp_assmbl_pos' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.EQP_PART_NO_ALT_ID
IS
  'FK to eqp_part_no' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.EQP_PART_NO_PART_NO_OEM
IS
  'The Original Equipment Manufacturer''s part number.' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.EQP_PART_NO_PART_NO_SDESC
IS
  'A label used to describe the part.' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.EQP_BOM_PART_ALT_ID
IS
  'FK to eqp_bom_part' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.EQP_BOM_PART_BOM_PART_CD
IS
  'A code used to indentify, or classify this BOM part. It is not necessarily unique.' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.EQP_BOM_PART_BOM_PART_NAME
IS
  'A label used to identify this bill of material entry. This is often the standard part number shown in the illustrated parts catalog.' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.EQP_ASSMBL_POS_ASSMBL_CD
IS
  'FK to EQP_ASSMBL_BOM. The log card for which this position is defined.' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.EQP_ASSMBL_POS_EQP_POS_CD
IS
  'The standard, defining code for this position (eg. "left", "right", etc.)' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.SUBASSY_POS_POS
IS
  'The standard, defining code for the sub assembly  position (eg. "left", "right", etc.)' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.EQP_BOM_PART_CONDITIONS
IS
  'This is the description of the conditional applicability for this part group' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.REF_INV_CLASS_TRACKED
IS
  'Does this item represent the physical BOM item itself? Every BOM item that is not a "System", is an actual physical component. If tracked_bool=1, then this BOM part represents the physical BOM item. There can be only 1 Bom Part entry with tracked_bool=1 per BOM item.' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.EQP_ASSMBL_ASSMBL_CLASS_CD
IS
  'FK to REF_ASSMBL_CLASS. Identifies the class of the assembly, which is used to activate various Maintenix functionalities.' ;
  COMMENT ON COLUMN MT_ENH_PART_SEARCH.EQP_BOM_PART_APPL_EFF_LDESC
IS
  'This is the applicability expression for a particular BOM part slot. This is used when a particular BOM part slot exists on some aircraft, but not on others.' ;
  CREATE INDEX IX_ENPARTSEARCH_SEARCHPARAM ON MT_ENH_PART_SEARCH
    (
      EQP_ASSMBL_POS_ASSMBL_CD,
      UPPER(EQP_PART_NO_PART_NO_SDESC),
      UPPER(EQP_PART_NO_PART_NO_OEM)
    ) ;
  CREATE INDEX IX_ENPARTSEARCH_PARTIDS ON MT_ENH_PART_SEARCH
    (
      EQP_PART_NO_PART_NO_DB_ID ASC ,
      EQP_PART_NO_PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_ENPARTSEARCH_BOMIDS ON MT_ENH_PART_SEARCH
    (
      EQP_BOM_PART_BOM_PART_DB_ID ASC ,
      EQP_BOM_PART_BOM_PART_ID ASC
    ) ;
ALTER TABLE MT_ENH_PART_SEARCH ADD CONSTRAINT IX_ENH_PART_SEARCH_UNQ UNIQUE ( EQP_PART_NO_PART_NO_DB_ID , EQP_PART_NO_PART_NO_ID , EQP_BOM_PART_BOM_PART_DB_ID , EQP_BOM_PART_BOM_PART_ID , EQP_ASSMBL_POS_ASSMBL_DB_ID , EQP_ASSMBL_POS_ASSMBL_CD , EQP_ASSMBL_POS_ASSMBL_BOM_ID , EQP_ASSMBL_POS_ASSMBL_POS_ID , SUBASSY_POS_ASSMBL_POS_ID , SUBASSY_POS_POS ) ;


CREATE TABLE MT_ENH_PRT_APL_LOG
  (
    BOM_PART_DB_ID NUMBER (10) ,
    BOM_PART_ID    NUMBER (10) ,
    PART_NO_DB_ID  NUMBER (10) ,
    PART_NO_ID     NUMBER (10) ,
    UD_DT          DATE
  ) ;
COMMENT ON TABLE MT_ENH_PRT_APL_LOG
IS
  'Logging table used for enhanced part search that will be consumed during MX_CORE_GENERATE_PART_SEARCH_INDEX job. updated via trigger on eqp_part_baseline' ;
  COMMENT ON COLUMN MT_ENH_PRT_APL_LOG.BOM_PART_DB_ID
IS
  'FK to eqp_part_baseline' ;
  COMMENT ON COLUMN MT_ENH_PRT_APL_LOG.BOM_PART_ID
IS
  'FK to eqp_part_baseline' ;
  COMMENT ON COLUMN MT_ENH_PRT_APL_LOG.PART_NO_DB_ID
IS
  'FK to eqp_part_baseline' ;
  COMMENT ON COLUMN MT_ENH_PRT_APL_LOG.PART_NO_ID
IS
  'FK to eqp_part_baseline' ;
  COMMENT ON COLUMN MT_ENH_PRT_APL_LOG.UD_DT
IS
  'SYSDATE when last updated' ;


CREATE TABLE MT_INV_AC_AUTHORITY
  (
    INV_NO_DB_ID    NUMBER (10) NOT NULL ,
    INV_NO_ID       NUMBER (10) NOT NULL ,
    HR_DB_ID        NUMBER (10) NOT NULL ,
    HR_ID           NUMBER (10) NOT NULL ,
    AUTHORITY_DB_ID NUMBER (10) ,
    AUTHORITY_ID    NUMBER (10)
  ) ;
COMMENT ON TABLE MT_INV_AC_AUTHORITY
IS
  'Materialization table of mappings between user''s authorities on Aircraft inventory. Updated via triggers on org_hr_authority, inv_inv, org_hr.  
This is a direct replacement for the vw_inv_ac_authority and can be directly joined instead of using the view.  
Transactionally consistent with source tables.' ;
  COMMENT ON COLUMN MT_INV_AC_AUTHORITY.INV_NO_DB_ID
IS
  'FK to inv_inv' ;
  COMMENT ON COLUMN MT_INV_AC_AUTHORITY.INV_NO_ID
IS
  'FK to inv_inv' ;
  COMMENT ON COLUMN MT_INV_AC_AUTHORITY.HR_DB_ID
IS
  'FK to org_hr' ;
  COMMENT ON COLUMN MT_INV_AC_AUTHORITY.HR_ID
IS
  'FK to org_hr' ;
  COMMENT ON COLUMN MT_INV_AC_AUTHORITY.AUTHORITY_DB_ID
IS
  'FK to org_hr_authority' ;
  COMMENT ON COLUMN MT_INV_AC_AUTHORITY.AUTHORITY_ID
IS
  'FK to org_hr_authority' ;
  CREATE INDEX IX_MT_INVAUTHHR ON MT_INV_AC_AUTHORITY
    (
      HR_DB_ID ASC ,
      HR_ID ASC ,
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;


CREATE TABLE MT_MAT_REQ_STAT_LOG
  (
    SCHED_DB_ID           NUMBER (10) ,
    SCHED_ID              NUMBER (10) ,
    REQUEST_STATUS_DB_ID  NUMBER ,
    REQUEST_STATUS_CD     VARCHAR2 (16) ,
    LATEST_ESTIMATED_TIME DATE ,
    REQ_PART_DB_ID        VARCHAR2 (200) ,
    REQ_PART_ID           VARCHAR2 (200) ,
    WARNING_BOOL          NUMBER ,
    REQ_PART_SDESC        VARCHAR2 (20)
  )
  PCTFREE 0 PCTUSED 99 STORAGE
  (
    PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS UNLIMITED FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT
  ) ;
COMMENT ON TABLE MT_MAT_REQ_STAT_LOG
IS
  'This table is used as intermediate storage for results for Materials Request Status Job. It is not to be used directly. Instead, please execute JOIN or logic operations on MV_MATERIALS_REQUEST_STATUS object. ' ;
  COMMENT ON COLUMN MT_MAT_REQ_STAT_LOG.SCHED_DB_ID
IS
  'FK to sched_stask' ;
  COMMENT ON COLUMN MT_MAT_REQ_STAT_LOG.SCHED_ID
IS
  'FK to sched_stask' ;
  COMMENT ON COLUMN MT_MAT_REQ_STAT_LOG.REQUEST_STATUS_DB_ID
IS
  'Ref to ref_material_req_status' ;
  COMMENT ON COLUMN MT_MAT_REQ_STAT_LOG.REQUEST_STATUS_CD
IS
  'Ref to ref_material_req_status' ;
  COMMENT ON COLUMN MT_MAT_REQ_STAT_LOG.LATEST_ESTIMATED_TIME
IS
  'Ref to req_part updated_eta or est_arrival_dt' ;
  COMMENT ON COLUMN MT_MAT_REQ_STAT_LOG.REQ_PART_DB_ID
IS
  'FK to req_part' ;
  COMMENT ON COLUMN MT_MAT_REQ_STAT_LOG.REQ_PART_ID
IS
  'FK to req_part' ;
  COMMENT ON COLUMN MT_MAT_REQ_STAT_LOG.WARNING_BOOL
IS
  'Description of part' ;


CREATE TABLE ORG_ADDRESS
  (
    ADDRESS_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    ADDRESS_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    COUNTRY_DB_ID  NUMBER (10) ,
    COUNTRY_CD     VARCHAR2 (8) ,
    STATE_CD       VARCHAR2 (8) ,
    ADDRESS_LINE1  VARCHAR2 (500) ,
    ADDRESS_LINE2  VARCHAR2 (500) ,
    CITY_NAME      VARCHAR2 (40) ,
    ZIP_CD         VARCHAR2 (10) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_ADDRESS ADD CHECK ( ADDRESS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ADDRESS ADD CHECK ( COUNTRY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ADDRESS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_ADDRESS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ADDRESS ADD CONSTRAINT PK_ORG_ADDRESS PRIMARY KEY ( ADDRESS_DB_ID, ADDRESS_ID ) ;


CREATE TABLE ORG_ADDRESS_LIST
  (
    ORG_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    ADDRESS_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    ADDRESS_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_ADDRESS_LIST ADD CHECK ( ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ADDRESS_LIST ADD CHECK ( ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ADDRESS_LIST ADD CHECK ( ADDRESS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ADDRESS_LIST ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_ADDRESS_LIST ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_ORGORG_ORGADDRESSLIST ON ORG_ADDRESS_LIST
  (
    ORG_DB_ID ASC ,
    ORG_ID ASC
  ) ;
CREATE INDEX IX_REFADDRESS_ORGADDRESSLIST ON ORG_ADDRESS_LIST
  (
    ADDRESS_DB_ID ASC ,
    ADDRESS_ID ASC
  ) ;
ALTER TABLE ORG_ADDRESS_LIST ADD CONSTRAINT PK_ORG_ADDRESS_LIST PRIMARY KEY ( ORG_DB_ID, ORG_ID, ADDRESS_DB_ID, ADDRESS_ID ) ;


CREATE TABLE ORG_AUTHORITY
  (
    AUTHORITY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    AUTHORITY_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    AUTHORITY_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    AUTHORITY_NAME  VARCHAR2 (40) NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_AUTHORITY ADD CONSTRAINT CK_ORGAUTHFAILFACTOR_AUTH CHECK ( AUTHORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_AUTHORITY ADD CHECK ( AUTHORITY_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_AUTHORITY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_AUTHORITY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_AUTHORITY
IS
  'This table outlines the original user that had/has authority over an inventory item.' ;
  COMMENT ON COLUMN ORG_AUTHORITY.AUTHORITY_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN ORG_AUTHORITY.AUTHORITY_ID
IS
  'PK - populated by AUTHORITY_ID sequence.' ;
  COMMENT ON COLUMN ORG_AUTHORITY.AUTHORITY_CD
IS
  'Authority Code.' ;
  COMMENT ON COLUMN ORG_AUTHORITY.AUTHORITY_NAME
IS
  'Authority name.' ;
  COMMENT ON COLUMN ORG_AUTHORITY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_AUTHORITY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ORG_AUTHORITY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_AUTHORITY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN ORG_AUTHORITY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE ORG_AUTHORITY ADD CONSTRAINT PK_ORG_AUTHORITY PRIMARY KEY ( AUTHORITY_DB_ID, AUTHORITY_ID ) ;
ALTER TABLE ORG_AUTHORITY ADD CONSTRAINT IX_ORGAUTHORITYALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE ORG_AUTH_FAIL_FACTOR
  (
    AUTHORITY_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    AUTHORITY_ID      NUMBER (10) CONSTRAINT NN_ORGAUTHFALFACTOR_AUTHORITY NOT NULL DEFERRABLE ,
    FAIL_FACTOR_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    FAIL_FACTOR_DB_ID NUMBER (10) CONSTRAINT NN_ORGATHFAILFCTR_FAILFACTOCD NOT NULL DEFERRABLE ,
    CALC_WEIGHT_QT FLOAT ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE CONSTRAINT NN_ORGAUTHFAILFACTOR_RVSNDT NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_AUTH_FAIL_FACTOR ADD CONSTRAINT CK_ORG_HR_AUTH_AUTHDBIDID CHECK ( AUTHORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_AUTH_FAIL_FACTOR ADD CONSTRAINT CK_ORG_HR_AUTH_AUTHDBID CHECK ( AUTHORITY_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_AUTH_FAIL_FACTOR ADD CHECK ( FAIL_FACTOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_AUTH_FAIL_FACTOR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_AUTH_FAIL_FACTOR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_AUTH_FAIL_FACTOR
IS
  'This entity defines the users who have authority over particular inventory items.' ;
  COMMENT ON COLUMN ORG_AUTH_FAIL_FACTOR.AUTHORITY_DB_ID
IS
  'FK to ORG_AUTHORITY.' ;
  COMMENT ON COLUMN ORG_AUTH_FAIL_FACTOR.AUTHORITY_ID
IS
  'FK to ORG_AUTHORITY.' ;
  COMMENT ON COLUMN ORG_AUTH_FAIL_FACTOR.FAIL_FACTOR_CD
IS
  'FK to REF_FAIL_FACTOR.' ;
  COMMENT ON COLUMN ORG_AUTH_FAIL_FACTOR.FAIL_FACTOR_DB_ID
IS
  'FK to REF_FAIL_FACTOR.' ;
  COMMENT ON COLUMN ORG_AUTH_FAIL_FACTOR.CALC_WEIGHT_QT
IS
  'Quantity.' ;
  COMMENT ON COLUMN ORG_AUTH_FAIL_FACTOR.RSTAT_CD
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN ORG_AUTH_FAIL_FACTOR.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ORG_AUTH_FAIL_FACTOR.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_AUTH_FAIL_FACTOR.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN ORG_AUTH_FAIL_FACTOR.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_ORGAUTHORITY_ORGAUTHFAILFAC ON ORG_AUTH_FAIL_FACTOR
    (
      AUTHORITY_DB_ID ASC ,
      AUTHORITY_ID ASC
    ) ;
ALTER TABLE ORG_AUTH_FAIL_FACTOR ADD CONSTRAINT PK_ORG_AUTH_FAIL_FACTOR PRIMARY KEY ( AUTHORITY_DB_ID, AUTHORITY_ID, FAIL_FACTOR_CD, FAIL_FACTOR_DB_ID ) ;


CREATE TABLE ORG_CARRIER
  (
    CARRIER_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    CARRIER_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    CARRIER_CD         VARCHAR2 (8) ,
    ORG_DB_ID          NUMBER (10) ,
    ORG_ID             NUMBER (10) ,
    IATA_CD            VARCHAR2 (3) ,
    ICAO_CD            VARCHAR2 (4) ,
    CALLSIGN_SDESC     VARCHAR2 (80) ,
    AUTHORITY_DB_ID    NUMBER (10) ,
    AUTHORITY_ID       NUMBER (10) ,
    EXTRN_CTRL_BOOL    NUMBER (1) DEFAULT 0 ,
    SUPPLY_CHAIN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SUPPLY_CHAIN_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_CARRIER ADD CHECK ( CARRIER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_CARRIER ADD CHECK ( CARRIER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_CARRIER ADD CHECK ( ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_CARRIER ADD CHECK ( ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_CARRIER ADD CHECK ( AUTHORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_CARRIER ADD CHECK ( AUTHORITY_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_CARRIER ADD CHECK ( EXTRN_CTRL_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE ORG_CARRIER ADD CHECK ( SUPPLY_CHAIN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_CARRIER ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_CARRIER ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_CARRIER
IS
  'Carrier: The carrier entity represents the organization that actually operates the aircraft in terms of an air carrier. The aircraft may be leased (ie owned by someone other than the operator: the relationship from Inventory Owner to Inventory models ownership). This only applies for Aircraft.' ;
  COMMENT ON COLUMN ORG_CARRIER.CARRIER_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN ORG_CARRIER.CARRIER_ID
IS
  'Unique identifier assigned from Sequence CARRIER_ID_SEQ.' ;
  COMMENT ON COLUMN ORG_CARRIER.ORG_DB_ID
IS
  'FK to ORG_ORG.  The organizations that represents this carrier in the organization hierarchy (and acts as the carrier''s hook into the permission matrix.)' ;
  COMMENT ON COLUMN ORG_CARRIER.ORG_ID
IS
  'FK to ORG_ORG.  The organizations that represents this carrier in the organization hierarchy (and acts as the carrier''s hook into the permission matrix.)' ;
  COMMENT ON COLUMN ORG_CARRIER.IATA_CD
IS
  'This is the International Air Transport Association airline designator.' ;
  COMMENT ON COLUMN ORG_CARRIER.ICAO_CD
IS
  'This is the International Civil Aviation Organization airline designator.' ;
  COMMENT ON COLUMN ORG_CARRIER.CALLSIGN_SDESC
IS
  'This is the operator?s call sign.' ;
  COMMENT ON COLUMN ORG_CARRIER.AUTHORITY_DB_ID
IS
  'Defines authroity that the operator/carrier currently has' ;
  COMMENT ON COLUMN ORG_CARRIER.EXTRN_CTRL_BOOL
IS
  'Attribute to determine if an inventory item is controlled by maintenix.  When set to FALSE identifies an inventory item as being controlled by Maintenix.  When TRUE, the inventory item is controlled outside of Maintenix.' ;
  COMMENT ON COLUMN ORG_CARRIER.SUPPLY_CHAIN_DB_ID
IS
  'FK to REF_SUPPLY_CHAIN. The ref_supply_chain indicates how the part requests are fulfilled, either internally or externally.' ;
  COMMENT ON COLUMN ORG_CARRIER.SUPPLY_CHAIN_CD
IS
  'FK to REF_SUPPLY_CHAIN. The ref_supply_chain indicates how the part requests are fulfilled, either internally or externally.' ;
  COMMENT ON COLUMN ORG_CARRIER.RSTAT_CD
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN ORG_CARRIER.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ORG_CARRIER.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_CARRIER.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ORG_CARRIER.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGAUTHORITY_ORGCARRIER ON ORG_CARRIER
    (
      AUTHORITY_DB_ID ASC ,
      AUTHORITY_ID ASC
    ) ;
  CREATE INDEX IX_ORGORG_ORGCARRIER ON ORG_CARRIER
    (
      ORG_DB_ID ASC ,
      ORG_ID ASC
    ) ;
ALTER TABLE ORG_CARRIER ADD CONSTRAINT PK_ORG_CARRIER PRIMARY KEY ( CARRIER_DB_ID, CARRIER_ID ) ;
ALTER TABLE ORG_CARRIER ADD CONSTRAINT IX_ORGCARRIERALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE ORG_CONTACT
  (
    CONTACT_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    CONTACT_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    CONTACT_NAME   VARCHAR2 (40) ,
    JOB_TITLE      VARCHAR2 (80) ,
    PHONE_PH       VARCHAR2 (20) ,
    FAX_PH         VARCHAR2 (20) ,
    ADDRESS_EMAIL  VARCHAR2 (40) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_CONTACT ADD CHECK ( CONTACT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_CONTACT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_CONTACT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_CONTACT ADD CONSTRAINT PK_ORG_CONTACT PRIMARY KEY ( CONTACT_DB_ID, CONTACT_ID ) ;


CREATE TABLE ORG_CONTACT_LIST
  (
    ORG_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    CONTACT_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    CONTACT_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_CONTACT_LIST ADD CHECK ( ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_CONTACT_LIST ADD CHECK ( ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_CONTACT_LIST ADD CHECK ( CONTACT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_CONTACT_LIST ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_CONTACT_LIST ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_ORGORG_ORGCONTACT ON ORG_CONTACT_LIST
  (
    ORG_DB_ID ASC ,
    ORG_ID ASC
  ) ;
CREATE INDEX IX_REFCONTACT_ORGCONTACTLIST ON ORG_CONTACT_LIST
  (
    CONTACT_DB_ID ASC ,
    CONTACT_ID ASC
  ) ;
ALTER TABLE ORG_CONTACT_LIST ADD CONSTRAINT PK_ORG_CONTACT_LIST PRIMARY KEY ( ORG_DB_ID, ORG_ID, CONTACT_DB_ID, CONTACT_ID ) ;


CREATE TABLE ORG_CREW_SCHEDULE
  (
    CREW_DB_ID               NUMBER (10) NOT NULL ,
    CREW_ID                  NUMBER (10) NOT NULL ,
    CREW_SCHEDULE_ID         NUMBER (10) NOT NULL ,
    CREW_SHIFT_PATTERN_DB_ID NUMBER (10) NOT NULL ,
    CREW_SHIFT_PATTERN_ID    NUMBER (10) NOT NULL ,
    START_DT                 DATE ,
    END_DT                   DATE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL
  ) ;
ALTER TABLE ORG_CREW_SCHEDULE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE ORG_CREW_SCHEDULE ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE ORG_CREW_SCHEDULE ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE ORG_CREW_SCHEDULE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
CREATE INDEX IX_USP_ORGCREWSCHEDULE ON ORG_CREW_SCHEDULE
  (
    CREW_SHIFT_PATTERN_DB_ID ASC ,
    CREW_SHIFT_PATTERN_ID ASC
  ) ;
CREATE INDEX IX_ORGWORKDEPT_ORGCREWSCHEDULE ON ORG_CREW_SCHEDULE
  (
    CREW_DB_ID ASC ,
    CREW_ID ASC
  ) ;
ALTER TABLE ORG_CREW_SCHEDULE ADD CONSTRAINT PK_ORG_CREW_SCHEDULE PRIMARY KEY ( CREW_DB_ID, CREW_ID, CREW_SCHEDULE_ID ) ;
ALTER TABLE ORG_CREW_SCHEDULE ADD CONSTRAINT IX_ORGCREWSCHEDULEALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE ORG_CREW_SHIFT_PLAN
  (
    CREW_DB_ID         NUMBER (10) NOT NULL ,
    CREW_ID            NUMBER (10) NOT NULL ,
    CREW_SHIFT_PLAN_ID NUMBER (10) NOT NULL ,
    SHIFT_DB_ID        NUMBER (10) ,
    SHIFT_ID           NUMBER (10) ,
    SCHEDULE_ID RAW (16) NOT NULL ,
    DAY_DT     DATE NOT NULL ,
    START_HOUR NUMBER (6,2) ,
    DURATION_QT FLOAT ,
    WORK_HOURS_QT FLOAT ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL
  ) ;
ALTER TABLE ORG_CREW_SHIFT_PLAN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE ORG_CREW_SHIFT_PLAN ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE ORG_CREW_SHIFT_PLAN ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE ORG_CREW_SHIFT_PLAN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
CREATE INDEX IX_SHIFTSHIFT_OCSP ON ORG_CREW_SHIFT_PLAN
  (
    SHIFT_DB_ID ASC ,
    SHIFT_ID ASC
  ) ;
ALTER TABLE ORG_CREW_SHIFT_PLAN ADD CONSTRAINT PK_ORG_CREW_SHIFT_PLAN PRIMARY KEY ( CREW_DB_ID, CREW_ID, CREW_SHIFT_PLAN_ID ) ;
ALTER TABLE ORG_CREW_SHIFT_PLAN ADD CONSTRAINT IX_ORGCREWSHIFTPLANALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE ORG_CREW_SHIFT_TASK
  (
    SCHED_DB_ID        NUMBER (10) NOT NULL ,
    SCHED_ID           NUMBER (10) NOT NULL ,
    CREW_DB_ID         NUMBER (10) NOT NULL ,
    CREW_ID            NUMBER (10) NOT NULL ,
    CREW_SHIFT_PLAN_ID NUMBER (10) NOT NULL ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE ORG_CREW_SHIFT_TASK ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE ORG_CREW_SHIFT_TASK ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE ORG_CREW_SHIFT_TASK ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE ORG_CREW_SHIFT_TASK ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
CREATE INDEX IX_ORCRHPL_ORCRSHTASK ON ORG_CREW_SHIFT_TASK
  (
    CREW_DB_ID ASC ,
    CREW_ID ASC ,
    CREW_SHIFT_PLAN_ID ASC
  ) ;
ALTER TABLE ORG_CREW_SHIFT_TASK ADD CONSTRAINT PK_ORG_CREW_SHIFT_TASK PRIMARY KEY ( SCHED_DB_ID, SCHED_ID, CREW_DB_ID, CREW_ID, CREW_SHIFT_PLAN_ID ) ;
ALTER TABLE ORG_CREW_SHIFT_TASK ADD CONSTRAINT IX_ORGCREWSHIFTTASKALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE ORG_DB
  (
    DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_DB ADD CHECK ( DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_DB ADD CHECK ( ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_DB ADD CHECK ( ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_DB ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_DB ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN ORG_DB.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN ORG_DB.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_DB.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ORG_DB.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGORG_ORGDB ON ORG_DB
    ( ORG_DB_ID ASC , ORG_ID ASC
    ) ;
ALTER TABLE ORG_DB ADD CONSTRAINT PK_ORG_DB PRIMARY KEY ( DB_ID, ORG_DB_ID, ORG_ID ) ;


CREATE TABLE ORG_DEPT_HR
  (
    DEPT_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    DEPT_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    HR_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_DEPT_HR ADD CHECK ( DEPT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_DEPT_HR ADD CHECK ( DEPT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_DEPT_HR ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_DEPT_HR ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_DEPT_HR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_DEPT_HR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_DEPT_HR
IS
  'Department Human Resources: This entity lists all of the human resources that are assigned to a particular department.' ;
  COMMENT ON COLUMN ORG_DEPT_HR.DEPT_DB_ID
IS
  'FK to ORG_WORK_DEPT. The department to which this HR is assigned.' ;
  COMMENT ON COLUMN ORG_DEPT_HR.DEPT_ID
IS
  'FK to ORG_WORK_DEPT. The department to which this HR is assigned.' ;
  COMMENT ON COLUMN ORG_DEPT_HR.HR_DB_ID
IS
  'FK to ORG_HR. The human resource that is assigned to this department.' ;
  COMMENT ON COLUMN ORG_DEPT_HR.HR_ID
IS
  'FK to ORG_HR. The human resource that is assigned to this department.' ;
  COMMENT ON COLUMN ORG_DEPT_HR.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_DEPT_HR.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ORG_DEPT_HR.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_DEPT_HR.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ORG_DEPT_HR.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGHR_ORGDEPTHR ON ORG_DEPT_HR
    ( HR_DB_ID ASC , HR_ID ASC
    ) ;
  CREATE INDEX IX_ORGWORKDEPT_ORGDEPTHR ON ORG_DEPT_HR
    (
      DEPT_DB_ID ASC ,
      DEPT_ID ASC
    ) ;
ALTER TABLE ORG_DEPT_HR ADD CONSTRAINT PK_ORG_DEPT_HR PRIMARY KEY ( DEPT_DB_ID, DEPT_ID, HR_DB_ID, HR_ID ) ;


CREATE TABLE ORG_HR
  (
    HR_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    USER_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    HR_CD              VARCHAR2 (40) NOT NULL DEFERRABLE ,
    PAY_METHOD_DB_ID   NUMBER (10) ,
    PAY_METHOD_CD      VARCHAR2 (8) ,
    ALL_AUTHORITY_BOOL NUMBER (1) DEFAULT 0 ,
    ALL_LOCATIONS_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ACTUAL_HOURLY_COST NUMBER (15,5) ,
    LIC_CARD_ISSUE_DT  DATE ,
    LIC_CARD_PRINT_DT  DATE ,
    LIC_CARD_CHANGE_DT DATE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_HR ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR ADD CHECK ( PAY_METHOD_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR ADD CHECK ( ALL_AUTHORITY_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE ORG_HR ADD CHECK ( ALL_LOCATIONS_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE ORG_HR ADD CHECK ( RSTAT_CD           IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_HR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_HR
IS
  'Human Resource.  This entity represents the personnel in the organization that support the maintenance and operations of Inventory.  Human Resources will be qualified with Labour Skills and will be identified in Fault reporting.' ;
  COMMENT ON COLUMN ORG_HR.HR_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN ORG_HR.HR_ID
IS
  'Unique idenifier assigned from Sequence HR_ID_SEQ.' ;
  COMMENT ON COLUMN ORG_HR.USER_ID
IS
  'FK UTL_USER.' ;
  COMMENT ON COLUMN ORG_HR.HR_CD
IS
  'An employee number or code.' ;
  COMMENT ON COLUMN ORG_HR.PAY_METHOD_DB_ID
IS
  'FK to REF_PAY_METHOD.' ;
  COMMENT ON COLUMN ORG_HR.PAY_METHOD_CD
IS
  'FK to REF_PAY_METHOD.' ;
  COMMENT ON COLUMN ORG_HR.ALL_AUTHORITY_BOOL
IS
  'Indicates if the user is marked to have authority over all inventory.' ;
  COMMENT ON COLUMN ORG_HR.ALL_LOCATIONS_BOOL
IS
  'If true material controller can see part requests in all  locations.' ;
  COMMENT ON COLUMN ORG_HR.ACTUAL_HOURLY_COST
IS
  'Approximate hourly cost for the employee. Used for accruing labour against tasks.' ;
  COMMENT ON COLUMN ORG_HR.LIC_CARD_ISSUE_DT
IS
  'This is a date when license card was issued to the human resource.' ;
  COMMENT ON COLUMN ORG_HR.LIC_CARD_PRINT_DT
IS
  'This is a date when license card was printed for the human resource.' ;
  COMMENT ON COLUMN ORG_HR.LIC_CARD_CHANGE_DT
IS
  'This is a date when license card information changed.' ;
  COMMENT ON COLUMN ORG_HR.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.' ;
  COMMENT ON COLUMN ORG_HR.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN ORG_HR.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ORG_HR.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_HR.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ORG_HR.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_UQ_USERID ON ORG_HR
    ( USER_ID ASC
    ) ;
ALTER TABLE ORG_HR ADD CONSTRAINT PK_ORG_HR PRIMARY KEY ( HR_DB_ID, HR_ID ) ;
ALTER TABLE ORG_HR ADD CONSTRAINT IX_ORGHRALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE ORG_HR_ATTACHMENT
  (
    ORG_HR_ATTACHMENT_ID NUMBER (10) NOT NULL DEFERRABLE ,
    HR_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    ATTACH_TYPE_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ATTACH_TYPE_CD       VARCHAR2 (8) ,
    ATTACH_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    ATTACH_BLOB BLOB ,
    ATTACH_LDESC        VARCHAR2 (4000) ,
    ATTACH_NOTE         VARCHAR2 (4000) ,
    ATTACH_FILENAME     VARCHAR2 (255) ,
    ATTACH_CONTENT_TYPE VARCHAR2 (80) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_HR_ATTACHMENT ADD CHECK ( ORG_HR_ATTACHMENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_ATTACHMENT ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_ATTACHMENT ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_ATTACHMENT ADD CHECK ( ATTACH_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_ATTACHMENT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_HR_ATTACHMENT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN ORG_HR_ATTACHMENT.ORG_HR_ATTACHMENT_ID
IS
  'Primary Key for hr attachments' ;
  COMMENT ON COLUMN ORG_HR_ATTACHMENT.HR_DB_ID
IS
  'PK and FK to org_hr table.' ;
  COMMENT ON COLUMN ORG_HR_ATTACHMENT.HR_ID
IS
  'PK and FK to org_hr table.' ;
  COMMENT ON COLUMN ORG_HR_ATTACHMENT.ATTACH_TYPE_DB_ID
IS
  'Foreign key to ref_attach_type table' ;
  COMMENT ON COLUMN ORG_HR_ATTACHMENT.ATTACH_TYPE_CD
IS
  'Foreign key to ref_attach_type table' ;
  COMMENT ON COLUMN ORG_HR_ATTACHMENT.ATTACH_SDESC
IS
  'Short description of the attachment' ;
  COMMENT ON COLUMN ORG_HR_ATTACHMENT.ATTACH_BLOB
IS
  'This is the actual attachment binary file
' ;
  COMMENT ON COLUMN ORG_HR_ATTACHMENT.ATTACH_LDESC
IS
  'long description of the attachment' ;
  COMMENT ON COLUMN ORG_HR_ATTACHMENT.ATTACH_NOTE
IS
  'this is an attachment note.' ;
  COMMENT ON COLUMN ORG_HR_ATTACHMENT.ATTACH_FILENAME
IS
  'This is the attachment file name' ;
  COMMENT ON COLUMN ORG_HR_ATTACHMENT.ATTACH_CONTENT_TYPE
IS
  'This is the attachment content type.' ;
  COMMENT ON COLUMN ORG_HR_ATTACHMENT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN ORG_HR_ATTACHMENT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN ORG_HR_ATTACHMENT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN ORG_HR_ATTACHMENT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN ORG_HR_ATTACHMENT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_ORGHR_ORGHRATTACHMENT ON ORG_HR_ATTACHMENT
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
ALTER TABLE ORG_HR_ATTACHMENT ADD CONSTRAINT PK_ORG_HR_ATTACHMENT PRIMARY KEY ( ORG_HR_ATTACHMENT_ID, HR_DB_ID, HR_ID ) ;


CREATE TABLE ORG_HR_AUTHORITY
  (
    AUTHORITY_DB_ID NUMBER (10) CONSTRAINT NN_ORGAUTHFALFACTOR_AUTH NOT NULL DEFERRABLE ,
    AUTHORITY_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    HR_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    NOTIFY_BOOL     NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_HR_AUTHORITY ADD CONSTRAINT CK_ORGHRAUTH_AUTH CHECK ( AUTHORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_AUTHORITY ADD CONSTRAINT CK_ORGHRAUTH_AUTHID CHECK ( AUTHORITY_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_AUTHORITY ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_AUTHORITY ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_AUTHORITY ADD CHECK ( NOTIFY_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE ORG_HR_AUTHORITY ADD CHECK ( RSTAT_CD    IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_HR_AUTHORITY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_HR_AUTHORITY
IS
  'Establishes the link between an authority and an human resource.' ;
  COMMENT ON COLUMN ORG_HR_AUTHORITY.AUTHORITY_DB_ID
IS
  'FK to ORG_AUTHORITY.' ;
  COMMENT ON COLUMN ORG_HR_AUTHORITY.AUTHORITY_ID
IS
  'FK to ORG_AUTHORITY.' ;
  COMMENT ON COLUMN ORG_HR_AUTHORITY.HR_DB_ID
IS
  'FK to ORG_HR.' ;
  COMMENT ON COLUMN ORG_HR_AUTHORITY.HR_ID
IS
  'FK to ORG_HR.' ;
  COMMENT ON COLUMN ORG_HR_AUTHORITY.NOTIFY_BOOL
IS
  'Notification flag.' ;
  COMMENT ON COLUMN ORG_HR_AUTHORITY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_HR_AUTHORITY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN ORG_HR_AUTHORITY.REVISION_DT
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_HR_AUTHORITY.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN ORG_HR_AUTHORITY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_ORGAUTHORITY_ORGHRAUTHORITY ON ORG_HR_AUTHORITY
    (
      AUTHORITY_DB_ID ASC ,
      AUTHORITY_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_ORGHRAUTHORITY ON ORG_HR_AUTHORITY
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
ALTER TABLE ORG_HR_AUTHORITY ADD CONSTRAINT PK_ORG_HR_AUTHORITY PRIMARY KEY ( AUTHORITY_DB_ID, AUTHORITY_ID, HR_DB_ID, HR_ID ) ;


CREATE TABLE ORG_HR_CERT
  (
    HR_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    CERT_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    CERTIFIER_HR_DB_ID NUMBER (10) ,
    CERTIFIER_HR_ID    NUMBER (10) ,
    CERTIFIER_CERT_ID  NUMBER (10) ,
    TYPE_CD            VARCHAR2 (8) NOT NULL DEFERRABLE ,
    KEY_LENGTH         NUMBER (5) NOT NULL DEFERRABLE ,
    PUBLIC_KEY         VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    PRIVATE_KEY        VARCHAR2 (4000) ,
    ACTIVE_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ISSUE_DT           DATE NOT NULL DEFERRABLE ,
    EXPIRE_DT          DATE NOT NULL DEFERRABLE ,
    HAND_SIGN_IMG BLOB ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_HR_CERT ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_CERT ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_CERT ADD CHECK ( CERT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_CERT ADD CHECK ( CERTIFIER_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_CERT ADD CHECK ( CERTIFIER_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_CERT ADD CHECK ( CERTIFIER_CERT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_CERT ADD CHECK ( ACTIVE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE ORG_HR_CERT ADD CHECK ( RSTAT_CD    IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_HR_CERT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_ORGHR_ORGHRCERT ON ORG_HR_CERT
  ( HR_DB_ID ASC , HR_ID ASC
  ) ;
CREATE INDEX IX_ORGHRCERT_ORGHRCERT ON ORG_HR_CERT
  (
    CERTIFIER_HR_DB_ID ASC ,
    CERTIFIER_HR_ID ASC ,
    CERTIFIER_CERT_ID ASC
  ) ;
ALTER TABLE ORG_HR_CERT ADD CONSTRAINT PK_ORG_HR_CERT PRIMARY KEY ( HR_DB_ID, HR_ID, CERT_ID ) ;


CREATE TABLE ORG_HR_CERT_PASSWORD
  (
    HR_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    CERT_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    PASSWORD       VARCHAR2 (100) NOT NULL DEFERRABLE ,
    CHANGED_DT     DATE NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_HR_CERT_PASSWORD ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_CERT_PASSWORD ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_CERT_PASSWORD ADD CHECK ( CERT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_CERT_PASSWORD ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_HR_CERT_PASSWORD ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_CERT_PASSWORD ADD CONSTRAINT PK_ORG_HR_CERT_PASSWORD PRIMARY KEY ( HR_DB_ID, HR_ID, CERT_ID ) ;


CREATE TABLE ORG_HR_LIC
  (
    LIC_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    LIC_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    HR_LIC_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    HR_LIC_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    HR_LIC_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    HR_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    STAGE_NOTE          VARCHAR2 (4000) ,
    EXPIRY_DT           DATE ,
    EFFECT_DT           DATE NOT NULL DEFERRABLE ,
    PREREQ_EXPIRY_DT    DATE ,
    PREREQ_EFFECT_DT    DATE ,
    RELEASE_NO          VARCHAR2 (40) ,
    STAGE_REASON_DB_ID  NUMBER (10) ,
    STAGE_REASON_CD     VARCHAR2 (16) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_HR_LIC ADD CHECK ( LIC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_LIC ADD CHECK ( LIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_LIC ADD CHECK ( HR_LIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_LIC ADD CHECK ( HR_LIC_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_LIC ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_LIC ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_LIC ADD CHECK ( STAGE_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_LIC ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_HR_LIC ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_HR_LIC
IS
  'This table stores all the user licenses.' ;
  COMMENT ON COLUMN ORG_HR_LIC.HR_LIC_ID
IS
  'primary key for org_hr_lic table.  this table is used to store all user licenses.' ;
  COMMENT ON COLUMN ORG_HR_LIC.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN ORG_HR_LIC.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN ORG_HR_LIC.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN ORG_HR_LIC.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN ORG_HR_LIC.REVISION_USER
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGHR_ORGHRLIC ON ORG_HR_LIC
    ( HR_DB_ID ASC , HR_ID ASC
    ) ;
  CREATE INDEX IX_LICDEFN_ORGHRLIC ON ORG_HR_LIC
    (
      LIC_DB_ID ASC ,
      LIC_ID ASC
    ) ;
ALTER TABLE ORG_HR_LIC ADD CONSTRAINT PK_ORG_HR_LIC PRIMARY KEY ( HR_LIC_ID, HR_DB_ID, HR_ID ) ;


CREATE TABLE ORG_HR_LICENSE
  (
    HR_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    LICENSE_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LICENSE_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    CERTIF_TAG         VARCHAR2 (40) NOT NULL DEFERRABLE ,
    CERTIF_ORG_NAME    VARCHAR2 (40) ,
    EXPIRY_DT          DATE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_HR_LICENSE ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_LICENSE ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_LICENSE ADD CHECK ( LICENSE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_LICENSE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_HR_LICENSE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN ORG_HR_LICENSE.HR_DB_ID
IS
  'FK to ORG_HR.' ;
  COMMENT ON COLUMN ORG_HR_LICENSE.HR_ID
IS
  'FK to ORG_HR.' ;
  COMMENT ON COLUMN ORG_HR_LICENSE.LICENSE_TYPE_DB_ID
IS
  'FK to REF_LICENSE_TYPE.' ;
  COMMENT ON COLUMN ORG_HR_LICENSE.LICENSE_TYPE_CD
IS
  'FK to REF_LICENSE_TYPE.' ;
  COMMENT ON COLUMN ORG_HR_LICENSE.CERTIF_TAG
IS
  'The certificate number for the employee''s FAA/regulatory qualified credentials.' ;
  COMMENT ON COLUMN ORG_HR_LICENSE.CERTIF_ORG_NAME
IS
  'The certifying organizations'' name.' ;
  COMMENT ON COLUMN ORG_HR_LICENSE.EXPIRY_DT
IS
  'The date the certificate elapses.' ;
  COMMENT ON COLUMN ORG_HR_LICENSE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_HR_LICENSE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ORG_HR_LICENSE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_HR_LICENSE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN ORG_HR_LICENSE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_ORGHR_ORGHRLICENSE ON ORG_HR_LICENSE
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
ALTER TABLE ORG_HR_LICENSE ADD CONSTRAINT PK_ORG_HR_LICENSE PRIMARY KEY ( HR_DB_ID, HR_ID, LICENSE_TYPE_DB_ID, LICENSE_TYPE_CD ) ;


CREATE TABLE ORG_HR_PO_AUTH_LVL
  (
    HR_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    PO_AUTH_LVL_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PO_AUTH_LVL_CD    VARCHAR2 (10) NOT NULL DEFERRABLE ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_HR_PO_AUTH_LVL ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_PO_AUTH_LVL ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_PO_AUTH_LVL ADD CHECK ( PO_AUTH_LVL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_PO_AUTH_LVL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_HR_PO_AUTH_LVL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_HR_PO_AUTH_LVL
IS
  'This table assigns hr''s to the necessary authorization level.' ;
  COMMENT ON COLUMN ORG_HR_PO_AUTH_LVL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_HR_PO_AUTH_LVL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN ORG_HR_PO_AUTH_LVL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN ORG_HR_PO_AUTH_LVL.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN ORG_HR_PO_AUTH_LVL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_ORGHR_ORGHRPOAUTHLVL ON ORG_HR_PO_AUTH_LVL
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
ALTER TABLE ORG_HR_PO_AUTH_LVL ADD CONSTRAINT "pk_ORG_HR_PO_AUTH_LVL" PRIMARY KEY ( HR_DB_ID, HR_ID, PO_AUTH_LVL_DB_ID, PO_AUTH_LVL_CD ) ;


CREATE TABLE ORG_HR_QUAL
  (
    HR_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_HR_QUAL ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_QUAL ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_QUAL ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_QUAL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_HR_QUAL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_HR_QUAL
IS
  'Human Resource Qualification.  This represents the specific Labour Skills that a Human Resource possesses.  The qualification may be authenticated with a Certification Authority and a Certification Identifier (licence number).' ;
  COMMENT ON COLUMN ORG_HR_QUAL.HR_DB_ID
IS
  'FK to ORG_HR.' ;
  COMMENT ON COLUMN ORG_HR_QUAL.HR_ID
IS
  'FK to ORG_HR.' ;
  COMMENT ON COLUMN ORG_HR_QUAL.LABOUR_SKILL_DB_ID
IS
  'FK to REF_LABOUR_SKILL' ;
  COMMENT ON COLUMN ORG_HR_QUAL.LABOUR_SKILL_CD
IS
  'FK to REF_LABOUR_SKILL' ;
  COMMENT ON COLUMN ORG_HR_QUAL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_HR_QUAL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ORG_HR_QUAL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_HR_QUAL.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ORG_HR_QUAL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGHR_ORGHRQUAL ON ORG_HR_QUAL
    ( HR_DB_ID ASC , HR_ID ASC
    ) ;
ALTER TABLE ORG_HR_QUAL ADD CONSTRAINT PK_ORG_HR_QUAL PRIMARY KEY ( HR_DB_ID, HR_ID, LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) ;


CREATE TABLE ORG_HR_SCHEDULE
  (
    HR_DB_ID                 NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID                    NUMBER (10) NOT NULL DEFERRABLE ,
    HR_SCHEDULE_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    USER_SHIFT_PATTERN_DB_ID NUMBER (10) ,
    USER_SHIFT_PATTERN_ID    NUMBER (10) ,
    START_DT                 DATE NOT NULL DEFERRABLE ,
    END_DT                   DATE NOT NULL DEFERRABLE ,
    LABOUR_SKILL_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_CD          VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE ,
    LOC_DB_ID                NUMBER (10) ,
    LOC_ID                   NUMBER (10)
  ) ;
ALTER TABLE ORG_HR_SCHEDULE ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SCHEDULE ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SCHEDULE ADD CHECK ( HR_SCHEDULE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SCHEDULE ADD CHECK ( USER_SHIFT_PATTERN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SCHEDULE ADD CHECK ( USER_SHIFT_PATTERN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SCHEDULE ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SCHEDULE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_HR_SCHEDULE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SCHEDULE ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SCHEDULE ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_HR_SCHEDULE
IS
  'This entity represents the HR-shift pattern assignment.' ;
  COMMENT ON COLUMN ORG_HR_SCHEDULE.HR_DB_ID
IS
  'FK to ORG_HR. The user the schedule is assigned to.' ;
  COMMENT ON COLUMN ORG_HR_SCHEDULE.HR_ID
IS
  'FK to ORG_HR. The user the schedule is assigned to.' ;
  COMMENT ON COLUMN ORG_HR_SCHEDULE.HR_SCHEDULE_ID
IS
  'This is a sequence generated number that is part of the primary key.' ;
  COMMENT ON COLUMN ORG_HR_SCHEDULE.START_DT
IS
  'When the schedule is in effect. There must be a start and end date for every schedule assignment.' ;
  COMMENT ON COLUMN ORG_HR_SCHEDULE.END_DT
IS
  'When the schedule is in effect. There must be a start and end date for every schedule assignment.' ;
  COMMENT ON COLUMN ORG_HR_SCHEDULE.LABOUR_SKILL_DB_ID
IS
  'FK to REF_LABOUR_SKILL. During capacity planning, the user will be counted as having this skill. This is defaulted based on the user''s primary skill.' ;
  COMMENT ON COLUMN ORG_HR_SCHEDULE.LABOUR_SKILL_CD
IS
  'FK to REF_LABOUR_SKILL. During capacity planning, the user will be counted as having this skill. This is defaulted based on the user''s primary skill.' ;
  COMMENT ON COLUMN ORG_HR_SCHEDULE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_HR_SCHEDULE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ORG_HR_SCHEDULE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_HR_SCHEDULE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ORG_HR_SCHEDULE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  COMMENT ON COLUMN ORG_HR_SCHEDULE.LOC_DB_ID
IS
  'FK to INV_LOC table.  Represents the location for which the shift pattern applies to the HR.' ;
  COMMENT ON COLUMN ORG_HR_SCHEDULE.LOC_ID
IS
  'FK to INV_LOC table.  Represents the location for which the shift pattern applies to the HR.' ;
  CREATE INDEX IX_INVLOC_ORGHRSCHEDULE ON ORG_HR_SCHEDULE
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_ORGHRSCHED ON ORG_HR_SCHEDULE
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
  CREATE INDEX IX_USP_ORGHRSCHEDULE ON ORG_HR_SCHEDULE
    (
      USER_SHIFT_PATTERN_DB_ID ASC ,
      USER_SHIFT_PATTERN_ID ASC
    ) ;
ALTER TABLE ORG_HR_SCHEDULE ADD CONSTRAINT PK_ORG_HR_SCHEDULE PRIMARY KEY ( HR_DB_ID, HR_ID, HR_SCHEDULE_ID ) ;


CREATE TABLE ORG_HR_SHIFT
  (
    HR_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    HR_SHIFT_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    DAY_DT             DATE NOT NULL DEFERRABLE ,
    SHIFT_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    SHIFT_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    LOC_DB_ID          NUMBER (10) ,
    LOC_ID             NUMBER (10) ,
    CREW_DB_ID         NUMBER (10) ,
    CREW_ID            NUMBER (10) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_HR_SHIFT ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT ADD CHECK ( HR_SHIFT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT ADD CHECK ( SHIFT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT ADD CHECK ( SHIFT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT ADD CHECK ( CREW_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE ORG_HR_SHIFT ADD CHECK ( CREW_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE ORG_HR_SHIFT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_HR_SHIFT
IS
  'Used to record individual, day by day, shift adjustments for a user.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT.HR_DB_ID
IS
  'FK to ORG_HR. The user that is performing the shift.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT.HR_ID
IS
  'FK to ORG_HR. The user that is performing the shift.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT.HR_SHIFT_ID
IS
  'Number assigned (1..n) in context of the event.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT.DAY_DT
IS
  'This is the date the shift will occur.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT.SHIFT_ID
IS
  'FK to SHIFT_SHIFT table.  Indicates shift the user is assigned to.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT.SHIFT_DB_ID
IS
  'FK to SHIFT_SHIFT table.  Indicates shift the user is assigned to.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT.LABOUR_SKILL_DB_ID
IS
  'FK to REF_LABOUR_SKILL. During capacity planning, the user will be counted as having this skill. This is defaulted based on the user''s primary skill.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT.LABOUR_SKILL_CD
IS
  'FK to REF_LABOUR_SKILL. During capacity planning, the user will be counted as having this skill. This is defaulted based on the user''s primary skill.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT.LOC_DB_ID
IS
  'FK to INV_LOC.  Represents location for which the shift adjustment is applied.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT.LOC_ID
IS
  'FK to INV_LOC.  Represents location for which the shift adjustment is applied.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT.CREW_DB_ID
IS
  'FK to ORG_WORK_DEPT.  Represents temporary crew for which the user is assigned.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT.CREW_ID
IS
  'FK to ORG_WORK_DEPT.  Represents temporary crew for which the user is assigned.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVLOC_ORGHRSHIFT ON ORG_HR_SHIFT
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_ORGHRSHIFT ON ORG_HR_SHIFT
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
  CREATE INDEX IX_SHIFTTSHIFT_ORGHRSHIFT ON ORG_HR_SHIFT
    (
      SHIFT_DB_ID ASC ,
      SHIFT_ID ASC
    ) ;
  CREATE INDEX IX_ORGWORKDEPT_ORGHRSHIFTv1 ON ORG_HR_SHIFT
    (
      CREW_DB_ID ASC ,
      CREW_ID ASC
    ) ;
ALTER TABLE ORG_HR_SHIFT ADD CONSTRAINT PK_ORG_HR_SHIFT PRIMARY KEY ( HR_DB_ID, HR_ID, HR_SHIFT_ID ) ;


CREATE TABLE ORG_HR_SHIFT_PLAN
  (
    HR_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    HR_SHIFT_PLAN_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DAY_DT           DATE NOT NULL DEFERRABLE ,
    START_HOUR       NUMBER (6,2) ,
    DURATION_QT FLOAT ,
    WORK_HOURS_QT FLOAT ,
    SHIFT_DB_ID        NUMBER (10) ,
    SHIFT_ID           NUMBER (10) ,
    LABOUR_SKILL_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    LOC_DB_ID          NUMBER (10) ,
    LOC_ID             NUMBER (10) ,
    CREW_LOC_DB_ID     NUMBER (10) ,
    CREW_LOC_ID        NUMBER (10) ,
    CREW_DB_ID         NUMBER (10) ,
    CREW_ID            NUMBER (10) ,
    LINE_CAPACITY_BOOL NUMBER (1) DEFAULT 0 ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_HR_SHIFT_PLAN ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT_PLAN ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT_PLAN ADD CHECK ( HR_SHIFT_PLAN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT_PLAN ADD CHECK ( SHIFT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT_PLAN ADD CHECK ( SHIFT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT_PLAN ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT_PLAN ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT_PLAN ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT_PLAN ADD CHECK ( CREW_LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT_PLAN ADD CHECK ( CREW_LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT_PLAN ADD CHECK ( CREW_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT_PLAN ADD CHECK ( CREW_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT_PLAN ADD CHECK ( LINE_CAPACITY_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT_PLAN ADD CHECK ( RSTAT_CD           IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_HR_SHIFT_PLAN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_HR_SHIFT_PLAN
IS
  'This table is calculated by Maintenix and it determines which shifts a particular user will be working on a given day. There will be a row for every day that the user is working.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT_PLAN.HR_DB_ID
IS
  'FK to ORG_HR.The user that is performing the shift.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT_PLAN.HR_ID
IS
  'FK to ORG_HR.The user that is performing the shift.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT_PLAN.HR_SHIFT_PLAN_ID
IS
  'Number assigned (1..n) in context of the event.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT_PLAN.DAY_DT
IS
  'This is the date when the shift will occur.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT_PLAN.START_HOUR
IS
  'Indicates the hour (0 to 23) that the user will start working on the day.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT_PLAN.DURATION_QT
IS
  'Indicates the duration of the users "shift" starting at the start hour specified.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT_PLAN.WORK_HOURS_QT
IS
  'Indicates the number of hours the user will be working during the duration specified.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT_PLAN.SHIFT_DB_ID
IS
  'FK to SHIFT_SHIFT table.  Indicates shift the user is assigned to.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT_PLAN.SHIFT_ID
IS
  'FK to SHIFT_SHIFT table.  Indicates shift the user is assigned to.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT_PLAN.LABOUR_SKILL_DB_ID
IS
  'FK to REF_LABOUR_SKILL. During capacity planning, the user will be counted as having this skill. This is defaulted based on the user''s primary skill.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT_PLAN.LABOUR_SKILL_CD
IS
  'FK to REF_LABOUR_SKILL. During capacity planning, the user will be counted as having this skill. This is defaulted based on the user''s primary skill.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT_PLAN.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT_PLAN.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT_PLAN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT_PLAN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT_PLAN.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ORG_HR_SHIFT_PLAN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGHRSHIFTPLAN_DAYDT ON ORG_HR_SHIFT_PLAN
    ( DAY_DT ASC
    ) ;
  CREATE INDEX IX_INVLOC_ORGHRSHIFTPLAN ON ORG_HR_SHIFT_PLAN
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
  CREATE INDEX IX_INVLOC2_ORGHRSHIFTPLAN ON ORG_HR_SHIFT_PLAN
    (
      CREW_LOC_DB_ID ASC ,
      CREW_LOC_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_ORGHRSHIFTPLAN ON ORG_HR_SHIFT_PLAN
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
  CREATE INDEX IX_ORGWORKDEPT_ORGHRSHIFT ON ORG_HR_SHIFT_PLAN
    (
      CREW_DB_ID ASC ,
      CREW_ID ASC
    ) ;
  CREATE INDEX IX_SHIFTSHIFT_ORGHRSHIFTPLAN ON ORG_HR_SHIFT_PLAN
    (
      SHIFT_DB_ID ASC ,
      SHIFT_ID ASC
    ) ;
ALTER TABLE ORG_HR_SHIFT_PLAN ADD CONSTRAINT PK_ORG_HR_SHIFT_PLAN PRIMARY KEY ( HR_DB_ID, HR_ID, HR_SHIFT_PLAN_ID ) ;
ALTER TABLE ORG_HR_SHIFT_PLAN ADD CONSTRAINT IX_ORGHRSHIFTPLANALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE ORG_HR_SUPPLY
  (
    LOC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    USER_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    HR_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_HR_SUPPLY ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SUPPLY ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SUPPLY ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SUPPLY ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_SUPPLY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_HR_SUPPLY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN ORG_HR_SUPPLY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ORG_HR_SUPPLY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_HR_SUPPLY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ORG_HR_SUPPLY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_UTL_USER_ORGHRSUPPLY_FK ON ORG_HR_SUPPLY
    ( USER_ID ASC
    ) ;
  CREATE INDEX IX_INVLOC_ORGHRSUPPLY ON ORG_HR_SUPPLY
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_ORGHRSUPPLY ON ORG_HR_SUPPLY
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
ALTER TABLE ORG_HR_SUPPLY ADD CONSTRAINT PK_ORG_HR_SUPPLY PRIMARY KEY ( LOC_DB_ID, LOC_ID, USER_ID, HR_DB_ID, HR_ID ) ;


CREATE TABLE ORG_HR_TIMEOFF
  (
    HR_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    HR_TIMEOFF_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    TIMEOFF_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TIMEOFF_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    START_DT           DATE NOT NULL DEFERRABLE ,
    END_DT             DATE NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_HR_TIMEOFF ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_TIMEOFF ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_TIMEOFF ADD CHECK ( HR_TIMEOFF_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_TIMEOFF ADD CHECK ( TIMEOFF_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_HR_TIMEOFF ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_HR_TIMEOFF ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_HR_TIMEOFF
IS
  'Allows you to assign time off to a particular user.' ;
  COMMENT ON COLUMN ORG_HR_TIMEOFF.HR_DB_ID
IS
  'FK to ORG_HR. The user with the time off.' ;
  COMMENT ON COLUMN ORG_HR_TIMEOFF.HR_ID
IS
  'FK to ORG_HR. The user with the time off.' ;
  COMMENT ON COLUMN ORG_HR_TIMEOFF.HR_TIMEOFF_ID
IS
  'This is a sequence generated number that is part of the primary key.' ;
  COMMENT ON COLUMN ORG_HR_TIMEOFF.TIMEOFF_TYPE_DB_ID
IS
  'FK to REF_TIMEOFF_TYPE.' ;
  COMMENT ON COLUMN ORG_HR_TIMEOFF.TIMEOFF_TYPE_CD
IS
  'FK to REF_TIMEOFF_TYPE.' ;
  COMMENT ON COLUMN ORG_HR_TIMEOFF.START_DT
IS
  'This is the start date of when the user is off.' ;
  COMMENT ON COLUMN ORG_HR_TIMEOFF.END_DT
IS
  'This is the end date of when the user is off.' ;
  COMMENT ON COLUMN ORG_HR_TIMEOFF.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_HR_TIMEOFF.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ORG_HR_TIMEOFF.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_HR_TIMEOFF.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ORG_HR_TIMEOFF.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGHR_ORGHRTIMEOFF ON ORG_HR_TIMEOFF
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
ALTER TABLE ORG_HR_TIMEOFF ADD CONSTRAINT PK_ORG_HR_TIMEOFF PRIMARY KEY ( HR_DB_ID, HR_ID, HR_TIMEOFF_ID ) ;


CREATE TABLE ORG_LABOUR_SKILL_MAP
  (
    ORG_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    EST_HOURLY_COST    NUMBER (15,5) ,
    ESIG_REQ_BOOL      NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    SKILL_ORDER        NUMBER (4) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO        NUMBER (10) DEFAULT 1 NOT NULL DEFERRABLE ,
    CTRL_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_LABOUR_SKILL_MAP ADD CHECK ( ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_LABOUR_SKILL_MAP ADD CHECK ( ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_LABOUR_SKILL_MAP ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_LABOUR_SKILL_MAP ADD CHECK ( ESIG_REQ_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE ORG_LABOUR_SKILL_MAP ADD CHECK ( RSTAT_CD      IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_LABOUR_SKILL_MAP ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_LABOUR_SKILL_MAP ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_LABOUR_SKILL_MAP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_LABOUR_SKILL_MAP
IS
  'This table stores the organization specific labour skills so that the organization can manage its own skills for maintenance.' ;
  COMMENT ON COLUMN ORG_LABOUR_SKILL_MAP.EST_HOURLY_COST
IS
  'The estimated hourly cost - used as default for projecting effort when a task has planned time with no specific HR assignment.' ;
  COMMENT ON COLUMN ORG_LABOUR_SKILL_MAP.ESIG_REQ_BOOL
IS
  'Boolean value that indicates whether or not an electronic signature is required for the labor.' ;
  COMMENT ON COLUMN ORG_LABOUR_SKILL_MAP.SKILL_ORDER
IS
  'Labour skill order. This field denotes the skills order by organization.' ;
  COMMENT ON COLUMN ORG_LABOUR_SKILL_MAP.REVISION_NO
IS
  'A number incremented each time the record is modified.
' ;
  COMMENT ON COLUMN ORG_LABOUR_SKILL_MAP.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN ORG_LABOUR_SKILL_MAP.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ORG_LABOUR_SKILL_MAP.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN ORG_LABOUR_SKILL_MAP.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_LABOUR_SKILL_MAP.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record
' ;
  COMMENT ON COLUMN ORG_LABOUR_SKILL_MAP.REVISION_USER
IS
  'The user that last modified the record.' ;
  CREATE INDEX IX_ORGORG_ORGSKILLMAP ON ORG_LABOUR_SKILL_MAP
    (
      ORG_DB_ID ASC ,
      ORG_ID ASC
    ) ;
ALTER TABLE ORG_LABOUR_SKILL_MAP ADD CONSTRAINT PK_ORG_LABOUR_SKILL_MAP PRIMARY KEY ( ORG_DB_ID, ORG_ID, LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) ;


CREATE TABLE ORG_LOGO
  (
    BLOB_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_LOGO ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_LOGO ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_LOGO ADD CHECK ( ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_LOGO ADD CHECK ( ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_LOGO ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_LOGO ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_ORGORG_ORGLOGO ON ORG_LOGO
  ( ORG_DB_ID ASC , ORG_ID ASC
  ) ;
CREATE INDEX IX_FK_CORPERMBLOB_ORGLOGO ON ORG_LOGO
  (
    BLOB_DB_ID ASC ,
    BLOB_ID ASC
  ) ;


CREATE TABLE ORG_ORG
  (
    ORG_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_TYPE_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_TYPE_CD        VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ORG_SUB_TYPE_DB_ID NUMBER (10) ,
    ORG_SUB_TYPE_CD    VARCHAR2 (8) ,
    COMPANY_ORG_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    COMPANY_ORG_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    NH_ORG_DB_ID       NUMBER (10) ,
    NH_ORG_ID          NUMBER (10) ,
    ORG_CD             VARCHAR2 (8) NOT NULL DEFERRABLE ,
    CODE_MDESC         VARCHAR2 (500) ,
    ORG_SDESC          VARCHAR2 (80) NOT NULL DEFERRABLE ,
    ORG_LDESC          VARCHAR2 (4000) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_ORG ADD CHECK ( ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ORG ADD CHECK ( ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ORG ADD CHECK ( ORG_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ORG ADD CHECK ( ORG_SUB_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ORG ADD CHECK ( COMPANY_ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ORG ADD CHECK ( COMPANY_ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ORG ADD CHECK ( NH_ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ORG ADD CHECK ( NH_ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ORG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_ORG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_ORG
IS
  'Organization.  An organization supports the definition of security permissions for organizations/departments/etc.  Specializations of organization are identified by a type.  Sub-organizations are organized hierarchically.' ;
  COMMENT ON COLUMN ORG_ORG.ORG_DB_ID
IS
  'Primary key to organization.' ;
  COMMENT ON COLUMN ORG_ORG.ORG_ID
IS
  'Primary key to organization.' ;
  COMMENT ON COLUMN ORG_ORG.ORG_TYPE_DB_ID
IS
  'FK to organization type table.  Defines the type of organization such as {ADMIN, DEFAULT, OPERATOR, MRO, CREW Etc...}' ;
  COMMENT ON COLUMN ORG_ORG.ORG_TYPE_CD
IS
  'FK to organization type table.  Defines the type of organization such as {ADMIN, DEFAULT, OPERATOR, MRO, CREW Etc...}' ;
  COMMENT ON COLUMN ORG_ORG.COMPANY_ORG_DB_ID
IS
  'Described organizations parent ''mother'' company.  Can be itself.' ;
  COMMENT ON COLUMN ORG_ORG.COMPANY_ORG_ID
IS
  'Described organizations parent ''mother'' company.  Can be itself.' ;
  COMMENT ON COLUMN ORG_ORG.NH_ORG_DB_ID
IS
  'FK to self, defines the parent organizaiton relationship' ;
  COMMENT ON COLUMN ORG_ORG.NH_ORG_ID
IS
  'FK to self, defines parent organization' ;
  COMMENT ON COLUMN ORG_ORG.ORG_CD
IS
  'Reference code of organization.' ;
  COMMENT ON COLUMN ORG_ORG.CODE_MDESC
IS
  'A computed field that contains a "/" separated path to an organization from its company.  Combined with ORG_CD, this creates a hierarchical code.' ;
  COMMENT ON COLUMN ORG_ORG.ORG_SDESC
IS
  'Short description of an organization - more specifically the Organization''s name.' ;
  COMMENT ON COLUMN ORG_ORG.ORG_LDESC
IS
  'Long description of this organization.' ;
  COMMENT ON COLUMN ORG_ORG.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN ORG_ORG.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN ORG_ORG.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_ORG.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ORG_ORG.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGORG_NHORGORG ON ORG_ORG
    (
      NH_ORG_DB_ID ASC ,
      NH_ORG_ID ASC
    ) ;
  CREATE INDEX IX_ORGORG_COMPANY_ORGORG ON ORG_ORG
    (
      COMPANY_ORG_DB_ID ASC ,
      COMPANY_ORG_ID ASC
    ) ;
ALTER TABLE ORG_ORG ADD CONSTRAINT PK_ORG_ORG PRIMARY KEY ( ORG_DB_ID, ORG_ID ) ;
ALTER TABLE ORG_ORG ADD CONSTRAINT IX_ORGORGALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE ORG_ORG_HR
  (
    HR_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    DEFAULT_ORG_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_ORG_HR ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ORG_HR ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ORG_HR ADD CHECK ( ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ORG_HR ADD CHECK ( ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ORG_HR ADD CHECK ( DEFAULT_ORG_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE ORG_ORG_HR ADD CHECK ( RSTAT_CD         IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_ORG_HR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN ORG_ORG_HR.DEFAULT_ORG_BOOL
IS
  'Defines if the relationship is the default organization for a given user.' ;
  COMMENT ON COLUMN ORG_ORG_HR.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_ORG_HR.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN ORG_ORG_HR.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_ORG_HR.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ORG_ORG_HR.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGHR_ORGORGHR ON ORG_ORG_HR
    ( HR_DB_ID ASC , HR_ID ASC
    ) ;
  CREATE INDEX IX_ORGORG_ORGORGHR ON ORG_ORG_HR
    ( ORG_DB_ID ASC , ORG_ID ASC
    ) ;
ALTER TABLE ORG_ORG_HR ADD CONSTRAINT PK_ORG_ORG_HR PRIMARY KEY ( HR_DB_ID, HR_ID, ORG_DB_ID, ORG_ID ) ;


CREATE TABLE ORG_ORG_LOC
  (
    ORG_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_ORG_LOC ADD CHECK ( ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ORG_LOC ADD CHECK ( ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ORG_LOC ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ORG_LOC ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ORG_LOC ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_ORG_LOC ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN ORG_ORG_LOC.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN ORG_ORG_LOC.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN ORG_ORG_LOC.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_ORG_LOC.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ORG_ORG_LOC.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVLOC_ORGORGLOC ON ORG_ORG_LOC
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
  CREATE INDEX IX_ORGORG_ORGORGLOC ON ORG_ORG_LOC
    (
      ORG_DB_ID ASC ,
      ORG_ID ASC
    ) ;
ALTER TABLE ORG_ORG_LOC ADD CONSTRAINT PK_ORG_ORG_LOC PRIMARY KEY ( ORG_DB_ID, ORG_ID, LOC_DB_ID, LOC_ID ) ;


CREATE TABLE ORG_ORG_VENDOR
  (
    ORG_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_NOTE    VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_ORG_VENDOR ADD CHECK ( ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ORG_VENDOR ADD CHECK ( ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ORG_VENDOR ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ORG_VENDOR ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_ORG_VENDOR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_ORG_VENDOR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_ORG_VENDOR
IS
  'This table contains the organization specific vendor approval information.' ;
  COMMENT ON COLUMN ORG_ORG_VENDOR.ORG_DB_ID
IS
  'FK to ORG_ORG. To indicate the organization of the given vendor-organization relationship.' ;
  COMMENT ON COLUMN ORG_ORG_VENDOR.ORG_ID
IS
  'FK to ORG_ORG. To indicate the organization of the given vendor-organization relationship.' ;
  COMMENT ON COLUMN ORG_ORG_VENDOR.VENDOR_DB_ID
IS
  'FK to ORG_VENDOR. To indicate the vendor of the given vendor-organization relationship.' ;
  COMMENT ON COLUMN ORG_ORG_VENDOR.VENDOR_ID
IS
  'FK to ORG_VENDOR. To indicate the vendor of the given vendor-organization relationship.' ;
  COMMENT ON COLUMN ORG_ORG_VENDOR.VENDOR_NOTE
IS
  'Notes about the vendor.' ;
  COMMENT ON COLUMN ORG_ORG_VENDOR.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_ORG_VENDOR.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ORG_ORG_VENDOR.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_ORG_VENDOR.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ORG_ORG_VENDOR.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGVENDOR_ORGORGVENDOR ON ORG_ORG_VENDOR
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
  CREATE INDEX IX_ORGORG_ORGORGVENDOR ON ORG_ORG_VENDOR
    (
      ORG_DB_ID ASC ,
      ORG_ID ASC
    ) ;
ALTER TABLE ORG_ORG_VENDOR ADD CONSTRAINT PK_ORG_ORG_VENDOR PRIMARY KEY ( ORG_DB_ID, ORG_ID, VENDOR_DB_ID, VENDOR_ID ) ;


CREATE TABLE ORG_SUBORG_CACHE
  (
    ORG_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    ORG_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    SUB_ORG_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    SUB_ORG_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_SUBORG_CACHE ADD CHECK ( ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_SUBORG_CACHE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_SUBORG_CACHE ADD CHECK ( ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_SUBORG_CACHE ADD CHECK ( SUB_ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_SUBORG_CACHE ADD CHECK ( SUB_ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_SUBORG_CACHE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_ORGORG_SUBORGCACHE_PARENT ON ORG_SUBORG_CACHE
  (
    ORG_DB_ID ASC ,
    ORG_ID ASC
  ) ;
CREATE INDEX IX_ORGORG_SUBORGCACHE_SUBORG ON ORG_SUBORG_CACHE
  (
    SUB_ORG_DB_ID ASC ,
    SUB_ORG_ID ASC
  ) ;


CREATE TABLE ORG_SUBORG_CACHE_SP
  (
    ORG_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    CHILD_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    CHILD_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_SUBORG_CACHE_SP ADD CHECK ( ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_SUBORG_CACHE_SP ADD CHECK ( ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_SUBORG_CACHE_SP ADD CHECK ( CHILD_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_SUBORG_CACHE_SP ADD CHECK ( CHILD_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_SUBORG_CACHE_SP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_SUBORG_CACHE_SP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_SUBORG_CACHE_SP
IS
  'This table is a scrath pad table, similar to the warranty_eval_sp table.  It''s used as a part of creating the flattened cache table when a organization is updated/added/removed.  It''s a temporary store that has transient data in it.' ;


CREATE TABLE ORG_VENDOR
  (
    VENDOR_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_CD              VARCHAR2 (16) NOT NULL DEFERRABLE ,
    OWNER_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    OWNER_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    CERT_CD                VARCHAR2 (25) ,
    CERT_EXPIRY_DT         DATE ,
    VENDOR_TYPE_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_TYPE_CD         VARCHAR2 (8) NOT NULL DEFERRABLE ,
    VENDOR_LOC_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_LOC_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    CURRENCY_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    CURRENCY_CD            VARCHAR2 (8) NOT NULL DEFERRABLE ,
    VENDOR_APPROVAL_DB_ID  NUMBER (10) ,
    VENDOR_APPROVAL_CD     VARCHAR2 (8) ,
    TERMS_CONDITIONS_DB_ID NUMBER (10) ,
    TERMS_CONDITIONS_CD    VARCHAR2 (8) ,
    BORROW_RATE_DB_ID      NUMBER (10) ,
    BORROW_RATE_CD         VARCHAR2 (8) ,
    VENDOR_NAME            VARCHAR2 (40) NOT NULL DEFERRABLE ,
    VENDOR_NOTE            VARCHAR2 (4000) ,
    NO_PRINT_REQ_BOOL      NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    MIN_PURCHASE_AMOUNT    NUMBER (15,5) ,
    EXT_KEY_SDESC          VARCHAR2 (40) ,
    RECEIVE_NOTE           VARCHAR2 (4000) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_VENDOR ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR ADD CHECK ( OWNER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR ADD CHECK ( OWNER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR ADD CHECK ( VENDOR_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR ADD CHECK ( VENDOR_LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR ADD CHECK ( VENDOR_LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR ADD CHECK ( CURRENCY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR ADD CHECK ( VENDOR_APPROVAL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR ADD CHECK ( TERMS_CONDITIONS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR ADD CHECK ( BORROW_RATE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR ADD CHECK ( NO_PRINT_REQ_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE ORG_VENDOR ADD CHECK ( RSTAT_CD          IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_VENDOR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_VENDOR
IS
  'Vendor: A Vendor represents a supplier of Inventory to the organization.  Inventory items will retain a reference to a Vendor as well as a purchase order number when created in the system.' ;
  COMMENT ON COLUMN ORG_VENDOR.VENDOR_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN ORG_VENDOR.VENDOR_ID
IS
  'Sequence ORG_VENDOR_ID.  utl_sequence.' ;
  COMMENT ON COLUMN ORG_VENDOR.VENDOR_CD
IS
  'A unique user entered code for the vendor. Often referred to as the "CAGE" code.' ;
  COMMENT ON COLUMN ORG_VENDOR.OWNER_DB_ID
IS
  'FK to INV_OWNER - Vendor owner' ;
  COMMENT ON COLUMN ORG_VENDOR.OWNER_ID
IS
  'FK to INV_OWNER - Vendor owner' ;
  COMMENT ON COLUMN ORG_VENDOR.CERT_CD
IS
  'Certification code.' ;
  COMMENT ON COLUMN ORG_VENDOR.CERT_EXPIRY_DT
IS
  'Certification expiry code.' ;
  COMMENT ON COLUMN ORG_VENDOR.VENDOR_TYPE_DB_ID
IS
  'FK to REF_VENDOR_TYPE.' ;
  COMMENT ON COLUMN ORG_VENDOR.VENDOR_TYPE_CD
IS
  'FK to REF_VENDOR_TYPE.' ;
  COMMENT ON COLUMN ORG_VENDOR.VENDOR_LOC_DB_ID
IS
  'FK to INV_LOC.  The vendors location.' ;
  COMMENT ON COLUMN ORG_VENDOR.VENDOR_LOC_ID
IS
  'FK to INV_LOC.  The vendors location.' ;
  COMMENT ON COLUMN ORG_VENDOR.CURRENCY_DB_ID
IS
  'FK to REF_CURRENCY.' ;
  COMMENT ON COLUMN ORG_VENDOR.CURRENCY_CD
IS
  'FK  to REF_CURRENCY.' ;
  COMMENT ON COLUMN ORG_VENDOR.VENDOR_APPROVAL_DB_ID
IS
  'FK to REF_VENDOR_APPROVAL.' ;
  COMMENT ON COLUMN ORG_VENDOR.VENDOR_APPROVAL_CD
IS
  'FK to REF_VENDOR_APPROVAL.' ;
  COMMENT ON COLUMN ORG_VENDOR.TERMS_CONDITIONS_DB_ID
IS
  'FK to REF_TERMS_CONDITIONS.' ;
  COMMENT ON COLUMN ORG_VENDOR.TERMS_CONDITIONS_CD
IS
  'FK to REF_TERMS_CONDITIONS.' ;
  COMMENT ON COLUMN ORG_VENDOR.BORROW_RATE_DB_ID
IS
  'FK to REF_BORROW_RATE - default borrow rate used by this vendor' ;
  COMMENT ON COLUMN ORG_VENDOR.BORROW_RATE_CD
IS
  'FK to REF_BORROW_RATE - default borrow rate used by this vendor' ;
  COMMENT ON COLUMN ORG_VENDOR.VENDOR_NAME
IS
  'The name of the Vendor.' ;
  COMMENT ON COLUMN ORG_VENDOR.VENDOR_NOTE
IS
  'Notes about the vendor.' ;
  COMMENT ON COLUMN ORG_VENDOR.MIN_PURCHASE_AMOUNT
IS
  'This is the smallest PO that you can cut for this vendor.' ;
  COMMENT ON COLUMN ORG_VENDOR.EXT_KEY_SDESC
IS
  'This is the key used by an external system.' ;
  COMMENT ON COLUMN ORG_VENDOR.RECEIVE_NOTE
IS
  'Note to the shipment receivers regarding this vendor.' ;
  COMMENT ON COLUMN ORG_VENDOR.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.' ;
  COMMENT ON COLUMN ORG_VENDOR.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_VENDOR.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ORG_VENDOR.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_VENDOR.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ORG_VENDOR.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVLOC_ORGVENDOR ON ORG_VENDOR
    (
      VENDOR_LOC_DB_ID ASC ,
      VENDOR_LOC_ID ASC
    ) ;
  CREATE INDEX IX_INVOWNER_ORGVENDOR ON ORG_VENDOR
    (
      OWNER_DB_ID ASC ,
      OWNER_ID ASC
    ) ;
ALTER TABLE ORG_VENDOR ADD CONSTRAINT PK_ORG_VENDOR PRIMARY KEY ( VENDOR_DB_ID, VENDOR_ID ) ;
ALTER TABLE ORG_VENDOR ADD CONSTRAINT IX_ORGVENDORALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE ORG_VENDOR_ACCOUNT
  (
    VENDOR_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ACCOUNT_CD     VARCHAR2 (40) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (2000) ,
    MAIN_BOOL      NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_VENDOR_ACCOUNT ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_ACCOUNT ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_ACCOUNT ADD CHECK ( MAIN_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_ACCOUNT ADD CHECK ( RSTAT_CD  IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_ACCOUNT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN ORG_VENDOR_ACCOUNT.VENDOR_DB_ID
IS
  'PK - FK to ORG_VENDOR.' ;
  COMMENT ON COLUMN ORG_VENDOR_ACCOUNT.VENDOR_ID
IS
  'PK - FK to ORG_VENDOR.' ;
  COMMENT ON COLUMN ORG_VENDOR_ACCOUNT.ACCOUNT_CD
IS
  'PK - Account code allows for mulitiple accounts for each vendor.' ;
  COMMENT ON COLUMN ORG_VENDOR_ACCOUNT.DESC_LDESC
IS
  'Account long description.' ;
  COMMENT ON COLUMN ORG_VENDOR_ACCOUNT.MAIN_BOOL
IS
  'Default account for a vendor.' ;
  COMMENT ON COLUMN ORG_VENDOR_ACCOUNT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_VENDOR_ACCOUNT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN ORG_VENDOR_ACCOUNT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN ORG_VENDOR_ACCOUNT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ORG_VENDOR_ACCOUNT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGVENDR_ORGVENDRACCOUNT ON ORG_VENDOR_ACCOUNT
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
ALTER TABLE ORG_VENDOR_ACCOUNT ADD CONSTRAINT "pk_ORG_VENDOR_ACCOUNT" PRIMARY KEY ( VENDOR_DB_ID, VENDOR_ID, ACCOUNT_CD ) ;


CREATE TABLE ORG_VENDOR_AIRPORT
  (
    VENDOR_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    DEFAULT_BOOL   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_VENDOR_AIRPORT ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_AIRPORT ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_AIRPORT ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_AIRPORT ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_AIRPORT ADD CHECK ( DEFAULT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_AIRPORT ADD CHECK ( RSTAT_CD     IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_AIRPORT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN ORG_VENDOR_AIRPORT.VENDOR_DB_ID
IS
  'Primary key.' ;
  COMMENT ON COLUMN ORG_VENDOR_AIRPORT.VENDOR_ID
IS
  'Primary key.' ;
  COMMENT ON COLUMN ORG_VENDOR_AIRPORT.LOC_DB_ID
IS
  'Primary key.' ;
  COMMENT ON COLUMN ORG_VENDOR_AIRPORT.LOC_ID
IS
  'Primary key.' ;
  COMMENT ON COLUMN ORG_VENDOR_AIRPORT.CREATION_DT
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_VENDOR_AIRPORT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ORG_VENDOR_AIRPORT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ORG_VENDOR_AIRPORT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVLOC_ORGVENDAIR ON ORG_VENDOR_AIRPORT
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
  CREATE INDEX IX_ORGVEND_ORGVENDAIR ON ORG_VENDOR_AIRPORT
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
ALTER TABLE ORG_VENDOR_AIRPORT ADD CONSTRAINT PK_ORG_VENDOR_AIRPORT PRIMARY KEY ( VENDOR_DB_ID, VENDOR_ID, LOC_DB_ID, LOC_ID ) ;


CREATE TABLE ORG_VENDOR_ATTACH
  (
    VENDOR_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ATTACH_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    ATTACH_TYPE_DB_ID NUMBER (10) ,
    ATTACH_TYPE_CD    VARCHAR2 (8) ,
    ATTACH_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    ATTACH_BLOB BLOB NOT NULL DEFERRABLE ,
    ATTACH_LDESC        VARCHAR2 (4000) ,
    ATTACH_NOTE         VARCHAR2 (4000) ,
    ATTACH_FILENAME     VARCHAR2 (255) NOT NULL DEFERRABLE ,
    ATTACH_CONTENT_TYPE VARCHAR2 (80) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_VENDOR_ATTACH ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_ATTACH ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_ATTACH ADD CHECK ( VENDOR_ATTACH_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_ATTACH ADD CHECK ( ATTACH_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_ATTACH ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_ATTACH ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN ORG_VENDOR_ATTACH.VENDOR_DB_ID
IS
  'PK - FK to ORG_VENDOR.' ;
  COMMENT ON COLUMN ORG_VENDOR_ATTACH.VENDOR_ID
IS
  'PK - FK to ORG_VENDOR.' ;
  COMMENT ON COLUMN ORG_VENDOR_ATTACH.VENDOR_ATTACH_ID
IS
  'Unique ID assigned from Sequence org_vendor_attach_id_seq' ;
  COMMENT ON COLUMN ORG_VENDOR_ATTACH.ATTACH_TYPE_DB_ID
IS
  'FK to REF_ATTACH_TYPE' ;
  COMMENT ON COLUMN ORG_VENDOR_ATTACH.ATTACH_TYPE_CD
IS
  'FK to REF_ATTACH_TYPE.' ;
  COMMENT ON COLUMN ORG_VENDOR_ATTACH.ATTACH_SDESC
IS
  'Attach short description.' ;
  COMMENT ON COLUMN ORG_VENDOR_ATTACH.ATTACH_BLOB
IS
  'blob.' ;
  COMMENT ON COLUMN ORG_VENDOR_ATTACH.ATTACH_LDESC
IS
  'Attach short description.' ;
  COMMENT ON COLUMN ORG_VENDOR_ATTACH.ATTACH_NOTE
IS
  'Attach note.' ;
  COMMENT ON COLUMN ORG_VENDOR_ATTACH.ATTACH_FILENAME
IS
  'Attachment filename (without path) to be used when saved to the local filesystem.
' ;
  COMMENT ON COLUMN ORG_VENDOR_ATTACH.ATTACH_CONTENT_TYPE
IS
  'The MIME type, used to help the browser to identify the attachment file type when saving.' ;
  COMMENT ON COLUMN ORG_VENDOR_ATTACH.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_VENDOR_ATTACH.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN ORG_VENDOR_ATTACH.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN ORG_VENDOR_ATTACH.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN ORG_VENDOR_ATTACH.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_ORGVENDR_ORGVNDRATTACH ON ORG_VENDOR_ATTACH
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
ALTER TABLE ORG_VENDOR_ATTACH ADD CONSTRAINT "pk_ORG_VENDOR_ATTACH" PRIMARY KEY ( VENDOR_DB_ID, VENDOR_ID, VENDOR_ATTACH_ID ) ;


CREATE TABLE ORG_VENDOR_IETM
  (
    VENDOR_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_IETM_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_DB_ID         NUMBER (10) ,
    IETM_ID            NUMBER (10) ,
    IETM_TOPIC_ID      NUMBER (10) ,
    IETM_TYPE_DB_ID    NUMBER (10) ,
    IETM_TYPE_CD       VARCHAR2 (8) ,
    IETM_SDESC         VARCHAR2 (80) ,
    CMDLINE_PARM_LDESC VARCHAR2 (4000) ,
    IETM_LDESC         VARCHAR2 (4000) ,
    IETM_NOTE          VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_VENDOR_IETM ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_IETM ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_IETM ADD CHECK ( VENDOR_IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_IETM ADD CHECK ( IETM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_IETM ADD CHECK ( IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_IETM ADD CHECK ( IETM_TOPIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_IETM ADD CHECK ( IETM_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_IETM ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_IETM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_VENDOR_IETM
IS
  'Technical documents related to the vendor.' ;
  COMMENT ON COLUMN ORG_VENDOR_IETM.VENDOR_DB_ID
IS
  'PK - FK to ORG_VENDOR.' ;
  COMMENT ON COLUMN ORG_VENDOR_IETM.VENDOR_ID
IS
  'PK - FK to ORG_VENDOR.' ;
  COMMENT ON COLUMN ORG_VENDOR_IETM.VENDOR_IETM_ID
IS
  'PK - Ietm value associated with particular vendor - vendor can have many ietm values.' ;
  COMMENT ON COLUMN ORG_VENDOR_IETM.IETM_DB_ID
IS
  'FK to IETM_TOPIC' ;
  COMMENT ON COLUMN ORG_VENDOR_IETM.IETM_ID
IS
  'FK to IETM_TOPIC' ;
  COMMENT ON COLUMN ORG_VENDOR_IETM.IETM_TOPIC_ID
IS
  'FK to IETM_TOPIC' ;
  COMMENT ON COLUMN ORG_VENDOR_IETM.IETM_TYPE_DB_ID
IS
  'FK to REF_IETM_TYPE' ;
  COMMENT ON COLUMN ORG_VENDOR_IETM.IETM_TYPE_CD
IS
  'FK to REF_IETM_TYPE' ;
  COMMENT ON COLUMN ORG_VENDOR_IETM.IETM_SDESC
IS
  'Short description.' ;
  COMMENT ON COLUMN ORG_VENDOR_IETM.CMDLINE_PARM_LDESC
IS
  'Link to external technical reference documents.
' ;
  COMMENT ON COLUMN ORG_VENDOR_IETM.IETM_LDESC
IS
  'Ietm long description.' ;
  COMMENT ON COLUMN ORG_VENDOR_IETM.IETM_NOTE
IS
  'Ietm note.' ;
  COMMENT ON COLUMN ORG_VENDOR_IETM.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN ORG_VENDOR_IETM.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN ORG_VENDOR_IETM.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN ORG_VENDOR_IETM.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN ORG_VENDOR_IETM.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_IETMTOPC_ORGVNDRIETM ON ORG_VENDOR_IETM
    (
      IETM_DB_ID ASC ,
      IETM_ID ASC ,
      IETM_TOPIC_ID ASC
    ) ;
  CREATE INDEX IX_ORGVNDR_ORFVENDIETM ON ORG_VENDOR_IETM
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
ALTER TABLE ORG_VENDOR_IETM ADD CONSTRAINT "pk_ORG_VENDOR_IETM" PRIMARY KEY ( VENDOR_DB_ID, VENDOR_ID, VENDOR_IETM_ID ) ;


CREATE TABLE ORG_VENDOR_PO_TYPE
  (
    ORG_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    PO_TYPE_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    PO_TYPE_CD          VARCHAR2 (8) NOT NULL DEFERRABLE ,
    VENDOR_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    APPROVAL_EXPIRY_DT  DATE ,
    WARNING_LDESC       VARCHAR2 (4000) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_VENDOR_PO_TYPE ADD CHECK ( ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_PO_TYPE ADD CHECK ( ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_PO_TYPE ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_PO_TYPE ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_PO_TYPE ADD CHECK ( PO_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_PO_TYPE ADD CHECK ( VENDOR_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_PO_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_PO_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_VENDOR_PO_TYPE
IS
  'Table to hold the organization''s approved vendor list by order type.' ;
  COMMENT ON COLUMN ORG_VENDOR_PO_TYPE.ORG_DB_ID
IS
  'FK to ORG_ORG_VENDOR. To indicate the organization of the given vendor-organization relationship.' ;
  COMMENT ON COLUMN ORG_VENDOR_PO_TYPE.ORG_ID
IS
  'FK to ORG_ORG_VENDOR. To indicate the organization of the given vendor-organization relationship.' ;
  COMMENT ON COLUMN ORG_VENDOR_PO_TYPE.VENDOR_DB_ID
IS
  'FK to ORG_ORG_VENDOR. To indicate the vendor of the given vendor-organization relationship.' ;
  COMMENT ON COLUMN ORG_VENDOR_PO_TYPE.VENDOR_ID
IS
  'FK to ORG_ORG_VENDOR. To indicate the vendor of the given vendor-organization relationship.' ;
  COMMENT ON COLUMN ORG_VENDOR_PO_TYPE.PO_TYPE_DB_ID
IS
  'FK to REF_PO_TYPE.  To indicate the PO type or order type for which the vendor is approved.' ;
  COMMENT ON COLUMN ORG_VENDOR_PO_TYPE.PO_TYPE_CD
IS
  'FK to REF_PO_TYPE.  To indicate the PO type or order type for which the vendor is approved.' ;
  COMMENT ON COLUMN ORG_VENDOR_PO_TYPE.VENDOR_STATUS_DB_ID
IS
  'FK to REF_VENDOR_STATUS. Vendor status for the given organization and order type.' ;
  COMMENT ON COLUMN ORG_VENDOR_PO_TYPE.VENDOR_STATUS_CD
IS
  'FK to REF_VENDOR_STATUS. Vendor status for the given organization and order type.' ;
  COMMENT ON COLUMN ORG_VENDOR_PO_TYPE.APPROVAL_EXPIRY_DT
IS
  'The date when the approval given for the vendor expires.' ;
  COMMENT ON COLUMN ORG_VENDOR_PO_TYPE.WARNING_LDESC
IS
  'Attribute to hold warning note when the vendor is approved with warning.' ;
  COMMENT ON COLUMN ORG_VENDOR_PO_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_VENDOR_PO_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ORG_VENDOR_PO_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_VENDOR_PO_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ORG_VENDOR_PO_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGORGVENDOR_ORGVENPOTYPE ON ORG_VENDOR_PO_TYPE
    (
      ORG_DB_ID ASC ,
      ORG_ID ASC ,
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
ALTER TABLE ORG_VENDOR_PO_TYPE ADD CONSTRAINT PK_ORG_VENDOR_PO_TYPE PRIMARY KEY ( ORG_DB_ID, ORG_ID, VENDOR_DB_ID, VENDOR_ID, PO_TYPE_DB_ID, PO_TYPE_CD ) ;


CREATE TABLE ORG_VENDOR_SERVICE_TYPE
  (
    ORG_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    SERVICE_TYPE_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    SERVICE_TYPE_CD     VARCHAR2 (16) NOT NULL DEFERRABLE ,
    VENDOR_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    APPROVAL_EXPIRY_DT  DATE ,
    WARNING_LDESC       VARCHAR2 (4000) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_VENDOR_SERVICE_TYPE ADD CHECK ( ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_SERVICE_TYPE ADD CHECK ( ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_SERVICE_TYPE ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_SERVICE_TYPE ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_SERVICE_TYPE ADD CHECK ( SERVICE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_SERVICE_TYPE ADD CHECK ( VENDOR_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_SERVICE_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_SERVICE_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_VENDOR_SERVICE_TYPE
IS
  'Table to hold the organization''s approved vendor list by service type.' ;
  COMMENT ON COLUMN ORG_VENDOR_SERVICE_TYPE.ORG_DB_ID
IS
  'FK to ORG_ORG_VENDOR. To indicate the organization of the given vendor-organization relationship.' ;
  COMMENT ON COLUMN ORG_VENDOR_SERVICE_TYPE.ORG_ID
IS
  'FK to ORG_ORG_VENDOR. To indicate the organization of the given vendor-organization relationship.' ;
  COMMENT ON COLUMN ORG_VENDOR_SERVICE_TYPE.VENDOR_DB_ID
IS
  'FK to ORG_ORG_VENDOR. To indicate the vendor of the given vendor-organization relationship.' ;
  COMMENT ON COLUMN ORG_VENDOR_SERVICE_TYPE.VENDOR_ID
IS
  'FK to ORG_ORG_VENDOR. To indicate the vendor of the given vendor-organization relationship.' ;
  COMMENT ON COLUMN ORG_VENDOR_SERVICE_TYPE.SERVICE_TYPE_DB_ID
IS
  'FK to REF_SERVICE_TYPE.  To indicate the service type for which the vendor is approved.' ;
  COMMENT ON COLUMN ORG_VENDOR_SERVICE_TYPE.SERVICE_TYPE_CD
IS
  'FK to REF_SERVICE_TYPE.  To indicate the service type for which the vendor is approved.' ;
  COMMENT ON COLUMN ORG_VENDOR_SERVICE_TYPE.VENDOR_STATUS_DB_ID
IS
  'FK to REF_VENDOR_STATUS. Vendor status for the given organization and order type.' ;
  COMMENT ON COLUMN ORG_VENDOR_SERVICE_TYPE.VENDOR_STATUS_CD
IS
  'FK to REF_VENDOR_STATUS. Vendor status for the given organization and order type.' ;
  COMMENT ON COLUMN ORG_VENDOR_SERVICE_TYPE.APPROVAL_EXPIRY_DT
IS
  'The date when the approval given for the vendor expires.' ;
  COMMENT ON COLUMN ORG_VENDOR_SERVICE_TYPE.WARNING_LDESC
IS
  'Attribute to hold warning note when the vendor is approved with warning.' ;
  COMMENT ON COLUMN ORG_VENDOR_SERVICE_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_VENDOR_SERVICE_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ORG_VENDOR_SERVICE_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_VENDOR_SERVICE_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ORG_VENDOR_SERVICE_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGORGVEN_ORGVENSRVTYPE ON ORG_VENDOR_SERVICE_TYPE
    (
      ORG_DB_ID ASC ,
      ORG_ID ASC ,
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
ALTER TABLE ORG_VENDOR_SERVICE_TYPE ADD CONSTRAINT PK_ORG_VENDOR_SERVICE_TYPE PRIMARY KEY ( ORG_DB_ID, ORG_ID, VENDOR_DB_ID, VENDOR_ID, SERVICE_TYPE_DB_ID, SERVICE_TYPE_CD ) ;


CREATE TABLE ORG_VENDOR_SPEC2K_CMND
  (
    VENDOR_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_CMND_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    SPEC2K_CMND_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SPEC2K_CMND_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_VENDOR_SPEC2K_CMND ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_SPEC2K_CMND ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_SPEC2K_CMND ADD CHECK ( VENDOR_CMND_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_SPEC2K_CMND ADD CHECK ( SPEC2K_CMND_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_SPEC2K_CMND ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_VENDOR_SPEC2K_CMND ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN ORG_VENDOR_SPEC2K_CMND.VENDOR_DB_ID
IS
  'Primary key.' ;
  COMMENT ON COLUMN ORG_VENDOR_SPEC2K_CMND.VENDOR_ID
IS
  'Primary key.' ;
  COMMENT ON COLUMN ORG_VENDOR_SPEC2K_CMND.VENDOR_CMND_ID
IS
  'Number assigned (1..n) in context of the Spec2000 commands the vendor supports.' ;
  COMMENT ON COLUMN ORG_VENDOR_SPEC2K_CMND.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN ORG_VENDOR_SPEC2K_CMND.CREATION_DT
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_VENDOR_SPEC2K_CMND.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN ORG_VENDOR_SPEC2K_CMND.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN ORG_VENDOR_SPEC2K_CMND.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_ORGVENDOR_ORGVENS2KCMD ON ORG_VENDOR_SPEC2K_CMND
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
ALTER TABLE ORG_VENDOR_SPEC2K_CMND ADD CONSTRAINT PK_ORG_VENDOR_SPEC2K_CMND PRIMARY KEY ( VENDOR_DB_ID, VENDOR_ID, VENDOR_CMND_ID ) ;


CREATE TABLE ORG_WORK_DEPT
  (
    DEPT_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    DEPT_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    DEPT_CD            VARCHAR2 (200) NOT NULL DEFERRABLE ,
    DEPT_TYPE_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    DEPT_TYPE_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG         NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_DB_ID NUMBER (10) ,
    LABOUR_SKILL_CD    VARCHAR2 (8) ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ORG_WORK_DEPT ADD CHECK ( DEPT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_WORK_DEPT ADD CHECK ( DEPT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_WORK_DEPT ADD CHECK ( DEPT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_WORK_DEPT ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_WORK_DEPT ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_WORK_DEPT ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ORG_WORK_DEPT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ORG_WORK_DEPT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ORG_WORK_DEPT
IS
  'Work Department: Work departments are the specific sub-organizations that execute maintenance. Scheduling levels and distributes work to departments.' ;
  COMMENT ON COLUMN ORG_WORK_DEPT.DEPT_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN ORG_WORK_DEPT.DEPT_ID
IS
  'Unique idenifier serving as part of the primary key.   new sequence org_work_dept_seq.' ;
  COMMENT ON COLUMN ORG_WORK_DEPT.DEPT_CD
IS
  'A user-entered unique identifier for the work department.' ;
  COMMENT ON COLUMN ORG_WORK_DEPT.DEPT_TYPE_DB_ID
IS
  'FK to REF_DEPT_TYPE.' ;
  COMMENT ON COLUMN ORG_WORK_DEPT.DEPT_TYPE_CD
IS
  'FK to REF_DEPT_TYPE.' ;
  COMMENT ON COLUMN ORG_WORK_DEPT.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN ORG_WORK_DEPT.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN ORG_WORK_DEPT.DESC_SDESC
IS
  'A name used to label the work department.' ;
  COMMENT ON COLUMN ORG_WORK_DEPT.DESC_LDESC
IS
  'A long description for the work department.' ;
  COMMENT ON COLUMN ORG_WORK_DEPT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ORG_WORK_DEPT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ORG_WORK_DEPT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ORG_WORK_DEPT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ORG_WORK_DEPT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE ORG_WORK_DEPT ADD CONSTRAINT PK_ORG_WORK_DEPT PRIMARY KEY ( DEPT_DB_ID, DEPT_ID ) ;
ALTER TABLE ORG_WORK_DEPT ADD CONSTRAINT IX_ORGWORKDEPTALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE PART_PRICE_SP
  (
    UUID              VARCHAR2 (36) NOT NULL DEFERRABLE ,
    VENDOR_CD         VARCHAR2 (16) NOT NULL DEFERRABLE ,
    CHANGE_CD         VARCHAR2 (1) NOT NULL DEFERRABLE ,
    MANUFACT_CD       VARCHAR2 (16) NOT NULL DEFERRABLE ,
    PART_NO_OEM       VARCHAR2 (40) NOT NULL DEFERRABLE ,
    UNIT_PRICE        NUMBER (15,5) NOT NULL DEFERRABLE ,
    QTY_UNIT_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    CURRENCY_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    EFFECTIVE_FROM_DT DATE NOT NULL DEFERRABLE ,
    EFFECTIVE_TO_DT   DATE ,
    LEAD_TIME FLOAT NOT NULL DEFERRABLE ,
    DISCOUNT_PCT FLOAT ,
    MIN_ORDER_QT FLOAT NOT NULL DEFERRABLE ,
    STD_SALE_QT FLOAT ,
    PRICE_TYPE_CD    VARCHAR2 (8) ,
    CONTRACT_NO      VARCHAR2 (40) ,
    DOC_REF_SDESC    VARCHAR2 (80) ,
    RFQ_REF          VARCHAR2 (80) ,
    VENDOR_NOTE      VARCHAR2 (4000) ,
    VENDOR_EXISTS    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    MANUFACT_EXISTS  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    PART_NO_EXISTS   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    QTY_UNIT_EXISTS  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CURRENCY_EXISTS  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    QTY_UNIT_APPLIES NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    MANUFACT_APPLIES NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    PRT_VD_APPLIES   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CNR_UNIQ_APPLIES NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PART_PRICE_SP ADD CHECK ( VENDOR_EXISTS BETWEEN 0 AND 1) DEFERRABLE ;
ALTER TABLE PART_PRICE_SP ADD CHECK ( MANUFACT_EXISTS BETWEEN 0 AND 1) DEFERRABLE ;
ALTER TABLE PART_PRICE_SP ADD CHECK ( PART_NO_EXISTS BETWEEN 0 AND 1) DEFERRABLE ;
ALTER TABLE PART_PRICE_SP ADD CHECK ( QTY_UNIT_EXISTS BETWEEN 0 AND 1) DEFERRABLE ;
ALTER TABLE PART_PRICE_SP ADD CHECK ( CURRENCY_EXISTS BETWEEN 0 AND 1) DEFERRABLE ;
ALTER TABLE PART_PRICE_SP ADD CHECK ( QTY_UNIT_APPLIES BETWEEN 0 AND 1) DEFERRABLE ;
ALTER TABLE PART_PRICE_SP ADD CHECK ( MANUFACT_APPLIES BETWEEN 0 AND 1) DEFERRABLE ;
ALTER TABLE PART_PRICE_SP ADD CHECK ( PRT_VD_APPLIES BETWEEN 0 AND 1) DEFERRABLE ;
ALTER TABLE PART_PRICE_SP ADD CHECK ( CNR_UNIQ_APPLIES BETWEEN 0 AND 1) DEFERRABLE ;
COMMENT ON TABLE PART_PRICE_SP
IS
  'This is a temporary (''scratch pad'') table for handling an incoming messages from Part Price Management adapter. All data in this table is transient and no FK''s are applied and does not require audit trigger columns and audit triggers applied to it.' ;
  COMMENT ON COLUMN PART_PRICE_SP.UUID
IS
  'Transaction''s unique ID.' ;
  COMMENT ON COLUMN PART_PRICE_SP.VENDOR_CD
IS
  'Maps to the SPL fileld of PartPrice element of the MxPartPrice XSD schema.' ;
  COMMENT ON COLUMN PART_PRICE_SP.CHANGE_CD
IS
  'Maps to the CHG fileld of PartPrice element of the MxPartPrice XSD schema.' ;
  COMMENT ON COLUMN PART_PRICE_SP.MANUFACT_CD
IS
  'Maps to the MFR fileld of PartPrice element of the MxPartPrice XSD schema.' ;
  COMMENT ON COLUMN PART_PRICE_SP.PART_NO_OEM
IS
  'Maps to the PNR fileld of PartPrice element of the MxPartPrice XSD schema.' ;
  COMMENT ON COLUMN PART_PRICE_SP.UNIT_PRICE
IS
  'Maps to the UNP fileld of PartPrice element of the MxPartPrice XSD schema.' ;
  COMMENT ON COLUMN PART_PRICE_SP.QTY_UNIT_CD
IS
  'Maps to the UNT fileld of PartPrice element of the MxPartPrice XSD schema.' ;
  COMMENT ON COLUMN PART_PRICE_SP.CURRENCY_CD
IS
  'Maps to the ICR fileld of PartPrice element of the MxPartPrice XSD schema.' ;
  COMMENT ON COLUMN PART_PRICE_SP.EFFECTIVE_FROM_DT
IS
  'Maps to the PED fileld of PartPrice element of the MxPartPrice XSD schema.' ;
  COMMENT ON COLUMN PART_PRICE_SP.EFFECTIVE_TO_DT
IS
  'Maps to the PFD fileld of PartPrice element of the MxPartPrice XSD schema.' ;
  COMMENT ON COLUMN PART_PRICE_SP.LEAD_TIME
IS
  'Maps to the LTM fileld of PartPrice element of the MxPartPrice XSD schema.' ;
  COMMENT ON COLUMN PART_PRICE_SP.DISCOUNT_PCT
IS
  'Maps to the PDP fileld of PartPrice element of the MxPartPrice XSD schema.' ;
  COMMENT ON COLUMN PART_PRICE_SP.MIN_ORDER_QT
IS
  'Maps to the MSQ fileld of PartPrice element of the MxPartPrice XSD schema.' ;
  COMMENT ON COLUMN PART_PRICE_SP.STD_SALE_QT
IS
  'Maps to the SOQ fileld of PartPrice element of the MxPartPrice XSD schema.' ;
  COMMENT ON COLUMN PART_PRICE_SP.PRICE_TYPE_CD
IS
  'Maps to the PTP fileld of PartPrice element of the MxPartPrice XSD schema.' ;
  COMMENT ON COLUMN PART_PRICE_SP.CONTRACT_NO
IS
  'Maps to the CNR fileld of PartPrice element of the MxPartPrice XSD schema.' ;
  COMMENT ON COLUMN PART_PRICE_SP.DOC_REF_SDESC
IS
  'Maps to the QRF fileld of PartPrice element of the MxPartPrice XSD schema.' ;
  COMMENT ON COLUMN PART_PRICE_SP.RFQ_REF
IS
  'Maps to the RFQ fileld of PartPrice element of the MxPartPrice XSD schema.' ;
  COMMENT ON COLUMN PART_PRICE_SP.VENDOR_NOTE
IS
  'Maps to the VNT fileld of PartPrice element of the MxPartPrice XSD schema.' ;
  COMMENT ON COLUMN PART_PRICE_SP.VENDOR_EXISTS
IS
  'Business rule flag: Does the vendor exists in Maintenix?' ;
  COMMENT ON COLUMN PART_PRICE_SP.MANUFACT_EXISTS
IS
  'Business rule flag: Does the manufacturer exists in Maintenix?' ;
  COMMENT ON COLUMN PART_PRICE_SP.PART_NO_EXISTS
IS
  'Business rule flag: Does the part number exists in Maintenix?' ;
  COMMENT ON COLUMN PART_PRICE_SP.QTY_UNIT_EXISTS
IS
  'Business rule flag: Does the unit of measure exists in Maintenix?' ;
  COMMENT ON COLUMN PART_PRICE_SP.CURRENCY_EXISTS
IS
  'Business rule flag: Does the currency exists in Maintenix?' ;
  COMMENT ON COLUMN PART_PRICE_SP.QTY_UNIT_APPLIES
IS
  'Business rule flag: Does the unit of measure apply to the part number in Maintenix?' ;
  COMMENT ON COLUMN PART_PRICE_SP.MANUFACT_APPLIES
IS
  'Business rule flag: Does the manufacturer apply to the part number in Maintenix?' ;
  COMMENT ON COLUMN PART_PRICE_SP.PRT_VD_APPLIES
IS
  'Business rule flag: Is the part price (PRT) compatible with the vendor (VD) in Maintenix?' ;
  COMMENT ON COLUMN PART_PRICE_SP.CNR_UNIQ_APPLIES
IS
  'Business rule flag: Is the contract number (CNR) unique for the vendor?' ;
  CREATE INDEX IX_PARTPRICESP_VENDORCD ON PART_PRICE_SP
    ( VENDOR_CD ASC
    ) ;
  CREATE INDEX IX_PARTPRICESP_MANUFACTCD ON PART_PRICE_SP
    ( MANUFACT_CD ASC
    ) ;
  CREATE INDEX IX_PARTPRICESP_PARTNOEM ON PART_PRICE_SP
    ( PART_NO_OEM ASC
    ) ;


CREATE TABLE PO_AUTH
  (
    PO_DB_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    PO_ID                 NUMBER (10) NOT NULL DEFERRABLE ,
    PO_AUTH_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    PO_AUTH_LVL_DB_ID     NUMBER (10) ,
    PO_AUTH_LVL_CD        VARCHAR2 (10) ,
    AUTH_HR_DB_ID         NUMBER (10) ,
    AUTH_HR_ID            NUMBER (10) ,
    AUTH_DT               DATE ,
    AUTH_NOTE             VARCHAR2 (4000) ,
    AOG_OVERRIDE_BOOL     NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    HIST_BOOL             NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    AUTH_LVL_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    AUTH_LVL_STATUS_CD    VARCHAR2 (10) NOT NULL DEFERRABLE ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PO_AUTH ADD CHECK ( PO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_AUTH ADD CHECK ( PO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_AUTH ADD CHECK ( PO_AUTH_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_AUTH ADD CHECK ( PO_AUTH_LVL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_AUTH ADD CHECK ( AUTH_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_AUTH ADD CHECK ( AUTH_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_AUTH ADD CHECK ( AOG_OVERRIDE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE PO_AUTH ADD CHECK ( HIST_BOOL         IN (0, 1)) DEFERRABLE ;
ALTER TABLE PO_AUTH ADD CHECK ( AUTH_LVL_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_AUTH ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PO_AUTH ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PO_AUTH
IS
  'This table is used to store the list of authorizing signatures that are needed to approve this PO.  Once those signatures have been obtained, this table will record the HR that performed the signature.' ;
  COMMENT ON COLUMN PO_AUTH.PO_DB_ID
IS
  'PK: FK PO_HEADER.  This is the purchase order that is being authorized.' ;
  COMMENT ON COLUMN PO_AUTH.PO_ID
IS
  'PK: FK PO_HEADER.  This is the purchase order that is being authorized.' ;
  COMMENT ON COLUMN PO_AUTH.PO_AUTH_ID
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN PO_AUTH.PO_AUTH_LVL_DB_ID
IS
  'FK PO_AUTH_LVL.  Records the necessary authorization level.
' ;
  COMMENT ON COLUMN PO_AUTH.PO_AUTH_LVL_CD
IS
  'FK PO_AUTH_LVL.  Records the necessary authorization level.' ;
  COMMENT ON COLUMN PO_AUTH.AUTH_HR_DB_ID
IS
  'FK ORG_HR.  This is the HR that signed the authorization line for this PO.  ' ;
  COMMENT ON COLUMN PO_AUTH.AUTH_HR_ID
IS
  'FK ORG_HR.  This is the HR that signed the authorization line for this PO.' ;
  COMMENT ON COLUMN PO_AUTH.AUTH_DT
IS
  'This is the date when the HR signed the authorization.' ;
  COMMENT ON COLUMN PO_AUTH.AUTH_NOTE
IS
  'This is a note that the HR provided when he signed the authorization.' ;
  COMMENT ON COLUMN PO_AUTH.AOG_OVERRIDE_BOOL
IS
  'This indicates that the user performed an AOG authorization override.' ;
  COMMENT ON COLUMN PO_AUTH.HIST_BOOL
IS
  'Indicates that this authorization was historic.' ;
  COMMENT ON COLUMN PO_AUTH.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN PO_AUTH.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN PO_AUTH.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN PO_AUTH.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  COMMENT ON COLUMN PO_AUTH.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  CREATE INDEX IX_ORGHR_POAUTH ON PO_AUTH
    (
      AUTH_HR_DB_ID ASC ,
      AUTH_HR_ID ASC
    ) ;
  CREATE INDEX IX_POHEADER_POAUTH ON PO_AUTH
    ( PO_DB_ID ASC , PO_ID ASC
    ) ;
ALTER TABLE PO_AUTH ADD CONSTRAINT "pk_PO_AUTH" PRIMARY KEY ( PO_DB_ID, PO_ID, PO_AUTH_ID ) ;


CREATE TABLE PO_HEADER
  (
    PO_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    PO_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    PO_TYPE_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    PO_TYPE_CD           VARCHAR2 (8) NOT NULL DEFERRABLE ,
    REQ_PRIORITY_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REQ_PRIORITY_CD      VARCHAR2 (8) NOT NULL DEFERRABLE ,
    SHIP_TO_LOC_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    SHIP_TO_LOC_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ACCOUNT_DB_ID NUMBER (10) ,
    VENDOR_ACCOUNT_ID    NUMBER (10) ,
    VENDOR_ACCOUNT_CD    VARCHAR2 (40) ,
    ORG_DB_ID            NUMBER (10) ,
    ORG_ID               NUMBER (10) ,
    CURRENCY_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    CURRENCY_CD          VARCHAR2 (8) NOT NULL DEFERRABLE ,
    EXCHG_QT FLOAT NOT NULL DEFERRABLE ,
    CONTACT_HR_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    CONTACT_HR_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    TERMS_CONDITIONS_DB_ID    NUMBER (10) ,
    TERMS_CONDITIONS_CD       VARCHAR2 (8) ,
    FOB_DB_ID                 NUMBER (10) ,
    FOB_CD                    VARCHAR2 (8) ,
    TRANSPORT_TYPE_DB_ID      NUMBER (10) ,
    TRANSPORT_TYPE_CD         VARCHAR2 (8) ,
    PO_AUTH_FLOW_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    PO_AUTH_FLOW_CD           VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BORROW_RATE_DB_ID         NUMBER (10) ,
    BORROW_RATE_CD            VARCHAR2 (8) ,
    VENDOR_NOTE               VARCHAR2 (4000) ,
    SHIP_TO_CODE              VARCHAR2 (8) ,
    ISSUED_DT                 DATE ,
    CLOSED_DT                 DATE ,
    LAST_MOD_DT               DATE ,
    RECEIPT_INSP_BOOL         NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RECEIVE_NOTE              VARCHAR2 (4000) ,
    SPEC2K_CUST_DB_ID         NUMBER (10) ,
    SPEC2K_CUST_CD            VARCHAR2 (8) ,
    BILL_TO_DB_ID             NUMBER (10) ,
    BILL_TO_CD                VARCHAR2 (8) ,
    CONSIGN_TO_DB_ID          NUMBER (10) ,
    CONSIGN_TO_CD             VARCHAR2 (8) ,
    RE_SHIP_TO_DB_ID          NUMBER (10) ,
    RE_SHIP_TO_ID             NUMBER (10) ,
    CREATED_BY_ORG_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    CREATED_BY_ORG_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    PO_REVISION_NO            NUMBER DEFAULT 0 NOT NULL DEFERRABLE ,
    BROKER_DB_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    BROKER_ID                 NUMBER (10) NOT NULL DEFERRABLE ,
    BROKER_ACCOUNT_DB_ID      NUMBER (10) ,
    BROKER_ACCOUNT_ID         NUMBER (10) ,
    BROKER_ACCOUNT_CD         VARCHAR2 (40) ,
    AUTH_STATUS_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    AUTH_STATUS_CD            VARCHAR2 (10) NOT NULL DEFERRABLE ,
    BUDGET_CHECK_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BUDGET_CHECK_STATUS_CD    VARCHAR2 (10) NOT NULL DEFERRABLE ,
    BUDGET_CHECK_CD           VARCHAR2 (40) ,
    BUDGET_CHECK_REF          VARCHAR2 (40) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PO_HEADER ADD CHECK ( PO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( PO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( PO_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( REQ_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( SHIP_TO_LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( SHIP_TO_LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( VENDOR_ACCOUNT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( VENDOR_ACCOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( CURRENCY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( CONTACT_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( CONTACT_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( TERMS_CONDITIONS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( FOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( TRANSPORT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( PO_AUTH_FLOW_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( BORROW_RATE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( RECEIPT_INSP_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( SPEC2K_CUST_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( BILL_TO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( CONSIGN_TO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( RE_SHIP_TO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( RE_SHIP_TO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( CREATED_BY_ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( CREATED_BY_ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( BROKER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( BROKER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( BROKER_ACCOUNT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( BROKER_ACCOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( AUTH_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( BUDGET_CHECK_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PO_HEADER ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PO_HEADER
IS
  'This table is used to store the header information for the purchase order.  There is one row for every purchase order.' ;
  COMMENT ON COLUMN PO_HEADER.PO_DB_ID
IS
  'PK: FK EVT_EVENT.' ;
  COMMENT ON COLUMN PO_HEADER.PO_ID
IS
  'PK: FK EVT_EVENT.' ;
  COMMENT ON COLUMN PO_HEADER.PO_TYPE_DB_ID
IS
  'FK REF_PO_TYPE.' ;
  COMMENT ON COLUMN PO_HEADER.PO_TYPE_CD
IS
  'FK REF_PO_TYPE.' ;
  COMMENT ON COLUMN PO_HEADER.REQ_PRIORITY_DB_ID
IS
  'FK REF_REQ_PRIORITY.' ;
  COMMENT ON COLUMN PO_HEADER.REQ_PRIORITY_CD
IS
  'FK REF_REQ_PRIORITY.' ;
  COMMENT ON COLUMN PO_HEADER.SHIP_TO_LOC_DB_ID
IS
  'FK INV_LOC.  Location where the purchased items should be shipped.  It is always a a location of type DOCK.' ;
  COMMENT ON COLUMN PO_HEADER.SHIP_TO_LOC_ID
IS
  'FK INV_LOC.  Location where the purchased items should be shipped.  It is always a a location of type DOCK.' ;
  COMMENT ON COLUMN PO_HEADER.VENDOR_DB_ID
IS
  'FK ORG_VENDOR.  This is the vendor for the purchase order.' ;
  COMMENT ON COLUMN PO_HEADER.VENDOR_ID
IS
  'FK ORG_VENDOR.  This is the vendor for the purchase order.' ;
  COMMENT ON COLUMN PO_HEADER.VENDOR_ACCOUNT_DB_ID
IS
  'FK ORG_VENDOR_ACCOUNT.  The vendor account that you will be using for the purchase order.' ;
  COMMENT ON COLUMN PO_HEADER.VENDOR_ACCOUNT_ID
IS
  'FK ORG_VENDOR_ACCOUNT.  The vendor account that you will be using for the purchase order.' ;
  COMMENT ON COLUMN PO_HEADER.VENDOR_ACCOUNT_CD
IS
  'FK ORG_VENDOR_ACCOUNT.  The vendor account that you will be using for the purchase order.' ;
  COMMENT ON COLUMN PO_HEADER.ORG_DB_ID
IS
  'FK to ORG_ORG.  This is the organization for which the order was created.' ;
  COMMENT ON COLUMN PO_HEADER.ORG_ID
IS
  'FK to ORG_ORG.  This is the organization for which the order was created.' ;
  COMMENT ON COLUMN PO_HEADER.CURRENCY_DB_ID
IS
  'FK REF_CURRENCY.  The is the currency for the purchase order.  ' ;
  COMMENT ON COLUMN PO_HEADER.CURRENCY_CD
IS
  'FK REF_CURRENCY.  The is the currency for the purchase order. ' ;
  COMMENT ON COLUMN PO_HEADER.EXCHG_QT
IS
  'This is the exchange rate at the time of the PO issue.  ' ;
  COMMENT ON COLUMN PO_HEADER.CONTACT_HR_DB_ID
IS
  'FK ORG_HR.  This is the HR that isthe purchasing contact for this PO.' ;
  COMMENT ON COLUMN PO_HEADER.CONTACT_HR_ID
IS
  'FK ORG_HR.  This is the HR that isthe purchasing contact for this PO.' ;
  COMMENT ON COLUMN PO_HEADER.TERMS_CONDITIONS_DB_ID
IS
  'FK REF_TERMS_CONDITIONS.  This is used to record the payment terms and conditions for the purchase order.' ;
  COMMENT ON COLUMN PO_HEADER.TERMS_CONDITIONS_CD
IS
  'FK REF_TERMS_CONDITIONS.  This is used to record the payment terms and conditions for the purchase order.' ;
  COMMENT ON COLUMN PO_HEADER.FOB_DB_ID
IS
  'FK REF_FOB.  The ''freight on board'' of the purchase order.  Used to indicate whether the purchaser will take ownership before or after the shipment has started.' ;
  COMMENT ON COLUMN PO_HEADER.FOB_CD
IS
  'FK REF_FOB.  The ''freight on board'' of the purchase order.  Used to indicate whether the purchaser will take ownership before or after the shipment has started.' ;
  COMMENT ON COLUMN PO_HEADER.TRANSPORT_TYPE_DB_ID
IS
  'FK REF_TRANSPORT_TYPE.  Type of transportation that you would like the vendor to use when they ship the parts.' ;
  COMMENT ON COLUMN PO_HEADER.TRANSPORT_TYPE_CD
IS
  'FK REF_TRANSPORT_TYPE.  Type of transportation that you would like the vendor to use when they ship the parts.' ;
  COMMENT ON COLUMN PO_HEADER.PO_AUTH_FLOW_DB_ID
IS
  'FK to REF_PO_AUTH_FLOW.  Defines the authorization workflow that will be used for this purchase order.' ;
  COMMENT ON COLUMN PO_HEADER.PO_AUTH_FLOW_CD
IS
  'FK to REF_PO_AUTH_FLOW.  Defines the authorization workflow that will be used for this purchase order.' ;
  COMMENT ON COLUMN PO_HEADER.BORROW_RATE_DB_ID
IS
  'FK to REF_BORROW_RATE' ;
  COMMENT ON COLUMN PO_HEADER.BORROW_RATE_CD
IS
  'FK to REF_BORROW_RATE' ;
  COMMENT ON COLUMN PO_HEADER.VENDOR_NOTE
IS
  'This is the note that will appear on the printed purchase order that you send to the vendor.
' ;
  COMMENT ON COLUMN PO_HEADER.SHIP_TO_CODE
IS
  'Ship To Code of a purchase order.' ;
  COMMENT ON COLUMN PO_HEADER.ISSUED_DT
IS
  'The date that the purchase order was issued.' ;
  COMMENT ON COLUMN PO_HEADER.CLOSED_DT
IS
  'The date that the purchase order was closed.' ;
  COMMENT ON COLUMN PO_HEADER.RECEIPT_INSP_BOOL
IS
  'This flag indicates if everything on this order needs to go through inspection upon receipt.' ;
  COMMENT ON COLUMN PO_HEADER.RECEIVE_NOTE
IS
  'Notes to the receiver regarding this purchase order.' ;
  COMMENT ON COLUMN PO_HEADER.SPEC2K_CUST_DB_ID
IS
  'Customer identification code from the REF_SPEC2K_CUST refterm table.  ' ;
  COMMENT ON COLUMN PO_HEADER.SPEC2K_CUST_CD
IS
  'Customer identification code from the REF_SPEC2K_CUST refterm table.  ' ;
  COMMENT ON COLUMN PO_HEADER.BILL_TO_DB_ID
IS
  'This is the person / group to bill the order to.' ;
  COMMENT ON COLUMN PO_HEADER.BILL_TO_CD
IS
  'This is the person / group to bill the order to.' ;
  COMMENT ON COLUMN PO_HEADER.CONSIGN_TO_DB_ID
IS
  'This is the person / group to consign the order to.' ;
  COMMENT ON COLUMN PO_HEADER.CONSIGN_TO_CD
IS
  'This is the person / group to consign the order to.' ;
  COMMENT ON COLUMN PO_HEADER.RE_SHIP_TO_DB_ID
IS
  'This is the location to re-expedite the shipment to' ;
  COMMENT ON COLUMN PO_HEADER.RE_SHIP_TO_ID
IS
  'This is the location to re-expedite the shipment to.' ;
  COMMENT ON COLUMN PO_HEADER.CREATED_BY_ORG_DB_ID
IS
  'Organization that created the order.' ;
  COMMENT ON COLUMN PO_HEADER.CREATED_BY_ORG_ID
IS
  'Organization that created the order.' ;
  COMMENT ON COLUMN PO_HEADER.PO_REVISION_NO
IS
  'Indicates the issue  number of the Order. When order is created and not issued, the initial value is 0.' ;
  COMMENT ON COLUMN PO_HEADER.BROKER_DB_ID
IS
  'FK to ORG_VENDOR. Broker is a type of vendor that is financially responsible for the work and who selects vendor to execute the work. ' ;
  COMMENT ON COLUMN PO_HEADER.BROKER_ID
IS
  'FK to ORG_VENDOR. Broker is a type of vendor that is financially responsible for the work and who selects vendor to execute the work. ' ;
  COMMENT ON COLUMN PO_HEADER.BROKER_ACCOUNT_DB_ID
IS
  'FK ORG_VENDOR_ACCOUNT. The broker account that is used for the purchase order.' ;
  COMMENT ON COLUMN PO_HEADER.BROKER_ACCOUNT_ID
IS
  'FK ORG_VENDOR_ACCOUNT. The broker account that is used for the purchase order.' ;
  COMMENT ON COLUMN PO_HEADER.BROKER_ACCOUNT_CD
IS
  'FK ORG_VENDOR_ACCOUNT. The broker account that is used for the purchase order.' ;
  COMMENT ON COLUMN PO_HEADER.AUTH_STATUS_DB_ID
IS
  'FK to REF_PO_AUTH_LVL_STATUS. The authorization status of the order.' ;
  COMMENT ON COLUMN PO_HEADER.AUTH_STATUS_CD
IS
  'FK to REF_PO_AUTH_LVL_STATUS. The authorization status of the order.' ;
  COMMENT ON COLUMN PO_HEADER.BUDGET_CHECK_STATUS_DB_ID
IS
  'FK to REF_PO_AUTH_LVL_STATUS. The budget check status of the order.' ;
  COMMENT ON COLUMN PO_HEADER.BUDGET_CHECK_STATUS_CD
IS
  'FK to REF_PO_AUTH_LVL_STATUS. The budget check status of the order.' ;
  COMMENT ON COLUMN PO_HEADER.BUDGET_CHECK_CD
IS
  'Budget check code.' ;
  COMMENT ON COLUMN PO_HEADER.BUDGET_CHECK_REF
IS
  'External Reference to Budget Check.' ;
  COMMENT ON COLUMN PO_HEADER.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN PO_HEADER.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN PO_HEADER.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN PO_HEADER.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN PO_HEADER.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVLOC_POHEADER ON PO_HEADER
    (
      SHIP_TO_LOC_DB_ID ASC ,
      SHIP_TO_LOC_ID ASC
    ) ;
  CREATE INDEX IX_INVLOCRESHIP_POHEADER ON PO_HEADER
    (
      RE_SHIP_TO_DB_ID ASC ,
      RE_SHIP_TO_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_POHEADER ON PO_HEADER
    (
      CONTACT_HR_DB_ID ASC ,
      CONTACT_HR_ID ASC
    ) ;
  CREATE INDEX IX_ORGVENDOR_POHEADER ON PO_HEADER
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
  CREATE INDEX IX_ORGVENDOR_BROKPOHEADER ON PO_HEADER
    (
      BROKER_DB_ID ASC ,
      BROKER_ID ASC
    ) ;
  CREATE INDEX IX_ORGVENDORACCNT_POHEADER ON PO_HEADER
    (
      VENDOR_ACCOUNT_DB_ID ASC ,
      VENDOR_ACCOUNT_ID ASC ,
      VENDOR_ACCOUNT_CD ASC
    ) ;
  CREATE INDEX IX_BROKORGVENDACC_POHEADER ON PO_HEADER
    (
      BROKER_ACCOUNT_DB_ID ASC ,
      BROKER_ACCOUNT_ID ASC ,
      BROKER_ACCOUNT_CD ASC
    ) ;
  CREATE INDEX IX_ORGORG_POHEADER ON PO_HEADER
    ( ORG_DB_ID ASC , ORG_ID ASC
    ) ;
  CREATE INDEX IX_CBORGORG_POHEADER ON PO_HEADER
    (
      CREATED_BY_ORG_DB_ID ASC ,
      CREATED_BY_ORG_ID ASC
    ) ;
ALTER TABLE PO_HEADER ADD CONSTRAINT "pk_PO_HEADER" PRIMARY KEY ( PO_DB_ID, PO_ID ) ;
ALTER TABLE PO_HEADER ADD CONSTRAINT IX_POHEADERALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE PO_INVOICE
  (
    PO_INVOICE_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    PO_INVOICE_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ACCOUNT_DB_ID NUMBER (10) ,
    VENDOR_ACCOUNT_ID    NUMBER (10) ,
    VENDOR_ACCOUNT_CD    VARCHAR2 (40) ,
    CONTACT_HR_DB_ID     NUMBER (10) ,
    CONTACT_HR_ID        NUMBER (10) ,
    INVOICE_DT           DATE ,
    PAY_DT               DATE ,
    CURRENCY_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    CURRENCY_CD          VARCHAR2 (8) NOT NULL DEFERRABLE ,
    EXCHG_QT FLOAT ,
    TERMS_CONDITIONS_DB_ID NUMBER (10) ,
    TERMS_CONDITIONS_CD    VARCHAR2 (8) ,
    CASH_DISCOUNT_PCT FLOAT ,
    CASH_DISCOUNT_EXP_DT DATE ,
    INVOICE_NOTE         VARCHAR2 (4000) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE ,
    INV_SEQ_NUM          NUMBER (10) ,
    VENDOR_INVOICE_SDESC VARCHAR2 (80) ,
    VENDOR_INVOICE_DT    DATE
  ) ;
ALTER TABLE PO_INVOICE ADD CHECK ( PO_INVOICE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE ADD CHECK ( PO_INVOICE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE ADD CHECK ( VENDOR_ACCOUNT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE ADD CHECK ( VENDOR_ACCOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE ADD CHECK ( CONTACT_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE ADD CHECK ( CONTACT_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE ADD CHECK ( CURRENCY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE ADD CHECK ( TERMS_CONDITIONS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PO_INVOICE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PO_INVOICE
IS
  'This table is used to store the header information for every invoice that is received in response to a PO.' ;
  COMMENT ON COLUMN PO_INVOICE.PO_INVOICE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN PO_INVOICE.PO_INVOICE_ID
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN PO_INVOICE.VENDOR_DB_ID
IS
  'FK to ORG_VENDOR.  The vendor that sent the invoice.' ;
  COMMENT ON COLUMN PO_INVOICE.VENDOR_ID
IS
  'FK to ORG_VENDOR.  The vendor that sent the invoice.' ;
  COMMENT ON COLUMN PO_INVOICE.VENDOR_ACCOUNT_DB_ID
IS
  'FK to ORG_VENDOR_ACCOUNT.  The account with the vendor.' ;
  COMMENT ON COLUMN PO_INVOICE.VENDOR_ACCOUNT_ID
IS
  'FK to ORG_VENDOR_ACCOUNT.  The account with the vendor.' ;
  COMMENT ON COLUMN PO_INVOICE.VENDOR_ACCOUNT_CD
IS
  'FK to ORG_VENDOR_ACCOUNT.  The account with the vendor.' ;
  COMMENT ON COLUMN PO_INVOICE.CONTACT_HR_DB_ID
IS
  'FK to ORG_HR.  The user that is responsible for looking after the invoice.' ;
  COMMENT ON COLUMN PO_INVOICE.CONTACT_HR_ID
IS
  'FK to ORG_HR.  The user that is responsible for looking after the invoice.' ;
  COMMENT ON COLUMN PO_INVOICE.INVOICE_DT
IS
  'This is the date that the invoice was generated.' ;
  COMMENT ON COLUMN PO_INVOICE.PAY_DT
IS
  'This is the date when the invoice was sent for payment.' ;
  COMMENT ON COLUMN PO_INVOICE.CURRENCY_DB_ID
IS
  'FK REF_CURRENCY.' ;
  COMMENT ON COLUMN PO_INVOICE.CURRENCY_CD
IS
  'FK REF_CURRENCY.' ;
  COMMENT ON COLUMN PO_INVOICE.EXCHG_QT
IS
  'This is the exchange rate at the time the invoice was sent for payment.' ;
  COMMENT ON COLUMN PO_INVOICE.TERMS_CONDITIONS_DB_ID
IS
  'FK REF_TERMS_CONDITIONS.' ;
  COMMENT ON COLUMN PO_INVOICE.TERMS_CONDITIONS_CD
IS
  'FK REF_TERMS_CONDITIONS.' ;
  COMMENT ON COLUMN PO_INVOICE.CASH_DISCOUNT_PCT
IS
  'This is a percentage value that indicates what discount you will receive if you pay in cash.' ;
  COMMENT ON COLUMN PO_INVOICE.CASH_DISCOUNT_EXP_DT
IS
  'If the vendor has provided a cash discount option, this date will tell you when that cash-discount-offer will expire.' ;
  COMMENT ON COLUMN PO_INVOICE.INVOICE_NOTE
IS
  'This is a generic note on the invoice.' ;
  COMMENT ON COLUMN PO_INVOICE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN PO_INVOICE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN PO_INVOICE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN PO_INVOICE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN PO_INVOICE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  COMMENT ON COLUMN PO_INVOICE.INV_SEQ_NUM
IS
  'Invoice revision number from external systems' ;
  COMMENT ON COLUMN PO_INVOICE.VENDOR_INVOICE_SDESC
IS
  'External invoice number, used by the vendor' ;
  COMMENT ON COLUMN PO_INVOICE.VENDOR_INVOICE_DT
IS
  'Date and time the invoice was sent by the vendor' ;
  CREATE INDEX IX_ORGHR_POINVOICE ON PO_INVOICE
    (
      CONTACT_HR_DB_ID ASC ,
      CONTACT_HR_ID ASC
    ) ;
  CREATE INDEX IX_ORGVENDOR_POINVOICE ON PO_INVOICE
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
  CREATE INDEX IX_ORGVENDORACCOUNT_POINVOICE ON PO_INVOICE
    (
      VENDOR_ACCOUNT_DB_ID ASC ,
      VENDOR_ACCOUNT_ID ASC ,
      VENDOR_ACCOUNT_CD ASC
    ) ;
ALTER TABLE PO_INVOICE ADD CONSTRAINT "pk_PO_INVOICE" PRIMARY KEY ( PO_INVOICE_DB_ID, PO_INVOICE_ID ) ;
ALTER TABLE PO_INVOICE ADD CONSTRAINT IX_POINVOICEALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE PO_INVOICE_LINE
  (
    PO_INVOICE_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    PO_INVOICE_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    PO_INVOICE_LINE_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID      NUMBER (10) ,
    PART_NO_ID         NUMBER (10) ,
    LINE_NO_ORD        NUMBER (4) ,
    LINE_LDESC         VARCHAR2 (4000) ,
    INVOICE_QT FLOAT DEFAULT 1 NOT NULL DEFERRABLE ,
    QTY_UNIT_DB_ID    NUMBER (10) ,
    QTY_UNIT_CD       VARCHAR2 (8) ,
    UNIT_PRICE        NUMBER (15,5) DEFAULT 0 NOT NULL DEFERRABLE ,
    LINE_PRICE        NUMBER (15,5) DEFAULT 0 NOT NULL DEFERRABLE ,
    INVOICE_LINE_NOTE VARCHAR2 (4000) ,
    ACCOUNT_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    ACCOUNT_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    CSGN_BOOL         NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    TAX_POINT_DT      DATE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PO_INVOICE_LINE ADD CHECK ( PO_INVOICE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE ADD CHECK ( PO_INVOICE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE ADD CHECK ( PO_INVOICE_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE ADD CHECK ( QTY_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE ADD CHECK ( ACCOUNT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE ADD CHECK ( ACCOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE ADD CHECK ( CSGN_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE ADD CHECK ( RSTAT_CD  IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PO_INVOICE_LINE
IS
  'This table is used to store the information on each line of the purchase order''s invoice.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.PO_INVOICE_DB_ID
IS
  'PK: FK PO_INVOICE.  This is the PO invoice that this invoice line is attached to.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.PO_INVOICE_ID
IS
  'PK: FK PO_INVOICE.  This is the PO invoice that this invoice line is attached to.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.PO_INVOICE_LINE_ID
IS
  'PK: A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.PART_NO_DB_ID
IS
  'FK to EQP_PART_NO.  If the invoice line is for a particular part number.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.PART_NO_ID
IS
  'FK to EQP_PART_NO.  If the invoice line is for a particular part number.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.LINE_NO_ORD
IS
  'This is an incrementing number for the invoice line.  ' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.LINE_LDESC
IS
  'This is a description of the invoice line.  It is copied directly from the PO line, or written by hand forthe miscellaneous invoice line.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.INVOICE_QT
IS
  'This is the quantity that was invoiced.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.QTY_UNIT_DB_ID
IS
  'FK REF_QTY_UNIT.  This are the units of measure for the invoice quantity.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.QTY_UNIT_CD
IS
  'FK REF_QTY_UNIT.  This are the units of measure for the invoice quantity.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.UNIT_PRICE
IS
  'This is cost of 1 unit of the invoiced part.  If ORDER_QT is null, then this represents the cost of the line.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.LINE_PRICE
IS
  'This is the total cost of the invoice PO line.  It is the sum of the (Unit Cost * Quantity) + Tax Costs + Charge Costs.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.INVOICE_LINE_NOTE
IS
  'This is a generic note that is associated with the invoice line in particular, rather than the note against the invoice as a whole.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.ACCOUNT_DB_ID
IS
  'FK FNC_ACCOUNT.  This is financial account that will be billed for the invoiced items or services.  This is used during the financial transaction that is recorded when the invoice is closed.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.ACCOUNT_ID
IS
  'FK FNC_ACCOUNT.  This is financial account that will be billed for the invoiced items or services.  This is used during the financial transaction that is recorded when the invoice is closed.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.TAX_POINT_DT
IS
  'Tax point date for invoice line. ' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN PO_INVOICE_LINE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EQPPARTNO_POINVOICELINE ON PO_INVOICE_LINE
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_FNCACCOUNT_POINVOICELINE ON PO_INVOICE_LINE
    (
      ACCOUNT_DB_ID ASC ,
      ACCOUNT_ID ASC
    ) ;
  CREATE INDEX IX_POINVOICE_POINVOICELINE ON PO_INVOICE_LINE
    (
      PO_INVOICE_DB_ID ASC ,
      PO_INVOICE_ID ASC
    ) ;
ALTER TABLE PO_INVOICE_LINE ADD CONSTRAINT "pk_PO_INVOICE_LINE" PRIMARY KEY ( PO_INVOICE_DB_ID, PO_INVOICE_ID, PO_INVOICE_LINE_ID ) ;
ALTER TABLE PO_INVOICE_LINE ADD CONSTRAINT IX_POINVOICELINEALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE PO_INVOICE_LINE_CHARGE
  (
    PO_INVOICE_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    PO_INVOICE_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    PO_INVOICE_LINE_ID NUMBER (10) NOT NULL DEFERRABLE ,
    CHARGE_ID RAW (16) NOT NULL DEFERRABLE ,
    CHARGE_AMOUNT  NUMBER (15,5) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PO_INVOICE_LINE_CHARGE ADD CHECK ( PO_INVOICE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE_CHARGE ADD CHECK ( PO_INVOICE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE_CHARGE ADD CHECK ( PO_INVOICE_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE_CHARGE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE_CHARGE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PO_INVOICE_LINE_CHARGE
IS
  'This table is used to store the list of charges that are being applied to a particular PO invoice line.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_CHARGE.PO_INVOICE_DB_ID
IS
  'PK: FK PO_INVOICE_LINE.  This is the PO invoice line that this charge is being applied to.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_CHARGE.PO_INVOICE_ID
IS
  'PK: FK PO_INVOICE_LINE.  This is the PO invoice line that this charge is being applied to.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_CHARGE.PO_INVOICE_LINE_ID
IS
  'PK: FK PO_INVOICE_LINE.  This is the PO invoice line that this charge is being applied to.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_CHARGE.CHARGE_ID
IS
  'PK: FK CHARGE' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_CHARGE.CHARGE_AMOUNT
IS
  'User specified charge amount.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_CHARGE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_CHARGE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_CHARGE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_CHARGE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_CHARGE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_POINVCLIN_POINVLINCHG ON PO_INVOICE_LINE_CHARGE
    (
      PO_INVOICE_DB_ID ASC ,
      PO_INVOICE_ID ASC ,
      PO_INVOICE_LINE_ID ASC
    ) ;
  CREATE INDEX IX_CHARGE_POINVOICELINECHARGE ON PO_INVOICE_LINE_CHARGE
    (
      CHARGE_ID ASC
    ) ;
ALTER TABLE PO_INVOICE_LINE_CHARGE ADD CONSTRAINT "pk_PO_INVOICE_LINE_CHARGE" PRIMARY KEY ( PO_INVOICE_DB_ID, PO_INVOICE_ID, PO_INVOICE_LINE_ID, CHARGE_ID ) ;


CREATE TABLE PO_INVOICE_LINE_MAP
  (
    PO_INVOICE_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    PO_INVOICE_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    PO_INVOICE_LINE_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PO_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    PO_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    PO_LINE_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PO_INVOICE_LINE_MAP ADD CHECK ( PO_INVOICE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE_MAP ADD CHECK ( PO_INVOICE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE_MAP ADD CHECK ( PO_INVOICE_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE_MAP ADD CHECK ( PO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE_MAP ADD CHECK ( PO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE_MAP ADD CHECK ( PO_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE_MAP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PO_INVOICE_LINE_MAP
IS
  'This table is used to map invoice lines against purchase order lines. Using this table a single PO line can be linked to multiple invoice lines, and a single invoice line can be used to pay for multiple PO lines.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_MAP.PO_INVOICE_DB_ID
IS
  'PK: FK PO_INVOICE_LINE.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_MAP.PO_INVOICE_ID
IS
  'PK: FK PO_INVOICE_LINE.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_MAP.PO_INVOICE_LINE_ID
IS
  'PK: FK PO_INVOICE_LINE.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_MAP.PO_DB_ID
IS
  'PK: FK PO_LINE.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_MAP.PO_ID
IS
  'PK: FK PO_LINE.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_MAP.PO_LINE_ID
IS
  'PK: FK PO_LINE.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_MAP.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_MAP.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_MAP.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_MAP.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_POLINE_POINVOICELINEMAP ON PO_INVOICE_LINE_MAP
    (
      PO_DB_ID ASC ,
      PO_ID ASC ,
      PO_LINE_ID ASC
    ) ;
  CREATE INDEX IX_POINVOICELINE_POINVLINEMAP ON PO_INVOICE_LINE_MAP
    (
      PO_INVOICE_DB_ID ASC ,
      PO_INVOICE_ID ASC ,
      PO_INVOICE_LINE_ID ASC
    ) ;
ALTER TABLE PO_INVOICE_LINE_MAP ADD CONSTRAINT "pk_PO_INVOICE_LINE_MAP" PRIMARY KEY ( PO_INVOICE_DB_ID, PO_INVOICE_ID, PO_INVOICE_LINE_ID, PO_DB_ID, PO_ID, PO_LINE_ID ) ;


CREATE TABLE PO_INVOICE_LINE_TAX
  (
    PO_INVOICE_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    PO_INVOICE_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    PO_INVOICE_LINE_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TAX_ID RAW (16) NOT NULL DEFERRABLE ,
    TAX_RATE FLOAT NOT NULL DEFERRABLE ,
    COMPOUND_BOOL  NUMBER (1) DEFAULT 0 ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PO_INVOICE_LINE_TAX ADD CHECK ( PO_INVOICE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE_TAX ADD CHECK ( PO_INVOICE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE_TAX ADD CHECK ( PO_INVOICE_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE_TAX ADD CHECK ( COMPOUND_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE_TAX ADD CHECK ( RSTAT_CD      IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PO_INVOICE_LINE_TAX ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PO_INVOICE_LINE_TAX
IS
  'This table is used to store the list of taxes that are being applied to a particular PO invoice line.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_TAX.PO_INVOICE_DB_ID
IS
  'PK : FK PO_INVOICE.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_TAX.PO_INVOICE_ID
IS
  'PK : FK PO_INVOICE.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_TAX.PO_INVOICE_LINE_ID
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_TAX.TAX_ID
IS
  'PK: FK TAX' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_TAX.TAX_RATE
IS
  'User specified tax rate.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_TAX.COMPOUND_BOOL
IS
  'Flag indicating if the tax is compound or not.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_TAX.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_TAX.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_TAX.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_TAX.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN PO_INVOICE_LINE_TAX.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_POINVOICELINE_POINVLINETAX ON PO_INVOICE_LINE_TAX
    (
      PO_INVOICE_DB_ID ASC ,
      PO_INVOICE_ID ASC ,
      PO_INVOICE_LINE_ID ASC
    ) ;
  CREATE INDEX IX_TAX_POINVOICELINETAX ON PO_INVOICE_LINE_TAX
    ( TAX_ID ASC
    ) ;
ALTER TABLE PO_INVOICE_LINE_TAX ADD CONSTRAINT "pk_PO_INVOICE_LINE_TAX" PRIMARY KEY ( PO_INVOICE_DB_ID, PO_INVOICE_ID, PO_INVOICE_LINE_ID, TAX_ID ) ;


CREATE TABLE PO_LINE
  (
    PO_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    PO_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    PO_LINE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    LINE_NO_ORD   NUMBER (4) NOT NULL DEFERRABLE ,
    LINE_LDESC    VARCHAR2 (4000) ,
    PART_NO_DB_ID NUMBER (10) ,
    PART_NO_ID    NUMBER (10) ,
    SCHED_DB_ID   NUMBER (10) ,
    SCHED_ID      NUMBER (10) ,
    ORDER_QT FLOAT NOT NULL DEFERRABLE ,
    RECEIVED_QT FLOAT ,
    INVOICE_QT FLOAT DEFAULT 0 NOT NULL DEFERRABLE ,
    QTY_UNIT_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    QTY_UNIT_CD             VARCHAR2 (8) NOT NULL DEFERRABLE ,
    UNIT_PRICE              NUMBER (15,5) DEFAULT 0 NOT NULL DEFERRABLE ,
    LINE_PRICE              NUMBER (15,5) DEFAULT 0 NOT NULL DEFERRABLE ,
    ACCRUED_VALUE           NUMBER (15,5) DEFAULT 0 NOT NULL DEFERRABLE ,
    BASE_UNIT_PRICE         NUMBER (15,5) ,
    PROMISE_BY_DT           DATE ,
    ORIG_PROMISE_BY_DT      DATE ,
    ORIG_UNIT_PRICE         NUMBER (15,5) ,
    RETURN_BY_DT            DATE ,
    ACCOUNT_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    ACCOUNT_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_NOTE             VARCHAR2 (4000) ,
    RECEIVER_NOTE           VARCHAR2 (4000) ,
    RECEIVED_DT             DATE ,
    PO_LINE_EXT_SDESC       VARCHAR2 (40) ,
    CONFIRM_PROMISE_BY_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    REPL_TASK_DB_ID         NUMBER (10) ,
    REPL_TASK_ID            NUMBER (10) ,
    XCHG_SHIPMENT_DB_ID     NUMBER (10) ,
    XCHG_SHIPMENT_ID        NUMBER (10) ,
    OWNER_DB_ID             NUMBER (10) ,
    OWNER_ID                NUMBER (10) ,
    MAINT_PICKUP_BOOL       NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    PO_LINE_TYPE_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    PO_LINE_TYPE_CD         VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PRE_INSP_QT FLOAT DEFAULT 0 NOT NULL DEFERRABLE ,
    PRICE_TYPE_DB_ID NUMBER (10) ,
    PRICE_TYPE_CD    VARCHAR2 (8) ,
    WARRANTY_BOOL    NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    DELETED_BOOL     NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CHANGE_REASON_CD VARCHAR2 (16) NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PO_LINE ADD CHECK ( PO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( PO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( PO_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( QTY_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( ACCOUNT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( ACCOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( CONFIRM_PROMISE_BY_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( REPL_TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( REPL_TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( XCHG_SHIPMENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( XCHG_SHIPMENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( OWNER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( OWNER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( MAINT_PICKUP_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( PO_LINE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( PRICE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( WARRANTY_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( DELETED_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( RSTAT_CD      IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PO_LINE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PO_LINE
IS
  'This table is used to store the information for each line on a purchase order.' ;
  COMMENT ON COLUMN PO_LINE.PO_DB_ID
IS
  'FK EVT_EVENT.  ' ;
  COMMENT ON COLUMN PO_LINE.PO_ID
IS
  'FK EVT_EVENT.' ;
  COMMENT ON COLUMN PO_LINE.PO_LINE_ID
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN PO_LINE.LINE_NO_ORD
IS
  'This is the ''line number'' for the purchase order line.' ;
  COMMENT ON COLUMN PO_LINE.LINE_LDESC
IS
  'This is a description of the purchase order line.' ;
  COMMENT ON COLUMN PO_LINE.PART_NO_DB_ID
IS
  'FK EQP_PART_NO.  This is the to-be-purchased part number for a part-based PO line.' ;
  COMMENT ON COLUMN PO_LINE.PART_NO_ID
IS
  'FK EQP_PART_NO.  This is the to-be-purchased part number for a part-based PO line.' ;
  COMMENT ON COLUMN PO_LINE.SCHED_DB_ID
IS
  'FK SCHED_STASK.  This is a link to the work order for a repair purchase order.' ;
  COMMENT ON COLUMN PO_LINE.SCHED_ID
IS
  'FK SCHED_STASK.  This is a link to the work order for a repair purchase order.' ;
  COMMENT ON COLUMN PO_LINE.ORDER_QT
IS
  'This is quantity that is being ordered.' ;
  COMMENT ON COLUMN PO_LINE.RECEIVED_QT
IS
  'Received quantity for a po line.' ;
  COMMENT ON COLUMN PO_LINE.INVOICE_QT
IS
  'Number items that have been marked for payment.' ;
  COMMENT ON COLUMN PO_LINE.QTY_UNIT_DB_ID
IS
  'FK REF_QTY_UNIT.  These are the units of measure for the quantity that is being ordered.  ' ;
  COMMENT ON COLUMN PO_LINE.QTY_UNIT_CD
IS
  'FK REF_QTY_UNIT.  These are the units of measure for the quantity that is being ordered.  ' ;
  COMMENT ON COLUMN PO_LINE.UNIT_PRICE
IS
  'This is the price of 1 unit of the purchased part.' ;
  COMMENT ON COLUMN PO_LINE.LINE_PRICE
IS
  'This is the total price of the PO line.  It is the sum of the (Unit Price * Quantity) + Tax Price + Charge Price.' ;
  COMMENT ON COLUMN PO_LINE.ACCRUED_VALUE
IS
  'Total current value of items financially received but not yet paid.' ;
  COMMENT ON COLUMN PO_LINE.BASE_UNIT_PRICE
IS
  'This is the base unit price for the part.' ;
  COMMENT ON COLUMN PO_LINE.PROMISE_BY_DT
IS
  'This is the date by which the vendor promises the ordered part.' ;
  COMMENT ON COLUMN PO_LINE.ORIG_PROMISE_BY_DT
IS
  'This is the date by which the vendor promises the ordered part at the time that the contract was originally agreed upon.' ;
  COMMENT ON COLUMN PO_LINE.ORIG_UNIT_PRICE
IS
  'This is the price of 1 unit of the purchased part at the time that the contract was originally agreed upon.' ;
  COMMENT ON COLUMN PO_LINE.RETURN_BY_DT
IS
  'This is the date that the part is expected to be returned.' ;
  COMMENT ON COLUMN PO_LINE.ACCOUNT_DB_ID
IS
  'FK FNC_ACCOUNT.  This is the financial account that will be billed for the purchase item or services.  This is used during the financial transaction that is recorded when the invoice is closed.' ;
  COMMENT ON COLUMN PO_LINE.ACCOUNT_ID
IS
  'FK FNC_ACCOUNT.  This is the financial account that will be billed for the purchase item or services.  This is used during the financial transaction that is recorded when the invoice is closed.' ;
  COMMENT ON COLUMN PO_LINE.VENDOR_NOTE
IS
  'This is a note to the vendor that is attached to this particular line, rather than the general note for the purchase order.' ;
  COMMENT ON COLUMN PO_LINE.RECEIVER_NOTE
IS
  'This is note that will be sent to the receiver once the purchased items arrive.' ;
  COMMENT ON COLUMN PO_LINE.PO_LINE_EXT_SDESC
IS
  'Reference to PO Line Number in External System' ;
  COMMENT ON COLUMN PO_LINE.REPL_TASK_DB_ID
IS
  'FK to SCHED_STASK - this the replacement task for the borrowed/exchanged part.' ;
  COMMENT ON COLUMN PO_LINE.REPL_TASK_ID
IS
  'FK to SCHED_STASK - this the replacement task for the borrowed/exchanged part.' ;
  COMMENT ON COLUMN PO_LINE.XCHG_SHIPMENT_DB_ID
IS
  'FK to SHIP_SHIPMENT - This is the shipment used to return the item to the vendor.' ;
  COMMENT ON COLUMN PO_LINE.XCHG_SHIPMENT_ID
IS
  'FK to SHIP_SHIPMENT - This is the shipment used to return the item to the vendor.' ;
  COMMENT ON COLUMN PO_LINE.OWNER_DB_ID
IS
  'FK to INV_OWNER - The owner for the to-be-purchased item.' ;
  COMMENT ON COLUMN PO_LINE.OWNER_ID
IS
  'FK to INV_OWNER - The owner for the to-be-purchased item.' ;
  COMMENT ON COLUMN PO_LINE.MAINT_PICKUP_BOOL
IS
  'This flag indicates whether the part should be picked up by maintenance.' ;
  COMMENT ON COLUMN PO_LINE.PRE_INSP_QT
IS
  'This field indicates the total inventory that has been received on the shipment.' ;
  COMMENT ON COLUMN PO_LINE.PRICE_TYPE_DB_ID
IS
  'This is the price type for the order line.' ;
  COMMENT ON COLUMN PO_LINE.PRICE_TYPE_CD
IS
  'This is the price type for the order line.' ;
  COMMENT ON COLUMN PO_LINE.WARRANTY_BOOL
IS
  'Indicates whether the order line is covered under warranty or not.' ;
  COMMENT ON COLUMN PO_LINE.CHANGE_REASON_CD
IS
  'A foreign key to the REF_CHANGE_CODE table indicating the change that was done to the order line' ;
  COMMENT ON COLUMN PO_LINE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN PO_LINE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN PO_LINE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  COMMENT ON COLUMN PO_LINE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN PO_LINE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  CREATE INDEX IX_EQPPRTNO_POLINE ON PO_LINE
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVOWNER_POLINE ON PO_LINE
    (
      OWNER_DB_ID ASC ,
      OWNER_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDSTASK_POLINE ON PO_LINE
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_REPLSCHEDSTASK_POLINE ON PO_LINE
    (
      REPL_TASK_DB_ID ASC ,
      REPL_TASK_ID ASC
    ) ;
  CREATE INDEX IX_SHIPSHIPMENT_POLINE ON PO_LINE
    (
      XCHG_SHIPMENT_DB_ID ASC ,
      XCHG_SHIPMENT_ID ASC
    ) ;
  CREATE INDEX IX_POHEADER_POLINE ON PO_LINE
    ( PO_DB_ID ASC , PO_ID ASC
    ) ;
  CREATE INDEX IX_FNCACCOUNT_POLINE ON PO_LINE
    (
      ACCOUNT_DB_ID ASC ,
      ACCOUNT_ID ASC
    ) ;
ALTER TABLE PO_LINE ADD CONSTRAINT "pk_PO_LINE" PRIMARY KEY ( PO_DB_ID, PO_ID, PO_LINE_ID ) ;
ALTER TABLE PO_LINE ADD CONSTRAINT IX_POLINEALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE PO_LINE_ACCOUNT
  (
    PO_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    PO_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    PO_LINE_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    ACCOUNT_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    ACCOUNT_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    ACCRUED_VALUE  NUMBER (15,5) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO    NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PO_LINE_ACCOUNT ADD CHECK ( PO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_ACCOUNT ADD CHECK ( PO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_ACCOUNT ADD CHECK ( PO_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_ACCOUNT ADD CHECK ( ACCOUNT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_ACCOUNT ADD CHECK ( ACCOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_ACCOUNT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PO_LINE_ACCOUNT ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_ACCOUNT ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_ACCOUNT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PO_LINE_ACCOUNT
IS
  'This table is used to map the accrual values of expense accounts related to order lines.' ;
  COMMENT ON COLUMN PO_LINE_ACCOUNT.PO_DB_ID
IS
  'PFK to PO_LINE' ;
  COMMENT ON COLUMN PO_LINE_ACCOUNT.PO_ID
IS
  'PFK to PO_LINE' ;
  COMMENT ON COLUMN PO_LINE_ACCOUNT.PO_LINE_ID
IS
  'PFK to PO_LINE' ;
  COMMENT ON COLUMN PO_LINE_ACCOUNT.ACCOUNT_DB_ID
IS
  'PFK to FNC_ACCOUNT' ;
  COMMENT ON COLUMN PO_LINE_ACCOUNT.ACCOUNT_ID
IS
  'PFK to FNC_ACCOUNT' ;
  COMMENT ON COLUMN PO_LINE_ACCOUNT.ACCRUED_VALUE
IS
  'Accrued value for the account associated to this po line.' ;
  COMMENT ON COLUMN PO_LINE_ACCOUNT.RSTAT_CD
IS
  'Status of the record' ;
  COMMENT ON COLUMN PO_LINE_ACCOUNT.REVISION_NO
IS
  'A number incremented each time the record is modified' ;
  COMMENT ON COLUMN PO_LINE_ACCOUNT.CTRL_DB_ID
IS
  'The identifier of the database that owns the record' ;
  COMMENT ON COLUMN PO_LINE_ACCOUNT.CREATION_DT
IS
  'The data and time at which the record was inserted' ;
  COMMENT ON COLUMN PO_LINE_ACCOUNT.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record' ;
  COMMENT ON COLUMN PO_LINE_ACCOUNT.REVISION_DT
IS
  'The data and time at which the record was last updated' ;
  COMMENT ON COLUMN PO_LINE_ACCOUNT.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN PO_LINE_ACCOUNT.REVISION_USER
IS
  'The name of the user that last updated the record' ;
  CREATE INDEX IX_POLINE_POLINEACCOUNT ON PO_LINE_ACCOUNT
    (
      PO_DB_ID ASC ,
      PO_ID ASC ,
      PO_LINE_ID ASC
    ) ;
  CREATE INDEX IX_FNCACCOUNT_POLINEACCOUNT ON PO_LINE_ACCOUNT
    (
      ACCOUNT_DB_ID ASC ,
      ACCOUNT_ID ASC
    ) ;
ALTER TABLE PO_LINE_ACCOUNT ADD CONSTRAINT PK_PO_LINE_ACCOUNT PRIMARY KEY ( PO_DB_ID, PO_ID, PO_LINE_ID, ACCOUNT_DB_ID, ACCOUNT_ID, CREATION_DB_ID ) ;


CREATE TABLE PO_LINE_CHARGE
  (
    PO_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    PO_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    PO_LINE_ID NUMBER (10) NOT NULL DEFERRABLE ,
    CHARGE_ID RAW (16) NOT NULL DEFERRABLE ,
    CHARGE_AMOUNT  NUMBER (15,5) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PO_LINE_CHARGE ADD CHECK ( PO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_CHARGE ADD CHECK ( PO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_CHARGE ADD CHECK ( PO_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_CHARGE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PO_LINE_CHARGE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PO_LINE_CHARGE
IS
  'This table is used to store the list of charges that are being applied to a particular PO line.' ;
  COMMENT ON COLUMN PO_LINE_CHARGE.PO_DB_ID
IS
  'PK: FK PO_LINE.' ;
  COMMENT ON COLUMN PO_LINE_CHARGE.PO_ID
IS
  'PK: FK PO_LINE.' ;
  COMMENT ON COLUMN PO_LINE_CHARGE.PO_LINE_ID
IS
  'PK: FK PO_LINE.' ;
  COMMENT ON COLUMN PO_LINE_CHARGE.CHARGE_ID
IS
  'PK: FK CHARGE' ;
  COMMENT ON COLUMN PO_LINE_CHARGE.CHARGE_AMOUNT
IS
  'User specified charge amount.' ;
  COMMENT ON COLUMN PO_LINE_CHARGE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN PO_LINE_CHARGE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN PO_LINE_CHARGE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN PO_LINE_CHARGE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN PO_LINE_CHARGE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_POLINE_POLINECHARGE ON PO_LINE_CHARGE
    (
      PO_DB_ID ASC ,
      PO_ID ASC ,
      PO_LINE_ID ASC
    ) ;
  CREATE INDEX IX_CHARGE_POLINECHARGE ON PO_LINE_CHARGE
    ( CHARGE_ID ASC
    ) ;
ALTER TABLE PO_LINE_CHARGE ADD CONSTRAINT "pk_PO_LINE_CHARGE" PRIMARY KEY ( PO_DB_ID, PO_ID, PO_LINE_ID, CHARGE_ID ) ;


CREATE TABLE PO_LINE_KIT_LINE
  (
    PO_LINE_KIT_LINE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PO_LINE_KIT_LINE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    PO_DB_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    PO_ID                  NUMBER (10) NOT NULL DEFERRABLE ,
    PO_LINE_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    INV_KIT_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    INV_KIT_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    KIT_QT FLOAT NOT NULL DEFERRABLE ,
    UNIT_PRICE FLOAT NOT NULL DEFERRABLE ,
    VALUE_PCT FLOAT NOT NULL DEFERRABLE ,
    RETURN_SHIPMENT_DB_ID NUMBER (10) ,
    RETURN_SHIPMENT_ID    NUMBER (10) ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PO_LINE_KIT_LINE ADD CHECK ( PO_LINE_KIT_LINE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_KIT_LINE ADD CHECK ( PO_LINE_KIT_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_KIT_LINE ADD CHECK ( PO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_KIT_LINE ADD CHECK ( PO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_KIT_LINE ADD CHECK ( PO_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_KIT_LINE ADD CHECK ( INV_KIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_KIT_LINE ADD CHECK ( INV_KIT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_KIT_LINE ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_KIT_LINE ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_KIT_LINE ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_KIT_LINE ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_KIT_LINE ADD CHECK ( RETURN_SHIPMENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_KIT_LINE ADD CHECK ( RETURN_SHIPMENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_KIT_LINE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PO_LINE_KIT_LINE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PO_LINE_KIT_LINE
IS
  'This table is used to store the information that is specific to purchasing a Kit.' ;
  CREATE INDEX IX_EQPPARTNO_POLINEKITLINE ON PO_LINE_KIT_LINE
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVINV_POLINEKITLINE ON PO_LINE_KIT_LINE
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_POLINEKITLINE_SHIPMENT ON PO_LINE_KIT_LINE
    (
      RETURN_SHIPMENT_DB_ID ASC ,
      RETURN_SHIPMENT_ID ASC
    ) ;
  CREATE INDEX IX_POLINE_POLINEKITLINE ON PO_LINE_KIT_LINE
    (
      PO_DB_ID ASC ,
      PO_ID ASC ,
      PO_LINE_ID ASC
    ) ;
  CREATE INDEX IX_INVKIT_POLINEKITLINE ON PO_LINE_KIT_LINE
    (
      INV_KIT_DB_ID ASC ,
      INV_KIT_ID ASC
    ) ;
ALTER TABLE PO_LINE_KIT_LINE ADD CONSTRAINT PK_PO_LINE_KIT_LINE PRIMARY KEY ( PO_LINE_KIT_LINE_DB_ID, PO_LINE_KIT_LINE_ID ) ;


CREATE TABLE PO_LINE_MP
  (
    PO_DB_ID       NUMBER (10) NOT NULL ,
    PO_ID          NUMBER (10) NOT NULL ,
    PO_LINE_ID     NUMBER (10) NOT NULL ,
    MP_KEY_SDESC   VARCHAR2 (80) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE PO_LINE_MP ADD CHECK ( PO_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE PO_LINE_MP ADD CHECK ( PO_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE PO_LINE_MP ADD CHECK ( PO_LINE_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE PO_LINE_MP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE PO_LINE_MP ADD CHECK ( REVISION_NO BETWEEN 0 AND 4294967295) ;
ALTER TABLE PO_LINE_MP ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE PO_LINE_MP ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE PO_LINE_MP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON TABLE PO_LINE_MP
IS
  'This table stores the material planning key description for an order line.' ;
  COMMENT ON COLUMN PO_LINE_MP.PO_DB_ID
IS
  'The order database identifier.' ;
  COMMENT ON COLUMN PO_LINE_MP.PO_ID
IS
  'The order identifier.' ;
  COMMENT ON COLUMN PO_LINE_MP.PO_LINE_ID
IS
  'The order line identifier.' ;
  COMMENT ON COLUMN PO_LINE_MP.MP_KEY_SDESC
IS
  'External key of a related object in Material Planning application. To be used only in context of Material Planning API.' ;
  COMMENT ON COLUMN PO_LINE_MP.RSTAT_CD
IS
  'Status of the record.' ;
  COMMENT ON COLUMN PO_LINE_MP.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN PO_LINE_MP.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN PO_LINE_MP.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN PO_LINE_MP.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN PO_LINE_MP.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN PO_LINE_MP.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN PO_LINE_MP.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_MP_KEY_SDESC_POLINEMP ON PO_LINE_MP
    ( MP_KEY_SDESC ASC
    ) ;
ALTER TABLE PO_LINE_MP ADD CONSTRAINT PK_PO_LINE_MP PRIMARY KEY ( PO_DB_ID, PO_ID, PO_LINE_ID ) ;


CREATE TABLE PO_LINE_RETURN_MAP
  (
    PO_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    PO_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    PO_LINE_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PO_LINE_RETURN_MAP ADD CHECK ( PO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_RETURN_MAP ADD CHECK ( PO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_RETURN_MAP ADD CHECK ( PO_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_RETURN_MAP ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_RETURN_MAP ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_RETURN_MAP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PO_LINE_RETURN_MAP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PO_LINE_RETURN_MAP
IS
  'This table stores the returned inventory for an order line.' ;
  COMMENT ON COLUMN PO_LINE_RETURN_MAP.PO_DB_ID
IS
  'The order database identifier.' ;
  COMMENT ON COLUMN PO_LINE_RETURN_MAP.PO_ID
IS
  'The order identifier.' ;
  COMMENT ON COLUMN PO_LINE_RETURN_MAP.PO_LINE_ID
IS
  'The order line identifier.' ;
  COMMENT ON COLUMN PO_LINE_RETURN_MAP.INV_NO_DB_ID
IS
  'The returned inventory database identifier.' ;
  COMMENT ON COLUMN PO_LINE_RETURN_MAP.INV_NO_ID
IS
  'The returned inventory identifier.' ;
  COMMENT ON COLUMN PO_LINE_RETURN_MAP.RSTAT_CD
IS
  'Status of the record.' ;
  COMMENT ON COLUMN PO_LINE_RETURN_MAP.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN PO_LINE_RETURN_MAP.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN PO_LINE_RETURN_MAP.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN PO_LINE_RETURN_MAP.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_INVINV_POLRTRN ON PO_LINE_RETURN_MAP
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_POLINE_POLRTRN ON PO_LINE_RETURN_MAP
    (
      PO_DB_ID ASC ,
      PO_ID ASC ,
      PO_LINE_ID ASC
    ) ;
ALTER TABLE PO_LINE_RETURN_MAP ADD CONSTRAINT PK_PO_LINE_RETURN_MAP PRIMARY KEY ( PO_DB_ID, PO_ID, PO_LINE_ID, INV_NO_DB_ID, INV_NO_ID ) ;


CREATE TABLE PO_LINE_TAX
  (
    PO_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    PO_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    PO_LINE_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TAX_ID RAW (16) NOT NULL DEFERRABLE ,
    TAX_RATE FLOAT ,
    COMPOUND_BOOL  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PO_LINE_TAX ADD CHECK ( PO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_TAX ADD CHECK ( PO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_TAX ADD CHECK ( PO_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_TAX ADD CHECK ( COMPOUND_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE PO_LINE_TAX ADD CHECK ( RSTAT_CD      IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PO_LINE_TAX ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PO_LINE_TAX
IS
  'This table is used to store the list of taxes that are being applied to the particular PO line.' ;
  COMMENT ON COLUMN PO_LINE_TAX.PO_DB_ID
IS
  'PK: FK PO_LINE.' ;
  COMMENT ON COLUMN PO_LINE_TAX.PO_ID
IS
  'PK: FK PO_LINE.' ;
  COMMENT ON COLUMN PO_LINE_TAX.PO_LINE_ID
IS
  'PK: FK PO_LINE.' ;
  COMMENT ON COLUMN PO_LINE_TAX.TAX_ID
IS
  'PK: FK TAX' ;
  COMMENT ON COLUMN PO_LINE_TAX.TAX_RATE
IS
  'User specified tax rate.' ;
  COMMENT ON COLUMN PO_LINE_TAX.COMPOUND_BOOL
IS
  'Flag indicating if tax is a compound tax or not.' ;
  COMMENT ON COLUMN PO_LINE_TAX.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN PO_LINE_TAX.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN PO_LINE_TAX.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN PO_LINE_TAX.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN PO_LINE_TAX.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_POLINE_POLINETAX ON PO_LINE_TAX
    (
      PO_DB_ID ASC ,
      PO_ID ASC ,
      PO_LINE_ID ASC
    ) ;
  CREATE INDEX IX_TAX_POLINETAX ON PO_LINE_TAX
    ( TAX_ID ASC
    ) ;
ALTER TABLE PO_LINE_TAX ADD CONSTRAINT "pk_PO_LINE_TAX" PRIMARY KEY ( PO_DB_ID, PO_ID, PO_LINE_ID, TAX_ID ) ;


CREATE TABLE PO_LINE_WARRANTY
  (
    PO_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    PO_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    PO_LINE_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PO_LINE_WARRANTY ADD CHECK ( PO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_WARRANTY ADD CHECK ( PO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_WARRANTY ADD CHECK ( PO_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_WARRANTY ADD CHECK ( WARRANTY_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_WARRANTY ADD CHECK ( WARRANTY_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PO_LINE_WARRANTY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PO_LINE_WARRANTY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN PO_LINE_WARRANTY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN PO_LINE_WARRANTY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN PO_LINE_WARRANTY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN PO_LINE_WARRANTY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN PO_LINE_WARRANTY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_POLINE_POLINEWARRANTY ON PO_LINE_WARRANTY
    (
      PO_DB_ID ASC ,
      PO_ID ASC ,
      PO_LINE_ID ASC
    ) ;
  CREATE INDEX IX_WARRANTYDEFN_POLINEWARRANTY ON PO_LINE_WARRANTY
    (
      WARRANTY_DEFN_DB_ID ASC ,
      WARRANTY_DEFN_ID ASC
    ) ;
ALTER TABLE PO_LINE_WARRANTY ADD CONSTRAINT PK_PO_LINE_WARRANTY PRIMARY KEY ( PO_DB_ID, PO_ID, PO_LINE_ID, WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) ;


CREATE TABLE PPC_ACTIVITY
  (
    ACTIVITY_ID RAW (16) DEFAULT SYS_GUID() NOT NULL DEFERRABLE ,
    WORK_PACKAGE_ID RAW (16) NOT NULL DEFERRABLE ,
    ACTIVITY_CD             VARCHAR2 (500) NOT NULL DEFERRABLE ,
    ACTIVITY_SDESC          VARCHAR2 (500) NOT NULL DEFERRABLE ,
    START_AFTER_HRS         NUMBER (19) ,
    END_BEFORE_HRS          NUMBER (19) ,
    PINNED_BOOL             NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    PPC_ACTIVITY_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PPC_ACTIVITY_TYPE_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    COMPLETION_PCT          NUMBER (5,2) ,
    FLAGS                   NUMBER (10) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD                NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER           VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_ACTIVITY ADD CHECK ( PINNED_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE PPC_ACTIVITY ADD CHECK ( PPC_ACTIVITY_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_ACTIVITY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_ACTIVITY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_ACTIVITY
IS
  'Defines common data for activity (TASK, MILESTONE, PHASE or WORKAREA) under given plan.' ;
  COMMENT ON COLUMN PPC_ACTIVITY.FLAGS
IS
  'Ppc Flags' ;
  CREATE INDEX IX_PPCWP_PPCACTIVITY ON PPC_ACTIVITY
    ( WORK_PACKAGE_ID ASC
    ) ;
ALTER TABLE PPC_ACTIVITY ADD CONSTRAINT PK_PPC_ACTIVITY PRIMARY KEY ( ACTIVITY_ID ) ;


CREATE TABLE PPC_ACTVTY_SNAPSHOT
  (
    ACTVTY_SNAPSHOT_ID RAW (16) DEFAULT SYS_GUID() NOT NULL DEFERRABLE ,
    WP_SNAPSHOT_ID RAW (16) NOT NULL DEFERRABLE ,
    ACTIVITY_ID RAW (16) NOT NULL DEFERRABLE ,
    START_DT       DATE NOT NULL DEFERRABLE ,
    END_DT         DATE NOT NULL DEFERRABLE ,
    TOTAL_SCHED_HR NUMBER (8,2) NOT NULL DEFERRABLE ,
    NAME           VARCHAR2 (500) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO    NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_ACTVTY_SNAPSHOT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_ACTVTY_SNAPSHOT ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_ACTVTY_SNAPSHOT ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_ACTVTY_SNAPSHOT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN PPC_ACTVTY_SNAPSHOT.NAME
IS
  'The name of the activity.' ;
  CREATE INDEX IX_PPCWPSNAPSHOT_ACTVTSNAPSHOT ON PPC_ACTVTY_SNAPSHOT
    (
      WP_SNAPSHOT_ID ASC
    ) ;
ALTER TABLE PPC_ACTVTY_SNAPSHOT ADD CONSTRAINT PK_PPC_ACTVTY_SNAPSHOT PRIMARY KEY ( ACTVTY_SNAPSHOT_ID ) ;


CREATE TABLE PPC_CREW
  (
    CREW_ID RAW (16) DEFAULT SYS_GUID() NOT NULL DEFERRABLE ,
    LOCATION_ID RAW (16) ,
    DEPT_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    DEPT_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    CREW_CD            VARCHAR2 (200) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (200) ,
    LABOUR_SKILL_DB_ID NUMBER (10) ,
    LABOUR_SKILL_CD    VARCHAR2 (8) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_CREW ADD CHECK ( DEPT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_CREW ADD CHECK ( DEPT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_CREW ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_CREW ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_CREW ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_CREW
IS
  'Defines PPC crews. The crews may be assigned to a PPC plan.' ;
  COMMENT ON COLUMN PPC_CREW.DEPT_DB_ID
IS
  'Optional foreign key to ORG_WORK_DEPT table. This is linked to the actual crew in Maintenix.' ;
  COMMENT ON COLUMN PPC_CREW.DEPT_ID
IS
  'Optional foreign key to ORG_WORK_DEPT table. This is linked to the actual crew in Maintenix.' ;
  COMMENT ON COLUMN PPC_CREW.DESC_SDESC
IS
  'Crew short description.' ;
  CREATE INDEX IX_ORGWORKDEPT_PPCCREW ON PPC_CREW
    (
      DEPT_DB_ID ASC ,
      DEPT_ID ASC
    ) ;
  CREATE INDEX IX_PPCLOC_PPCCREW ON PPC_CREW
    ( LOCATION_ID ASC
    ) ;
ALTER TABLE PPC_CREW ADD CONSTRAINT PK_PPC_CREW PRIMARY KEY ( CREW_ID ) ;


CREATE TABLE PPC_DEPENDENCY
  (
    FROM_ACTIVITY_ID RAW (16) NOT NULL DEFERRABLE ,
    TO_ACTIVITY_ID RAW (16) NOT NULL DEFERRABLE ,
    REL_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REL_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DELAY_HRS      NUMBER (6,2) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_DEPENDENCY ADD CHECK ( REL_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_DEPENDENCY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_DEPENDENCY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_DEPENDENCY
IS
  'This table specifies the relationship between dependable activities (TASK, MILESTONE and PHASE) under given plan.' ;
  CREATE INDEX IX_FROMACTIVITY_DEPENDENCY ON PPC_DEPENDENCY
    (
      FROM_ACTIVITY_ID ASC
    ) ;
  CREATE INDEX IX_TOACTIVITY_DEPENDENCY ON PPC_DEPENDENCY
    (
      TO_ACTIVITY_ID ASC
    ) ;
ALTER TABLE PPC_DEPENDENCY ADD CONSTRAINT PK_PPC_DEPENDENCY PRIMARY KEY ( FROM_ACTIVITY_ID, TO_ACTIVITY_ID ) ;


CREATE TABLE PPC_HR
  (
    HUMAN_RESOURCE_ID RAW (16) DEFAULT SYS_GUID() NOT NULL DEFERRABLE ,
    PLAN_ID RAW (16) NOT NULL DEFERRABLE ,
    HR_DB_ID       NUMBER (10) ,
    HR_ID          NUMBER (10) ,
    HR_NAME        VARCHAR2 (40) ,
    VIRTUAL_BOOL   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_HR ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_HR ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_HR ADD CHECK ( VIRTUAL_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE PPC_HR ADD CHECK ( RSTAT_CD     IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_HR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_HR
IS
  'This table contains the structure of the human resource data, assigned to the plan.' ;
  CREATE INDEX IX_ORGHR_PPCHR ON PPC_HR
    ( HR_DB_ID ASC , HR_ID ASC
    ) ;
  CREATE INDEX IX_PPCPLAN_PPCHR ON PPC_HR
    ( PLAN_ID ASC
    ) ;
ALTER TABLE PPC_HR ADD CONSTRAINT PK_PPC_HR PRIMARY KEY ( HUMAN_RESOURCE_ID ) ;


CREATE TABLE PPC_HR_LIC
  (
    HUMAN_RESOURCE_LIC_ID RAW (16) DEFAULT SYS_GUID() NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID  NUMBER (10) ,
    ASSMBL_CD     VARCHAR2 (8) ,
    CARRIER_DB_ID NUMBER (10) ,
    CARRIER_ID    NUMBER (10) ,
    HUMAN_RESOURCE_SHIFT_ID RAW (16) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_HR_LIC ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_HR_LIC ADD CHECK ( CARRIER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_HR_LIC ADD CHECK ( CARRIER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_HR_LIC ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_HR_LIC ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_HR_LIC
IS
  'This table defines carrier licenses for assigned HR shifts by assembly.' ;
  CREATE INDEX IX_EQPASMBL_PPCHRLIC ON PPC_HR_LIC
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
  CREATE INDEX IX_ORGCARRIER_PPCHRLIC ON PPC_HR_LIC
    (
      CARRIER_DB_ID ASC ,
      CARRIER_ID ASC
    ) ;
  CREATE INDEX IX_PPCHRSHFTPLN_PPCHRLIC ON PPC_HR_LIC
    (
      HUMAN_RESOURCE_SHIFT_ID ASC
    ) ;
ALTER TABLE PPC_HR_LIC ADD CONSTRAINT PK_PPC_HR_LIC PRIMARY KEY ( HUMAN_RESOURCE_LIC_ID ) ;


CREATE TABLE PPC_HR_SHIFT_PLAN
  (
    HUMAN_RESOURCE_SHIFT_ID RAW (16) DEFAULT SYS_GUID() NOT NULL DEFERRABLE ,
    HR_DB_ID         NUMBER (10) ,
    HR_ID            NUMBER (10) ,
    HR_SHIFT_PLAN_ID NUMBER (10) ,
    HUMAN_RESOURCE_ID RAW (16) NOT NULL DEFERRABLE ,
    CREW_ID RAW (16) ,
    LABOUR_SKILL_DB_ID NUMBER (10) ,
    LABOUR_SKILL_CD    VARCHAR2 (8) ,
    START_DT           DATE NOT NULL DEFERRABLE ,
    END_DT             DATE NOT NULL DEFERRABLE ,
    WORK_HRS           NUMBER (6,2) NOT NULL DEFERRABLE ,
    EFFICIENCY_PCT     NUMBER (3,2) NOT NULL DEFERRABLE ,
    CAPACITY_ID RAW (16) ,
    LOCATION_ID RAW (16) NOT NULL DEFERRABLE ,
    ABSENT_BOOL    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    LICENSED_BOOL  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_HR_SHIFT_PLAN ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_HR_SHIFT_PLAN ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_HR_SHIFT_PLAN ADD CHECK ( HR_SHIFT_PLAN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_HR_SHIFT_PLAN ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_HR_SHIFT_PLAN ADD CHECK ( ABSENT_BOOL   IN (0, 1)) DEFERRABLE ;
ALTER TABLE PPC_HR_SHIFT_PLAN ADD CHECK ( LICENSED_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE PPC_HR_SHIFT_PLAN ADD CHECK ( RSTAT_CD      IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_HR_SHIFT_PLAN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_HR_SHIFT_PLAN
IS
  'Defines human resource shifts under given plan.' ;
  COMMENT ON COLUMN PPC_HR_SHIFT_PLAN.LICENSED_BOOL
IS
  'Licensed flag for the shift' ;
  CREATE INDEX IX_PPCHRSHIFT_HRSHIFT_IFK ON PPC_HR_SHIFT_PLAN
    (
      HR_DB_ID ASC ,
      HR_ID ASC ,
      HR_SHIFT_PLAN_ID ASC
    ) ;
  CREATE INDEX IX_PPCCREW_PPCHRSHFTPLN ON PPC_HR_SHIFT_PLAN
    ( CREW_ID ASC
    ) ;
  CREATE INDEX IX_PPCLOC_PPCHRSHFTPLN ON PPC_HR_SHIFT_PLAN
    ( LOCATION_ID ASC
    ) ;
  CREATE INDEX IX_PPCHR_PPCHRSHFTPLN ON PPC_HR_SHIFT_PLAN
    (
      HUMAN_RESOURCE_ID ASC
    ) ;
  CREATE INDEX IX_PPCLOCCAP_PPCHRSHFTPLN ON PPC_HR_SHIFT_PLAN
    (
      CAPACITY_ID ASC
    ) ;
ALTER TABLE PPC_HR_SHIFT_PLAN ADD CONSTRAINT PK_PPC_HR_SHIFT_PLAN PRIMARY KEY ( HUMAN_RESOURCE_SHIFT_ID ) ;


CREATE TABLE PPC_HR_SLOT
  (
    HUMAN_RESOURCE_SLOT_ID RAW (16) DEFAULT SYS_GUID() NOT NULL DEFERRABLE ,
    HR_SLOT_ORD NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ROLE_ID RAW (16) NOT NULL DEFERRABLE ,
    LOCKED_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    START_DT    DATE NOT NULL DEFERRABLE ,
    END_DT      DATE NOT NULL DEFERRABLE ,
    SCHED_HR    NUMBER (6,2) NOT NULL DEFERRABLE ,
    HUMAN_RESOURCE_SHIFT_ID RAW (16) ,
    HR_NAME VARCHAR2 (40) ,
    REQ_RES_CT FLOAT DEFAULT 1.0 NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_HR_SLOT ADD CHECK ( LOCKED_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE PPC_HR_SLOT ADD CHECK ( RSTAT_CD    IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_HR_SLOT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_HR_SLOT
IS
  'Defines a human resource slots under given HR roles' ;
  CREATE INDEX IX_PPLABOUR_PPCHRSLOT ON PPC_HR_SLOT
    ( LABOUR_ROLE_ID ASC
    ) ;
  CREATE INDEX IX_PPCHRSHIFTPLAN_PPCHRSLOT ON PPC_HR_SLOT
    (
      HUMAN_RESOURCE_SHIFT_ID ASC
    ) ;
ALTER TABLE PPC_HR_SLOT ADD CONSTRAINT PK_PPC_HR_SLOT PRIMARY KEY ( HUMAN_RESOURCE_SLOT_ID ) ;


CREATE TABLE PPC_LABOUR
  (
    LABOUR_ID RAW (16) DEFAULT SYS_GUID() NOT NULL DEFERRABLE ,
    TASK_ID RAW (16) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    SCHED_LABOUR_DB_ID NUMBER (10) ,
    SCHED_LABOUR_ID    NUMBER (10) ,
    LABOUR_STAGE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_STAGE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_LABOUR ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_LABOUR ADD CHECK ( SCHED_LABOUR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_LABOUR ADD CHECK ( SCHED_LABOUR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_LABOUR ADD CHECK ( LABOUR_STAGE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_LABOUR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_LABOUR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_LABOUR
IS
  'Defines labour skills, applicable to given PPC task.' ;
  CREATE INDEX IX_PPCTASK_PPCLABOUR ON PPC_LABOUR
    ( TASK_ID ASC
    ) ;
ALTER TABLE PPC_LABOUR ADD CONSTRAINT PK_PPC_LABOUR PRIMARY KEY ( LABOUR_ID ) ;


CREATE TABLE PPC_LABOUR_ROLE
  (
    LABOUR_ROLE_ID RAW (16) DEFAULT SYS_GUID() NOT NULL DEFERRABLE ,
    LABOUR_ID RAW (16) NOT NULL DEFERRABLE ,
    LABOUR_ROLE_TYPE_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ROLE_TYPE_CD      VARCHAR2 (8) NOT NULL DEFERRABLE ,
    SCHED_LABOUR_ROLE_DB_ID  NUMBER (10) ,
    SCHED_LABOUR_ROLE_ID     NUMBER (10) ,
    START_DT                 DATE NOT NULL DEFERRABLE ,
    END_DT                   DATE NOT NULL DEFERRABLE ,
    SCHED_HR                 NUMBER (6,2) NOT NULL DEFERRABLE ,
    ACTUAL_HR                NUMBER (6,2) ,
    LABOUR_ROLE_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ROLE_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_LABOUR_ROLE ADD CHECK ( LABOUR_ROLE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_LABOUR_ROLE ADD CHECK ( SCHED_LABOUR_ROLE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_LABOUR_ROLE ADD CHECK ( SCHED_LABOUR_ROLE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_LABOUR_ROLE ADD CHECK ( LABOUR_ROLE_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_LABOUR_ROLE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_LABOUR_ROLE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_LABOUR_ROLE
IS
  'Defines labour roles.' ;
  CREATE INDEX IX_PPLABOUR_PPLABOURROLE ON PPC_LABOUR_ROLE
    ( LABOUR_ID ASC
    ) ;
ALTER TABLE PPC_LABOUR_ROLE ADD CONSTRAINT PK_PPC_LABOUR_ROLE PRIMARY KEY ( LABOUR_ROLE_ID ) ;


CREATE TABLE PPC_LOC
  (
    LOCATION_ID RAW (16) DEFAULT SYS_GUID() NOT NULL DEFERRABLE ,
    PLAN_ID RAW (16) NOT NULL DEFERRABLE ,
    NH_LOCATION_ID RAW (16) ,
    LOC_DB_ID         NUMBER (10) ,
    LOC_ID            NUMBER (10) ,
    LOC_CD            VARCHAR2 (2000) ,
    PRODUCTIVITY_PCT  NUMBER (3,2) ,
    SHIFT_LOAD_DT     DATE ,
    SHIFT_EARLIEST_DT DATE ,
    SHIFT_LATEST_DT   DATE ,
    SHIFT_CT          NUMBER (10) DEFAULT 0 ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_LOC ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_LOC ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_LOC ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_LOC ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_LOC
IS
  'Defines PPC related information for locations, assigned to given plan.' ;
  CREATE INDEX IX_INVLOC_PPCLOC ON PPC_LOC
    ( LOC_DB_ID ASC , LOC_ID ASC
    ) ;
  CREATE INDEX IX_PPCPLAN_PPCLOC ON PPC_LOC
    ( PLAN_ID ASC
    ) ;
ALTER TABLE PPC_LOC ADD CONSTRAINT PK_PPC_LOC PRIMARY KEY ( LOCATION_ID ) ;


CREATE TABLE PPC_LOC_CAPACITY
  (
    LOCATION_CAPACITY_ID RAW (16) DEFAULT SYS_GUID() NOT NULL DEFERRABLE ,
    LOCATION_ID RAW (16) NOT NULL DEFERRABLE ,
    CAP_PATTERN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    CAP_PATTERN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    START_DT          DATE ,
    END_DT            DATE ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_LOC_CAPACITY ADD CHECK ( CAP_PATTERN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_LOC_CAPACITY ADD CHECK ( CAP_PATTERN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_LOC_CAPACITY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_LOC_CAPACITY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_LOC_CAPACITY
IS
  'This table specifies the relationship between PPC locations and Capacity patterns. These relationships are used to location capacity calculations by capacity patterns, assigned to given plan.' ;
  CREATE INDEX IX_CAPPATTERN_PPCLOCCAP ON PPC_LOC_CAPACITY
    (
      CAP_PATTERN_DB_ID ASC ,
      CAP_PATTERN_ID ASC
    ) ;
  CREATE INDEX IX_PPCLOC_PPCLOCCAP ON PPC_LOC_CAPACITY
    ( LOCATION_ID ASC
    ) ;
ALTER TABLE PPC_LOC_CAPACITY ADD CONSTRAINT PK_PPC_LOC_CAPACITY PRIMARY KEY ( LOCATION_CAPACITY_ID ) ;


CREATE TABLE PPC_LOC_EXCLUDE
  (
    PLAN_ID RAW (16) NOT NULL DEFERRABLE ,
    LOC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_LOC_EXCLUDE ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_LOC_EXCLUDE ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_LOC_EXCLUDE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_LOC_EXCLUDE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_LOC_EXCLUDE
IS
  'This table contains information about excluded locations for given plan' ;
  CREATE INDEX IX_INVLOC_PPCLOCEX ON PPC_LOC_EXCLUDE
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
ALTER TABLE PPC_LOC_EXCLUDE ADD CONSTRAINT PK_PPC_LOC_EXCLUDE PRIMARY KEY ( PLAN_ID, LOC_DB_ID, LOC_ID ) ;


CREATE TABLE PPC_MILESTONE
  (
    MILESTONE_ID RAW (16) NOT NULL DEFERRABLE ,
    START_DT                 DATE NOT NULL DEFERRABLE ,
    PPC_MILESTONE_TYPE_DB_ID NUMBER (10) NOT NULL ,
    PPC_MILESTONE_TYPE_CD    VARCHAR2 (16) NOT NULL ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_MILESTONE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_MILESTONE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_MILESTONE
IS
  'Defines data for an activity of the MILESTONE type.' ;
  CREATE INDEX IX_PPCMILESTONE_MILESTONETYPE ON PPC_MILESTONE
    (
      PPC_MILESTONE_TYPE_DB_ID ASC ,
      PPC_MILESTONE_TYPE_CD ASC
    ) ;
ALTER TABLE PPC_MILESTONE ADD CONSTRAINT PK_PPC_MILESTONE PRIMARY KEY ( MILESTONE_ID ) ;


CREATE TABLE PPC_MILESTONE_COND
  (
    MILESTONE_ID RAW (16) NOT NULL DEFERRABLE ,
    AC_COND_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    AC_COND_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    COND_SET_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    COND_SET_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_MILESTONE_COND ADD CHECK ( AC_COND_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_MILESTONE_COND ADD CHECK ( COND_SET_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_MILESTONE_COND ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_MILESTONE_COND ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_MILESTONE_COND
IS
  'Assignes an Aircraft conditions, given MILESTONE should follow.' ;
  CREATE INDEX IX_ACCONDSET_PPCMILSTCOND ON PPC_MILESTONE_COND
    (
      AC_COND_DB_ID ASC ,
      AC_COND_CD ASC ,
      COND_SET_DB_ID ASC ,
      COND_SET_CD ASC
    ) ;
  CREATE INDEX IX_PPCMILESTONE_PPCMILSTCOND ON PPC_MILESTONE_COND
    (
      MILESTONE_ID ASC
    ) ;
ALTER TABLE PPC_MILESTONE_COND ADD CONSTRAINT PK_PPC_MILESTONE_COND PRIMARY KEY ( MILESTONE_ID, AC_COND_DB_ID, AC_COND_CD, COND_SET_DB_ID, COND_SET_CD ) ;


CREATE TABLE PPC_MPC_TEMPLATE_TASK
  (
    TASK_ID RAW (16) NOT NULL ,
    PARENT_TASK_DEFN_DB_ID NUMBER (10) NOT NULL ,
    PARENT_TASK_DEFN_ID    NUMBER (10) NOT NULL ,
    TASK_CLASS_SUBCLASS_CD VARCHAR2 (8) NOT NULL ,
    RSTAT_CD               NUMBER (3) NOT NULL ,
    CREATION_DT            DATE NOT NULL ,
    REVISION_DT            DATE NOT NULL ,
    REVISION_DB_ID         NUMBER (10) NOT NULL ,
    REVISION_USER          VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE PPC_MPC_TEMPLATE_TASK ADD CHECK ( TASK_CLASS_SUBCLASS_CD IN ('MPCOPEN','MPCCLOSE')) ;
ALTER TABLE PPC_MPC_TEMPLATE_TASK ADD CHECK ( RSTAT_CD               IN (0, 1, 2, 3)) ;
ALTER TABLE PPC_MPC_TEMPLATE_TASK ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE PPC_MPC_TEMPLATE_TASK ADD CONSTRAINT PK_PPC_MPC_TEMPLATE_TASK PRIMARY KEY ( TASK_ID ) ;


CREATE TABLE PPC_OPT_STATUS
  (
    PLAN_ID RAW (16) NOT NULL DEFERRABLE ,
    PPC_OPT_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PPC_OPT_STATUS_CD    VARCHAR2 (20) NOT NULL DEFERRABLE ,
    DESC_SDESC           VARCHAR2 (80) ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_OPT_STATUS ADD CHECK ( PPC_OPT_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_OPT_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_OPT_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_OPT_STATUS
IS
  'This table contains the structure of the optimization satus entries, logged for given plan.' ;
ALTER TABLE PPC_OPT_STATUS ADD CONSTRAINT PK_PPC_OPT_STATUS PRIMARY KEY ( PLAN_ID ) ;


CREATE TABLE PPC_PHASE
  (
    PHASE_ID RAW (16) NOT NULL DEFERRABLE ,
    NR_PHASE_ID RAW (16) ,
    NR_START_MILESTONE_ID RAW (16) ,
    NR_END_MILESTONE_ID RAW (16) ,
    CLOSED_BOOL    NUMBER (1) DEFAULT 0 NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_PHASE ADD CHECK ( CLOSED_BOOL IN (0, 1)) ;
ALTER TABLE PPC_PHASE ADD CHECK ( RSTAT_CD    IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_PHASE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_PHASE
IS
  'Defines data for an activity of the PHASE type.' ;
  CREATE INDEX IX_NRENDMLSTN_PPCPHASE ON PPC_PHASE
    ( NR_END_MILESTONE_ID ASC
    ) ;
  CREATE INDEX IX_NRSTRTMLSTN_PPCPHASE ON PPC_PHASE
    (
      NR_START_MILESTONE_ID ASC
    ) ;
ALTER TABLE PPC_PHASE ADD CONSTRAINT PK_PPC_PHASE PRIMARY KEY ( PHASE_ID ) ;


CREATE TABLE PPC_PHASE_CLASS
  (
    PHASE_CLASS_ID RAW (16) DEFAULT SYS_GUID() NOT NULL DEFERRABLE ,
    PHASE_ID RAW (16) NOT NULL DEFERRABLE ,
    TASK_CLASS_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_CLASS_CD       VARCHAR2 (16) NOT NULL DEFERRABLE ,
    TASK_SUBCLASS_DB_ID NUMBER (10) ,
    TASK_SUBCLASS_CD    VARCHAR2 (8) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_PHASE_CLASS ADD CHECK ( TASK_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_PHASE_CLASS ADD CHECK ( TASK_SUBCLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_PHASE_CLASS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_PHASE_CLASS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_PHASE_CLASS
IS
  'Defines applicable task classes for given PHASE. This information will be used for TASK auto assignemnt to a PHASE. The task could be assigned to given PHASE if TASK''s class matches with one of the class, defined for PHASE.' ;
  CREATE INDEX IX_PPCPHASE_PPCPHASECLASS ON PPC_PHASE_CLASS
    ( PHASE_ID ASC
    ) ;
ALTER TABLE PPC_PHASE_CLASS ADD CONSTRAINT PK_PPC_PHASE_CLASS PRIMARY KEY ( PHASE_CLASS_ID ) ;


CREATE TABLE PPC_PLAN
  (
    PLAN_ID RAW (16) DEFAULT SYS_GUID() NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    HORIZON_DAYS   NUMBER (10) NOT NULL DEFERRABLE ,
    TEMPLATE_BOOL  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    AUTH_USER_ID   NUMBER (10) ,
    AUTH_DT        DATE ,
    EDIT_USER_ID   NUMBER (10) ,
    EDIT_DT        DATE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_PLAN ADD CHECK ( TEMPLATE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE PPC_PLAN ADD CHECK ( RSTAT_CD      IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_PLAN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_PLAN
IS
  'This table contains the structure of the PPC plan.' ;
ALTER TABLE PPC_PLAN ADD CONSTRAINT PK_PPC_PLAN PRIMARY KEY ( PLAN_ID ) ;


CREATE TABLE PPC_PLANNING_TYPE
  (
    WORK_PACKAGE_ID RAW (16) NOT NULL DEFERRABLE ,
    PLANNING_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PLANNING_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    NR_FACTOR           NUMBER (8,5) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_PLANNING_TYPE ADD CHECK ( PLANNING_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_PLANNING_TYPE ADD CHECK ( PLANNING_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_PLANNING_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_PLANNING_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_PLANNING_TYPE
IS
  'Assigns a Planning Types from Maintenix, to given plan.' ;
ALTER TABLE PPC_PLANNING_TYPE ADD CONSTRAINT PK_PPC_PLANNING_TYPE PRIMARY KEY ( WORK_PACKAGE_ID, PLANNING_TYPE_DB_ID, PLANNING_TYPE_ID ) ;


CREATE TABLE PPC_PLANNING_TYPE_SKILL
  (
    WORK_PACKAGE_ID RAW (16) NOT NULL DEFERRABLE ,
    PLANNING_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PLANNING_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    EFFORT_PCT          NUMBER DEFAULT 1 NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_PLANNING_TYPE_SKILL ADD CHECK ( PLANNING_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_PLANNING_TYPE_SKILL ADD CHECK ( PLANNING_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_PLANNING_TYPE_SKILL ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_PLANNING_TYPE_SKILL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_PLANNING_TYPE_SKILL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_PLANNING_TYPE_SKILL
IS
  'Maps labour skills, applicable to given planning type.' ;
  CREATE INDEX IX_PPCPLNTYP_PLNTYPSKILL ON PPC_PLANNING_TYPE_SKILL
    (
      WORK_PACKAGE_ID ASC ,
      PLANNING_TYPE_DB_ID ASC ,
      PLANNING_TYPE_ID ASC
    ) ;
ALTER TABLE PPC_PLANNING_TYPE_SKILL ADD CONSTRAINT PK_PPC_PLANNING_TYPE_SKILL PRIMARY KEY ( WORK_PACKAGE_ID, PLANNING_TYPE_DB_ID, PLANNING_TYPE_ID, LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) ;


CREATE TABLE PPC_PUBLISH
  (
    WORK_PACKAGE_ID RAW (16) NOT NULL DEFERRABLE ,
    LAST_PUBLISH_DT       DATE NOT NULL DEFERRABLE ,
    PUBLISHED_BY_HR_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PUBLISHED_BY_HR_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    FAILURE_NUM           NUMBER (10) NOT NULL DEFERRABLE ,
    PUBLISHED_TASK_NUM    NUMBER (10) NOT NULL DEFERRABLE ,
    TOTAL_TASK_NUM        NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_PUBLISH ADD CHECK ( PUBLISHED_BY_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_PUBLISH ADD CHECK ( PUBLISHED_BY_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_PUBLISH ADD CHECK ( FAILURE_NUM BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_PUBLISH ADD CHECK ( PUBLISHED_TASK_NUM BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_PUBLISH ADD CHECK ( TOTAL_TASK_NUM BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_PUBLISH ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_PUBLISH ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_PUBLISH
IS
  'Historic records of the last PPC publishing.' ;
  CREATE INDEX IX_ORGHR_PPCPUBLISH ON PPC_PUBLISH
    (
      PUBLISHED_BY_HR_DB_ID ASC ,
      PUBLISHED_BY_HR_ID ASC
    ) ;
ALTER TABLE PPC_PUBLISH ADD CONSTRAINT PK_PPC_PUBLISH PRIMARY KEY ( WORK_PACKAGE_ID ) ;


CREATE TABLE PPC_PUBLISH_FAILURE
  (
    FAILURE_ID RAW (16) DEFAULT SYS_GUID() NOT NULL DEFERRABLE ,
    WORK_PACKAGE_ID RAW (16) NOT NULL DEFERRABLE ,
    TASK_ID RAW (16) NOT NULL DEFERRABLE ,
    PPC_PUBLISH_FAIL_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PPC_PUBLISH_FAIL_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD                    NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT                 DATE NOT NULL DEFERRABLE ,
    REVISION_DT                 DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER               VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_PUBLISH_FAILURE ADD CHECK ( PPC_PUBLISH_FAIL_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_PUBLISH_FAILURE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_PUBLISH_FAILURE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_PUBLISH_FAILURE
IS
  'Historic records of the PPC publish failures.' ;
  CREATE INDEX IX_PPCTASK_PPCPUBLISHFAILURE ON PPC_PUBLISH_FAILURE
    (
      TASK_ID ASC
    ) ;
  CREATE INDEX IX_PPCPUBLISH_PUBFAILURE ON PPC_PUBLISH_FAILURE
    (
      WORK_PACKAGE_ID ASC
    ) ;
ALTER TABLE PPC_PUBLISH_FAILURE ADD CONSTRAINT PK_PPC_PUBLISH_FAILURE PRIMARY KEY ( FAILURE_ID ) ;


CREATE TABLE PPC_TASK
  (
    TASK_ID RAW (16) NOT NULL DEFERRABLE ,
    START_DT        DATE NOT NULL DEFERRABLE ,
    END_DT          DATE NOT NULL DEFERRABLE ,
    SCHED_DB_ID     NUMBER (10) ,
    SCHED_ID        NUMBER (10) ,
    TASK_DEFN_DB_ID NUMBER (10) ,
    TASK_DEFN_ID    NUMBER (10) ,
    PHASE_ID RAW (16) ,
    WORK_AREA_ID RAW (16) ,
    NR_PHASE_ID RAW (16) ,
    NR_START_MILESTONE_ID RAW (16) ,
    NR_END_MILESTONE_ID RAW (16) ,
    SEQ_ID              NUMBER (10) ,
    TASK_PRIORITY_DB_ID NUMBER (10) ,
    TASK_PRIORITY_CD    VARCHAR2 (8) ,
    PLANNING_TYPE_DB_ID NUMBER (10) ,
    PLANNING_TYPE_ID    NUMBER (10) ,
    CREW_ID RAW (16) ,
    NR_EST_BOOL    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    WATCH_BOOL     NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    LATE_BOOL      NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    MAX_SPLIT_QT   NUMBER (4) ,
    SPLIT_BOOL     NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    TASK_STATUS    VARCHAR2 (16) ,
    PAUSE_REASON   VARCHAR2 (16) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_TASK ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_TASK ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_TASK ADD CHECK ( TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_TASK ADD CHECK ( TASK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_TASK ADD CHECK ( SEQ_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_TASK ADD CHECK ( TASK_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_TASK ADD CHECK ( PLANNING_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_TASK ADD CHECK ( PLANNING_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_TASK ADD CHECK ( NR_EST_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE PPC_TASK ADD CHECK ( WATCH_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE PPC_TASK ADD CHECK ( LATE_BOOL   IN (0, 1)) DEFERRABLE ;
ALTER TABLE PPC_TASK ADD CHECK ( SPLIT_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE PPC_TASK ADD CHECK ( RSTAT_CD    IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_TASK ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_TASK
IS
  'Defines data for an activity of the TASK type.' ;
  COMMENT ON COLUMN PPC_TASK.NR_EST_BOOL
IS
  '0 indicates this as a non-routine estimate task. 1 indicates this as a routine task.' ;
  COMMENT ON COLUMN PPC_TASK.MAX_SPLIT_QT
IS
  'Optional field that dictates the maximum number of child ppc_hr_slots allowed for this task' ;
  COMMENT ON COLUMN PPC_TASK.SPLIT_BOOL
IS
  '0 indicates that no ppc_hr_slots may be added or removed from this task' ;
  CREATE INDEX IX_PPCTASK_SCHED_IFK ON PPC_TASK
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_TASKDEFN_PPCTASK ON PPC_TASK
    (
      TASK_DEFN_DB_ID ASC ,
      TASK_DEFN_ID ASC
    ) ;
  CREATE INDEX IX_NRENDMILESTONE_PPCTASK ON PPC_TASK
    (
      NR_END_MILESTONE_ID ASC
    ) ;
  CREATE INDEX IX_NRSTARTMILESTONE_PPCTASK ON PPC_TASK
    (
      NR_START_MILESTONE_ID ASC
    ) ;
  CREATE INDEX IX_NRPHASE_PPCTASK ON PPC_TASK
    ( NR_PHASE_ID ASC
    ) ;
  CREATE INDEX IX_PPCPHASE_PPCTASK ON PPC_TASK
    ( PHASE_ID ASC
    ) ;
  CREATE INDEX IX_PPCWORKAREA_PPCTASK ON PPC_TASK
    ( WORK_AREA_ID ASC
    ) ;
  CREATE INDEX IX_EQPPLANNINGTYPE_PPCTASK ON PPC_TASK
    (
      PLANNING_TYPE_DB_ID ASC ,
      PLANNING_TYPE_ID ASC
    ) ;
  CREATE INDEX IX_PPCCREW_PPCTASK ON PPC_TASK
    ( CREW_ID ASC
    ) ;
ALTER TABLE PPC_TASK ADD CONSTRAINT PK_PPC_TASK PRIMARY KEY ( TASK_ID ) ;


CREATE TABLE PPC_TASK_DEFN
  (
    TASK_DEFINITION_ID RAW (16) DEFAULT SYS_GUID() NOT NULL DEFERRABLE ,
    WORK_PACKAGE_ID RAW (16) NOT NULL DEFERRABLE ,
    TASK_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    CLASS_MODE_CD   VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_TASK_DEFN ADD CHECK ( TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_TASK_DEFN ADD CHECK ( TASK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_TASK_DEFN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_TASK_DEFN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_TASK_DEFN
IS
  'Maps PPC task definition under given PPC workpackage to the task definition in Maintenix.' ;
  CREATE INDEX IX_TASKDEFN_PPCTASKDEFN ON PPC_TASK_DEFN
    (
      TASK_DEFN_DB_ID ASC ,
      TASK_DEFN_ID ASC
    ) ;
  CREATE INDEX IX_PPCWP_TASKDEFN ON PPC_TASK_DEFN
    ( WORK_PACKAGE_ID ASC
    ) ;
ALTER TABLE PPC_TASK_DEFN ADD CONSTRAINT PK_PPC_TASK_DEFN PRIMARY KEY ( TASK_DEFINITION_ID ) ;


CREATE TABLE PPC_TASK_DEFN_MAP
  (
    TASK_DEFINITION_ID RAW (16) NOT NULL DEFERRABLE ,
    TASK_ID RAW (16) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_TASK_DEFN_MAP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_TASK_DEFN_MAP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_TASK_DEFN_MAP
IS
  'Defines one-to-many relationship of a PPC task to PPC task definition.' ;
  CREATE INDEX IX_PPCTASK_PPCTASKDEFNMAP ON PPC_TASK_DEFN_MAP
    ( TASK_ID ASC
    ) ;
  CREATE INDEX IX_PPCTASKDEFN_PPCTASKDEFNMAP ON PPC_TASK_DEFN_MAP
    (
      TASK_DEFINITION_ID ASC
    ) ;
ALTER TABLE PPC_TASK_DEFN_MAP ADD CONSTRAINT PK_PPC_TASK_DEFN_MAP PRIMARY KEY ( TASK_DEFINITION_ID, TASK_ID ) ;


CREATE TABLE PPC_TASK_PANEL
  (
    TASK_ID RAW (16) NOT NULL ,
    PANEL_DB_ID    NUMBER (10) NOT NULL ,
    PANEL_ID       NUMBER (10) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE PPC_TASK_PANEL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE PPC_TASK_PANEL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE PPC_TASK_PANEL ADD CONSTRAINT PK_PPC_TASK_PANEL PRIMARY KEY ( TASK_ID, PANEL_DB_ID, PANEL_ID ) ;


CREATE TABLE PPC_WORK_AREA
  (
    WORK_AREA_ID RAW (16) NOT NULL DEFERRABLE ,
    MAX_LBR_CAPACITY_QT NUMBER (4) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_WORK_AREA ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_WORK_AREA ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_WORK_AREA
IS
  'Defines data for an activity of the WORKAREA type.' ;
ALTER TABLE PPC_WORK_AREA ADD CONSTRAINT PK_PPC_WORK_AREA PRIMARY KEY ( WORK_AREA_ID ) ;


CREATE TABLE PPC_WORK_AREA_CREW
  (
    WORK_AREA_ID RAW (16) NOT NULL DEFERRABLE ,
    CREW_ID RAW (16) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_WORK_AREA_CREW ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_WORK_AREA_CREW ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_WORK_AREA_CREW
IS
  'Defines allowable crews for given workarea.' ;
  CREATE INDEX IX_PPCWRKAREA_PPCWRKAREACRW ON PPC_WORK_AREA_CREW
    (
      WORK_AREA_ID ASC
    ) ;
  CREATE INDEX IX_PPCCREW_PPCWRKAREACRW ON PPC_WORK_AREA_CREW
    ( CREW_ID ASC
    ) ;
ALTER TABLE PPC_WORK_AREA_CREW ADD CONSTRAINT PK_PPC_WORK_AREA_CREW PRIMARY KEY ( WORK_AREA_ID, CREW_ID ) ;


CREATE TABLE PPC_WORK_AREA_ZONE
  (
    WORK_AREA_ZONE_ID RAW (16) DEFAULT SYS_GUID() NOT NULL DEFERRABLE ,
    WORK_AREA_ID RAW (16) NOT NULL DEFERRABLE ,
    ZONE_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    ZONE_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_WORK_AREA_ZONE ADD CHECK ( ZONE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_WORK_AREA_ZONE ADD CHECK ( ZONE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_WORK_AREA_ZONE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_WORK_AREA_ZONE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_WORK_AREA_ZONE
IS
  'Defines aircraft zones, applicable to given WORKAREA.' ;
  CREATE INDEX IX_EQPTASKZONE_PPCWORKAREAZONE ON PPC_WORK_AREA_ZONE
    (
      ZONE_DB_ID ASC ,
      ZONE_ID ASC
    ) ;
  CREATE INDEX IX_PPCWORKAREA_PPCWORKAREAZONE ON PPC_WORK_AREA_ZONE
    (
      WORK_AREA_ID ASC
    ) ;
ALTER TABLE PPC_WORK_AREA_ZONE ADD CONSTRAINT PK_PPC_WORK_AREA_ZONE PRIMARY KEY ( WORK_AREA_ZONE_ID ) ;


CREATE TABLE PPC_WP
  (
    WORK_PACKAGE_ID RAW (16) DEFAULT SYS_GUID() NOT NULL DEFERRABLE ,
    PLAN_ID RAW (16) NOT NULL DEFERRABLE ,
    LOCATION_ID RAW (16) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID NUMBER (10) ,
    ASSMBL_CD    VARCHAR2 (8) ,
    WP_DB_ID     NUMBER (10) ,
    WP_ID        NUMBER (10) ,
    NR_PHASE_ID RAW (16) ,
    TEMPLATE_ID RAW (16) ,
    MAX_NR_DURATION_HR NUMBER (6,2) ,
    ACTIVE_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    PINNED_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    EXCLUDED_BOOL      NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    PRIORITY_DB_ID     NUMBER (10) ,
    PRIORITY_CD        VARCHAR2 (8) ,
    START_DT           DATE ,
    START_AFTER_DT     DATE ,
    END_BEFORE_DT      DATE ,
    NR_ORIG_EST BLOB ,
    COMPLETION_PCT NUMBER (5,2) ,
    FILTERS BLOB ,
    LAST_LOAD_DT DATE ,
    CONTROL_USER_ID RAW (16) ,
    CONTROL_DT     DATE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_WP ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_WP ADD CHECK ( WP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_WP ADD CHECK ( WP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_WP ADD CHECK ( ACTIVE_BOOL   IN (0, 1)) DEFERRABLE ;
ALTER TABLE PPC_WP ADD CHECK ( PINNED_BOOL   IN (0, 1)) DEFERRABLE ;
ALTER TABLE PPC_WP ADD CHECK ( EXCLUDED_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE PPC_WP ADD CHECK ( PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_WP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_WP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE PPC_WP
IS
  'This table specifies the relationship between PPC plan and Maintenix''s work packages, assignes to given plan.' ;
  COMMENT ON COLUMN PPC_WP.ACTIVE_BOOL
IS
  '0 or 1 value. 1 indicates work package has been published. 0 indicates otherwise.' ;
  COMMENT ON COLUMN PPC_WP.NR_ORIG_EST
IS
  'Nr Original Estimates object in bytes' ;
  COMMENT ON COLUMN PPC_WP.LAST_LOAD_DT
IS
  'Date wp was last loaded via load actuals' ;
  CREATE INDEX IX_PPCWP_ASSMBL_IFK ON PPC_WP
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
  CREATE INDEX IX_PPCWP_WP_IFK ON PPC_WP
    ( WP_DB_ID ASC , WP_ID ASC
    ) ;
  CREATE INDEX IX_PPCTEMPLATE_PPCWP ON PPC_WP
    ( TEMPLATE_ID ASC
    ) ;
  CREATE INDEX IX_PPCPLAN_PPCWP ON PPC_WP
    ( PLAN_ID ASC
    ) ;
ALTER TABLE PPC_WP ADD CONSTRAINT PK_PPC_WP PRIMARY KEY ( WORK_PACKAGE_ID ) ;


CREATE TABLE PPC_WP_SNAPSHOT
  (
    WP_SNAPSHOT_ID RAW (16) DEFAULT SYS_GUID() NOT NULL DEFERRABLE ,
    WORK_PACKAGE_ID RAW (16) NOT NULL DEFERRABLE ,
    SNAPSHOT_DT    DATE NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO    NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE PPC_WP_SNAPSHOT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE PPC_WP_SNAPSHOT ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_WP_SNAPSHOT ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_WP_SNAPSHOT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE PPC_WP_SNAPSHOT ADD CONSTRAINT PK_PPC_WP_SNAPSHOT PRIMARY KEY ( WP_SNAPSHOT_ID ) ;


CREATE TABLE PUBSUB_CHANNEL
  (
    PUBSUB_CHANNEL_ID RAW (16) NOT NULL ,
    CHANNEL_NAME   VARCHAR2 (128) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE PUBSUB_CHANNEL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE PUBSUB_CHANNEL ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE PUBSUB_CHANNEL ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE PUBSUB_CHANNEL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON TABLE PUBSUB_CHANNEL
IS
  'Contains information about PubSub channels' ;
ALTER TABLE PUBSUB_CHANNEL ADD CONSTRAINT PK_PUBSUB_CHANNEL PRIMARY KEY ( PUBSUB_CHANNEL_ID ) ;
ALTER TABLE PUBSUB_CHANNEL ADD CONSTRAINT IX_PUBSUB_CHANNEL_UNQ UNIQUE ( CHANNEL_NAME ) ;


CREATE TABLE PUBSUB_CONFIG
  (
    PUBSUB_CONFIG_ID RAW (16) NOT NULL ,
    KEY            VARCHAR2 (128) ,
    VALUE          VARCHAR2 (255) ,
    CREATION_DT    DATE NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE PUBSUB_CONFIG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE PUBSUB_CONFIG ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE PUBSUB_CONFIG ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE PUBSUB_CONFIG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE PUBSUB_CONFIG ADD CONSTRAINT PK_PUBSUB_CONFIG_PK PRIMARY KEY ( PUBSUB_CONFIG_ID ) ;
ALTER TABLE PUBSUB_CONFIG ADD CONSTRAINT UK_PUBSUB_CONFIG_KEY UNIQUE ( KEY ) ;


CREATE TABLE PUBSUB_EVENT
  (
    PUBSUB_EVENT_ID RAW (16) NOT NULL ,
    PUBSUB_CHANNEL_ID RAW (16) NOT NULL ,
    PAYLOAD BLOB NOT NULL ,
    ORIGIN         VARCHAR2 (2048) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE PUBSUB_EVENT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE PUBSUB_EVENT ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE PUBSUB_EVENT ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE PUBSUB_EVENT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON TABLE PUBSUB_EVENT
IS
  'Strores events for channels' ;
  CREATE INDEX IX_PUBSUB_EVENT ON PUBSUB_EVENT
    ( PUBSUB_CHANNEL_ID ASC
    ) ;
ALTER TABLE PUBSUB_EVENT ADD CONSTRAINT PK_PUBSUB_EVENT PRIMARY KEY ( PUBSUB_EVENT_ID ) ;


CREATE TABLE PUBSUB_EVENT_PROPERTIES
  (
    KEY VARCHAR2 (100) NOT NULL ,
    PUBSUB_EVENT_ID RAW (16) NOT NULL ,
    VALUE VARCHAR2 (1000) NOT NULL
  ) ;
COMMENT ON TABLE PUBSUB_EVENT_PROPERTIES
IS
  'Properties of pubsub event.' ;
  COMMENT ON COLUMN PUBSUB_EVENT_PROPERTIES.KEY
IS
  'Property key' ;
  COMMENT ON COLUMN PUBSUB_EVENT_PROPERTIES.VALUE
IS
  'Property value' ;
  CREATE INDEX IX_PUBSUB_EVENT_PROPERTIES ON PUBSUB_EVENT_PROPERTIES
    (
      PUBSUB_EVENT_ID ASC
    ) ;
ALTER TABLE PUBSUB_EVENT_PROPERTIES ADD CONSTRAINT IX_PUBSUB_EVENT_PROPERTIES_UNQ UNIQUE ( PUBSUB_EVENT_ID , KEY ) ;


CREATE TABLE PUBSUB_SUBSCRIBER
  (
    PUBSUB_SUBSCRIBER_ID RAW (16) NOT NULL ,
    PUBSUB_CHANNEL_ID RAW (16) NOT NULL ,
    APP_ID           VARCHAR2 (80) NOT NULL ,
    CREATION_DT      DATE NOT NULL ,
    CIRCUIT_STATUS   VARCHAR2 (10) DEFAULT 'OPEN' ,
    CIRCUIT_CLOSE_DT TIMESTAMP (0) ,
    FAILED_ATTEMPTS  NUMBER DEFAULT 0 ,
    RSTAT_CD         NUMBER (3) NOT NULL ,
    REVISION_NO      NUMBER (10) NOT NULL ,
    CTRL_DB_ID       NUMBER (10) NOT NULL ,
    CREATION_DB_ID   NUMBER (10) NOT NULL ,
    REVISION_DT      DATE NOT NULL ,
    REVISION_DB_ID   NUMBER (10) NOT NULL ,
    REVISION_USER    VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE PUBSUB_SUBSCRIBER ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE PUBSUB_SUBSCRIBER ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE PUBSUB_SUBSCRIBER ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE PUBSUB_SUBSCRIBER ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON TABLE PUBSUB_SUBSCRIBER
IS
  'Stores subscriptions to channels' ;
  CREATE INDEX IX_PUBSUB_SUBSCRIBER ON PUBSUB_SUBSCRIBER
    (
      PUBSUB_CHANNEL_ID ASC
    ) ;
ALTER TABLE PUBSUB_SUBSCRIBER ADD CONSTRAINT PK_PUBSUB_SUBSCRIBER PRIMARY KEY ( PUBSUB_SUBSCRIBER_ID ) ;
ALTER TABLE PUBSUB_SUBSCRIBER ADD CONSTRAINT IX_PUBSUB_SUBSCRIBER_UNQ UNIQUE ( PUBSUB_CHANNEL_ID , APP_ID ) ;


CREATE TABLE PUBSUB_TRANSACTION
  (
    PUBSUB_TRANSACTION_ID RAW (16) NOT NULL ,
    PUBSUB_SUBSCRIBER_ID RAW (16) NOT NULL ,
    PUBSUB_EVENT_ID RAW (16) NOT NULL ,
    LOCKED_BOOL    NUMBER (1) ,
    PROCESSED_BOOL NUMBER (1) ,
    FAILED_BOOL    NUMBER (1) ,
    ATTEMPTS       NUMBER ,
    LOCKED_DT      TIMESTAMP ,
    VERSION        NUMBER ,
    CREATION_DT    DATE NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE PUBSUB_TRANSACTION ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE PUBSUB_TRANSACTION ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE PUBSUB_TRANSACTION ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE PUBSUB_TRANSACTION ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
CREATE INDEX IX_PUBSUB_TRANSACTION_SUB ON PUBSUB_TRANSACTION
  (
    PUBSUB_SUBSCRIBER_ID ASC
  ) ;
CREATE INDEX IX_PUBSUB_TRANSACTION_EVT ON PUBSUB_TRANSACTION
  (
    PUBSUB_EVENT_ID ASC
  ) ;
ALTER TABLE PUBSUB_TRANSACTION ADD CONSTRAINT PK_PUBSUB_TRANSACTION PRIMARY KEY ( PUBSUB_TRANSACTION_ID ) ;


CREATE TABLE QUAR_ACTION
  (
    QUAR_DB_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    QUAR_ID                  NUMBER (10) NOT NULL DEFERRABLE ,
    QUAR_ACTION_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    BARCODE_SDESC            VARCHAR2 (80) ,
    QUAR_ACTION_CATGRY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    QUAR_ACTION_CATGRY_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DISCREPANCY_LDESC        VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    ACTION_LDESC             VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    ACTION_NOTE CLOB ,
    LAST_NOTE_DT   DATE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE QUAR_ACTION ADD CHECK ( QUAR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_ACTION ADD CHECK ( QUAR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_ACTION ADD CHECK ( QUAR_ACTION_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_ACTION ADD CHECK ( QUAR_ACTION_CATGRY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_ACTION ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE QUAR_ACTION ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE QUAR_ACTION
IS
  'This table contains the corrective actions for a given quarantine record.' ;
  COMMENT ON COLUMN QUAR_ACTION.QUAR_DB_ID
IS
  'FK to QUAR_QUAR.  The quarantine record for which this action is associated.' ;
  COMMENT ON COLUMN QUAR_ACTION.QUAR_ID
IS
  'FK to QUAR_QUAR.  The quarantine record for which this action is associated.' ;
  COMMENT ON COLUMN QUAR_ACTION.QUAR_ACTION_ID
IS
  'The unique id of the quarantine corrective action.' ;
  COMMENT ON COLUMN QUAR_ACTION.BARCODE_SDESC
IS
  'Barcode to uniquely identify the quarantine corrective action.' ;
  COMMENT ON COLUMN QUAR_ACTION.QUAR_ACTION_CATGRY_DB_ID
IS
  'FK to REF_QUAR_ACTION_CATGRY' ;
  COMMENT ON COLUMN QUAR_ACTION.QUAR_ACTION_CATGRY_CD
IS
  'FK to REF_QUAR_ACTION_CATGRY' ;
  COMMENT ON COLUMN QUAR_ACTION.DISCREPANCY_LDESC
IS
  'The discrepancy description for the corrective action.' ;
  COMMENT ON COLUMN QUAR_ACTION.ACTION_LDESC
IS
  'The required corrective action description.' ;
  COMMENT ON COLUMN QUAR_ACTION.ACTION_NOTE
IS
  'Running notes for the corrective action.' ;
  COMMENT ON COLUMN QUAR_ACTION.LAST_NOTE_DT
IS
  'The datetime stamp of when that ACTION_NOTE was last updated.' ;
  COMMENT ON COLUMN QUAR_ACTION.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN QUAR_ACTION.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN QUAR_ACTION.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN QUAR_ACTION.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN QUAR_ACTION.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_QUARQUAR_QUARACTION ON QUAR_ACTION
    (
      QUAR_DB_ID ASC ,
      QUAR_ID ASC
    ) ;
ALTER TABLE QUAR_ACTION ADD CONSTRAINT PK_QUAR_ACTION PRIMARY KEY ( QUAR_DB_ID, QUAR_ID, QUAR_ACTION_ID ) ;


CREATE TABLE QUAR_ACTION_ASSIGNMENT
  (
    QUAR_DB_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    QUAR_ID                   NUMBER (10) NOT NULL DEFERRABLE ,
    QUAR_ACTION_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    QUAR_ACTION_ASSIGNMENT_ID VARCHAR2 (20) NOT NULL DEFERRABLE ,
    ASSIGNED_BOOL             NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    USER_ASSIGNED_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    HR_DB_ID                  NUMBER (10) ,
    HR_ID                     NUMBER (10) ,
    DEPT_DB_ID                NUMBER (10) ,
    DEPT_ID                   NUMBER (10) ,
    ASSIGNED_DT               DATE NOT NULL DEFERRABLE ,
    UNASSIGNED_DT             DATE ,
    RSTAT_CD                  NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT               DATE NOT NULL DEFERRABLE ,
    REVISION_DT               DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER             VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE QUAR_ACTION_ASSIGNMENT ADD CHECK ( QUAR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_ACTION_ASSIGNMENT ADD CHECK ( QUAR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_ACTION_ASSIGNMENT ADD CHECK ( QUAR_ACTION_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_ACTION_ASSIGNMENT ADD CHECK ( ASSIGNED_BOOL      IN (0, 1)) DEFERRABLE ;
ALTER TABLE QUAR_ACTION_ASSIGNMENT ADD CHECK ( USER_ASSIGNED_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE QUAR_ACTION_ASSIGNMENT ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_ACTION_ASSIGNMENT ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_ACTION_ASSIGNMENT ADD CHECK ( DEPT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_ACTION_ASSIGNMENT ADD CHECK ( DEPT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_ACTION_ASSIGNMENT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE QUAR_ACTION_ASSIGNMENT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN QUAR_ACTION_ASSIGNMENT.QUAR_ACTION_ID
IS
  'PFK to QUAR_ACTION.  The quarantine action associated to this quarintine action assignment.' ;
  COMMENT ON COLUMN QUAR_ACTION_ASSIGNMENT.QUAR_ACTION_ASSIGNMENT_ID
IS
  'Unique identifier for the quarantine action assignment.' ;
  COMMENT ON COLUMN QUAR_ACTION_ASSIGNMENT.ASSIGNED_BOOL
IS
  'Boolean to indicate the most current quarantine action assignment.' ;
  COMMENT ON COLUMN QUAR_ACTION_ASSIGNMENT.USER_ASSIGNED_BOOL
IS
  'Boolean to indicate if the quarantine action is assigned to a user or to a department.  Thus indicating whether FK to use; HR_DB_ID:HR_ID or DEPT_DB_ID:DEPT_ID' ;
  COMMENT ON COLUMN QUAR_ACTION_ASSIGNMENT.HR_DB_ID
IS
  'FK to ORG_HR' ;
  COMMENT ON COLUMN QUAR_ACTION_ASSIGNMENT.HR_ID
IS
  'FK to ORG_HR' ;
  COMMENT ON COLUMN QUAR_ACTION_ASSIGNMENT.DEPT_DB_ID
IS
  'FK to ORG_WORK_DEPT' ;
  COMMENT ON COLUMN QUAR_ACTION_ASSIGNMENT.DEPT_ID
IS
  'FK to ORG_WORK_DEPT' ;
  COMMENT ON COLUMN QUAR_ACTION_ASSIGNMENT.ASSIGNED_DT
IS
  'Date when the user or dept was assigned to the quarantine action.' ;
  COMMENT ON COLUMN QUAR_ACTION_ASSIGNMENT.UNASSIGNED_DT
IS
  'Date when the user or dept was unassigned from the quarantine action.' ;
  COMMENT ON COLUMN QUAR_ACTION_ASSIGNMENT.RSTAT_CD
IS
  'FK to MIM_RSTAT. A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN QUAR_ACTION_ASSIGNMENT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN QUAR_ACTION_ASSIGNMENT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN QUAR_ACTION_ASSIGNMENT.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN QUAR_ACTION_ASSIGNMENT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGHR_QUARACTNASSIGN ON QUAR_ACTION_ASSIGNMENT
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
  CREATE INDEX IX_ORGWORKDEPT_QUARACTNASSIGN ON QUAR_ACTION_ASSIGNMENT
    (
      DEPT_DB_ID ASC ,
      DEPT_ID ASC
    ) ;
  CREATE INDEX IX_QUARACTION_QUARACTNASSIGN ON QUAR_ACTION_ASSIGNMENT
    (
      QUAR_DB_ID ASC ,
      QUAR_ID ASC ,
      QUAR_ACTION_ID ASC
    ) ;
ALTER TABLE QUAR_ACTION_ASSIGNMENT ADD CONSTRAINT QUARACTASSIGNMNT_USER_DEPT_CHK CHECK (( (USER_ASSIGNED_BOOL = 1) AND ( (HR_DB_ID IS NOT NULL) AND (HR_ID IS NOT NULL) ) ) OR ( (USER_ASSIGNED_BOOL = 0) AND ( (DEPT_DB_ID IS NOT NULL) AND (DEPT_ID IS NOT NULL) ) )) DEFERRABLE ;
ALTER TABLE QUAR_ACTION_ASSIGNMENT ADD CONSTRAINT QUARACTASSIGNMNT_ASSIGNED_CHK CHECK (( (ASSIGNED_BOOL       = 1) AND ( ASSIGNED_DT IS NOT NULL ) ) OR ( (ASSIGNED_BOOL = 0) AND ( UNASSIGNED_DT IS NOT NULL ) )) DEFERRABLE ;
ALTER TABLE QUAR_ACTION_ASSIGNMENT ADD CONSTRAINT PK_QUAR_ACTION_ASSIGNMENT PRIMARY KEY ( QUAR_DB_ID, QUAR_ID, QUAR_ACTION_ID, QUAR_ACTION_ASSIGNMENT_ID ) ;


CREATE TABLE QUAR_ACTION_STATUS
  (
    QUAR_DB_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    QUAR_ID                  NUMBER (10) NOT NULL DEFERRABLE ,
    QUAR_ACTION_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    QUAR_ACTION_STAGE_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    QUAR_ACTION_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    QUAR_ACTION_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    HR_DB_ID                 NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID                    NUMBER (10) NOT NULL DEFERRABLE ,
    CHANGED_DT               DATE NOT NULL DEFERRABLE ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE QUAR_ACTION_STATUS ADD CHECK ( QUAR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_ACTION_STATUS ADD CHECK ( QUAR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_ACTION_STATUS ADD CHECK ( QUAR_ACTION_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_ACTION_STATUS ADD CHECK ( QUAR_ACTION_STAGE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_ACTION_STATUS ADD CHECK ( QUAR_ACTION_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_ACTION_STATUS ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_ACTION_STATUS ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_ACTION_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE QUAR_ACTION_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE QUAR_ACTION_STATUS
IS
  'This table contains the status of the quarantine corrective action.' ;
  COMMENT ON COLUMN QUAR_ACTION_STATUS.QUAR_ACTION_ID
IS
  'FK to QUAR_ACTION. The quarantine action associated to this quarintine action status.' ;
  COMMENT ON COLUMN QUAR_ACTION_STATUS.QUAR_ACTION_STAGE_ID
IS
  'The unique stage identifier for the quarantine corrective action.' ;
  COMMENT ON COLUMN QUAR_ACTION_STATUS.QUAR_ACTION_STATUS_DB_ID
IS
  'FK to REF_QUAR_ACTION_STATUS' ;
  COMMENT ON COLUMN QUAR_ACTION_STATUS.QUAR_ACTION_STATUS_CD
IS
  'FK to REF_QUAR_ACTION_STATUS' ;
  COMMENT ON COLUMN QUAR_ACTION_STATUS.HR_DB_ID
IS
  'FK to ORG_HR. The user who set the status.' ;
  COMMENT ON COLUMN QUAR_ACTION_STATUS.HR_ID
IS
  'FK to ORG_HR. The user who set the status.' ;
  COMMENT ON COLUMN QUAR_ACTION_STATUS.CHANGED_DT
IS
  'The timestame when the status was set.' ;
  COMMENT ON COLUMN QUAR_ACTION_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN QUAR_ACTION_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN QUAR_ACTION_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN QUAR_ACTION_STATUS.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN QUAR_ACTION_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGHR_QUARACTIONSTATUS ON QUAR_ACTION_STATUS
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
  CREATE INDEX IX_QUARACT_QUARACTSTATUS ON QUAR_ACTION_STATUS
    (
      QUAR_DB_ID ASC ,
      QUAR_ID ASC ,
      QUAR_ACTION_ID ASC
    ) ;
ALTER TABLE QUAR_ACTION_STATUS ADD CONSTRAINT PK_QUAR_ACTION_STATUS PRIMARY KEY ( QUAR_DB_ID, QUAR_ID, QUAR_ACTION_ID, QUAR_ACTION_STAGE_ID ) ;


CREATE TABLE QUAR_QUAR
  (
    QUAR_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    QUAR_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    BARCODE_SDESC VARCHAR2 (80) ,
    QUAR_NOTE CLOB ,
    QUAR_GDT      DATE ,
    HISTORIC_BOOL NUMBER (1) DEFAULT 0 ,
    INV_NO_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    HR_DB_ID      NUMBER (10) ,
    HR_ID         NUMBER (10) ,
    EVENT_DB_ID   NUMBER (10) ,
    EVENT_ID      NUMBER (10) ,
    LOC_DB_ID     NUMBER (10) ,
    LOC_ID        NUMBER (10) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE ,
    AC_EVENT_DB_ID NUMBER (10) ,
    AC_EVENT_ID    NUMBER (10)
  ) ;
ALTER TABLE QUAR_QUAR ADD CHECK ( QUAR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_QUAR ADD CHECK ( QUAR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_QUAR ADD CHECK ( HISTORIC_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE QUAR_QUAR ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_QUAR ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_QUAR ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_QUAR ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_QUAR ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_QUAR ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_QUAR ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_QUAR ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_QUAR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE QUAR_QUAR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_QUAR ADD CHECK ( AC_EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE QUAR_QUAR ADD CHECK ( AC_EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE QUAR_QUAR
IS
  'This table contains the quarantine record attributes.
The primary key is a duplicate of an EVT_EVENT primary key for a inventory condition change event of type ACQUAR.
All ACQUAR event records must have record in this table.' ;
  COMMENT ON COLUMN QUAR_QUAR.QUAR_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN QUAR_QUAR.QUAR_ID
IS
  'Unique identifier for the quarantine record.' ;
  COMMENT ON COLUMN QUAR_QUAR.BARCODE_SDESC
IS
  'Barcode to uniquely identify the quarantine record.' ;
  COMMENT ON COLUMN QUAR_QUAR.QUAR_NOTE
IS
  'Running notes for the Quarantine record.' ;
  COMMENT ON COLUMN QUAR_QUAR.QUAR_GDT
IS
  'The GMT when the inventory was quarantined.' ;
  COMMENT ON COLUMN QUAR_QUAR.HISTORIC_BOOL
IS
  'Flag to indicate if the quarantine record is historic or not.' ;
  COMMENT ON COLUMN QUAR_QUAR.INV_NO_DB_ID
IS
  'FK to INV_INV. The root inventory being quarantined.' ;
  COMMENT ON COLUMN QUAR_QUAR.INV_NO_ID
IS
  'FK to INV_INV. The root inventory being quarantined.' ;
  COMMENT ON COLUMN QUAR_QUAR.HR_DB_ID
IS
  'FK to ORG_HR.  The user who quarantined the inventory.' ;
  COMMENT ON COLUMN QUAR_QUAR.HR_ID
IS
  'FK to ORG_HR.  The user who quarantined the inventory.' ;
  COMMENT ON COLUMN QUAR_QUAR.EVENT_DB_ID
IS
  'FK to EVT_EVENT.  The event associated with the quarantine of the inventory.' ;
  COMMENT ON COLUMN QUAR_QUAR.EVENT_ID
IS
  'FK to EVT_EVENT.  The event associated with the quarantine of the inventory.' ;
  COMMENT ON COLUMN QUAR_QUAR.LOC_DB_ID
IS
  'FK to INV_LOC.  The quarantine location of the inventory.' ;
  COMMENT ON COLUMN QUAR_QUAR.LOC_ID
IS
  'FK to INV_LOC.  The quarantine location of the inventory.' ;
  COMMENT ON COLUMN QUAR_QUAR.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN QUAR_QUAR.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN QUAR_QUAR.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN QUAR_QUAR.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN QUAR_QUAR.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  COMMENT ON COLUMN QUAR_QUAR.AC_EVENT_DB_ID
IS
  'FK to INV_CND_CHG_EVENT.  The AC event associated with the quarantine of the inventory.' ;
  COMMENT ON COLUMN QUAR_QUAR.AC_EVENT_ID
IS
  'FK to INV_CND_CHG_EVENT.  The AC event associated with the quarantine of the inventory.' ;
  CREATE INDEX IX_EVTEVENT_QUARQUAR ON QUAR_QUAR
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC
    ) ;
  CREATE INDEX IX_INVINV_QUARQUAR ON QUAR_QUAR
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVLOC_QUARQUAR ON QUAR_QUAR
    ( LOC_DB_ID ASC , LOC_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_QUARQUAR ON QUAR_QUAR
    ( HR_DB_ID ASC , HR_ID ASC
    ) ;
  CREATE INDEX IX_INVCNDCHGEVENT_QUARQUAR ON QUAR_QUAR
    (
      AC_EVENT_DB_ID ASC ,
      AC_EVENT_ID ASC
    ) ;
ALTER TABLE QUAR_QUAR ADD CONSTRAINT PK_QUAR_QUAR PRIMARY KEY ( QUAR_DB_ID, QUAR_ID ) ;
ALTER TABLE QUAR_QUAR ADD CONSTRAINT IX_QUARQUARALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE REF_ABC_CLASS
  (
    ABC_CLASS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ABC_CLASS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC      VARCHAR2 (80) ,
    DESC_LDESC      VARCHAR2 (4000) ,
    BITMAP_DB_ID    NUMBER (10) ,
    BITMAP_TAG      NUMBER (10) ,
    VALUE_ORD       NUMBER (4) DEFAULT 1 NOT NULL DEFERRABLE ,
    VALUE_PCT FLOAT DEFAULT 0 NOT NULL DEFERRABLE ,
    COUNT_INTERVAL_MONTHS NUMBER (10) DEFAULT 12 NOT NULL DEFERRABLE ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_ABC_CLASS ADD CHECK ( ABC_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_ABC_CLASS ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_ABC_CLASS ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_ABC_CLASS ADD CHECK ( VALUE_PCT BETWEEN 0 AND 1) DEFERRABLE ;
ALTER TABLE REF_ABC_CLASS ADD CHECK ( COUNT_INTERVAL_MONTHS BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_ABC_CLASS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_ABC_CLASS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_ABC_CLASS
IS
  'An ABC analysis tries to categorize parts based on how expensive/important they are. Class ''A'' parts are the most expensive and frequently used parts, while class ''C'' parts are the least expensive or frequently used parts.' ;
  COMMENT ON COLUMN REF_ABC_CLASS.ABC_CLASS_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_ABC_CLASS.ABC_CLASS_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_ABC_CLASS.DESC_SDESC
IS
  'Short description of the abc class.' ;
  COMMENT ON COLUMN REF_ABC_CLASS.DESC_LDESC
IS
  'Long description of the abc class.' ;
  COMMENT ON COLUMN REF_ABC_CLASS.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_ABC_CLASS.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_ABC_CLASS.VALUE_ORD
IS
  'This is the order of the different ABC classes. The most expensive item will have an order of 1, while the cheapest item will have the highest order. By default it is set to 1.' ;
  COMMENT ON COLUMN REF_ABC_CLASS.VALUE_PCT
IS
  'This column represents the % of the total value that belongs to a particular ABC class. For example, if the first ABC class has a VALUE_PCT = 0.80 (80%), then it represents 80% of the value of all inventory. By default it is set to 0.' ;
  COMMENT ON COLUMN REF_ABC_CLASS.COUNT_INTERVAL_MONTHS
IS
  'This is the frequency at which you have to count a particular part number, based on the ABC class. The interval is always measured in months. For example, if COUNT_INTERVAL_MONTHS = 6, then you must count the part number every 6 months. By default this to 12.' ;
  COMMENT ON COLUMN REF_ABC_CLASS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_ABC_CLASS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_ABC_CLASS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_ABC_CLASS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_ABC_CLASS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_ABC_CLASS ADD CONSTRAINT "pk_REF_ABC_CLASS" PRIMARY KEY ( ABC_CLASS_DB_ID, ABC_CLASS_CD ) ;


CREATE TABLE REF_ACCOUNT_TYPE
  (
    ACCOUNT_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ACCOUNT_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_ACCOUNT_TYPE ADD CHECK ( ACCOUNT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_ACCOUNT_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_ACCOUNT_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_ACCOUNT_TYPE
IS
  'Contains the types of financial accounts, such as expense, accounts payable, etc.' ;
  COMMENT ON COLUMN REF_ACCOUNT_TYPE.ACCOUNT_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_ACCOUNT_TYPE.ACCOUNT_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_ACCOUNT_TYPE.DESC_SDESC
IS
  'Short description of the account type.' ;
  COMMENT ON COLUMN REF_ACCOUNT_TYPE.DESC_LDESC
IS
  'Long description of the account type.' ;
  COMMENT ON COLUMN REF_ACCOUNT_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_ACCOUNT_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_ACCOUNT_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_ACCOUNT_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_ACCOUNT_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_ACCOUNT_TYPE ADD CONSTRAINT "pk_REF_ACCOUNT_TYPE" PRIMARY KEY ( ACCOUNT_TYPE_DB_ID, ACCOUNT_TYPE_CD ) ;


CREATE TABLE REF_ACFT_CAP
  (
    ACFT_CAP_DB_ID NUMBER (10) NOT NULL ,
    ACFT_CAP_CD    VARCHAR2 (8) NOT NULL ,
    DESC_SDESC     VARCHAR2 (80) ,
    CAP_ORDER      INTEGER ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE REF_ACFT_CAP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE REF_ACFT_CAP ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE REF_ACFT_CAP ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE REF_ACFT_CAP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON TABLE REF_ACFT_CAP
IS
  '[EXTENDABLE] Contains the list of aircraft capabilities (e.g. ETOPS, Auto-land, WiFi, Number of Seats, etc.), each of which can be assigned to any given assembly / fleet type. IFS provides suggested level 10 data, but this is completely customizable by the operator.' ;
ALTER TABLE REF_ACFT_CAP ADD CONSTRAINT PK_REF_ACFT_CAP PRIMARY KEY ( ACFT_CAP_DB_ID, ACFT_CAP_CD ) ;


CREATE TABLE REF_ACFT_CAP_LEVEL
  (
    ACFT_CAP_LEVEL_DB_ID NUMBER (10) NOT NULL ,
    ACFT_CAP_LEVEL_CD    VARCHAR2 (8) NOT NULL ,
    DESC_SDESC           VARCHAR2 (80) ,
    ACFT_CAP_DB_ID       NUMBER (10) NOT NULL ,
    ACFT_CAP_CD          VARCHAR2 (8) NOT NULL ,
    LEVEL_ORDER          INTEGER ,
    SENSITIVITY_CD       VARCHAR2 (8) ,
    RSTAT_CD             NUMBER (3) NOT NULL ,
    REVISION_NO          NUMBER (10) NOT NULL ,
    CTRL_DB_ID           NUMBER (10) NOT NULL ,
    CREATION_DT          DATE NOT NULL ,
    CREATION_DB_ID       NUMBER (10) NOT NULL ,
    REVISION_DT          DATE NOT NULL ,
    REVISION_DB_ID       NUMBER (10) NOT NULL ,
    REVISION_USER        VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE REF_ACFT_CAP_LEVEL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE REF_ACFT_CAP_LEVEL ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE REF_ACFT_CAP_LEVEL ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE REF_ACFT_CAP_LEVEL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON TABLE REF_ACFT_CAP_LEVEL
IS
  '[EXTENDABLE] Contains the various LEVELS of aircraft capabilities, which can be set as the configured or current level for a specific aircraft, and upgraded or downgraded based on modifications, maintenance, or deferred faults. IFS provides suggested level 10 data via script, but this is completely customizable by the operator.' ;
  COMMENT ON COLUMN REF_ACFT_CAP_LEVEL.SENSITIVITY_CD
IS
  'FK to ref_sensitivity table.' ;
  CREATE INDEX IX_REFSENS_SENSCD ON REF_ACFT_CAP_LEVEL
    ( SENSITIVITY_CD ASC
    ) ;
ALTER TABLE REF_ACFT_CAP_LEVEL ADD CONSTRAINT PK_REF_ACFT_CAP_LEVEL PRIMARY KEY ( ACFT_CAP_LEVEL_DB_ID, ACFT_CAP_LEVEL_CD, ACFT_CAP_DB_ID, ACFT_CAP_CD ) ;


CREATE TABLE REF_AC_COND
  (
    AC_COND_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    AC_COND_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_AC_COND ADD CHECK ( AC_COND_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_AC_COND ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_AC_COND ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_AC_COND
IS
  '[EXTENDABLE] The list of aircraft conditions used by executable requirements and job instruction cards.' ;
ALTER TABLE REF_AC_COND ADD CONSTRAINT PK_REF_AC_COND PRIMARY KEY ( AC_COND_DB_ID, AC_COND_CD ) ;


CREATE TABLE REF_ADVSRY_TYPE
  (
    ADVSRY_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ADVSRY_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC        VARCHAR2 (80) ,
    DESC_LDESC        VARCHAR2 (4000) ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_ADVSRY_TYPE ADD CHECK ( ADVSRY_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_ADVSRY_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_ADVSRY_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_ADVSRY_TYPE
IS
  '[EXTENDABLE] This table contains the part advisory type information used by part definitions.' ;
  COMMENT ON COLUMN REF_ADVSRY_TYPE.ADVSRY_TYPE_DB_ID
IS
  'A unique serial number assigned by mxi to each physical maintenix database. allows data to be merged or consolidated from independent sources without pk collisions.' ;
  COMMENT ON COLUMN REF_ADVSRY_TYPE.ADVSRY_TYPE_CD
IS
  'The advisory type code.' ;
  COMMENT ON COLUMN REF_ADVSRY_TYPE.DESC_SDESC
IS
  'Short description of the advisory type.' ;
  COMMENT ON COLUMN REF_ADVSRY_TYPE.DESC_LDESC
IS
  'Long description of the advisory type.' ;
  COMMENT ON COLUMN REF_ADVSRY_TYPE.RSTAT_CD
IS
  'FK to MIM_RSTAT' ;
  COMMENT ON COLUMN REF_ADVSRY_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_ADVSRY_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_ADVSRY_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_ADVSRY_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_ADVSRY_TYPE ADD CONSTRAINT PK_REF_ADVSRY_TYPE PRIMARY KEY ( ADVSRY_TYPE_DB_ID, ADVSRY_TYPE_CD ) ;


CREATE TABLE REF_ASSMBL_CLASS
  (
    ASSMBL_CLASS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CLASS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG         NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_ASSMBL_CLASS ADD CHECK ( ASSMBL_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_ASSMBL_CLASS ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_ASSMBL_CLASS ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_ASSMBL_CLASS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_ASSMBL_CLASS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_ASSMBL_CLASS
IS
  '[EXTENDABLE] The assembly class is used to identify the functional class of the assembly, and dictates the manner in which the system handles some business logic. A default installation of Maintenix includes several mandatory classes (ACFT, ASSY, TSE, COMHW, APU). Other classes can be added as needed, such as LDGEAR, PROP, and MODULE.' ;
  COMMENT ON COLUMN REF_ASSMBL_CLASS.ASSMBL_CLASS_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_ASSMBL_CLASS.ASSMBL_CLASS_CD
IS
  'A unique value that identifies the reference term.' ;
  COMMENT ON COLUMN REF_ASSMBL_CLASS.BITMAP_DB_ID
IS
  'FK to REF_BITMAP. Identifies the bitmap that should be used when displaying assemblies of this class.' ;
  COMMENT ON COLUMN REF_ASSMBL_CLASS.BITMAP_TAG
IS
  'FK to REF_BITMAP. Identifies the bitmap that should be used when displaying assemblies of this class.' ;
  COMMENT ON COLUMN REF_ASSMBL_CLASS.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_ASSMBL_CLASS.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_ASSMBL_CLASS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_ASSMBL_CLASS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_ASSMBL_CLASS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_ASSMBL_CLASS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_ASSMBL_CLASS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_ASSMBL_CLASS ADD CONSTRAINT PK_REF_ASSMBL_CLASS PRIMARY KEY ( ASSMBL_CLASS_DB_ID, ASSMBL_CLASS_CD ) ;


CREATE TABLE REF_ATTACH_TYPE
  (
    ATTACH_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ATTACH_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG        NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC        VARCHAR2 (80) ,
    DESC_LDESC        VARCHAR2 (4000) ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_ATTACH_TYPE ADD CHECK ( ATTACH_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_ATTACH_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_ATTACH_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_ATTACH_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_ATTACH_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_ATTACH_TYPE
IS
  '[EXTENDABLE] The list of attachment types when creating or editing an Interactive Electronic Technical Manual (IETM) attachment.' ;
  COMMENT ON COLUMN REF_ATTACH_TYPE.ATTACH_TYPE_DB_ID
IS
  'A unique value that defines the PK of this reference term.
' ;
  COMMENT ON COLUMN REF_ATTACH_TYPE.ATTACH_TYPE_CD
IS
  'A unique, user entered value that defines the PK of this reference term.
' ;
  COMMENT ON COLUMN REF_ATTACH_TYPE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_ATTACH_TYPE.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_ATTACH_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.
' ;
  COMMENT ON COLUMN REF_ATTACH_TYPE.DESC_LDESC
IS
  'A long description or label for the reference term.
' ;
  COMMENT ON COLUMN REF_ATTACH_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_ATTACH_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_ATTACH_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_ATTACH_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_ATTACH_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_ATTACH_TYPE ADD CONSTRAINT "pk_REF_ATTACH_TYPE" PRIMARY KEY ( ATTACH_TYPE_DB_ID, ATTACH_TYPE_CD ) ;


CREATE TABLE REF_BITMAP
  (
    BITMAP_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG     NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    BITMAP_NAME    VARCHAR2 (40) NOT NULL DEFERRABLE ,
    BITMAP_ORD     NUMBER (4) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_BITMAP ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_BITMAP ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_BITMAP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_BITMAP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_BITMAP
IS
  '[EXTENDABLE] A container for all of the bitmaps images used by the system.' ;
  COMMENT ON COLUMN REF_BITMAP.BITMAP_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_BITMAP.BITMAP_TAG
IS
  'Unique idenifier assigned from Sequence BITMAP_TAG_SEQ.' ;
  COMMENT ON COLUMN REF_BITMAP.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_BITMAP.BITMAP_NAME
IS
  'The Operating System  file name for the .BMP file(s) that make-up the icons in the user interface.. Should not contain directory specification (picked-up by Maintenix program path settings).' ;
  COMMENT ON COLUMN REF_BITMAP.BITMAP_ORD
IS
  'The ordinal number used to access the cache of bitmaps in the client interface. Must be 1 to N for all bitmap entries.' ;
  COMMENT ON COLUMN REF_BITMAP.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_BITMAP.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_BITMAP.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_BITMAP.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_BITMAP ADD CONSTRAINT PK_REF_BITMAP PRIMARY KEY ( BITMAP_DB_ID, BITMAP_TAG ) ;


CREATE TABLE REF_BOM_CLASS
  (
    BOM_CLASS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_CLASS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG      NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC      VARCHAR2 (4000) ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_BOM_CLASS ADD CHECK ( BOM_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_BOM_CLASS ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_BOM_CLASS ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_BOM_CLASS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_BOM_CLASS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_BOM_CLASS
IS
  'The classification of config slots / part groups used when building the hierarchical structure of an assembly (i.e. ROOT, SYS, TRK, SUBASSY).' ;
  COMMENT ON COLUMN REF_BOM_CLASS.BOM_CLASS_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_BOM_CLASS.BOM_CLASS_CD
IS
  'A unique value that identifies the reference term.' ;
  COMMENT ON COLUMN REF_BOM_CLASS.BITMAP_DB_ID
IS
  'FK to REF_BITMAP. Identifies the bitmap that should be used when displaying boms of this class.' ;
  COMMENT ON COLUMN REF_BOM_CLASS.BITMAP_TAG
IS
  'FK to REF_BITMAP. Identifies the bitmap that should be used to visually represent this refterm.' ;
  COMMENT ON COLUMN REF_BOM_CLASS.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_BOM_CLASS.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_BOM_CLASS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_BOM_CLASS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_BOM_CLASS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_BOM_CLASS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_BOM_CLASS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_BOM_CLASS ADD CONSTRAINT PK_REF_BOM_CLASS PRIMARY KEY ( BOM_CLASS_DB_ID, BOM_CLASS_CD ) ;


CREATE TABLE REF_BORROW_RATE
  (
    BORROW_RATE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BORROW_RATE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC        VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC        VARCHAR2 (4000) ,
    CLASS_NAME        VARCHAR2 (500) NOT NULL DEFERRABLE ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_BORROW_RATE ADD CHECK ( BORROW_RATE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_BORROW_RATE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_BORROW_RATE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_BORROW_RATE
IS
  '[EXTENDABLE] The list of borrowing fees and interest rates when creating or editing a borrow order.' ;
  COMMENT ON COLUMN REF_BORROW_RATE.BORROW_RATE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_BORROW_RATE.BORROW_RATE_CD
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN REF_BORROW_RATE.DESC_SDESC
IS
  'Short Description of the currency.' ;
  COMMENT ON COLUMN REF_BORROW_RATE.DESC_LDESC
IS
  'Long Description of the currency.' ;
  COMMENT ON COLUMN REF_BORROW_RATE.CLASS_NAME
IS
  'Fully qualified name of the java class used to calculate borrow costs using this rate.' ;
  COMMENT ON COLUMN REF_BORROW_RATE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_BORROW_RATE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_BORROW_RATE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_BORROW_RATE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_BORROW_RATE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_BORROW_RATE ADD CONSTRAINT "pk_REF_BORROW_RATE" PRIMARY KEY ( BORROW_RATE_DB_ID, BORROW_RATE_CD ) ;


CREATE TABLE REF_BULK_LOAD_FILE_ACTION
  (
    FILE_ACTION_TYPE_CD    VARCHAR2 (30) NOT NULL ,
    FILE_ACTION_TYPE_DB_ID NUMBER (10) NOT NULL ,
    ACTION_SDESC           VARCHAR2 (80) ,
    ACTION_LDESC           VARCHAR2 (4000) ,
    RSTAT_CD               NUMBER (3) NOT NULL ,
    REVISION_NO            NUMBER (10) NOT NULL ,
    CTRL_DB_ID             NUMBER (10) NOT NULL ,
    CREATION_DT            DATE NOT NULL ,
    REVISION_DT            DATE NOT NULL ,
    REVISION_DB_ID         NUMBER (10) NOT NULL ,
    REVISION_USER          VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE REF_BULK_LOAD_FILE_ACTION ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
COMMENT ON TABLE REF_BULK_LOAD_FILE_ACTION
IS
  'New Ref table to store the 0-level status codes for Bulk Load File Action' ;
  COMMENT ON COLUMN REF_BULK_LOAD_FILE_ACTION.FILE_ACTION_TYPE_CD
IS
  'Unique code for the action that should be executed when data in a particular file is loaded' ;
  COMMENT ON COLUMN REF_BULK_LOAD_FILE_ACTION.FILE_ACTION_TYPE_DB_ID
IS
  'Db id of the file action type' ;
  COMMENT ON COLUMN REF_BULK_LOAD_FILE_ACTION.ACTION_SDESC
IS
  'Short description of the file action code' ;
  COMMENT ON COLUMN REF_BULK_LOAD_FILE_ACTION.ACTION_LDESC
IS
  'Long description of the file action code' ;
  COMMENT ON COLUMN REF_BULK_LOAD_FILE_ACTION.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_BULK_LOAD_FILE_ACTION.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN REF_BULK_LOAD_FILE_ACTION.CTRL_DB_ID
IS
  'The identifier of the database that owns the record. The meaning of this column may be specific to the entity.' ;
  COMMENT ON COLUMN REF_BULK_LOAD_FILE_ACTION.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN REF_BULK_LOAD_FILE_ACTION.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN REF_BULK_LOAD_FILE_ACTION.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN REF_BULK_LOAD_FILE_ACTION.REVISION_USER
IS
  'The name of the user that last updated the record' ;
ALTER TABLE REF_BULK_LOAD_FILE_ACTION ADD CONSTRAINT PK_REF_BULK_LOAD_ACTION PRIMARY KEY ( FILE_ACTION_TYPE_CD, FILE_ACTION_TYPE_DB_ID ) ;


CREATE TABLE REF_BULK_LOAD_STATUS
  (
    STATUS_CD      VARCHAR2 (20) NOT NULL ,
    STATUS_DB_ID   NUMBER (10) NOT NULL ,
    STATUS_SDESC   VARCHAR2 (80) ,
    STATUS_LDESC   VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE REF_BULK_LOAD_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
COMMENT ON TABLE REF_BULK_LOAD_STATUS
IS
  'New Ref table to store the 0-level status codes for Bulk Data Load.' ;
  COMMENT ON COLUMN REF_BULK_LOAD_STATUS.STATUS_CD
IS
  'Unique status code' ;
  COMMENT ON COLUMN REF_BULK_LOAD_STATUS.STATUS_DB_ID
IS
  'Db id of the status' ;
  COMMENT ON COLUMN REF_BULK_LOAD_STATUS.STATUS_SDESC
IS
  'Short description of the status of bulk data loading' ;
  COMMENT ON COLUMN REF_BULK_LOAD_STATUS.STATUS_LDESC
IS
  'Long description of the status of bulk data loading' ;
  COMMENT ON COLUMN REF_BULK_LOAD_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_BULK_LOAD_STATUS.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN REF_BULK_LOAD_STATUS.CTRL_DB_ID
IS
  'The identifier of the database that owns the record. The meaning of this column may be specific to the entity.' ;
  COMMENT ON COLUMN REF_BULK_LOAD_STATUS.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN REF_BULK_LOAD_STATUS.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN REF_BULK_LOAD_STATUS.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN REF_BULK_LOAD_STATUS.REVISION_USER
IS
  'The name of the user that last updated the record' ;
ALTER TABLE REF_BULK_LOAD_STATUS ADD CONSTRAINT PK_REF_BULK_LOAD_STATUS PRIMARY KEY ( STATUS_CD, STATUS_DB_ID ) ;


CREATE TABLE REF_CAPACITY_PATTERN_TYPE
  (
    CAPACITY_PATTERN_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    CAPACITY_PATTERN_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC                  VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC                  VARCHAR2 (4000) ,
    RSTAT_CD                    NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT                 DATE NOT NULL DEFERRABLE ,
    REVISION_DT                 DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER               VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_CAPACITY_PATTERN_TYPE ADD CHECK ( CAPACITY_PATTERN_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_CAPACITY_PATTERN_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_CAPACITY_PATTERN_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_CAPACITY_PATTERN_TYPE
IS
  'Entity representing type of capacity pattern. The type can be Daily indicating one day pattern of shifts or Weekly indicating weekly pattern of shifts.' ;
  COMMENT ON COLUMN REF_CAPACITY_PATTERN_TYPE.CAPACITY_PATTERN_TYPE_DB_ID
IS
  'Primary key of capacity pattern type.' ;
  COMMENT ON COLUMN REF_CAPACITY_PATTERN_TYPE.CAPACITY_PATTERN_TYPE_CD
IS
  'Primary key of capacity pattern type.  A capacity pattern type can be daily or weekly.' ;
  COMMENT ON COLUMN REF_CAPACITY_PATTERN_TYPE.DESC_SDESC
IS
  'Short description of the capacity pattern type.' ;
  COMMENT ON COLUMN REF_CAPACITY_PATTERN_TYPE.DESC_LDESC
IS
  'Long description of the capacity pattern type.' ;
  COMMENT ON COLUMN REF_CAPACITY_PATTERN_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_CAPACITY_PATTERN_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_CAPACITY_PATTERN_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_CAPACITY_PATTERN_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_CAPACITY_PATTERN_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_CAPACITY_PATTERN_TYPE ADD CONSTRAINT PK_REF_CAPACITY_PATTERN_TYPE PRIMARY KEY ( CAPACITY_PATTERN_TYPE_DB_ID, CAPACITY_PATTERN_TYPE_CD ) ;


CREATE TABLE REF_CFG_SLOT_STATUS
  (
    CFG_SLOT_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    CFG_SLOT_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC            VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC            VARCHAR2 (4000) ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_CFG_SLOT_STATUS ADD CHECK ( CFG_SLOT_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_CFG_SLOT_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_CFG_SLOT_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_CFG_SLOT_STATUS
IS
  'The log card class is used to identify the functional class of the log card, and dictates the manner in which the system handles the business logic. There are 3 allowable assembly classifications: SUBASSY - represents a placeholder for another sub-assembly. SYS - represents a ''virtual'' log card (ie. there is no physical component associated with them). These log cards are always tied to their parent log cards, and cannot be separated. TRK - represents a standard, log carded item.' ;
  COMMENT ON COLUMN REF_CFG_SLOT_STATUS.CFG_SLOT_STATUS_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_CFG_SLOT_STATUS.CFG_SLOT_STATUS_CD
IS
  'A unique value that identifies the reference term.' ;
  COMMENT ON COLUMN REF_CFG_SLOT_STATUS.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_CFG_SLOT_STATUS.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_CFG_SLOT_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_CFG_SLOT_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_CFG_SLOT_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_CFG_SLOT_STATUS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_CFG_SLOT_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_CFG_SLOT_STATUS ADD CONSTRAINT PK_REF_CFG_SLOT_STATUS PRIMARY KEY ( CFG_SLOT_STATUS_DB_ID, CFG_SLOT_STATUS_CD ) ;


CREATE TABLE REF_CHANGE_REASON
  (
    CHANGE_REASON_CD VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DISPLAY_CODE     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DISPLAY_NAME     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DISPLAY_DESC     VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    DISPLAY_ORD      NUMBER (4) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO      NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_CHANGE_REASON ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_CHANGE_REASON ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_CHANGE_REASON ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_CHANGE_REASON ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_CHANGE_REASON
IS
  'This table defines all the types of reason a change was done to an order line.' ;
  COMMENT ON COLUMN REF_CHANGE_REASON.CHANGE_REASON_CD
IS
  'Short localized code to represent the term in the UI ' ;
  COMMENT ON COLUMN REF_CHANGE_REASON.DISPLAY_CODE
IS
  'Localized name for the term ' ;
  COMMENT ON COLUMN REF_CHANGE_REASON.DISPLAY_NAME
IS
  'Localized description for the term, useful for tooltips and help text ' ;
  COMMENT ON COLUMN REF_CHANGE_REASON.DISPLAY_DESC
IS
  'An ordinal value used for sorting the terms in the UI; for example, in a table or dropdown list ' ;
  COMMENT ON COLUMN REF_CHANGE_REASON.DISPLAY_ORD
IS
  'The order in which the list of Reasons should be sorted when displayed ' ;
  COMMENT ON COLUMN REF_CHANGE_REASON.RSTAT_CD
IS
  'Status of the record ' ;
  COMMENT ON COLUMN REF_CHANGE_REASON.REVISION_NO
IS
  'A number incremented each time the record is modified ' ;
  COMMENT ON COLUMN REF_CHANGE_REASON.CTRL_DB_ID
IS
  'The identifier of the database that owns the record ' ;
  COMMENT ON COLUMN REF_CHANGE_REASON.CREATION_DT
IS
  'The data and time at which the record was inserted' ;
  COMMENT ON COLUMN REF_CHANGE_REASON.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record ' ;
  COMMENT ON COLUMN REF_CHANGE_REASON.REVISION_DT
IS
  'The data and time at which the record was last updated' ;
  COMMENT ON COLUMN REF_CHANGE_REASON.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN REF_CHANGE_REASON.REVISION_USER
IS
  'The name of the user that last updated the record ' ;
ALTER TABLE REF_CHANGE_REASON ADD CONSTRAINT PK_REF_CHANGE_REASON PRIMARY KEY ( CHANGE_REASON_CD ) ;


CREATE TABLE REF_COND_SET
  (
    COND_SET_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    COND_SET_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_COND_SET ADD CHECK ( COND_SET_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_COND_SET ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_COND_SET ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_COND_SET
IS
  '[EXTENDABLE] The list of settings for aircraft conditions (defined in REF_AC_COND), used by executable requirements and job instruction cards. Other than "N/A", these are entirely defined by the operator. The settings available for a given condition are defined by AC_COND_SETTING.' ;
ALTER TABLE REF_COND_SET ADD CONSTRAINT PK_REF_COND_SET PRIMARY KEY ( COND_SET_DB_ID, COND_SET_CD ) ;


CREATE TABLE REF_CONTROL_METHOD
  (
    CONTROL_METHOD_DB_ID NUMBER (10) NOT NULL ,
    CONTROL_METHOD_CD    VARCHAR2 (8) NOT NULL ,
    DESC_SDESC           VARCHAR2 (80) NOT NULL ,
    DESC_LDESC           VARCHAR2 (4000) ,
    RSTAT_CD             NUMBER (3) NOT NULL ,
    CREATION_DT          DATE NOT NULL ,
    REVISION_DT          DATE NOT NULL ,
    REVISION_DB_ID       NUMBER (10) NOT NULL ,
    REVISION_USER        VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE REF_CONTROL_METHOD ADD CHECK ( RSTAT_CD IN (0,1,2,3)) ;
COMMENT ON TABLE REF_CONTROL_METHOD
IS
  'A control method to identify how the entities are created (for example from MANUALLY/BASELINE/EXTERNAL). This table will contain 0 data level only.' ;
  COMMENT ON COLUMN REF_CONTROL_METHOD.CONTROL_METHOD_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_CONTROL_METHOD.CONTROL_METHOD_CD
IS
  'Unique identifier serving as part of the primary key.' ;
  COMMENT ON COLUMN REF_CONTROL_METHOD.DESC_SDESC
IS
  'Short description of the control mehod.' ;
  COMMENT ON COLUMN REF_CONTROL_METHOD.DESC_LDESC
IS
  'Long description of the control method.' ;
  COMMENT ON COLUMN REF_CONTROL_METHOD.RSTAT_CD
IS
  'Status of the record. ' ;
  COMMENT ON COLUMN REF_CONTROL_METHOD.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN REF_CONTROL_METHOD.REVISION_DT
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN REF_CONTROL_METHOD.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN REF_CONTROL_METHOD.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
ALTER TABLE REF_CONTROL_METHOD ADD CONSTRAINT PK_REF_CONTROL_METHOD PRIMARY KEY ( CONTROL_METHOD_DB_ID, CONTROL_METHOD_CD ) ;


CREATE TABLE REF_COST_LINE_ITEM_TYPE
  (
    COST_LINE_ITEM_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    COST_LINE_ITEM_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PAYABLE_BOOL              NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    DESC_SDESC                VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC                VARCHAR2 (4000) ,
    USER_TYPE_CD              VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD                  NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT               DATE NOT NULL DEFERRABLE ,
    REVISION_DT               DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER             VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_COST_LINE_ITEM_TYPE ADD CHECK ( COST_LINE_ITEM_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_COST_LINE_ITEM_TYPE ADD CHECK ( PAYABLE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_COST_LINE_ITEM_TYPE ADD CHECK ( RSTAT_CD     IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_COST_LINE_ITEM_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_COST_LINE_ITEM_TYPE
IS
  '[EXTENDABLE] The types of cost line items (i.e. Labour, Materials, etc.) identified with Aircraft Modifcations (on Work Package Details).' ;
  COMMENT ON COLUMN REF_COST_LINE_ITEM_TYPE.COST_LINE_ITEM_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_COST_LINE_ITEM_TYPE.COST_LINE_ITEM_TYPE_CD
IS
  'A unique, user entered value that defines the PK of this reference term.' ;
  COMMENT ON COLUMN REF_COST_LINE_ITEM_TYPE.PAYABLE_BOOL
IS
  'This Boolean denotes whether the cost line item type is a payable or a receivable. This is a mandatory field.' ;
  COMMENT ON COLUMN REF_COST_LINE_ITEM_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_COST_LINE_ITEM_TYPE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_COST_LINE_ITEM_TYPE.USER_TYPE_CD
IS
  'This is the customer specific code for the cost line item type. This is the code that is displayed in the user interfaces. This is a mandatory field.' ;
  COMMENT ON COLUMN REF_COST_LINE_ITEM_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_COST_LINE_ITEM_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_COST_LINE_ITEM_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_COST_LINE_ITEM_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_COST_LINE_ITEM_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_COST_LINE_ITEM_TYPE ADD CONSTRAINT PK_REF_COST_LINE_ITEM_TYPE PRIMARY KEY ( COST_LINE_ITEM_TYPE_DB_ID, COST_LINE_ITEM_TYPE_CD ) ;


CREATE TABLE REF_COUNTRY
  (
    COUNTRY_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    COUNTRY_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG     NUMBER (10) NOT NULL DEFERRABLE ,
    COUNTRY_NAME   VARCHAR2 (40) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_COUNTRY ADD CHECK ( COUNTRY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_COUNTRY ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_COUNTRY ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_COUNTRY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_COUNTRY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_COUNTRY
IS
  '[EXTENDABLE] The countries that are relevant to an organization. The list applies to any screen requiring an address, such as Manufacturer Details, Vendor Details, Location Details or Organization Details.' ;
  COMMENT ON COLUMN REF_COUNTRY.COUNTRY_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_COUNTRY.COUNTRY_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_COUNTRY.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_COUNTRY.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_COUNTRY.COUNTRY_NAME
IS
  'The name of the country.' ;
  COMMENT ON COLUMN REF_COUNTRY.RSTAT_CD
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_COUNTRY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_COUNTRY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_COUNTRY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_COUNTRY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_COUNTRY ADD CONSTRAINT PK_REF_COUNTRY PRIMARY KEY ( COUNTRY_DB_ID, COUNTRY_CD ) ;


CREATE TABLE REF_CURRENCY
  (
    CURRENCY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    CURRENCY_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG     NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) ,
    DESC_LDESC     VARCHAR2 (4000) ,
    DEFAULT_BOOL   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    EXCHG_QT FLOAT NOT NULL DEFERRABLE ,
    SPEC2K_MULT_QT NUMBER DEFAULT 1 NOT NULL DEFERRABLE ,
    SUB_UNITS_QT   INTEGER DEFAULT 2 NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_CURRENCY ADD CHECK ( CURRENCY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_CURRENCY ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_CURRENCY ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_CURRENCY ADD CHECK ( DEFAULT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_CURRENCY ADD CHECK ( RSTAT_CD     IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_CURRENCY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_CURRENCY
IS
  '[EXTENDABLE] The list of currencies that an organization uses. The list applies to any screen requiring a currency, such as Order Details, Vendor Details, Work Package Details, PO Invoice Details.' ;
  COMMENT ON COLUMN REF_CURRENCY.CURRENCY_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_CURRENCY.CURRENCY_CD
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN REF_CURRENCY.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_CURRENCY.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_CURRENCY.DESC_SDESC
IS
  'Short Description of the currency.' ;
  COMMENT ON COLUMN REF_CURRENCY.DESC_LDESC
IS
  'Long Description of the currency.' ;
  COMMENT ON COLUMN REF_CURRENCY.DEFAULT_BOOL
IS
  'Default currency will have this values set to one.' ;
  COMMENT ON COLUMN REF_CURRENCY.EXCHG_QT
IS
  'Exchange rate quantity.' ;
  COMMENT ON COLUMN REF_CURRENCY.SPEC2K_MULT_QT
IS
  'Spec2000 multiplier used to convert transmitted value to actual value.  E.g.  JPY (Japanese Yen) value is transmitted as 10.  With the multiplier of 100, the actual value of the message is 1000 yen.' ;
  COMMENT ON COLUMN REF_CURRENCY.SUB_UNITS_QT
IS
  'Controls the number of decimal places displayed for the given currency.' ;
  COMMENT ON COLUMN REF_CURRENCY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_CURRENCY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_CURRENCY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_CURRENCY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_CURRENCY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_CURRENCY ADD CONSTRAINT "pk_REF_CURRENCY" PRIMARY KEY ( CURRENCY_DB_ID, CURRENCY_CD ) ;


CREATE TABLE REF_DATA_SOURCE
  (
    DATA_SOURCE_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_SOURCE_CD         VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DATA_SOURCE_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_SOURCE_TYPE_CD    VARCHAR2 (8) CONSTRAINT NN_RFDATASRCE_DATASRCETYPCD NOT NULL DEFERRABLE ,
    BITMAP_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG             NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC             VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC             VARCHAR2 (4000) ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_DATA_SOURCE ADD CHECK ( DATA_SOURCE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_DATA_SOURCE ADD CHECK ( DATA_SOURCE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_DATA_SOURCE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_DATA_SOURCE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_DATA_SOURCE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_DATA_SOURCE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_DATA_SOURCE
IS
  '[EXTENDABLE] The list of data sources for capturing assembly usage. Although any number of universal data sources can be created, it is rarely necessary to do so during a typical IFS Maintenix implementation.' ;
  COMMENT ON COLUMN REF_DATA_SOURCE.DATA_SOURCE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_DATA_SOURCE.DATA_SOURCE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_DATA_SOURCE.DATA_SOURCE_TYPE_DB_ID
IS
  'FK to REF_DATA_SOURCE_TYPE.' ;
  COMMENT ON COLUMN REF_DATA_SOURCE.DATA_SOURCE_TYPE_CD
IS
  'FK to REF_DATA_SOURCE_TYPE.' ;
  COMMENT ON COLUMN REF_DATA_SOURCE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_DATA_SOURCE.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_DATA_SOURCE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_DATA_SOURCE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_DATA_SOURCE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_DATA_SOURCE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_DATA_SOURCE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_DATA_SOURCE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_DATA_SOURCE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_DATA_SOURCE ADD CONSTRAINT PK_REF_DATA_SOURCE PRIMARY KEY ( DATA_SOURCE_DB_ID, DATA_SOURCE_CD ) ;


CREATE TABLE REF_DATA_SOURCE_TYPE
  (
    DATA_SOURCE_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_SOURCE_TYPE_CD    VARCHAR2 (8) CONSTRAINT NN_REFDATASRCTPE_DATASOURCD NOT NULL DEFERRABLE ,
    BITMAP_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG             NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC             VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC             VARCHAR2 (4000) ,
    MANUAL_BOOL            NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE CONSTRAINT NN_REFDATASRCETYP_RVISIONDT NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_DATA_SOURCE_TYPE ADD CHECK ( DATA_SOURCE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_DATA_SOURCE_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_DATA_SOURCE_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_DATA_SOURCE_TYPE ADD CHECK ( MANUAL_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_DATA_SOURCE_TYPE ADD CHECK ( RSTAT_CD    IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_DATA_SOURCE_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_DATA_SOURCE_TYPE
IS
  'Data Source Type References. This class enumerates various type classifications associated with a data source.' ;
  COMMENT ON COLUMN REF_DATA_SOURCE_TYPE.DATA_SOURCE_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_DATA_SOURCE_TYPE.DATA_SOURCE_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_DATA_SOURCE_TYPE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_DATA_SOURCE_TYPE.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_DATA_SOURCE_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_DATA_SOURCE_TYPE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_DATA_SOURCE_TYPE.MANUAL_BOOL
IS
  'An indicator that determines if this data source is to be brokered to the user interface or if it always through integration (internally automated).' ;
  COMMENT ON COLUMN REF_DATA_SOURCE_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_DATA_SOURCE_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_DATA_SOURCE_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_DATA_SOURCE_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_DATA_SOURCE_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_DATA_SOURCE_TYPE ADD CONSTRAINT PK_REF_DATA_SOURCE_TYPE PRIMARY KEY ( DATA_SOURCE_TYPE_DB_ID, DATA_SOURCE_TYPE_CD ) ;


CREATE TABLE REF_DATA_TYPE_ASSMBL_CLASS
  (
    DATA_TYPE_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CLASS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CLASS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_DATA_TYPE_ASSMBL_CLASS ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_DATA_TYPE_ASSMBL_CLASS ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_DATA_TYPE_ASSMBL_CLASS ADD CHECK ( ASSMBL_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_DATA_TYPE_ASSMBL_CLASS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_DATA_TYPE_ASSMBL_CLASS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_DATA_TYPE_ASSMBL_CLASS
IS
  '[EXTENDABLE] The mappings of measurement data types to assemblies when creating Assembly Measurements.' ;
  COMMENT ON COLUMN REF_DATA_TYPE_ASSMBL_CLASS.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE.  The assembly measurement type.' ;
  COMMENT ON COLUMN REF_DATA_TYPE_ASSMBL_CLASS.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE.  The assembly measurement type.' ;
  COMMENT ON COLUMN REF_DATA_TYPE_ASSMBL_CLASS.ASSMBL_CLASS_DB_ID
IS
  'FK to REF_ASSMBL_CLASS.  The assembly class code.' ;
  COMMENT ON COLUMN REF_DATA_TYPE_ASSMBL_CLASS.ASSMBL_CLASS_CD
IS
  'FK to REF_ASSMBL_CLASS.  The assembly class code.' ;
  COMMENT ON COLUMN REF_DATA_TYPE_ASSMBL_CLASS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_DATA_TYPE_ASSMBL_CLASS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_DATA_TYPE_ASSMBL_CLASS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_DATA_TYPE_ASSMBL_CLASS.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_DATA_TYPE_ASSMBL_CLASS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_DATA_TYPE_ASSMBL_CLASS ADD CONSTRAINT PK_REF_DATA_TYPE_ASSMBL_CLASS PRIMARY KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID, ASSMBL_CLASS_DB_ID, ASSMBL_CLASS_CD ) ;


CREATE TABLE REF_DATA_VALUE
  (
    DATA_VALUE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_VALUE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC       VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC       VARCHAR2 (4000) ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_DATA_VALUE ADD CHECK ( DATA_VALUE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_DATA_VALUE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_DATA_VALUE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_DATA_VALUE
IS
  '[EXTENDABLE] The list of data values for measurements of type Characteristic. This is found on the Data Value tab for Measurement Details.' ;
  COMMENT ON COLUMN REF_DATA_VALUE.DATA_VALUE_DB_ID
IS
  'A unique, user entered value that defines the PK of this reference term. ' ;
  COMMENT ON COLUMN REF_DATA_VALUE.DATA_VALUE_CD
IS
  'A unique, user entered value that defines the PK of this reference term. ' ;
  COMMENT ON COLUMN REF_DATA_VALUE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_DATA_VALUE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.
' ;
  COMMENT ON COLUMN REF_DATA_VALUE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record. ' ;
  COMMENT ON COLUMN REF_DATA_VALUE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_DATA_VALUE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_DATA_VALUE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_DATA_VALUE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_DATA_VALUE ADD CONSTRAINT "pk_REF_DATA_VALUE" PRIMARY KEY ( DATA_VALUE_DB_ID, DATA_VALUE_CD ) ;


CREATE TABLE REF_DB_JOB
  (
    DB_TYPE_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DB_JOB_CD      VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    JOB_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    JOB_LDESC      VARCHAR2 (4000) ,
    WHAT_LDESC     VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_DB_JOB ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_DB_JOB ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_DB_JOB
IS
  'The identities of all database driven batch jobs. The Administrator manages these jobs.' ;
  COMMENT ON COLUMN REF_DB_JOB.DB_TYPE_CD
IS
  'FK to REF_DB_TYPE.' ;
  COMMENT ON COLUMN REF_DB_JOB.DB_JOB_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_DB_JOB.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_DB_JOB.JOB_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_DB_JOB.JOB_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_DB_JOB.WHAT_LDESC
IS
  'Unknown.' ;
  COMMENT ON COLUMN REF_DB_JOB.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_DB_JOB.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_DB_JOB.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_DB_JOB.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_DB_JOB ADD CONSTRAINT PK_REF_DB_JOB PRIMARY KEY ( DB_TYPE_CD, DB_JOB_CD ) ;


CREATE TABLE REF_DB_TYPE
  (
    DB_TYPE_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_DB_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_DB_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_DB_TYPE
IS
  'Defines the role of the database in distributed architecture. The role can be publisher, subscriber or both.' ;
  COMMENT ON COLUMN REF_DB_TYPE.DB_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_DB_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_DB_TYPE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_DB_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_DB_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_DB_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_DB_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_DB_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_DB_TYPE ADD CONSTRAINT PK_REF_DB_TYPE PRIMARY KEY ( DB_TYPE_CD ) ;


CREATE TABLE REF_DELAY_CODE
  (
    DELAY_CODE_DB_ID NUMBER (10) NOT NULL ,
    DELAY_CODE_CD    VARCHAR2 (8) NOT NULL ,
    DESC_SDESC       VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC       VARCHAR2 (4000) ,
    TECH_DELAY_BOOL  NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_DELAY_CODE ADD CHECK ( DELAY_CODE_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE REF_DELAY_CODE ADD CHECK ( TECH_DELAY_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_DELAY_CODE ADD CHECK ( RSTAT_CD        IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_DELAY_CODE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_DELAY_CODE
IS
  '[EXTENDABLE] The list of delay codes, such as AOG, non-scheduled maintenance, etc. that are used when creating a Flight Disruption.' ;
  COMMENT ON COLUMN REF_DELAY_CODE.DELAY_CODE_CD
IS
  'A short code for the delay code.' ;
  COMMENT ON COLUMN REF_DELAY_CODE.DESC_SDESC
IS
  'The short description for the delay code.' ;
  COMMENT ON COLUMN REF_DELAY_CODE.DESC_LDESC
IS
  'The long description for the delay code.' ;
  COMMENT ON COLUMN REF_DELAY_CODE.TECH_DELAY_BOOL
IS
  'This indicates if the delay code corresponds to a technical delay.' ;
ALTER TABLE REF_DELAY_CODE ADD CONSTRAINT PK_REF_DELAY_CODE PRIMARY KEY ( DELAY_CODE_DB_ID, DELAY_CODE_CD ) ;
ALTER TABLE REF_DELAY_CODE ADD CONSTRAINT IX_REFDELAYCODECD_UNQ UNIQUE ( DELAY_CODE_CD ) ;


CREATE TABLE REF_DEPT_TYPE
  (
    DEPT_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DEPT_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG      NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC      VARCHAR2 (4000) ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_DEPT_TYPE ADD CHECK ( DEPT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_DEPT_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_DEPT_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_DEPT_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_DEPT_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_DEPT_TYPE
IS
  '[EXTENDABLE] The list of departments found on the Details tab when creating or editing a department.' ;
  COMMENT ON COLUMN REF_DEPT_TYPE.DEPT_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_DEPT_TYPE.DEPT_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_DEPT_TYPE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP. The visual representation of the refterm.' ;
  COMMENT ON COLUMN REF_DEPT_TYPE.BITMAP_TAG
IS
  'FK to REF_BITMAP. The visual representation of the refterm.' ;
  COMMENT ON COLUMN REF_DEPT_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_DEPT_TYPE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_DEPT_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_DEPT_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_DEPT_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_DEPT_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_DEPT_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_DEPT_TYPE ADD CONSTRAINT PK_REF_DEPT_TYPE PRIMARY KEY ( DEPT_TYPE_DB_ID, DEPT_TYPE_CD ) ;


CREATE TABLE REF_DISRUPT_TYPE
  (
    DISRUPT_TYPE_DB_ID NUMBER (10) NOT NULL ,
    DISRUPT_TYPE_CD    VARCHAR2 (8) NOT NULL ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_DISRUPT_TYPE ADD CHECK ( DISRUPT_TYPE_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE REF_DISRUPT_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_DISRUPT_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_DISRUPT_TYPE
IS
  'The types of delays (delay, cancellation) when creating a flight disruption.' ;
  COMMENT ON COLUMN REF_DISRUPT_TYPE.DISRUPT_TYPE_CD
IS
  'A code for the disruption type.' ;
  COMMENT ON COLUMN REF_DISRUPT_TYPE.DESC_SDESC
IS
  'The short description for the flight disruption type.' ;
  COMMENT ON COLUMN REF_DISRUPT_TYPE.DESC_LDESC
IS
  'The long description for the flight disruption type.' ;
ALTER TABLE REF_DISRUPT_TYPE ADD CONSTRAINT PK_REF_DISRUPT_TYPE PRIMARY KEY ( DISRUPT_TYPE_DB_ID, DISRUPT_TYPE_CD ) ;
ALTER TABLE REF_DISRUPT_TYPE ADD CONSTRAINT IX_REFDISRUPTTYPECD_UNQ UNIQUE ( DISRUPT_TYPE_CD ) ;


CREATE TABLE REF_DOMAIN_TYPE
  (
    DOMAIN_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DOMAIN_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC        VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC        VARCHAR2 (4000) ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_DOMAIN_TYPE ADD CHECK ( DOMAIN_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_DOMAIN_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_DOMAIN_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_DOMAIN_TYPE
IS
  '[EXTENDABLE] Domain Type Reference . This class enumerates the domain types for an indicator. Technically this can be extended with additional values, but is rarely done. The mandatory domain types are used to drive system functionality.' ;
  COMMENT ON COLUMN REF_DOMAIN_TYPE.DOMAIN_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_DOMAIN_TYPE.DOMAIN_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_DOMAIN_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_DOMAIN_TYPE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_DOMAIN_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_DOMAIN_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_DOMAIN_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_DOMAIN_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_DOMAIN_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_DOMAIN_TYPE ADD CONSTRAINT PK_REF_DOMAIN_TYPE PRIMARY KEY ( DOMAIN_TYPE_DB_ID, DOMAIN_TYPE_CD ) ;


CREATE TABLE REF_EFFECT_SEV
  (
    EFFECT_SEV_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    EFFECT_SEV_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID     NUMBER (10) ,
    BITMAP_TAG       NUMBER (10) ,
    DESC_SDESC       VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC       VARCHAR2 (4000) ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_EFFECT_SEV ADD CHECK ( EFFECT_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_EFFECT_SEV ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_EFFECT_SEV ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_EFFECT_SEV ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_EFFECT_SEV ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_EFFECT_SEV
IS
  '[EXTENDABLE] The levels of severity that can be assigned when creating a failure effect.' ;
  COMMENT ON COLUMN REF_EFFECT_SEV.EFFECT_SEV_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_EFFECT_SEV.EFFECT_SEV_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_EFFECT_SEV.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_EFFECT_SEV.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_EFFECT_SEV.DESC_SDESC
IS
  'Short description of effect severity.' ;
  COMMENT ON COLUMN REF_EFFECT_SEV.DESC_LDESC
IS
  'Long description of effect severity.' ;
  COMMENT ON COLUMN REF_EFFECT_SEV.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_EFFECT_SEV.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_EFFECT_SEV.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_EFFECT_SEV.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_EFFECT_SEV.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_EFFECT_SEV ADD CONSTRAINT PK_REF_EFFECT_SEV PRIMARY KEY ( EFFECT_SEV_DB_ID, EFFECT_SEV_CD ) ;


CREATE TABLE REF_ENG_UNIT
  (
    ENG_UNIT_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ENG_UNIT_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    REF_UNIT_DB_ID NUMBER (10) ,
    REF_UNIT_CD    VARCHAR2 (8) ,
    DEFAULT_BOOL   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    BITMAP_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG     NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    REF_OFFSET_QT FLOAT ,
    REF_MULT_QT FLOAT ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_ENG_UNIT ADD CHECK ( ENG_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_ENG_UNIT ADD CHECK ( REF_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_ENG_UNIT ADD CHECK ( DEFAULT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_ENG_UNIT ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_ENG_UNIT ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_ENG_UNIT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_ENG_UNIT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_ENG_UNIT
IS
  '[EXTENDABLE] The specific units of measure that correspond to an engineering unit.' ;
  COMMENT ON COLUMN REF_ENG_UNIT.ENG_UNIT_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_ENG_UNIT.ENG_UNIT_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_ENG_UNIT.REF_UNIT_DB_ID
IS
  'FK to REF_REF_UNIT.' ;
  COMMENT ON COLUMN REF_ENG_UNIT.REF_UNIT_CD
IS
  'FK to REF_REF_UNIT.' ;
  COMMENT ON COLUMN REF_ENG_UNIT.DEFAULT_BOOL
IS
  'This is used to indicate that an engineering unit is the default one used by the organization. Each type of engineering unit (for example, TIME, LENGTH, WEIGHT) can have a default. This is a mandatory field and is defaulted to 0.' ;
  COMMENT ON COLUMN REF_ENG_UNIT.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_ENG_UNIT.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_ENG_UNIT.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_ENG_UNIT.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_ENG_UNIT.REF_OFFSET_QT
IS
  'Linear offset used for data conversion from one unit to another.' ;
  COMMENT ON COLUMN REF_ENG_UNIT.REF_MULT_QT
IS
  'Multiplier or gain used for data conversion from one unit to another.' ;
  COMMENT ON COLUMN REF_ENG_UNIT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_ENG_UNIT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_ENG_UNIT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_ENG_UNIT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_ENG_UNIT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_ENG_UNIT ADD CONSTRAINT PK_REF_ENG_UNIT PRIMARY KEY ( ENG_UNIT_DB_ID, ENG_UNIT_CD ) ;


CREATE TABLE REF_EVENT_REASON
  (
    EVENT_REASON_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_REASON_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    EVENT_TYPE_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_TYPE_CD      VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG         NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    USER_REASON_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_EVENT_REASON ADD CHECK ( EVENT_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_EVENT_REASON ADD CHECK ( EVENT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_EVENT_REASON ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_EVENT_REASON ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_EVENT_REASON ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_EVENT_REASON ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_EVENT_REASON
IS
  'Event Reason References: Defines all reasons for any event type.' ;
  COMMENT ON COLUMN REF_EVENT_REASON.EVENT_REASON_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_EVENT_REASON.EVENT_REASON_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_EVENT_REASON.EVENT_TYPE_DB_ID
IS
  'FK to REF_EVENT_TYPE' ;
  COMMENT ON COLUMN REF_EVENT_REASON.EVENT_TYPE_CD
IS
  'FK to REF_EVENT_TYPE' ;
  COMMENT ON COLUMN REF_EVENT_REASON.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_EVENT_REASON.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_EVENT_REASON.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_EVENT_REASON.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_EVENT_REASON.USER_REASON_CD
IS
  'A user entered value that allows a customer to use their own terminology for the Maintenix event model.' ;
  COMMENT ON COLUMN REF_EVENT_REASON.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_EVENT_REASON.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_EVENT_REASON.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_EVENT_REASON.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_EVENT_REASON.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_EVENT_REASON ADD CONSTRAINT PK_REF_EVENT_REASON PRIMARY KEY ( EVENT_REASON_DB_ID, EVENT_REASON_CD ) ;


CREATE TABLE REF_EVENT_STATUS
  (
    EVENT_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_STATUS_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    EVENT_TYPE_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_TYPE_CD      VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG         NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    USER_STATUS_CD     VARCHAR2 (16) NOT NULL DEFERRABLE ,
    STATUS_ORD         NUMBER (4) ,
    AUTH_REQD_BOOL     NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_EVENT_STATUS ADD CHECK ( EVENT_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_EVENT_STATUS ADD CHECK ( EVENT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_EVENT_STATUS ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_EVENT_STATUS ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_EVENT_STATUS ADD CHECK ( AUTH_REQD_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_EVENT_STATUS ADD CHECK ( RSTAT_CD       IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_EVENT_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_EVENT_STATUS
IS
  'Event Status Reference: Defines the workflow step(s) for every event type.' ;
  COMMENT ON COLUMN REF_EVENT_STATUS.EVENT_STATUS_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_EVENT_STATUS.EVENT_STATUS_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_EVENT_STATUS.EVENT_TYPE_DB_ID
IS
  'FK to REF_EVENT_TYPE' ;
  COMMENT ON COLUMN REF_EVENT_STATUS.EVENT_TYPE_CD
IS
  'FK to REF_EVENT_TYPE' ;
  COMMENT ON COLUMN REF_EVENT_STATUS.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_EVENT_STATUS.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_EVENT_STATUS.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_EVENT_STATUS.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_EVENT_STATUS.USER_STATUS_CD
IS
  'A user entered value that allows a customer to use their own terminology for the Maintenix workflow model.' ;
  COMMENT ON COLUMN REF_EVENT_STATUS.STATUS_ORD
IS
  'The stage in the workplow process.' ;
  COMMENT ON COLUMN REF_EVENT_STATUS.AUTH_REQD_BOOL
IS
  'Indicates if an electronic signature is required for the completion (progression to the next workflow step) of this step.' ;
  COMMENT ON COLUMN REF_EVENT_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_EVENT_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_EVENT_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_EVENT_STATUS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_EVENT_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_EVENT_STATUS ADD CONSTRAINT PK_REF_EVENT_STATUS PRIMARY KEY ( EVENT_STATUS_DB_ID, EVENT_STATUS_CD ) ;


CREATE TABLE REF_EVENT_TYPE
  (
    EVENT_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG       NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC       VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC       VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    USER_DEF_BOOL    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_EVENT_TYPE ADD CHECK ( EVENT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_EVENT_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_EVENT_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_EVENT_TYPE ADD CHECK ( USER_DEF_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_EVENT_TYPE ADD CHECK ( RSTAT_CD      IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_EVENT_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_EVENT_TYPE
IS
  'Valid Event Types: EV - Event (default), FL - Flight, TS - Task, SD - Service Difficulty, CF - Component Fault, UC - Usage Correction, UR - Usage Record, TP - Task Plan Step, IL - Inventory Lock' ;
  COMMENT ON COLUMN REF_EVENT_TYPE.EVENT_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_EVENT_TYPE.EVENT_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_EVENT_TYPE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_EVENT_TYPE.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_EVENT_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_EVENT_TYPE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_EVENT_TYPE.USER_DEF_BOOL
IS
  'Indicates customized extension of the Maintenix event model.' ;
  COMMENT ON COLUMN REF_EVENT_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_EVENT_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_EVENT_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_EVENT_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_EVENT_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_EVENT_TYPE ADD CONSTRAINT PK_REF_EVENT_TYPE PRIMARY KEY ( EVENT_TYPE_DB_ID, EVENT_TYPE_CD ) ;


CREATE TABLE REF_FAIL_CATGRY
  (
    FAIL_CATGRY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_CATGRY_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID      NUMBER (10) ,
    BITMAP_TAG        NUMBER (10) ,
    DESC_SDESC        VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC        VARCHAR2 (4000) ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_FAIL_CATGRY ADD CHECK ( FAIL_CATGRY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_CATGRY ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_CATGRY ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_CATGRY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_FAIL_CATGRY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_FAIL_CATGRY
IS
  '[EXTENDABLE] The failure categories that can be assigned to a fault definition.' ;
  COMMENT ON COLUMN REF_FAIL_CATGRY.FAIL_CATGRY_DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN REF_FAIL_CATGRY.FAIL_CATGRY_CD
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN REF_FAIL_CATGRY.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_FAIL_CATGRY.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_FAIL_CATGRY.DESC_SDESC
IS
  'Short description.' ;
  COMMENT ON COLUMN REF_FAIL_CATGRY.DESC_LDESC
IS
  'Long description' ;
  COMMENT ON COLUMN REF_FAIL_CATGRY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_FAIL_CATGRY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_FAIL_CATGRY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_FAIL_CATGRY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_FAIL_CATGRY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_FAIL_CATGRY ADD CONSTRAINT PK_REF_FAIL_CATGRY PRIMARY KEY ( FAIL_CATGRY_DB_ID, FAIL_CATGRY_CD ) ;


CREATE TABLE REF_FAIL_DEFER
  (
    FAIL_DEFER_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_DEFER_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID     NUMBER (10) ,
    BITMAP_TAG       NUMBER (10) ,
    DESC_SDESC       VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC       VARCHAR2 (4000) ,
    DEADLINE_DAYS_QT FLOAT NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_FAIL_DEFER ADD CHECK ( FAIL_DEFER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_DEFER ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_DEFER ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_DEFER ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_FAIL_DEFER ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_FAIL_DEFER
IS
  '[EXTENDABLE] This table contains the list of fault deferral types/classes, including the deadline (number of days) for each class.' ;
  COMMENT ON COLUMN REF_FAIL_DEFER.FAIL_DEFER_DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN REF_FAIL_DEFER.FAIL_DEFER_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_FAIL_DEFER.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_FAIL_DEFER.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_FAIL_DEFER.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_FAIL_DEFER.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_FAIL_DEFER.DEADLINE_DAYS_QT
IS
  'Number of days until the deadline.' ;
  COMMENT ON COLUMN REF_FAIL_DEFER.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_FAIL_DEFER.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_FAIL_DEFER.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_FAIL_DEFER.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_FAIL_DEFER.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_FAIL_DEFER ADD CONSTRAINT PK_REF_FAIL_DEFER PRIMARY KEY ( FAIL_DEFER_DB_ID, FAIL_DEFER_CD ) ;


CREATE TABLE REF_FAIL_DEFER_REF_STATUS
  (
    DEFER_REF_STATUS_CD VARCHAR2 (16 CHAR) NOT NULL ,
    DESC_LDESC          VARCHAR2 (4000 CHAR) NOT NULL ,
    BITMAP_DB_ID        NUMBER (10) NOT NULL ,
    BITMAP_TAG          NUMBER (10) NOT NULL ,
    CTRL_DB_ID          NUMBER (10) NOT NULL ,
    REVISION_NO         NUMBER (10) NOT NULL ,
    CREATION_DB_ID      NUMBER (10) NOT NULL ,
    RSTAT_CD            NUMBER (3) NOT NULL ,
    CREATION_DT         DATE NOT NULL ,
    REVISION_DT         DATE NOT NULL ,
    REVISION_DB_ID      NUMBER (10) NOT NULL ,
    REVISION_USER       VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE REF_FAIL_DEFER_REF_STATUS ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE REF_FAIL_DEFER_REF_STATUS ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) ;
ALTER TABLE REF_FAIL_DEFER_REF_STATUS ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE REF_FAIL_DEFER_REF_STATUS ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE REF_FAIL_DEFER_REF_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE REF_FAIL_DEFER_REF_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON TABLE REF_FAIL_DEFER_REF_STATUS
IS
  '[EXTENDABLE] Defines the statuses for deferral references.' ;
  COMMENT ON COLUMN REF_FAIL_DEFER_REF_STATUS.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_FAIL_DEFER_REF_STATUS.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_FAIL_DEFER_REF_STATUS.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN REF_FAIL_DEFER_REF_STATUS.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN REF_FAIL_DEFER_REF_STATUS.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN REF_FAIL_DEFER_REF_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_FAIL_DEFER_REF_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_FAIL_DEFER_REF_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_FAIL_DEFER_REF_STATUS.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_FAIL_DEFER_REF_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_FAIL_DEFER_REF_STATUS ADD CONSTRAINT PK_REF_FAIL_DEFER_REF_STATUS PRIMARY KEY ( DEFER_REF_STATUS_CD ) ;


CREATE TABLE REF_FAIL_EFFECT_TYPE
  (
    FAIL_EFFECT_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_EFFECT_TYPE_CD    VARCHAR2 (8) CONSTRAINT NN_REFFALEFECTTYPE_FAILEFCCD NOT NULL DEFERRABLE ,
    BITMAP_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG             NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC             VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC             VARCHAR2 (4000) ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) CONSTRAINT NN_RFFLEFFCTTYPE_REVISIOND NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_FAIL_EFFECT_TYPE ADD CHECK ( FAIL_EFFECT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_EFFECT_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_EFFECT_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_EFFECT_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_FAIL_EFFECT_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_FAIL_EFFECT_TYPE
IS
  '[EXTENDABLE] The list of failure effect types that can be selected when creating a failure effect on an assembly''s details page. Classifies the failure effects into types for sorting/filtering.' ;
  COMMENT ON COLUMN REF_FAIL_EFFECT_TYPE.FAIL_EFFECT_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_FAIL_EFFECT_TYPE.FAIL_EFFECT_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_FAIL_EFFECT_TYPE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_FAIL_EFFECT_TYPE.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_FAIL_EFFECT_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_FAIL_EFFECT_TYPE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_FAIL_EFFECT_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_FAIL_EFFECT_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_FAIL_EFFECT_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_FAIL_EFFECT_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_FAIL_EFFECT_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_FAIL_EFFECT_TYPE ADD CONSTRAINT PK_REF_FAIL_EFFECT_TYPE PRIMARY KEY ( FAIL_EFFECT_TYPE_DB_ID, FAIL_EFFECT_TYPE_CD ) ;


CREATE TABLE REF_FAIL_FACTOR
  (
    FAIL_FACTOR_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_FACTOR_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID      NUMBER (10) ,
    BITMAP_TAG        NUMBER (10) ,
    DESC_SDESC        VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC        VARCHAR2 (4000) ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_FAIL_FACTOR ADD CHECK ( FAIL_FACTOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_FACTOR ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_FACTOR ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_FACTOR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_FAIL_FACTOR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_FAIL_FACTOR
IS
  '[EXTENDABLE] This table describes different impacts, such as Delay Cost, Economic, Performance, etc. that can occur because of a fault.' ;
  COMMENT ON COLUMN REF_FAIL_FACTOR.FAIL_FACTOR_DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN REF_FAIL_FACTOR.FAIL_FACTOR_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_FAIL_FACTOR.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_FAIL_FACTOR.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_FAIL_FACTOR.DESC_SDESC
IS
  'Short description of the fail factor.' ;
  COMMENT ON COLUMN REF_FAIL_FACTOR.DESC_LDESC
IS
  'Long description of the fail factor.' ;
  COMMENT ON COLUMN REF_FAIL_FACTOR.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_FAIL_FACTOR.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_FAIL_FACTOR.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_FAIL_FACTOR.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_FAIL_FACTOR.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_FAIL_FACTOR ADD CONSTRAINT PK_REF_FAIL_FACTOR PRIMARY KEY ( FAIL_FACTOR_DB_ID, FAIL_FACTOR_CD ) ;


CREATE TABLE REF_FAIL_PARM_DATA
  (
    FAIL_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_ORD        NUMBER (4) ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_FAIL_PARM_DATA ADD CHECK ( FAIL_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_PARM_DATA ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_PARM_DATA ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_PARM_DATA ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_FAIL_PARM_DATA ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_FAIL_PARM_DATA
IS
  '[EXTENDABLE] This table contains the list of pre-defined measurements associated with failure types when raising a logbook fault. See also REF_FAIL_TYPE.' ;
  COMMENT ON COLUMN REF_FAIL_PARM_DATA.FAIL_TYPE_DB_ID
IS
  'PK: FK REF_FAIL_TYPE.' ;
  COMMENT ON COLUMN REF_FAIL_PARM_DATA.FAIL_TYPE_CD
IS
  'PK: FK REF_FAIL_TYPE.' ;
  COMMENT ON COLUMN REF_FAIL_PARM_DATA.DATA_TYPE_DB_ID
IS
  'PK: FK MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN REF_FAIL_PARM_DATA.DATA_TYPE_ID
IS
  'PK: FK MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN REF_FAIL_PARM_DATA.DATA_ORD
IS
  'Data order.' ;
  COMMENT ON COLUMN REF_FAIL_PARM_DATA.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_FAIL_PARM_DATA.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_FAIL_PARM_DATA.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_FAIL_PARM_DATA.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_FAIL_PARM_DATA.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_FAIL_PARM_DATA ADD CONSTRAINT "pk_REF_FAIL_PARM_DATA" PRIMARY KEY ( FAIL_TYPE_DB_ID, FAIL_TYPE_CD, DATA_TYPE_DB_ID, DATA_TYPE_ID ) ;


CREATE TABLE REF_FAIL_PRIORITY
  (
    FAIL_PRIORITY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_PRIORITY_CD    VARCHAR2 (8) CONSTRAINT NN_REFFAILPRIORITY_FALPRICD NOT NULL DEFERRABLE ,
    BITMAP_DB_ID        NUMBER (10) ,
    BITMAP_TAG          NUMBER (10) ,
    DESC_SDESC          VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC          VARCHAR2 (4000) ,
    PRIORITY_ORD        NUMBER (4) ,
    CALC_PRIORITY_QT FLOAT ,
    RGB_COLOR_SDESC VARCHAR2 (80) ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_FAIL_PRIORITY ADD CHECK ( FAIL_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_PRIORITY ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_PRIORITY ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_PRIORITY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_FAIL_PRIORITY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_FAIL_PRIORITY
IS
  '[EXTENDABLE] This table contains the list of fault definition diagnosis priorities that can be selected when creating or editing a fault definition.' ;
  COMMENT ON COLUMN REF_FAIL_PRIORITY.FAIL_PRIORITY_DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN REF_FAIL_PRIORITY.FAIL_PRIORITY_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_FAIL_PRIORITY.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_FAIL_PRIORITY.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_FAIL_PRIORITY.DESC_SDESC
IS
  'Short description for the fail priority.' ;
  COMMENT ON COLUMN REF_FAIL_PRIORITY.DESC_LDESC
IS
  'Long description for the fail priority.' ;
  COMMENT ON COLUMN REF_FAIL_PRIORITY.PRIORITY_ORD
IS
  'This column will show the highest priority of all of the faults that are in POSSIBLE status.' ;
  COMMENT ON COLUMN REF_FAIL_PRIORITY.CALC_PRIORITY_QT
IS
  'Used in calculating the Customer-Specific priority.' ;
  COMMENT ON COLUMN REF_FAIL_PRIORITY.RGB_COLOR_SDESC
IS
  'The color of the value in the POSSIBLE FAULTS column is defined by this column.' ;
  COMMENT ON COLUMN REF_FAIL_PRIORITY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_FAIL_PRIORITY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_FAIL_PRIORITY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_FAIL_PRIORITY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_FAIL_PRIORITY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_FAIL_PRIORITY ADD CONSTRAINT PK_REF_FAIL_PRIORITY PRIMARY KEY ( FAIL_PRIORITY_DB_ID, FAIL_PRIORITY_CD ) ;


CREATE TABLE REF_FAIL_SEV
  (
    FAIL_SEV_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_SEV_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG     NUMBER (10) NOT NULL DEFERRABLE ,
    SEV_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SEV_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    FAIL_SEV_ORD   NUMBER (4) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_FAIL_SEV ADD CHECK ( FAIL_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_SEV ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_SEV ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_SEV ADD CHECK ( SEV_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_SEV ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_FAIL_SEV ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_FAIL_SEV
IS
  '[EXTENDABLE] Identifies the severity of the failure mode, such as MEL.' ;
  COMMENT ON COLUMN REF_FAIL_SEV.FAIL_SEV_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_FAIL_SEV.FAIL_SEV_CD
IS
  'A unique value that defines the PK.' ;
  COMMENT ON COLUMN REF_FAIL_SEV.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_FAIL_SEV.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_FAIL_SEV.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_FAIL_SEV.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_FAIL_SEV.FAIL_SEV_ORD
IS
  'The order for the severity (from least to most or vice versa).' ;
  COMMENT ON COLUMN REF_FAIL_SEV.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_FAIL_SEV.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_FAIL_SEV.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_FAIL_SEV.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_FAIL_SEV.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_FAIL_SEV ADD CONSTRAINT PK_REF_FAIL_SEV PRIMARY KEY ( FAIL_SEV_DB_ID, FAIL_SEV_CD ) ;


CREATE TABLE REF_FAIL_SEV_DEFER
  (
    FAIL_SEV_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_SEV_CD      VARCHAR2 (8) NOT NULL DEFERRABLE ,
    FAIL_DEFER_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_DEFER_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_FAIL_SEV_DEFER ADD CHECK ( FAIL_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_SEV_DEFER ADD CHECK ( FAIL_DEFER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_SEV_DEFER ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_FAIL_SEV_DEFER ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_FAIL_SEV_DEFER
IS
  '[EXTENDABLE] The list of fault deferral classes that are available when a fault severity that allows deferral is selected.' ;
  COMMENT ON COLUMN REF_FAIL_SEV_DEFER.FAIL_SEV_DB_ID
IS
  'FK to REF_FAIL_SEV' ;
  COMMENT ON COLUMN REF_FAIL_SEV_DEFER.FAIL_SEV_CD
IS
  'FK to REF_FAIL_SEV' ;
  COMMENT ON COLUMN REF_FAIL_SEV_DEFER.FAIL_DEFER_DB_ID
IS
  'FK to REF_FAIL_DEFER' ;
  COMMENT ON COLUMN REF_FAIL_SEV_DEFER.FAIL_DEFER_CD
IS
  'FK to REF_FAIL_DEFER' ;
  COMMENT ON COLUMN REF_FAIL_SEV_DEFER.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_FAIL_SEV_DEFER.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_FAIL_SEV_DEFER.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_FAIL_SEV_DEFER.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix' ;
  COMMENT ON COLUMN REF_FAIL_SEV_DEFER.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_FAIL_SEV_DEFER ADD CONSTRAINT PK_REF_FAIL_SEV_DEFER PRIMARY KEY ( FAIL_SEV_DB_ID, FAIL_SEV_CD, FAIL_DEFER_DB_ID, FAIL_DEFER_CD ) ;


CREATE TABLE REF_FAIL_TYPE
  (
    FAIL_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID    NUMBER (10) ,
    BITMAP_TAG      NUMBER (10) ,
    DESC_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC      VARCHAR2 (4000) ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_FAIL_TYPE ADD CHECK ( FAIL_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAIL_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_FAIL_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_FAIL_TYPE
IS
  '[EXTENDABLE] The list of failure types, such as worn, cracked, etc.' ;
  COMMENT ON COLUMN REF_FAIL_TYPE.FAIL_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_FAIL_TYPE.FAIL_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_FAIL_TYPE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_FAIL_TYPE.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_FAIL_TYPE.DESC_SDESC
IS
  'Short description of the failure type.' ;
  COMMENT ON COLUMN REF_FAIL_TYPE.DESC_LDESC
IS
  'Long description of the failure type.' ;
  COMMENT ON COLUMN REF_FAIL_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_FAIL_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_FAIL_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_FAIL_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_FAIL_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_FAIL_TYPE ADD CONSTRAINT PK_REF_FAIL_TYPE PRIMARY KEY ( FAIL_TYPE_DB_ID, FAIL_TYPE_CD ) ;


CREATE TABLE REF_FAULT_LOG_TYPE
  (
    FAULT_LOG_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FAULT_LOG_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    NAME_SDESC           VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC           VARCHAR2 (4000) ,
    USER_CD              VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_FAULT_LOG_TYPE ADD CHECK ( FAULT_LOG_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAULT_LOG_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_FAULT_LOG_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_FAULT_LOG_TYPE
IS
  '[EXTENDABLE] The list of logbook types on the Raise Logbook Fault page.' ;
  COMMENT ON COLUMN REF_FAULT_LOG_TYPE.FAULT_LOG_TYPE_DB_ID
IS
  'Database ID' ;
  COMMENT ON COLUMN REF_FAULT_LOG_TYPE.FAULT_LOG_TYPE_CD
IS
  'The code representing the type of logbook entry. Initial set of values: TECH, CABIN, IFE' ;
  COMMENT ON COLUMN REF_FAULT_LOG_TYPE.NAME_SDESC
IS
  'The name of the logbook' ;
  COMMENT ON COLUMN REF_FAULT_LOG_TYPE.DESC_LDESC
IS
  'A description of the logbook' ;
  COMMENT ON COLUMN REF_FAULT_LOG_TYPE.USER_CD
IS
  'This code is displayed in the Maintenix GUI. Initially its value is the same as FAULT_LOG_TYPE_CD but may be customized by the customer if they prefer to see another value.' ;
  COMMENT ON COLUMN REF_FAULT_LOG_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_FAULT_LOG_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_FAULT_LOG_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_FAULT_LOG_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_FAULT_LOG_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_FAULT_LOG_TYPE ADD CONSTRAINT PK_REF_FAULT_LOG_TYPE PRIMARY KEY ( FAULT_LOG_TYPE_DB_ID, FAULT_LOG_TYPE_CD ) ;


CREATE TABLE REF_FAULT_SOURCE
  (
    FAULT_SOURCE_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    FAULT_SOURCE_CD        VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID           NUMBER (10) ,
    BITMAP_TAG             NUMBER (10) ,
    DESC_SDESC             VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC             VARCHAR2 (4000) ,
    SPEC2K_FAULT_SOURCE_CD VARCHAR2 (8) ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_FAULT_SOURCE ADD CHECK ( FAULT_SOURCE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAULT_SOURCE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAULT_SOURCE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FAULT_SOURCE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_FAULT_SOURCE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_FAULT_SOURCE
IS
  '[EXTENDABLE] The list of possible sources who found the fault. For example, the fault could have been found by a cabin crew member.' ;
  COMMENT ON COLUMN REF_FAULT_SOURCE.FAULT_SOURCE_DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN REF_FAULT_SOURCE.FAULT_SOURCE_CD
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN REF_FAULT_SOURCE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_FAULT_SOURCE.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_FAULT_SOURCE.DESC_SDESC
IS
  'Short description of the fault source.' ;
  COMMENT ON COLUMN REF_FAULT_SOURCE.DESC_LDESC
IS
  'Long description of the fault source.' ;
  COMMENT ON COLUMN REF_FAULT_SOURCE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_FAULT_SOURCE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_FAULT_SOURCE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_FAULT_SOURCE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_FAULT_SOURCE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_FAULT_SOURCE ADD CONSTRAINT PK_REF_FAULT_SOURCE PRIMARY KEY ( FAULT_SOURCE_DB_ID, FAULT_SOURCE_CD ) ;


CREATE TABLE REF_FINANCE_TYPE
  (
    FINANCE_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FINANCE_TYPE_CD    VARCHAR2 (8) CONSTRAINT NN_FINANTYPECD NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) CONSTRAINT NN_REFFNTYPEDBID NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) CONSTRAINT NN_REFFNTYPEUSER NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_FINANCE_TYPE ADD CHECK ( FINANCE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FINANCE_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_FINANCE_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_FINANCE_TYPE
IS
  'The list of approved finance types for finance classes.' ;
  COMMENT ON COLUMN REF_FINANCE_TYPE.FINANCE_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_FINANCE_TYPE.FINANCE_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_FINANCE_TYPE.DESC_SDESC
IS
  'Short description of the financial type' ;
  COMMENT ON COLUMN REF_FINANCE_TYPE.DESC_LDESC
IS
  'Long description of the financial type' ;
  COMMENT ON COLUMN REF_FINANCE_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_FINANCE_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_FINANCE_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_FINANCE_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_FINANCE_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_FINANCE_TYPE ADD CONSTRAINT PK_REF_FINANCE_TYPE PRIMARY KEY ( FINANCE_TYPE_DB_ID, FINANCE_TYPE_CD ) ;


CREATE TABLE REF_FINANCIAL_CLASS
  (
    FINANCIAL_CLASS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FINANCIAL_CLASS_CD    VARCHAR2 (20) CONSTRAINT NN_FINANCLACD NOT NULL DEFERRABLE ,
    FINANCE_TYPE_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    FINANCE_TYPE_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC            VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC            VARCHAR2 (4000) ,
    BITMAP_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG            NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) CONSTRAINT NN_REVDBIDFINAN NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_FINANCIAL_CLASS ADD CHECK ( FINANCIAL_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FINANCIAL_CLASS ADD CHECK ( FINANCE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FINANCIAL_CLASS ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FINANCIAL_CLASS ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FINANCIAL_CLASS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_FINANCIAL_CLASS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_FINANCIAL_CLASS
IS
  '[EXTENDABLE] The list of financial classes that can be selected when creating a part. Although this reference term table may be extended, it is rarely necessary to do so during a typical IFS Maintenix implementation.' ;
  COMMENT ON COLUMN REF_FINANCIAL_CLASS.FINANCIAL_CLASS_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_FINANCIAL_CLASS.FINANCIAL_CLASS_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_FINANCIAL_CLASS.DESC_SDESC
IS
  'Short description of the financial class.' ;
  COMMENT ON COLUMN REF_FINANCIAL_CLASS.DESC_LDESC
IS
  'Short description of the financial class.' ;
  COMMENT ON COLUMN REF_FINANCIAL_CLASS.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_FINANCIAL_CLASS.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_FINANCIAL_CLASS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_FINANCIAL_CLASS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_FINANCIAL_CLASS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_FINANCIAL_CLASS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_FINANCIAL_CLASS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_FINANCIAL_CLASS ADD CONSTRAINT "pk_REF_FINANCIAL_CLASS" PRIMARY KEY ( FINANCIAL_CLASS_DB_ID, FINANCIAL_CLASS_CD ) ;


CREATE TABLE REF_FINDING_TYPE
  (
    FINDING_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FINDING_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_FINDING_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FINDING_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
COMMENT ON TABLE REF_FINDING_TYPE
IS
  '[EXTENDABLE] Used to classify Maintenance event types, as defined by the operator (e.g. SHEARED, CHIPPED, MELTED, WORN, etc.). Rows must be added to this table to enable the optional  Maintenance Events feature.' ;
  COMMENT ON COLUMN REF_FINDING_TYPE.FINDING_TYPE_DB_ID
IS
  'This is the primary key for the finding type.' ;
  COMMENT ON COLUMN REF_FINDING_TYPE.FINDING_TYPE_CD
IS
  'This is the primary key for the finding type.' ;
  COMMENT ON COLUMN REF_FINDING_TYPE.DESC_SDESC
IS
  'This is the name of the finding type.' ;
  COMMENT ON COLUMN REF_FINDING_TYPE.DESC_LDESC
IS
  'This is the description of the finding type.' ;
  COMMENT ON COLUMN REF_FINDING_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_FINDING_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_FINDING_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_FINDING_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  COMMENT ON COLUMN REF_FINDING_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
ALTER TABLE REF_FINDING_TYPE ADD CONSTRAINT PK_REF_FINDING_TYPE PRIMARY KEY ( FINDING_TYPE_DB_ID, FINDING_TYPE_CD ) ;


CREATE TABLE REF_FLIGHT_LEG_STATUS
  (
    FLIGHT_LEG_STATUS_CD VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DISPLAY_CODE         VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DISPLAY_NAME         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DISPLAY_DESC         VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    DISPLAY_ORD          NUMBER (4) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG           NUMBER (10) NOT NULL DEFERRABLE ,
    LEGACY_KEY           VARCHAR2 (27) ,
    CTRL_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_NO          NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_FLIGHT_LEG_STATUS ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FLIGHT_LEG_STATUS ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FLIGHT_LEG_STATUS ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FLIGHT_LEG_STATUS ADD CHECK ( REVISION_NO BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FLIGHT_LEG_STATUS ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FLIGHT_LEG_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_FLIGHT_LEG_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_FLIGHT_LEG_STATUS
IS
  'This table contains the status codes for flight legs.' ;
  COMMENT ON COLUMN REF_FLIGHT_LEG_STATUS.FLIGHT_LEG_STATUS_CD
IS
  'Unique identifier for REF_FLIGHT_LEG_STATUS table.' ;
  COMMENT ON COLUMN REF_FLIGHT_LEG_STATUS.DISPLAY_CODE
IS
  'User prefered status code for display purposes.' ;
  COMMENT ON COLUMN REF_FLIGHT_LEG_STATUS.DISPLAY_NAME
IS
  'User prefered status name for display purposes.' ;
  COMMENT ON COLUMN REF_FLIGHT_LEG_STATUS.DISPLAY_DESC
IS
  'Detailed description for this flight leg status ref entry.' ;
  COMMENT ON COLUMN REF_FLIGHT_LEG_STATUS.DISPLAY_ORD
IS
  'The stage in the workplow process.' ;
  COMMENT ON COLUMN REF_FLIGHT_LEG_STATUS.BITMAP_DB_ID
IS
  'FK to REF_BITMAP. Identifies the bitmap that can be shown in place of the refterm code.' ;
  COMMENT ON COLUMN REF_FLIGHT_LEG_STATUS.BITMAP_TAG
IS
  'FK to REF_BITMAP. Identifies the bitmap that can be shown in place of the refterm code.' ;
  COMMENT ON COLUMN REF_FLIGHT_LEG_STATUS.LEGACY_KEY
IS
  'Indicates the representation of the entity in the old data model.  Used only for reference purposes.' ;
  COMMENT ON COLUMN REF_FLIGHT_LEG_STATUS.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN REF_FLIGHT_LEG_STATUS.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN REF_FLIGHT_LEG_STATUS.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN REF_FLIGHT_LEG_STATUS.RSTAT_CD
IS
  'The status of the record.' ;
  COMMENT ON COLUMN REF_FLIGHT_LEG_STATUS.CREATION_DT
IS
  'The data and time at which the record was inserted.' ;
  COMMENT ON COLUMN REF_FLIGHT_LEG_STATUS.REVISION_DT
IS
  'The data and time at which the record was updated.' ;
  COMMENT ON COLUMN REF_FLIGHT_LEG_STATUS.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN REF_FLIGHT_LEG_STATUS.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
CREATE UNIQUE INDEX IX_REF_FLIGHT_LEG_STATUS_NK ON REF_FLIGHT_LEG_STATUS ( DISPLAY_CODE ASC , CTRL_DB_ID ASC ) ;
ALTER TABLE REF_FLIGHT_LEG_STATUS ADD CONSTRAINT PK_REF_FLIGHT_LEG_STATUS PRIMARY KEY ( FLIGHT_LEG_STATUS_CD ) ;


CREATE TABLE REF_FLIGHT_REASON
  (
    FLIGHT_REASON_CD VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DISPLAY_CODE     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DISPLAY_NAME     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DISPLAY_DESC     VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    DISPLAY_ORD      NUMBER (4) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG       NUMBER (10) NOT NULL DEFERRABLE ,
    LEGACY_KEY       VARCHAR2 (19) ,
    CTRL_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_NO      NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_FLIGHT_REASON ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FLIGHT_REASON ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FLIGHT_REASON ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FLIGHT_REASON ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FLIGHT_REASON ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_FLIGHT_REASON ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_FLIGHT_REASON
IS
  '[EXTENDABLE] The codes that represent the reasons for a flight.' ;
  COMMENT ON COLUMN REF_FLIGHT_REASON.FLIGHT_REASON_CD
IS
  'PK to REF_FLIGHT_REASON table.' ;
  COMMENT ON COLUMN REF_FLIGHT_REASON.DISPLAY_CODE
IS
  'User preferred display code for display purposes.' ;
  COMMENT ON COLUMN REF_FLIGHT_REASON.DISPLAY_NAME
IS
  'User preferred display name for display purposes.' ;
  COMMENT ON COLUMN REF_FLIGHT_REASON.DISPLAY_DESC
IS
  'Detailed descirption of the flight reason code.' ;
  COMMENT ON COLUMN REF_FLIGHT_REASON.DISPLAY_ORD
IS
  'Display order for the flight reason.' ;
  COMMENT ON COLUMN REF_FLIGHT_REASON.BITMAP_DB_ID
IS
  'FK to REF_BITMAP. Identifies the bitmap that can be shown in place of the refterm code.' ;
  COMMENT ON COLUMN REF_FLIGHT_REASON.BITMAP_TAG
IS
  'FK to REF_BITMAP. Identifies the bitmap that can be shown in place of the refterm code.' ;
  COMMENT ON COLUMN REF_FLIGHT_REASON.LEGACY_KEY
IS
  'Indicates the representation of the entity in the old data model.  Used only for reference purposes.' ;
  COMMENT ON COLUMN REF_FLIGHT_REASON.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN REF_FLIGHT_REASON.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN REF_FLIGHT_REASON.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN REF_FLIGHT_REASON.RSTAT_CD
IS
  'The status of the record.' ;
  COMMENT ON COLUMN REF_FLIGHT_REASON.CREATION_DT
IS
  'The data and time at which the record was inserted.' ;
  COMMENT ON COLUMN REF_FLIGHT_REASON.REVISION_DT
IS
  'The data and time at which the record was updated.' ;
  COMMENT ON COLUMN REF_FLIGHT_REASON.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN REF_FLIGHT_REASON.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_REF_FLIGHT_REASON_NK ON REF_FLIGHT_REASON
    (
      DISPLAY_CODE ASC ,
      CTRL_DB_ID ASC
    ) ;
ALTER TABLE REF_FLIGHT_REASON ADD CONSTRAINT PK_REF_FLIGHT_REASON PRIMARY KEY ( FLIGHT_REASON_CD ) ;


CREATE TABLE REF_FLIGHT_STAGE
  (
    FLIGHT_STAGE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FLIGHT_STAGE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG         NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_FLIGHT_STAGE ADD CHECK ( FLIGHT_STAGE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FLIGHT_STAGE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FLIGHT_STAGE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FLIGHT_STAGE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_FLIGHT_STAGE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_FLIGHT_STAGE
IS
  '[EXTENDABLE] The list of the flight stages that are applied to an incident occurrence (e.g. takeoff, maintenance, cruise, etc.).' ;
  COMMENT ON COLUMN REF_FLIGHT_STAGE.FLIGHT_STAGE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_FLIGHT_STAGE.FLIGHT_STAGE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_FLIGHT_STAGE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_FLIGHT_STAGE.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_FLIGHT_STAGE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_FLIGHT_STAGE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_FLIGHT_STAGE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_FLIGHT_STAGE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_FLIGHT_STAGE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_FLIGHT_STAGE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_FLIGHT_STAGE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_FLIGHT_STAGE ADD CONSTRAINT PK_REF_FLIGHT_STAGE PRIMARY KEY ( FLIGHT_STAGE_DB_ID, FLIGHT_STAGE_CD ) ;


CREATE TABLE REF_FLIGHT_TYPE
  (
    FLIGHT_TYPE_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    FLIGHT_TYPE_CD        VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG            NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC            VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC            VARCHAR2 (4000) ,
    SPEC2K_FLIGHT_TYPE_CD VARCHAR2 (8) ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_FLIGHT_TYPE ADD CHECK ( FLIGHT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FLIGHT_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FLIGHT_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FLIGHT_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_FLIGHT_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_FLIGHT_TYPE
IS
  '[EXTENDABLE] The categories of the types of flights that may be flown. Examples are commercial passenger run versus a test flight. Used extensively in military installs.' ;
  COMMENT ON COLUMN REF_FLIGHT_TYPE.FLIGHT_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_FLIGHT_TYPE.FLIGHT_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_FLIGHT_TYPE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_FLIGHT_TYPE.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_FLIGHT_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_FLIGHT_TYPE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_FLIGHT_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_FLIGHT_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_FLIGHT_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_FLIGHT_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_FLIGHT_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_FLIGHT_TYPE ADD CONSTRAINT PK_REF_FLIGHT_TYPE PRIMARY KEY ( FLIGHT_TYPE_DB_ID, FLIGHT_TYPE_CD ) ;


CREATE TABLE REF_FOB
  (
    FOB_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    FOB_CD         VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_FOB ADD CHECK ( FOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_FOB ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_FOB ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_FOB
IS
  '[EXTENDABLE] The list of Freight on Board conditions that apply to a shipment. Freight on Board is a term in international commercial law specifying at what point respective obligations, costs, and risk involved in the delivery of goods shift from the seller to the buyer.' ;
  COMMENT ON COLUMN REF_FOB.FOB_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_FOB.FOB_CD
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN REF_FOB.DESC_SDESC
IS
  'Short description for the Freight on Board.' ;
  COMMENT ON COLUMN REF_FOB.DESC_LDESC
IS
  'Long description for the Freight on Board.' ;
  COMMENT ON COLUMN REF_FOB.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_FOB.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_FOB.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_FOB.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_FOB.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_FOB ADD CONSTRAINT "pk_REF_FOB" PRIMARY KEY ( FOB_DB_ID, FOB_CD ) ;


CREATE TABLE REF_GRP_TYPE
  (
    GRP_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    GRP_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_GRP_TYPE ADD CHECK ( GRP_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_GRP_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_GRP_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_GRP_TYPE
IS
  '[EXTENDABLE] Can be used to group licence definitions (but rarely used by operators).' ;
  COMMENT ON COLUMN REF_GRP_TYPE.GRP_TYPE_DB_ID
IS
  'primary key for ref_grp_type.' ;
  COMMENT ON COLUMN REF_GRP_TYPE.GRP_TYPE_CD
IS
  'primary key for ref_grp_type.' ;
  COMMENT ON COLUMN REF_GRP_TYPE.DESC_SDESC
IS
  'Short description of a license group type.' ;
  COMMENT ON COLUMN REF_GRP_TYPE.DESC_LDESC
IS
  'Long description of a license group type.' ;
  COMMENT ON COLUMN REF_GRP_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_GRP_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_GRP_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_GRP_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_GRP_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_GRP_TYPE ADD CONSTRAINT PK_REF_GRP_TYPE PRIMARY KEY ( GRP_TYPE_DB_ID, GRP_TYPE_CD ) ;


CREATE TABLE REF_HAZMAT
  (
    HAZMAT_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    HAZMAT_CD      VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) ,
    DESC_LDESC     VARCHAR2 (4000) ,
    BITMAP_DB_ID   NUMBER (10) ,
    BITMAP_TAG     NUMBER (10) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_HAZMAT ADD CHECK ( HAZMAT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_HAZMAT ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_HAZMAT ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_HAZMAT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_HAZMAT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_HAZMAT
IS
  '[EXTENDABLE] The list of hazardous material designations that can be assigned when configuring shipping, packaging, and storage information for a part.' ;
  COMMENT ON COLUMN REF_HAZMAT.HAZMAT_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_HAZMAT.HAZMAT_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_HAZMAT.DESC_SDESC
IS
  'Short description of the Hazardous material.' ;
  COMMENT ON COLUMN REF_HAZMAT.DESC_LDESC
IS
  'Long description of the hazardous material.' ;
  COMMENT ON COLUMN REF_HAZMAT.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_HAZMAT.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_HAZMAT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_HAZMAT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_HAZMAT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_HAZMAT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_HAZMAT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_HAZMAT ADD CONSTRAINT "pk_REF_HAZMAT" PRIMARY KEY ( HAZMAT_DB_ID, HAZMAT_CD ) ;


CREATE TABLE REF_HR_LIC_STATUS
  (
    HR_LIC_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    HR_LIC_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    USER_CD             VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC          VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC          VARCHAR2 (4000) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_HR_LIC_STATUS ADD CHECK ( HR_LIC_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_HR_LIC_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_HR_LIC_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_HR_LIC_STATUS
IS
  'Status of a licence held by an aircraft technician or maintenance engineer. ' ;
  COMMENT ON COLUMN REF_HR_LIC_STATUS.HR_LIC_STATUS_DB_ID
IS
  'PRIMARY KEY for ref_hr_lic_status table' ;
  COMMENT ON COLUMN REF_HR_LIC_STATUS.HR_LIC_STATUS_CD
IS
  'PRIMARY KEY for ref_hr_lic_status table' ;
  COMMENT ON COLUMN REF_HR_LIC_STATUS.USER_CD
IS
  'User License code used to define a user license lifecycle.' ;
  COMMENT ON COLUMN REF_HR_LIC_STATUS.DESC_SDESC
IS
  'Short description of a user license, spefically the descipriont of the lifecycle of a user license.' ;
  COMMENT ON COLUMN REF_HR_LIC_STATUS.DESC_LDESC
IS
  'Long description of a user license, spefically the descipriont of the lifecycle of a user license.' ;
  COMMENT ON COLUMN REF_HR_LIC_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_HR_LIC_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_HR_LIC_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_HR_LIC_STATUS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_HR_LIC_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_HR_LIC_STATUS ADD CONSTRAINT PK_REF_HR_LIC_STATUS PRIMARY KEY ( HR_LIC_STATUS_DB_ID, HR_LIC_STATUS_CD ) ;


CREATE TABLE REF_IETM_TYPE
  (
    IETM_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG      NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC      VARCHAR2 (4000) ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_IETM_TYPE ADD CHECK ( IETM_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_IETM_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_IETM_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_IETM_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_IETM_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_IETM_TYPE
IS
  '[EXTENDABLE] The list of Interactive Electronic Technical Manual (IETM) types which is found when adding or editing a technical reference.' ;
  COMMENT ON COLUMN REF_IETM_TYPE.IETM_TYPE_DB_ID
IS
  'A unique value that defines the PK of this reference term.
' ;
  COMMENT ON COLUMN REF_IETM_TYPE.IETM_TYPE_CD
IS
  'A unique, user entered value that defines the PK of this reference term.
' ;
  COMMENT ON COLUMN REF_IETM_TYPE.BITMAP_DB_ID
IS
  'FK to ref_bitmap.' ;
  COMMENT ON COLUMN REF_IETM_TYPE.BITMAP_TAG
IS
  'FK to ref_bitmap.' ;
  COMMENT ON COLUMN REF_IETM_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.
' ;
  COMMENT ON COLUMN REF_IETM_TYPE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_IETM_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_IETM_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_IETM_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_IETM_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_IETM_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_IETM_TYPE ADD CONSTRAINT "pk_REF_IETM_TYPE" PRIMARY KEY ( IETM_TYPE_DB_ID, IETM_TYPE_CD ) ;


CREATE TABLE REF_IMPACT
  (
    IMPACT_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    IMPACT_CD      VARCHAR2 (20) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_IMPACT ADD CHECK ( IMPACT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_IMPACT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_IMPACT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_IMPACT
IS
  '[EXTENDABLE] The list of task impacts which is found on the Job Card Details, Reference Document Details and Requirement Details pages.' ;
ALTER TABLE REF_IMPACT ADD CONSTRAINT PK_REF_IMPACT PRIMARY KEY ( IMPACT_DB_ID, IMPACT_CD ) ;


CREATE TABLE REF_INT_DELIVERY
  (
    DELIVERY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DELIVERY_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_INT_DELIVERY ADD CHECK ( DELIVERY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_INT_DELIVERY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_INT_DELIVERY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_INT_DELIVERY
IS
  'Defines methods of processing for integration messages, i.e. no restrictions, first-in-first-out, or ordered messages. ' ;
  COMMENT ON COLUMN REF_INT_DELIVERY.DELIVERY_DB_ID
IS
  'Database Id for delivery type' ;
  COMMENT ON COLUMN REF_INT_DELIVERY.DELIVERY_CD
IS
  'String code for delivery type' ;
  COMMENT ON COLUMN REF_INT_DELIVERY.DESC_SDESC
IS
  'Description of delivery type' ;
  COMMENT ON COLUMN REF_INT_DELIVERY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_INT_DELIVERY.CREATION_DT
IS
  'The database server?s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_INT_DELIVERY.REVISION_DT
IS
  'The database server?s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_INT_DELIVERY.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_INT_DELIVERY.REVISION_USER
IS
  'The user that last modified the record. ' ;
ALTER TABLE REF_INT_DELIVERY ADD CONSTRAINT PK_REF_INT_DELIVERY PRIMARY KEY ( DELIVERY_DB_ID, DELIVERY_CD ) ;


CREATE TABLE REF_INT_LOGGING_TYPE
  (
    INT_LOGGING_TYPE_CD VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC          VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC          VARCHAR2 (4000) ,
    CTRL_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_INT_LOGGING_TYPE ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_INT_LOGGING_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_INT_LOGGING_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_INT_LOGGING_TYPE
IS
  'This table lists the supported integration logging configurations.' ;
  COMMENT ON COLUMN REF_INT_LOGGING_TYPE.INT_LOGGING_TYPE_CD
IS
  'This is a short code for the integration logging type.  This is the natural key for the table. ' ;
  COMMENT ON COLUMN REF_INT_LOGGING_TYPE.DESC_SDESC
IS
  'This is a short description of the integration logging type. ' ;
  COMMENT ON COLUMN REF_INT_LOGGING_TYPE.DESC_LDESC
IS
  'This is a long description of the integration logging type. ' ;
  COMMENT ON COLUMN REF_INT_LOGGING_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_INT_LOGGING_TYPE.CREATION_DT
IS
  'The database server?s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_INT_LOGGING_TYPE.REVISION_DT
IS
  'The database server?s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_INT_LOGGING_TYPE.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_INT_LOGGING_TYPE.REVISION_USER
IS
  'The user that last modified the record. ' ;
ALTER TABLE REF_INT_LOGGING_TYPE ADD CONSTRAINT PK_REF_INT_LOGGING_TYPE PRIMARY KEY ( INT_LOGGING_TYPE_CD ) ;


CREATE TABLE REF_INT_LOG_STATUS
  (
    STATUS_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    STATUS_CD      VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_INT_LOG_STATUS ADD CHECK ( STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_INT_LOG_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_INT_LOG_STATUS ADD CONSTRAINT REVISION_DB_ID_BETWEEN_0_AND_4 CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_INT_LOG_STATUS
IS
  'Defines the processing status for integration messages (i.e. AWAIT, ERROR, COMPLETE, NOTRUN, SUCCESS).' ;
  COMMENT ON COLUMN REF_INT_LOG_STATUS.STATUS_DB_ID
IS
  'Database identifier.' ;
  COMMENT ON COLUMN REF_INT_LOG_STATUS.STATUS_CD
IS
  'Status Code ' ;
  COMMENT ON COLUMN REF_INT_LOG_STATUS.DESC_SDESC
IS
  'Verbal description of the business logic meaning of the code' ;
  COMMENT ON COLUMN REF_INT_LOG_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_INT_LOG_STATUS.CREATION_DT
IS
  'The database server?s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_INT_LOG_STATUS.REVISION_DT
IS
  'The database server?s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_INT_LOG_STATUS.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_INT_LOG_STATUS.REVISION_USER
IS
  'The user that last modified the record. ' ;
ALTER TABLE REF_INT_LOG_STATUS ADD CONSTRAINT PK_REF_INT_LOG_STATUS PRIMARY KEY ( STATUS_DB_ID, STATUS_CD ) ;


CREATE TABLE REF_INT_STEP_TYPE
  (
    STEP_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    STEP_TYPE_CD    VARCHAR2 (10) NOT NULL DEFERRABLE ,
    DESC_SDESC      VARCHAR2 (80) ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_INT_STEP_TYPE ADD CHECK ( STEP_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_INT_STEP_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_INT_STEP_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_INT_STEP_TYPE
IS
  'Classifications for various steps when processing integration messages (e.g. PROCESS, TRANSFORM, VALIDATOR, SERVICE).' ;
  COMMENT ON COLUMN REF_INT_STEP_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_INT_STEP_TYPE.CREATION_DT
IS
  'The database server?s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_INT_STEP_TYPE.REVISION_DT
IS
  'The database server?s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_INT_STEP_TYPE.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_INT_STEP_TYPE.REVISION_USER
IS
  'The user that last modified the record. ' ;
ALTER TABLE REF_INT_STEP_TYPE ADD CONSTRAINT PK_REF_INT_STEP_TYPE PRIMARY KEY ( STEP_TYPE_DB_ID, STEP_TYPE_CD ) ;


CREATE TABLE REF_INV_CAPABILITY
  (
    INV_CAPABILITY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    INV_CAPABILITY_CD    VARCHAR2 (8) CONSTRAINT NN_REFINVCPBLTY_INVCAPABILCD NOT NULL DEFERRABLE ,
    BITMAP_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG           NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC           VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC           VARCHAR2 (4000) ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_INV_CAPABILITY ADD CHECK ( INV_CAPABILITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_INV_CAPABILITY ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_INV_CAPABILITY ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_INV_CAPABILITY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_INV_CAPABILITY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_INV_CAPABILITY
IS
  '[EXTENDABLE] The list of capability states for an aircraft. Aircraft capabilities are a tool for summarizing the types of flights and services an aircraft is able to perform at the present time. These capability statuses are used to indicate whether an aircraft is fully capable, incapable, or partially capable.' ;
  COMMENT ON COLUMN REF_INV_CAPABILITY.INV_CAPABILITY_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_INV_CAPABILITY.INV_CAPABILITY_CD
IS
  'A unique, user entered value that defines the PK of this reference term.' ;
  COMMENT ON COLUMN REF_INV_CAPABILITY.BITMAP_DB_ID
IS
  'FK to REF_BITMAP. Identifies the bitmap that can be shown in place of the refterm code.' ;
  COMMENT ON COLUMN REF_INV_CAPABILITY.BITMAP_TAG
IS
  'FK to REF_BITMAP. Identifies the bitmap that can be shown in place of the refterm code.' ;
  COMMENT ON COLUMN REF_INV_CAPABILITY.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_INV_CAPABILITY.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_INV_CAPABILITY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_INV_CAPABILITY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_INV_CAPABILITY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_INV_CAPABILITY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_INV_CAPABILITY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_INV_CAPABILITY ADD CONSTRAINT PK_REF_INV_CAPABILITY PRIMARY KEY ( INV_CAPABILITY_DB_ID, INV_CAPABILITY_CD ) ;


CREATE TABLE REF_INV_CLASS
  (
    INV_CLASS_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    INV_CLASS_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG         NUMBER (10) NOT NULL DEFERRABLE ,
    TRACKED_BOOL       NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    TRACEABLE_BIN_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    SERIAL_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RECEIPT_INSP_BOOL  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_INV_CLASS ADD CHECK ( INV_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_INV_CLASS ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_INV_CLASS ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_INV_CLASS ADD CHECK ( TRACKED_BOOL       IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_INV_CLASS ADD CHECK ( TRACEABLE_BIN_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_INV_CLASS ADD CHECK ( SERIAL_BOOL        IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_INV_CLASS ADD CHECK ( RECEIPT_INSP_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_INV_CLASS ADD CHECK ( RSTAT_CD           IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_INV_CLASS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_INV_CLASS
IS
  'The inventory class is used to identify the functional class of the inventory, and dictates the manner in which the system handles the business logic. There are 6 allowable assembly classifications: BIN - represents a bin/lot of unserialized items. All bins have a ""quantity"" (although the quantity can be 1 for non-lot items), SER - represents a serialized, non-logcard item, LOG - represents a serialized, log carded item, ASSY - represents an assembly item (engine, APU, etc.), ACFT - represents an aircraft, TOOL - represents a tool.' ;
  COMMENT ON COLUMN REF_INV_CLASS.INV_CLASS_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_INV_CLASS.INV_CLASS_CD
IS
  'A unique value that defines the PK of this reference term.' ;
  COMMENT ON COLUMN REF_INV_CLASS.BITMAP_DB_ID
IS
  'FK to REF_BITMAP. Identifies the bitmap that can be shown in place of the refterm code.' ;
  COMMENT ON COLUMN REF_INV_CLASS.BITMAP_TAG
IS
  'FK to REF_BITMAP. Identifies the bitmap that can be shown in place of the refterm code.' ;
  COMMENT ON COLUMN REF_INV_CLASS.TRACKED_BOOL
IS
  'Does this item represent the physical BOM item itself? Every bom item that is not a "System", is an actual physical component. If tracked_bool=1, then this bom part represents the physical bom item. There can be only 1 Bom Part entry with tracked_bool=1 per bom item.' ;
  COMMENT ON COLUMN REF_INV_CLASS.TRACEABLE_BIN_BOOL
IS
  'This column is only meaningful for unserialized inventory (serialized inventory is defaulted to 1). This indicates whether the inventory''s Lot No + Batch No must be unique (TRACEABLE_BIN_BOOL = 1). This will allow a certain amount of tracking for the inventory.' ;
  COMMENT ON COLUMN REF_INV_CLASS.SERIAL_BOOL
IS
  'Indicates whether the part no is serialized or not. Serialized inventory is tracked individually (not in lots), and must have a serial number.' ;
  COMMENT ON COLUMN REF_INV_CLASS.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_INV_CLASS.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_INV_CLASS.RECEIPT_INSP_BOOL
IS
  'This flag indicates whether or not the inventory should be inspected upon receipt.' ;
  COMMENT ON COLUMN REF_INV_CLASS.RSTAT_CD
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_INV_CLASS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_INV_CLASS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_INV_CLASS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_INV_CLASS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_INV_CLASS ADD CONSTRAINT PK_REF_INV_CLASS PRIMARY KEY ( INV_CLASS_DB_ID, INV_CLASS_CD ) ;


CREATE TABLE REF_INV_COND
  (
    INV_COND_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    INV_COND_CD      VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG       NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC       VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC       VARCHAR2 (4000) ,
    SRV_BOOL         NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    WO_COMPLETE_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CREATE_BOOL      NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    USER_CD          VARCHAR2 (8) ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_INV_COND ADD CHECK ( INV_COND_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_INV_COND ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_INV_COND ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_INV_COND ADD CHECK ( SRV_BOOL         IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_INV_COND ADD CHECK ( WO_COMPLETE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_INV_COND ADD CHECK ( CREATE_BOOL      IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_INV_COND ADD CHECK ( RSTAT_CD         IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_INV_COND ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_INV_COND
IS
  'Inventory Condition Reference: This table enumerates the physical states or conditions for the inventory items contained in the system. These condition statuses are used by maintenance personnel to describe the usability of a component (not necessarily an aircraft).' ;
  COMMENT ON COLUMN REF_INV_COND.INV_COND_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_INV_COND.INV_COND_CD
IS
  'A unique, user entered value that defines the PK of this reference term.' ;
  COMMENT ON COLUMN REF_INV_COND.BITMAP_DB_ID
IS
  'FK to REF_BITMAP. Identifies the bitmap that can be shown in place of the refterm code.' ;
  COMMENT ON COLUMN REF_INV_COND.BITMAP_TAG
IS
  'FK to REF_BITMAP. Identifies the bitmap that can be shown in place of the refterm code.' ;
  COMMENT ON COLUMN REF_INV_COND.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_INV_COND.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_INV_COND.SRV_BOOL
IS
  'Indicates which conditions represent "serviceable" inventory.' ;
  COMMENT ON COLUMN REF_INV_COND.WO_COMPLETE_BOOL
IS
  'Flag to determine if inventory condition is eligible against a piece of inventory upon work order completion.' ;
  COMMENT ON COLUMN REF_INV_COND.CREATE_BOOL
IS
  'Designates whether an inventory item is receivable.' ;
  COMMENT ON COLUMN REF_INV_COND.USER_CD
IS
  'Visual for the inv_cond_cd in the GUI.' ;
  COMMENT ON COLUMN REF_INV_COND.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_INV_COND.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_INV_COND.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_INV_COND.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_INV_COND.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_INV_COND ADD CONSTRAINT PK_REF_INV_COND PRIMARY KEY ( INV_COND_DB_ID, INV_COND_CD ) ;


CREATE TABLE REF_INV_OPER
  (
    INV_OPER_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    INV_OPER_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG     NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    OPER_ORD       NUMBER (22) NOT NULL DEFERRABLE ,
    AVAIL_BOOL     NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_INV_OPER ADD CHECK ( INV_OPER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_INV_OPER ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_INV_OPER ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_INV_OPER ADD CHECK ( AVAIL_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_INV_OPER ADD CHECK ( RSTAT_CD   IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_INV_OPER ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_INV_OPER
IS
  'Aircraft Operation Reference: This table enumerates the operational states for the aircraft. These operational statuses are used by flight planning personnel to control the amount of flying time accrued by aircraft.' ;
  COMMENT ON COLUMN REF_INV_OPER.INV_OPER_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_INV_OPER.INV_OPER_CD
IS
  'A unique, user entered value that defines the PK of this reference term.' ;
  COMMENT ON COLUMN REF_INV_OPER.BITMAP_DB_ID
IS
  'FK to REF_BITMAP. Identifies the bitmap that can be shown in place of the refterm code.' ;
  COMMENT ON COLUMN REF_INV_OPER.BITMAP_TAG
IS
  'FK to REF_BITMAP. Identifies the bitmap that can be shown in place of the refterm code.' ;
  COMMENT ON COLUMN REF_INV_OPER.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_INV_OPER.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_INV_OPER.OPER_ORD
IS
  'The order for the operation. Used to model progressively worsening condition in terms of serviceability.' ;
  COMMENT ON COLUMN REF_INV_OPER.AVAIL_BOOL
IS
  'Indicates which operating statuses represent "available" aircraft.' ;
  COMMENT ON COLUMN REF_INV_OPER.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_INV_OPER.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_INV_OPER.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_INV_OPER.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_INV_OPER.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_INV_OPER ADD CONSTRAINT PK_REF_INV_OPER PRIMARY KEY ( INV_OPER_DB_ID, INV_OPER_CD ) ;


CREATE TABLE REF_JOB_TYPE
  (
    JOB_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    JOB_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_JOB_TYPE ADD CHECK ( JOB_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_JOB_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_JOB_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_JOB_TYPE
IS
  'Job type would distinguish task cards from issue tickets, etc. The types will include: TASK_CARD, ISSUE_TICKET, LABEL, etc.' ;
  COMMENT ON COLUMN REF_JOB_TYPE.JOB_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_JOB_TYPE.JOB_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_JOB_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_JOB_TYPE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_JOB_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_JOB_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_JOB_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_JOB_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_JOB_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_JOB_TYPE ADD CONSTRAINT "pk_REF_JOB_TYPE" PRIMARY KEY ( JOB_TYPE_DB_ID, JOB_TYPE_CD ) ;


CREATE TABLE REF_LABOUR_ROLE_STATUS
  (
    LABOUR_ROLE_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ROLE_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC               VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC               VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LABOUR_ROLE_STATUS ADD CHECK ( LABOUR_ROLE_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LABOUR_ROLE_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_LABOUR_ROLE_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_LABOUR_ROLE_STATUS
IS
  'Defines statuses for labour roles, i.e. whether active, pending, complete, or cancelled. ' ;
  COMMENT ON COLUMN REF_LABOUR_ROLE_STATUS.LABOUR_ROLE_STATUS_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_LABOUR_ROLE_STATUS.LABOUR_ROLE_STATUS_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_LABOUR_ROLE_STATUS.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_LABOUR_ROLE_STATUS.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_LABOUR_ROLE_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_LABOUR_ROLE_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_LABOUR_ROLE_STATUS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_LABOUR_ROLE_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_LABOUR_ROLE_STATUS ADD CONSTRAINT PK_REF_LABOUR_ROLE_STATUS PRIMARY KEY ( LABOUR_ROLE_STATUS_DB_ID, LABOUR_ROLE_STATUS_CD ) ;


CREATE TABLE REF_LABOUR_ROLE_TYPE
  (
    LABOUR_ROLE_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ROLE_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC             VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC             VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LABOUR_ROLE_TYPE ADD CHECK ( LABOUR_ROLE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LABOUR_ROLE_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_LABOUR_ROLE_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_LABOUR_ROLE_TYPE
IS
  'Defines labour roles types of Technician, Certifier, and Inspector.' ;
  COMMENT ON COLUMN REF_LABOUR_ROLE_TYPE.LABOUR_ROLE_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_LABOUR_ROLE_TYPE.LABOUR_ROLE_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_LABOUR_ROLE_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_LABOUR_ROLE_TYPE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_LABOUR_ROLE_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_LABOUR_ROLE_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_LABOUR_ROLE_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_LABOUR_ROLE_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_LABOUR_ROLE_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_LABOUR_ROLE_TYPE ADD CONSTRAINT PK_REF_LABOUR_ROLE_TYPE PRIMARY KEY ( LABOUR_ROLE_TYPE_DB_ID, LABOUR_ROLE_TYPE_CD ) ;


CREATE TABLE REF_LABOUR_SKILL
  (
    LABOUR_SKILL_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    EST_HOURLY_COST    NUMBER (15,5) ,
    ESIG_REQ_BOOL      NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LABOUR_SKILL ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LABOUR_SKILL ADD CHECK ( ESIG_REQ_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_LABOUR_SKILL ADD CHECK ( RSTAT_CD      IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_LABOUR_SKILL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_LABOUR_SKILL
IS
  '[EXTENDABLE] The list of skills, such as mechanic, that are applicable to maintenance and operations.' ;
  COMMENT ON COLUMN REF_LABOUR_SKILL.LABOUR_SKILL_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_LABOUR_SKILL.LABOUR_SKILL_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_LABOUR_SKILL.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_LABOUR_SKILL.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_LABOUR_SKILL.EST_HOURLY_COST
IS
  'The estimated hourly cost - used a s default for projecting effort when a task has planned time with no specific HR assignment.' ;
  COMMENT ON COLUMN REF_LABOUR_SKILL.ESIG_REQ_BOOL
IS
  'Boolean value that indicates whether or not an electronic signature is required for the labor.' ;
  COMMENT ON COLUMN REF_LABOUR_SKILL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_LABOUR_SKILL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_LABOUR_SKILL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_LABOUR_SKILL.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_LABOUR_SKILL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_LABOUR_SKILL ADD CONSTRAINT PK_REF_LABOUR_SKILL PRIMARY KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) ;


CREATE TABLE REF_LABOUR_STAGE
  (
    LABOUR_STAGE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_STAGE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID       NUMBER (10) ,
    DESC_LDESC         VARCHAR2 (4000) ,
    BITMAP_TAG         NUMBER (10) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LABOUR_STAGE ADD CHECK ( LABOUR_STAGE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LABOUR_STAGE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LABOUR_STAGE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LABOUR_STAGE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_LABOUR_STAGE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_LABOUR_STAGE
IS
  'This reference term designates the stage of the current labour record.' ;
  COMMENT ON COLUMN REF_LABOUR_STAGE.LABOUR_STAGE_DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN REF_LABOUR_STAGE.LABOUR_STAGE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_LABOUR_STAGE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_LABOUR_STAGE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_LABOUR_STAGE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_LABOUR_STAGE.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_LABOUR_STAGE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_LABOUR_STAGE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_LABOUR_STAGE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_LABOUR_STAGE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_LABOUR_STAGE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_LABOUR_STAGE ADD CONSTRAINT PK_REF_LABOUR_STAGE PRIMARY KEY ( LABOUR_STAGE_DB_ID, LABOUR_STAGE_CD ) ;


CREATE TABLE REF_LABOUR_TIME
  (
    LABOUR_TIME_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_TIME_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID      NUMBER (10) ,
    BITMAP_TAG        NUMBER (10) ,
    DESC_SDESC        VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC        VARCHAR2 (4000) ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LABOUR_TIME ADD CHECK ( LABOUR_TIME_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LABOUR_TIME ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LABOUR_TIME ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LABOUR_TIME ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_LABOUR_TIME ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_LABOUR_TIME
IS
  '[EXTENDABLE] The list that a technician can select from when categorizing the type of work that they performed, such as normal time, overtime, etc. The categories are primarily used when generating invoices.' ;
  COMMENT ON COLUMN REF_LABOUR_TIME.LABOUR_TIME_DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN REF_LABOUR_TIME.LABOUR_TIME_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_LABOUR_TIME.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_LABOUR_TIME.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_LABOUR_TIME.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_LABOUR_TIME.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_LABOUR_TIME.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_LABOUR_TIME.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_LABOUR_TIME.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_LABOUR_TIME.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_LABOUR_TIME.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_LABOUR_TIME ADD CONSTRAINT PK_REF_LABOUR_TIME PRIMARY KEY ( LABOUR_TIME_DB_ID, LABOUR_TIME_CD ) ;


CREATE TABLE REF_LICENSE_TYPE
  (
    LICENSE_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LICENSE_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG         NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    INSP_BOOL          NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LICENSE_TYPE ADD CHECK ( LICENSE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LICENSE_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LICENSE_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LICENSE_TYPE ADD CHECK ( INSP_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_LICENSE_TYPE ADD CHECK ( RSTAT_CD  IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_LICENSE_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_LICENSE_TYPE
IS
  '[EXTENDABLE] Defines specific licences/certifications issued by regulators or airlines, e.g. to engineers, technicians, mechanics, inspectors, and repairmen.' ;
  COMMENT ON COLUMN REF_LICENSE_TYPE.LICENSE_TYPE_DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN REF_LICENSE_TYPE.LICENSE_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_LICENSE_TYPE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_LICENSE_TYPE.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_LICENSE_TYPE.DESC_SDESC
IS
  'Short description of the license type.' ;
  COMMENT ON COLUMN REF_LICENSE_TYPE.DESC_LDESC
IS
  'Long description of the license type.' ;
  COMMENT ON COLUMN REF_LICENSE_TYPE.INSP_BOOL
IS
  'If a labour skill with insp_bool is set to 1 it indicates that the task requires an independant inspection before it can be accepted as complete.' ;
  COMMENT ON COLUMN REF_LICENSE_TYPE.RSTAT_CD
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_LICENSE_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_LICENSE_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_LICENSE_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_LICENSE_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_LICENSE_TYPE ADD CONSTRAINT PK_REF_LICENSE_TYPE PRIMARY KEY ( LICENSE_TYPE_DB_ID, LICENSE_TYPE_CD ) ;


CREATE TABLE REF_LIC_CATEGORY
  (
    LIC_CAT_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    LIC_CAT_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LIC_CATEGORY ADD CHECK ( LIC_CAT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LIC_CATEGORY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_LIC_CATEGORY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_LIC_CATEGORY
IS
  '[EXTENDABLE] The list of license categories when creating or editing a license definition. Category typically refers to the aircraft area, e.g. airframes, engines, radios, electrical, etc.' ;
  COMMENT ON COLUMN REF_LIC_CATEGORY.LIC_CAT_DB_ID
IS
  'Primary key for ref_lic_categories.' ;
  COMMENT ON COLUMN REF_LIC_CATEGORY.LIC_CAT_CD
IS
  'Primary key for ref_lic_categories.' ;
  COMMENT ON COLUMN REF_LIC_CATEGORY.DESC_SDESC
IS
  'Short description of a license category
' ;
  COMMENT ON COLUMN REF_LIC_CATEGORY.DESC_LDESC
IS
  'long desciption of a license category.' ;
  COMMENT ON COLUMN REF_LIC_CATEGORY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_LIC_CATEGORY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_LIC_CATEGORY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_LIC_CATEGORY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_LIC_CATEGORY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_LIC_CATEGORY ADD CONSTRAINT PK_REF_LIC_CATEGORY PRIMARY KEY ( LIC_CAT_DB_ID, LIC_CAT_CD ) ;


CREATE TABLE REF_LIC_CLASS
  (
    LIC_CLASS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LIC_CLASS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC      VARCHAR2 (4000) ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LIC_CLASS ADD CHECK ( LIC_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LIC_CLASS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_LIC_CLASS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_LIC_CLASS
IS
  '[EXTENDABLE] The list of license classes when creating or editing a license definition. Class typically refers to the persons role, e.g. line maintenance mechanic, mechanical technician, avionics technician, etc.' ;
  COMMENT ON COLUMN REF_LIC_CLASS.LIC_CLASS_DB_ID
IS
  'Primary Key for ref_lic_class table.' ;
  COMMENT ON COLUMN REF_LIC_CLASS.LIC_CLASS_CD
IS
  'Primary Key for ref_lic_class table.' ;
  COMMENT ON COLUMN REF_LIC_CLASS.DESC_SDESC
IS
  'short description used to create a new license class definition.' ;
  COMMENT ON COLUMN REF_LIC_CLASS.DESC_LDESC
IS
  'long description of ref_lic_class entries.' ;
  COMMENT ON COLUMN REF_LIC_CLASS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_LIC_CLASS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_LIC_CLASS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_LIC_CLASS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_LIC_CLASS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_LIC_CLASS ADD CONSTRAINT PK_REF_LIC_CLASS PRIMARY KEY ( LIC_CLASS_DB_ID, LIC_CLASS_CD ) ;


CREATE TABLE REF_LIC_STATUS
  (
    LIC_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LIC_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    USER_CD          VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC       VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC       VARCHAR2 (4000) ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LIC_STATUS ADD CHECK ( LIC_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LIC_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_LIC_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_LIC_STATUS
IS
  'The list of statuses that can apply to a license.' ;
  COMMENT ON COLUMN REF_LIC_STATUS.LIC_STATUS_DB_ID
IS
  'Primary Key for REF_LIC_STATUS' ;
  COMMENT ON COLUMN REF_LIC_STATUS.LIC_STATUS_CD
IS
  'Primary Key for REF_LIC_STATUS' ;
  COMMENT ON COLUMN REF_LIC_STATUS.USER_CD
IS
  'Reference Code used to manage license life cycle.' ;
  COMMENT ON COLUMN REF_LIC_STATUS.DESC_SDESC
IS
  'Short description of license status.' ;
  COMMENT ON COLUMN REF_LIC_STATUS.DESC_LDESC
IS
  'long description of the license status' ;
  COMMENT ON COLUMN REF_LIC_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_LIC_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_LIC_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_LIC_STATUS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_LIC_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_LIC_STATUS ADD CONSTRAINT PK_REF_LIC_STATUS PRIMARY KEY ( LIC_STATUS_DB_ID, LIC_STATUS_CD ) ;


CREATE TABLE REF_LIC_TYPE
  (
    LIC_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LIC_TYPE_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LIC_TYPE ADD CHECK ( LIC_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LIC_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_LIC_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_LIC_TYPE
IS
  '[EXTENDABLE] The list of license types such as Engineer, Mechanic, Technician, etc. A license type is selected when creating or editing a license definition.' ;
  COMMENT ON COLUMN REF_LIC_TYPE.LIC_TYPE_DB_ID
IS
  'Primary key for ref_lic_type table' ;
  COMMENT ON COLUMN REF_LIC_TYPE.LIC_TYPE_CD
IS
  'Primary key for ref_lic_type table' ;
  COMMENT ON COLUMN REF_LIC_TYPE.DESC_SDESC
IS
  'Short description of licence types.' ;
  COMMENT ON COLUMN REF_LIC_TYPE.DESC_LDESC
IS
  'Long description of license types.' ;
  COMMENT ON COLUMN REF_LIC_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_LIC_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_LIC_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_LIC_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_LIC_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_LIC_TYPE ADD CONSTRAINT PK_REF_LIC_TYPE PRIMARY KEY ( LIC_TYPE_DB_ID, LIC_TYPE_CD ) ;


CREATE TABLE REF_LOC_TYPE
  (
    LOC_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG     NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LOC_TYPE ADD CHECK ( LOC_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LOC_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LOC_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LOC_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_LOC_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_LOC_TYPE
IS
  '[EXTENDABLE] The list of location types. A location type is assigned when creating a location. Although this reference term table may be extended, it is rarely necessary to do so during a typical IFS Maintenix implementation.' ;
  COMMENT ON COLUMN REF_LOC_TYPE.LOC_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_LOC_TYPE.LOC_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_LOC_TYPE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_LOC_TYPE.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_LOC_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_LOC_TYPE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_LOC_TYPE.RSTAT_CD
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_LOC_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_LOC_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_LOC_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_LOC_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_LOC_TYPE ADD CONSTRAINT PK_REF_LOC_TYPE PRIMARY KEY ( LOC_TYPE_DB_ID, LOC_TYPE_CD ) ;


CREATE TABLE REF_LOGBOOK_TYPE
  (
    LOGBOOK_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LOGBOOK_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG         NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LOGBOOK_TYPE ADD CHECK ( LOGBOOK_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LOGBOOK_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LOGBOOK_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LOGBOOK_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_LOGBOOK_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_LOGBOOK_TYPE
IS
  'This table lists the types of logbooks. Each assembly is assigned a logbook. One logbook can represent multiple assemblies but an assembly can only map to one logbook.' ;
  COMMENT ON COLUMN REF_LOGBOOK_TYPE.LOGBOOK_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_LOGBOOK_TYPE.LOGBOOK_TYPE_CD
IS
  'A unique, user entered value that identifies the reference term.' ;
  COMMENT ON COLUMN REF_LOGBOOK_TYPE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP. Identifies the bitmap that should be used to visually represent this refterm.' ;
  COMMENT ON COLUMN REF_LOGBOOK_TYPE.BITMAP_TAG
IS
  'FK to REF_BITMAP. Identifies the bitmap that should be used to visually represent this refterm.' ;
  COMMENT ON COLUMN REF_LOGBOOK_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_LOGBOOK_TYPE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_LOGBOOK_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_LOGBOOK_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_LOGBOOK_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_LOGBOOK_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_LOGBOOK_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_LOGBOOK_TYPE ADD CONSTRAINT PK_REF_LOGBOOK_TYPE PRIMARY KEY ( LOGBOOK_TYPE_DB_ID, LOGBOOK_TYPE_CD ) ;


CREATE TABLE REF_LOGCARD_FORM
  (
    LOGCARD_FORM_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LOGCARD_FORM_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG         NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LOGCARD_FORM ADD CHECK ( LOGCARD_FORM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LOGCARD_FORM ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LOGCARD_FORM ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LOGCARD_FORM ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_LOGCARD_FORM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_LOGCARD_FORM
IS
  '[EXTENDABLE] LogBook Form Reference: The form/card in the logbook that this BOM Item is associated with. BOM Items often represent a particular page in the aircraft-logbook, and this code is used to indicate which page is represented.' ;
  COMMENT ON COLUMN REF_LOGCARD_FORM.LOGCARD_FORM_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_LOGCARD_FORM.LOGCARD_FORM_CD
IS
  'A unique, user entered value that identifies the reference term.' ;
  COMMENT ON COLUMN REF_LOGCARD_FORM.BITMAP_DB_ID
IS
  'FK to REF_BITMAP. Identifies the bitmap that should be used when displaying log cards of this subclass. This overrides the bom_class'' bitmap.' ;
  COMMENT ON COLUMN REF_LOGCARD_FORM.BITMAP_TAG
IS
  'FK to REF_BITMAP. Identifies the bitmap that should be used when displaying log cards of this subclass. This overrides the bom_class'' bitmap.' ;
  COMMENT ON COLUMN REF_LOGCARD_FORM.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_LOGCARD_FORM.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_LOGCARD_FORM.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_LOGCARD_FORM.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_LOGCARD_FORM.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_LOGCARD_FORM.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_LOGCARD_FORM.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_LOGCARD_FORM ADD CONSTRAINT PK_REF_LOGCARD_FORM PRIMARY KEY ( LOGCARD_FORM_DB_ID, LOGCARD_FORM_CD ) ;


CREATE TABLE REF_LOG_ACTION
  (
    LOG_ACTION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LOG_ACTION_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DESC_SDESC       VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC       VARCHAR2 (4000) ,
    USER_CD          VARCHAR2 (16) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LOG_ACTION ADD CHECK ( LOG_ACTION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LOG_ACTION ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_LOG_ACTION ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_LOG_ACTION
IS
  'LogBook Form Reference: The form/card in the logbook that this Bom Item is associated with. Bom Items often represent a particular page in the aircraft-logbook, and this code is used to indicate which page is represented.' ;
  COMMENT ON COLUMN REF_LOG_ACTION.LOG_ACTION_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_LOG_ACTION.LOG_ACTION_CD
IS
  'A unique, user entered value that identifies the reference term.' ;
  COMMENT ON COLUMN REF_LOG_ACTION.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_LOG_ACTION.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_LOG_ACTION.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_LOG_ACTION.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_LOG_ACTION.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_LOG_ACTION.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_LOG_ACTION ADD CONSTRAINT PK_REF_LOG_ACTION PRIMARY KEY ( LOG_ACTION_DB_ID, LOG_ACTION_CD ) ;


CREATE TABLE REF_LOG_REASON
  (
    LOG_REASON_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LOG_REASON_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    LOG_ACTION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LOG_ACTION_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DESC_SDESC       VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC       VARCHAR2 (4000) ,
    USER_CD          VARCHAR2 (16) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LOG_REASON ADD CHECK ( LOG_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LOG_REASON ADD CHECK ( LOG_ACTION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LOG_REASON ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_LOG_REASON ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_LOG_REASON
IS
  '[EXTENDABLE] LogBook Form Reference: The form/card in the logbook that this Bom Item is associated with. Bom Items often represent a particular page in the aircraft-logbook, and this code is used to indicate which page is represented.' ;
  COMMENT ON COLUMN REF_LOG_REASON.LOG_REASON_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_LOG_REASON.LOG_REASON_CD
IS
  'A unique, user entered value that identifies the reference term.' ;
  COMMENT ON COLUMN REF_LOG_REASON.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_LOG_REASON.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_LOG_REASON.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_LOG_REASON.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_LOG_REASON.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_LOG_REASON.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_LOG_REASON ADD CONSTRAINT PK_REF_LOG_REASON PRIMARY KEY ( LOG_REASON_DB_ID, LOG_REASON_CD ) ;


CREATE TABLE REF_LPA_ISSUE_TYPE
  (
    LPA_ISSUE_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LPA_ISSUE_TYPE_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DISPLAY_CODE         VARCHAR2 (16) NOT NULL ,
    DISPLAY_NAME         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DISPLAY_DESC         VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    DISPLAY_ORD          NUMBER (5) NOT NULL DEFERRABLE ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LPA_ISSUE_TYPE ADD CHECK ( LPA_ISSUE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LPA_ISSUE_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_LPA_ISSUE_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_LPA_ISSUE_TYPE
IS
  'Lists the types of issues that may be encountered during a basic line planning automation run.' ;
  COMMENT ON COLUMN REF_LPA_ISSUE_TYPE.DISPLAY_CODE
IS
  'A code used for display purposes' ;
  COMMENT ON COLUMN REF_LPA_ISSUE_TYPE.DISPLAY_NAME
IS
  'A name used for display purposes' ;
  COMMENT ON COLUMN REF_LPA_ISSUE_TYPE.DISPLAY_DESC
IS
  'A detailed description of the reference term' ;
  COMMENT ON COLUMN REF_LPA_ISSUE_TYPE.DISPLAY_ORD
IS
  'The sort order of the term when displayed in an ordered list' ;
  COMMENT ON COLUMN REF_LPA_ISSUE_TYPE.RSTAT_CD
IS
  'Status of the record ' ;
  COMMENT ON COLUMN REF_LPA_ISSUE_TYPE.CREATION_DT
IS
  'The date and time at which the record was inserted' ;
  COMMENT ON COLUMN REF_LPA_ISSUE_TYPE.REVISION_DT
IS
  'The date and time at which the record was last updated' ;
  COMMENT ON COLUMN REF_LPA_ISSUE_TYPE.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN REF_LPA_ISSUE_TYPE.REVISION_USER
IS
  'The name of the user that last updated the record' ;
ALTER TABLE REF_LPA_ISSUE_TYPE ADD CONSTRAINT PK_REF_LPA_ISSUE_TYPE PRIMARY KEY ( LPA_ISSUE_TYPE_DB_ID, LPA_ISSUE_TYPE_CD ) ;
ALTER TABLE REF_LPA_ISSUE_TYPE ADD CONSTRAINT IX_REFLPAISSTYPEDISCD_UNQ UNIQUE ( DISPLAY_CODE ) ;


CREATE TABLE REF_LPA_RUN_STATUS
  (
    LPA_RUN_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LPA_RUN_STATUS_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DISPLAY_CODE         VARCHAR2 (16) NOT NULL ,
    DISPLAY_NAME         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DISPLAY_DESC         VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    DISPLAY_ORD          NUMBER (5) NOT NULL DEFERRABLE ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LPA_RUN_STATUS ADD CHECK ( LPA_RUN_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LPA_RUN_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_LPA_RUN_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_LPA_RUN_STATUS
IS
  'Lists the possible states of a basic line planning automation run.' ;
  COMMENT ON COLUMN REF_LPA_RUN_STATUS.DISPLAY_CODE
IS
  'A code used for display purposes' ;
  COMMENT ON COLUMN REF_LPA_RUN_STATUS.DISPLAY_NAME
IS
  'A name used for display purposes' ;
  COMMENT ON COLUMN REF_LPA_RUN_STATUS.DISPLAY_DESC
IS
  'A detailed description of the reference term' ;
  COMMENT ON COLUMN REF_LPA_RUN_STATUS.DISPLAY_ORD
IS
  'The sort order of the term when displayed in an ordered list' ;
  COMMENT ON COLUMN REF_LPA_RUN_STATUS.RSTAT_CD
IS
  'Status of the record' ;
  COMMENT ON COLUMN REF_LPA_RUN_STATUS.CREATION_DT
IS
  'The date and time at which the record was inserted' ;
  COMMENT ON COLUMN REF_LPA_RUN_STATUS.REVISION_DT
IS
  'The date and time at which the record was last updated' ;
  COMMENT ON COLUMN REF_LPA_RUN_STATUS.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN REF_LPA_RUN_STATUS.REVISION_USER
IS
  'The name of the user that last updated the record' ;
ALTER TABLE REF_LPA_RUN_STATUS ADD CONSTRAINT PK_REF_LPA_RUN_STATUS PRIMARY KEY ( LPA_RUN_STATUS_DB_ID, LPA_RUN_STATUS_CD ) ;
ALTER TABLE REF_LPA_RUN_STATUS ADD CONSTRAINT IX_REFLPARUNSTATDCODE_UNQ UNIQUE ( DISPLAY_CODE ) ;


CREATE TABLE REF_LPA_STATUS
  (
    LPA_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LPA_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    USER_STATUS_CD   VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC       VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC       VARCHAR2 (4000) ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LPA_STATUS ADD CHECK ( LPA_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LPA_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_LPA_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_LPA_STATUS
IS
  'Lists the various types of time off that can be recorded for a user.' ;
  COMMENT ON COLUMN REF_LPA_STATUS.LPA_STATUS_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_LPA_STATUS.DESC_SDESC
IS
  'Short description of the timeoff type.' ;
  COMMENT ON COLUMN REF_LPA_STATUS.DESC_LDESC
IS
  'Long description of the timeoff type.' ;
  COMMENT ON COLUMN REF_LPA_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_LPA_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_LPA_STATUS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_LPA_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_LPA_STATUS ADD CONSTRAINT PK_REF_LPA_STATUS PRIMARY KEY ( LPA_STATUS_DB_ID, LPA_STATUS_CD ) ;


CREATE TABLE REF_LRP_CONFIG_SEV
  (
    LRP_CONFIG_SEV_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_CONFIG_SEV_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PRIORITY_ORD         NUMBER (4) NOT NULL DEFERRABLE ,
    DESC_SDESC           VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC           VARCHAR2 (4000) ,
    HEX_COLOR            VARCHAR2 (6) NOT NULL DEFERRABLE ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LRP_CONFIG_SEV ADD CHECK ( LRP_CONFIG_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LRP_CONFIG_SEV ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_LRP_CONFIG_SEV ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LRP_CONFIG_SEV ADD CONSTRAINT PK_REF_LRP_CONFIG_SEV PRIMARY KEY ( LRP_CONFIG_SEV_DB_ID, LRP_CONFIG_SEV_CD ) ;


CREATE TABLE REF_LRP_DURATION_MODE
  (
    LRP_DURATION_MODE_CD VARCHAR2 (32) NOT NULL DEFERRABLE ,
    DISPLAY_CODE         VARCHAR2 (20) NOT NULL DEFERRABLE ,
    DISPLAY_NAME         VARCHAR2 (80) ,
    DISPLAY_DESC         VARCHAR2 (4000) ,
    DISPLAY_ORD          NUMBER (4) NOT NULL DEFERRABLE ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO          NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LRP_DURATION_MODE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE REF_LRP_DURATION_MODE ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE REF_LRP_DURATION_MODE ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE REF_LRP_DURATION_MODE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON TABLE REF_LRP_DURATION_MODE
IS
  ' Duration Mode References. Task Duration in LRP can be calculated by either using the task definitions DEFAULT duration or using the LOCATION''s capacity configuration.' ;
  COMMENT ON COLUMN REF_LRP_DURATION_MODE.LRP_DURATION_MODE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_LRP_DURATION_MODE.DISPLAY_CODE
IS
  'Short code to represent the term:' ;
  COMMENT ON COLUMN REF_LRP_DURATION_MODE.DISPLAY_NAME
IS
  'Name for the term' ;
  COMMENT ON COLUMN REF_LRP_DURATION_MODE.DISPLAY_DESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_LRP_DURATION_MODE.DISPLAY_ORD
IS
  'The order in the hierarchy that the work type with respect to other work types. The highest work type order (of all the work types assigned to tasks within a work package) is considered the driving work type. Used in the extraction rule logic.' ;
  COMMENT ON COLUMN REF_LRP_DURATION_MODE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_LRP_DURATION_MODE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_LRP_DURATION_MODE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_FK_MIMDB_CTRLDBID ON REF_LRP_DURATION_MODE
    (
      CTRL_DB_ID ASC
    ) ;
  CREATE INDEX IX_FK_MIM_DB_CREATIONDBID ON REF_LRP_DURATION_MODE
    (
      CREATION_DB_ID ASC
    ) ;
  CREATE INDEX IX_FK_MIMDB_REVISIONDBID ON REF_LRP_DURATION_MODE
    (
      REVISION_DB_ID ASC
    ) ;
  CREATE INDEX IX_FK_MIMRSTAT_REFLRPDURMODE ON REF_LRP_DURATION_MODE
    (
      RSTAT_CD ASC
    ) ;
ALTER TABLE REF_LRP_DURATION_MODE ADD CONSTRAINT PK_REF_LRP_DURATION_MODE PRIMARY KEY ( LRP_DURATION_MODE_CD ) ;


CREATE TABLE REF_LRP_PRIORITY
  (
    LRP_PRIORITY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LRP_PRIORITY_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PRIORITY_ORD       NUMBER (4) ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    DEFAULT_BOOL       NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_LRP_PRIORITY ADD CHECK ( LRP_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_LRP_PRIORITY ADD CHECK ( DEFAULT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_LRP_PRIORITY ADD CHECK ( RSTAT_CD     IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_LRP_PRIORITY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_LRP_PRIORITY
IS
  '[EXTENDABLE] The list of priorities for a work type, such as low, medium or high. Work type priority is found in the capabilities section of a location.' ;
ALTER TABLE REF_LRP_PRIORITY ADD CONSTRAINT PK_REF_LRP_PRIORITY PRIMARY KEY ( LRP_PRIORITY_DB_ID, LRP_PRIORITY_CD ) ;


CREATE TABLE REF_MAINT_PRGM_STATUS
  (
    MAINT_PRGM_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    MAINT_PRGM_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC              VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC              VARCHAR2 (4000) ,
    RSTAT_CD                NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER           VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_MAINT_PRGM_STATUS ADD CHECK ( MAINT_PRGM_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_MAINT_PRGM_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_MAINT_PRGM_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_MAINT_PRGM_STATUS
IS
  'The status of the maintenance program, such as in revision, under construction, active, etc.' ;
  COMMENT ON COLUMN REF_MAINT_PRGM_STATUS.MAINT_PRGM_STATUS_DB_ID
IS
  'This is the primary key of a maintenance program status.' ;
  COMMENT ON COLUMN REF_MAINT_PRGM_STATUS.MAINT_PRGM_STATUS_CD
IS
  'This is the primary key of a maintenance program status.' ;
  COMMENT ON COLUMN REF_MAINT_PRGM_STATUS.DESC_SDESC
IS
  'This is the maintenance program status short description.' ;
  COMMENT ON COLUMN REF_MAINT_PRGM_STATUS.DESC_LDESC
IS
  'This is the maintenance program status long description.' ;
  COMMENT ON COLUMN REF_MAINT_PRGM_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_MAINT_PRGM_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_MAINT_PRGM_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_MAINT_PRGM_STATUS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_MAINT_PRGM_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_MAINT_PRGM_STATUS ADD CONSTRAINT PK_REF_MAINT_PRGM_STATUS PRIMARY KEY ( MAINT_PRGM_STATUS_DB_ID, MAINT_PRGM_STATUS_CD ) ;


CREATE TABLE REF_MATERIAL_REQ_STATUS
  (
    REQUEST_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REQUEST_STATUS_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    USER_CD              VARCHAR2 (16) NOT NULL DEFERRABLE ,
    REQUEST_STATUS_SDESC VARCHAR2 (80) ,
    REQUEST_STATUS_LDESC VARCHAR2 (4000) ,
    EVENT_STATUS_DB_ID   NUMBER (10) ,
    EVENT_STATUS_CD      VARCHAR2 (16) ,
    PRIORITY_ORD         NUMBER (4) NOT NULL ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_MATERIAL_REQ_STATUS ADD CHECK ( REQUEST_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_MATERIAL_REQ_STATUS ADD CHECK ( EVENT_STATUS_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE REF_MATERIAL_REQ_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_MATERIAL_REQ_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_MATERIAL_REQ_STATUS
IS
  'This entity is used to describe the material request statuses for a task. This entity is referenced by the view MV_MATERIALS_REQUEST_STATUS.' ;
  COMMENT ON COLUMN REF_MATERIAL_REQ_STATUS.REQUEST_STATUS_DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN REF_MATERIAL_REQ_STATUS.REQUEST_STATUS_CD
IS
  'A unique, user entered value that identifies the reference term.' ;
  COMMENT ON COLUMN REF_MATERIAL_REQ_STATUS.USER_CD
IS
  'Value that defines how will the ref term be displayed on the user interface.' ;
  COMMENT ON COLUMN REF_MATERIAL_REQ_STATUS.REQUEST_STATUS_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_MATERIAL_REQ_STATUS.REQUEST_STATUS_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_MATERIAL_REQ_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_MATERIAL_REQ_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_MATERIAL_REQ_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_MATERIAL_REQ_STATUS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_MATERIAL_REQ_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_MATERIAL_REQ_STATUS ADD CONSTRAINT PK_REF_MATERIAL_REQ_STATUS PRIMARY KEY ( REQUEST_STATUS_DB_ID, REQUEST_STATUS_CD ) ;


CREATE TABLE REF_OIL_STATUS
  (
    OIL_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    OIL_STATUS_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    OIL_STATUS_SDESC VARCHAR2 (80) NOT NULL DEFERRABLE ,
    OIL_STATUS_ORD   NUMBER NOT NULL DEFERRABLE ,
    UI_NOTIFY_BOOL   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_OIL_STATUS ADD CHECK ( OIL_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_OIL_STATUS ADD CHECK ( UI_NOTIFY_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_OIL_STATUS ADD CHECK ( RSTAT_CD       IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_OIL_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_OIL_STATUS
IS
  '[EXTENDABLE] The list of oil consumption status codes.' ;
  COMMENT ON COLUMN REF_OIL_STATUS.OIL_STATUS_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_OIL_STATUS.OIL_STATUS_CD
IS
  'A unique value that identifies the oil consumption status code.' ;
  COMMENT ON COLUMN REF_OIL_STATUS.OIL_STATUS_SDESC
IS
  'Short description of the status.' ;
  COMMENT ON COLUMN REF_OIL_STATUS.OIL_STATUS_ORD
IS
  'Status order value (must be unique).' ;
  COMMENT ON COLUMN REF_OIL_STATUS.UI_NOTIFY_BOOL
IS
  'Flag to indicate if the user entering the oil uptake is to be notified when the assembly goes into this status.' ;
  COMMENT ON COLUMN REF_OIL_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_OIL_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_OIL_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_OIL_STATUS.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_OIL_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_OIL_STATUS ADD CONSTRAINT PK_REF_OIL_STATUS PRIMARY KEY ( OIL_STATUS_DB_ID, OIL_STATUS_CD ) ;


CREATE TABLE REF_ORG_SUB_TYPE
  (
    ORG_SUB_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_SUB_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ORG_TYPE_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_TYPE_CD        VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_ORG_SUB_TYPE ADD CHECK ( ORG_SUB_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_ORG_SUB_TYPE ADD CHECK ( ORG_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_ORG_SUB_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_ORG_SUB_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_ORG_SUB_TYPE
IS
  '[EXTENDABLE] The list of organization subtypes when creating or editing an organization.' ;
ALTER TABLE REF_ORG_SUB_TYPE ADD CONSTRAINT PK_REF_ORG_SUB_TYPE PRIMARY KEY ( ORG_SUB_TYPE_DB_ID, ORG_SUB_TYPE_CD ) ;


CREATE TABLE REF_ORG_TYPE
  (
    ORG_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    COMPANY_BOOL   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    USER_TYPE_CD   VARCHAR2 (8) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_ORG_TYPE ADD CHECK ( ORG_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_ORG_TYPE ADD CHECK ( COMPANY_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_ORG_TYPE ADD CHECK ( RSTAT_CD     IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_ORG_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_ORG_TYPE
IS
  'A mandatory attribute used to describe the type of organization defined within the organizational hierarchy (e.g. ADMIN, OPERATOR, MRO, DEPT, or CREW).' ;
  COMMENT ON COLUMN REF_ORG_TYPE.DESC_LDESC
IS
  'long description of org type.' ;
  COMMENT ON COLUMN REF_ORG_TYPE.COMPANY_BOOL
IS
  'Indicates if an organization of this type is a company or not' ;
  COMMENT ON COLUMN REF_ORG_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_ORG_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_ORG_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_ORG_TYPE.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_ORG_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_ORG_TYPE ADD CONSTRAINT PK_REF_ORG_TYPE PRIMARY KEY ( ORG_TYPE_DB_ID, ORG_TYPE_CD ) ;


CREATE TABLE REF_OWNER_TYPE
  (
    OWNER_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    OWNER_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC       VARCHAR2 (80) ,
    DESC_LDESC       VARCHAR2 (4000) ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_OWNER_TYPE ADD CHECK ( OWNER_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_OWNER_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_OWNER_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_OWNER_TYPE
IS
  'Defines the type of owner for a piece of inventory. ' ;
  COMMENT ON COLUMN REF_OWNER_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_OWNER_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_OWNER_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_OWNER_TYPE.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_OWNER_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_OWNER_TYPE ADD CONSTRAINT PK_REF_OWNER_TYPE PRIMARY KEY ( OWNER_TYPE_DB_ID, OWNER_TYPE_CD ) ;


CREATE TABLE REF_PACKAGING_INSTR
  (
    PACKAGING_INSTR_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PACKAGING_INSTR_CD    VARCHAR2 (8) CONSTRAINT NN_PACKINSTCD NOT NULL DEFERRABLE ,
    BITMAP_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG            NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC            VARCHAR2 (80) ,
    DESC_LDESC            VARCHAR2 (4000) ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) CONSTRAINT NN_PACKREVDBID NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) CONSTRAINT NN_REFPACREVUSER NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_PACKAGING_INSTR ADD CHECK ( PACKAGING_INSTR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PACKAGING_INSTR ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PACKAGING_INSTR ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PACKAGING_INSTR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_PACKAGING_INSTR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_PACKAGING_INSTR
IS
  '[EXTENDABLE] Lists special packaging instructions, such as the requirement for special type of shipping container.' ;
  COMMENT ON COLUMN REF_PACKAGING_INSTR.PACKAGING_INSTR_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_PACKAGING_INSTR.PACKAGING_INSTR_CD
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN REF_PACKAGING_INSTR.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_PACKAGING_INSTR.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_PACKAGING_INSTR.DESC_SDESC
IS
  'Short description of the packaging instructions.' ;
  COMMENT ON COLUMN REF_PACKAGING_INSTR.DESC_LDESC
IS
  'Long description of the packaging instructions.' ;
  COMMENT ON COLUMN REF_PACKAGING_INSTR.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_PACKAGING_INSTR.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_PACKAGING_INSTR.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_PACKAGING_INSTR.REVISION_DB_ID
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_PACKAGING_INSTR.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_PACKAGING_INSTR ADD CONSTRAINT "pk_REF_PACKAGING_INSTR" PRIMARY KEY ( PACKAGING_INSTR_DB_ID, PACKAGING_INSTR_CD ) ;


CREATE TABLE REF_PART_PROVIDER_TYPE
  (
    PART_PROVIDER_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PART_PROVIDER_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC               VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC               VARCHAR2 (4000) ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_PART_PROVIDER_TYPE ADD CHECK ( PART_PROVIDER_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PART_PROVIDER_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_PART_PROVIDER_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_PART_PROVIDER_TYPE
IS
  '[EXTENDABLE] The list of part provider types when editing part requirements. Provided by the operator typically. Sample values could include "MRO provider", "Customer paid provider", or "Customer provider".' ;
  COMMENT ON COLUMN REF_PART_PROVIDER_TYPE.PART_PROVIDER_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_PART_PROVIDER_TYPE.PART_PROVIDER_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_PART_PROVIDER_TYPE.DESC_SDESC
IS
  'Short description of the provider type.' ;
  COMMENT ON COLUMN REF_PART_PROVIDER_TYPE.DESC_LDESC
IS
  'Long description of the provider type.' ;
  COMMENT ON COLUMN REF_PART_PROVIDER_TYPE.RSTAT_CD
IS
  'the record''s status.' ;
  COMMENT ON COLUMN REF_PART_PROVIDER_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_PART_PROVIDER_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_PART_PROVIDER_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_PART_PROVIDER_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_PART_PROVIDER_TYPE ADD CONSTRAINT PK_REF_PART_PROVIDER_TYPE PRIMARY KEY ( PART_PROVIDER_TYPE_DB_ID, PART_PROVIDER_TYPE_CD ) ;


CREATE TABLE REF_PART_STATUS
  (
    PART_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PART_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID      NUMBER (10) ,
    BITMAP_TAG        NUMBER (10) ,
    DESC_SDESC        VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC        VARCHAR2 (4000) ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_PART_STATUS ADD CHECK ( PART_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PART_STATUS ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PART_STATUS ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PART_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_PART_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_PART_STATUS
IS
  'List of the statuses that can be assigned to an individual part. The status affects who will see the part, and what can be done with it.' ;
  COMMENT ON COLUMN REF_PART_STATUS.PART_STATUS_DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN REF_PART_STATUS.PART_STATUS_CD
IS
  'A unique, user entered value that identifies the reference term.' ;
  COMMENT ON COLUMN REF_PART_STATUS.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_PART_STATUS.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_PART_STATUS.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_PART_STATUS.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_PART_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_PART_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_PART_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_PART_STATUS.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_PART_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_PART_STATUS ADD CONSTRAINT PK_REF_PART_STATUS PRIMARY KEY ( PART_STATUS_DB_ID, PART_STATUS_CD ) ;


CREATE TABLE REF_PART_TYPE
  (
    PART_TYPE_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    PART_TYPE_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    NH_PART_TYPE_DB_ID NUMBER (10) ,
    NH_PART_TYPE_CD    VARCHAR2 (8) ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    BITMAP_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_PART_TYPE ADD CHECK ( PART_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PART_TYPE ADD CHECK ( NH_PART_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PART_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PART_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PART_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_PART_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_PART_TYPE
IS
  '[EXTENDABLE] The list of part types. Part types are user-definable categories that organize parts within Maintenix and provides the user with additional information about the part. For example, a part can be categorized as Floor Stock Material which means that these parts that are not be ordered separately and that they are available on the work floor. You assign a part type when creating or editing a part. These categories do not enforce any business logic.' ;
  COMMENT ON COLUMN REF_PART_TYPE.PART_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_PART_TYPE.PART_TYPE_CD
IS
  'A unique, user entered value that identifies the reference term.' ;
  COMMENT ON COLUMN REF_PART_TYPE.NH_PART_TYPE_DB_ID
IS
  'FK to REF_PART_TYPE.  Defines the parent part type.  This value indicates the "next highest" part type in the tree.' ;
  COMMENT ON COLUMN REF_PART_TYPE.NH_PART_TYPE_CD
IS
  'FK to REF_PART_TYPE.  Defines the parent part type.  This value indicates the "next highest" part type in the tree.' ;
  COMMENT ON COLUMN REF_PART_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_PART_TYPE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_PART_TYPE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP. Identifies the bitmap that should be used to visually represent this refterm.' ;
  COMMENT ON COLUMN REF_PART_TYPE.BITMAP_TAG
IS
  'FK to REF_BITMAP. Identifies the bitmap that should be used to visually represent this refterm.' ;
  COMMENT ON COLUMN REF_PART_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_PART_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_PART_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_PART_TYPE.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_PART_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_PART_TYPE ADD CONSTRAINT PK_REF_PART_TYPE PRIMARY KEY ( PART_TYPE_DB_ID, PART_TYPE_CD ) ;


CREATE TABLE REF_PART_USE
  (
    PART_USE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PART_USE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG     NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_PART_USE ADD CHECK ( PART_USE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PART_USE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PART_USE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PART_USE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_PART_USE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_PART_USE
IS
  '[EXTENDABLE] The categorized uses for a part. For example a part could be categorized under TOOLS which is equipment that used to accomplish a maintenance task. These categories are then used to apply logic in other areas of Maintenix. You assign a category when creating or editing a part.' ;
  COMMENT ON COLUMN REF_PART_USE.PART_USE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_PART_USE.PART_USE_CD
IS
  'A unique, user entered value that identifies the reference term.' ;
  COMMENT ON COLUMN REF_PART_USE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP. Identifies the bitmap that should be used to visually represent this refterm.' ;
  COMMENT ON COLUMN REF_PART_USE.BITMAP_TAG
IS
  'FK to REF_BITMAP. Identifies the bitmap that should be used to visually represent this refterm.' ;
  COMMENT ON COLUMN REF_PART_USE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_PART_USE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_PART_USE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_PART_USE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_PART_USE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_PART_USE.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_PART_USE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_PART_USE ADD CONSTRAINT PK_REF_PART_USE PRIMARY KEY ( PART_USE_DB_ID, PART_USE_CD ) ;


CREATE TABLE REF_PART_VENDOR_TYPE
  (
    PART_VENDOR_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PART_VENDOR_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC             VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC             VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_PART_VENDOR_TYPE ADD CHECK ( PART_VENDOR_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PART_VENDOR_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_PART_VENDOR_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_PART_VENDOR_TYPE
IS
  'The Vendor-Part types for the Vendor-Parts that are associated to Advisories.' ;
  COMMENT ON COLUMN REF_PART_VENDOR_TYPE.PART_VENDOR_TYPE_DB_ID
IS
  'A unique serial number assigned by mxi to each physical maintenix database. allows data to be merged or consolidated from independent sources without pk collisions.' ;
  COMMENT ON COLUMN REF_PART_VENDOR_TYPE.PART_VENDOR_TYPE_CD
IS
  'A unique value that defines the PK of this reference term.' ;
  COMMENT ON COLUMN REF_PART_VENDOR_TYPE.DESC_SDESC
IS
  'Short description of the Vendor-Part type.' ;
  COMMENT ON COLUMN REF_PART_VENDOR_TYPE.DESC_LDESC
IS
  'Long description of the Vendor-Part type.' ;
  COMMENT ON COLUMN REF_PART_VENDOR_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_PART_VENDOR_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_PART_VENDOR_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_PART_VENDOR_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_PART_VENDOR_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_PART_VENDOR_TYPE ADD CONSTRAINT PK_REF_PART_VENDOR_TYPE PRIMARY KEY ( PART_VENDOR_TYPE_DB_ID, PART_VENDOR_TYPE_CD ) ;


CREATE TABLE REF_PAY_METHOD
  (
    PAY_METHOD_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PAY_METHOD_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG       NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC       VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC       VARCHAR2 (4000) ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_PAY_METHOD ADD CHECK ( PAY_METHOD_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PAY_METHOD ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PAY_METHOD ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PAY_METHOD ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_PAY_METHOD ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_PAY_METHOD
IS
  '[EXTENDABLE] The methods of paying an employee such as salary, hourly, part-time, etc.' ;
  COMMENT ON COLUMN REF_PAY_METHOD.PAY_METHOD_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_PAY_METHOD.PAY_METHOD_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_PAY_METHOD.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_PAY_METHOD.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_PAY_METHOD.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_PAY_METHOD.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_PAY_METHOD.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_PAY_METHOD.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_PAY_METHOD.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_PAY_METHOD.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_PAY_METHOD.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_PAY_METHOD ADD CONSTRAINT PK_REF_PAY_METHOD PRIMARY KEY ( PAY_METHOD_DB_ID, PAY_METHOD_CD ) ;


CREATE TABLE REF_PO_AUTH_FLOW
  (
    PO_AUTH_FLOW_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PO_AUTH_FLOW_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PO_TYPE_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    PO_TYPE_CD         VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    DEFAULT_BOOL       NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_PO_AUTH_FLOW ADD CHECK ( PO_AUTH_FLOW_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PO_AUTH_FLOW ADD CHECK ( PO_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PO_AUTH_FLOW ADD CHECK ( DEFAULT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_PO_AUTH_FLOW ADD CHECK ( RSTAT_CD     IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_PO_AUTH_FLOW ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_PO_AUTH_FLOW
IS
  '[EXTENDABLE] The different authorization workflows that you can apply to a purchase order.' ;
  COMMENT ON COLUMN REF_PO_AUTH_FLOW.PO_AUTH_FLOW_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_PO_AUTH_FLOW.PO_AUTH_FLOW_CD
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN REF_PO_AUTH_FLOW.PO_TYPE_DB_ID
IS
  'FK to REF_PO_TYPE.  Defines the ppurchase order type that the workflow applies to.' ;
  COMMENT ON COLUMN REF_PO_AUTH_FLOW.PO_TYPE_CD
IS
  'FK to REF_PO_TYPE.  Defines the ppurchase order type that the workflow applies to.' ;
  COMMENT ON COLUMN REF_PO_AUTH_FLOW.DESC_SDESC
IS
  'Short description of the reference term.' ;
  COMMENT ON COLUMN REF_PO_AUTH_FLOW.DESC_LDESC
IS
  'Long description of the reference term.' ;
  COMMENT ON COLUMN REF_PO_AUTH_FLOW.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_PO_AUTH_FLOW.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_PO_AUTH_FLOW.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_PO_AUTH_FLOW.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_PO_AUTH_FLOW.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_PO_AUTH_FLOW ADD CONSTRAINT "pk_REF_PO_AUTH_FLOW" PRIMARY KEY ( PO_AUTH_FLOW_DB_ID, PO_AUTH_FLOW_CD ) ;


CREATE TABLE REF_PO_AUTH_LVL
  (
    PO_AUTH_LVL_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    PO_AUTH_LVL_CD     VARCHAR2 (10) NOT NULL DEFERRABLE ,
    PO_AUTH_FLOW_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PO_AUTH_FLOW_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    USER_CD            VARCHAR2 (8) NOT NULL DEFERRABLE ,
    LIMIT_PRICE        NUMBER (15,5) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_PO_AUTH_LVL ADD CHECK ( PO_AUTH_LVL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PO_AUTH_LVL ADD CHECK ( PO_AUTH_FLOW_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PO_AUTH_LVL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_PO_AUTH_LVL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_PO_AUTH_LVL
IS
  '[EXTENDABLE] The required authorization level for a purchase order.' ;
  COMMENT ON COLUMN REF_PO_AUTH_LVL.PO_AUTH_LVL_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_PO_AUTH_LVL.PO_AUTH_LVL_CD
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN REF_PO_AUTH_LVL.PO_AUTH_FLOW_DB_ID
IS
  'FK to REF_PO_AUTH_FLOW.  Defines an authrization level for an authorization workflow.' ;
  COMMENT ON COLUMN REF_PO_AUTH_LVL.PO_AUTH_FLOW_CD
IS
  'FK to REF_PO_AUTH_FLOW.  Defines an authrization level for an authorization workflow.' ;
  COMMENT ON COLUMN REF_PO_AUTH_LVL.DESC_SDESC
IS
  'Short description of the necessary authorization level.' ;
  COMMENT ON COLUMN REF_PO_AUTH_LVL.DESC_LDESC
IS
  'Long description of the necessary authorization level.' ;
  COMMENT ON COLUMN REF_PO_AUTH_LVL.USER_CD
IS
  'User-readable refterm.' ;
  COMMENT ON COLUMN REF_PO_AUTH_LVL.LIMIT_PRICE
IS
  'The limit price.' ;
  COMMENT ON COLUMN REF_PO_AUTH_LVL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_PO_AUTH_LVL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_PO_AUTH_LVL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_PO_AUTH_LVL.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_PO_AUTH_LVL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_PO_AUTH_LVL ADD CONSTRAINT "pk_REF_PO_AUTH_LVL" PRIMARY KEY ( PO_AUTH_LVL_DB_ID, PO_AUTH_LVL_CD ) ;


CREATE TABLE REF_PO_AUTH_LVL_STATUS
  (
    PO_AUTH_LVL_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PO_AUTH_LVL_STATUS_CD    VARCHAR2 (10) NOT NULL DEFERRABLE ,
    DISPLAY_CODE             VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DISPLAY_NAME             VARCHAR2 (80) ,
    DISPLAY_DESC             VARCHAR2 (4000) ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_PO_AUTH_LVL_STATUS ADD CHECK ( PO_AUTH_LVL_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PO_AUTH_LVL_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_PO_AUTH_LVL_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_PO_AUTH_LVL_STATUS
IS
  'Lists all of the levels of authorization status to the order.' ;
  COMMENT ON COLUMN REF_PO_AUTH_LVL_STATUS.PO_AUTH_LVL_STATUS_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_PO_AUTH_LVL_STATUS.PO_AUTH_LVL_STATUS_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_PO_AUTH_LVL_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_PO_AUTH_LVL_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_PO_AUTH_LVL_STATUS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_PO_AUTH_LVL_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_PO_AUTH_LVL_STATUS ADD CONSTRAINT PK_REF_PO_AUTH_LVL_STATUS PRIMARY KEY ( PO_AUTH_LVL_STATUS_DB_ID, PO_AUTH_LVL_STATUS_CD ) ;


CREATE TABLE REF_PO_LINE_TYPE
  (
    PO_LINE_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PO_LINE_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    USER_CD            VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_PO_LINE_TYPE ADD CHECK ( PO_LINE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PO_LINE_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_PO_LINE_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_PO_LINE_TYPE
IS
  'Lists the types of order lines, such as purchase lines, borrow lines, repair lines, etc.' ;
  COMMENT ON COLUMN REF_PO_LINE_TYPE.PO_LINE_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_PO_LINE_TYPE.PO_LINE_TYPE_CD
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN REF_PO_LINE_TYPE.DESC_SDESC
IS
  'Short description of the reference term.' ;
  COMMENT ON COLUMN REF_PO_LINE_TYPE.DESC_LDESC
IS
  'Long description of the reference term.' ;
  COMMENT ON COLUMN REF_PO_LINE_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_PO_LINE_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_PO_LINE_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_PO_LINE_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_PO_LINE_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_PO_LINE_TYPE ADD CONSTRAINT "pk_REF_PO_LINE_TYPE" PRIMARY KEY ( PO_LINE_TYPE_DB_ID, PO_LINE_TYPE_CD ) ;


CREATE TABLE REF_PO_PAYMENT_INFO
  (
    PAYMENT_INFO_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PAYMENT_INFO_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_PO_PAYMENT_INFO ADD CHECK ( PAYMENT_INFO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PO_PAYMENT_INFO ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_PO_PAYMENT_INFO ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_PO_PAYMENT_INFO
IS
  '[EXTENDABLE] The lists for the Bill To: and Consign To: fields when creating or editing an order. Applies to all order types, not just Purchase Orders.' ;
  COMMENT ON COLUMN REF_PO_PAYMENT_INFO.PAYMENT_INFO_CD
IS
  'This is the order payment information code.' ;
  COMMENT ON COLUMN REF_PO_PAYMENT_INFO.DESC_SDESC
IS
  'This is the order payment information description.' ;
  COMMENT ON COLUMN REF_PO_PAYMENT_INFO.DESC_LDESC
IS
  'This is the order payment information long description. ' ;
  COMMENT ON COLUMN REF_PO_PAYMENT_INFO.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_PO_PAYMENT_INFO.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_PO_PAYMENT_INFO.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_PO_PAYMENT_INFO.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_PO_PAYMENT_INFO ADD CONSTRAINT "pk_REF_PO_PAYMENT_INFO" PRIMARY KEY ( PAYMENT_INFO_DB_ID, PAYMENT_INFO_CD ) ;


CREATE TABLE REF_PO_TYPE
  (
    PO_TYPE_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    PO_TYPE_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_PO_TYPE ADD CHECK ( PO_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PO_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_PO_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_PO_TYPE
IS
  'The list of purchase order categories, such as borrow, repair, consignment, purchase, etc.' ;
  COMMENT ON COLUMN REF_PO_TYPE.PO_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_PO_TYPE.PO_TYPE_CD
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN REF_PO_TYPE.DESC_SDESC
IS
  'Short description of the purchase order type.' ;
  COMMENT ON COLUMN REF_PO_TYPE.DESC_LDESC
IS
  'Long description of the purchase order type.' ;
  COMMENT ON COLUMN REF_PO_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_PO_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_PO_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_PO_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_PO_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_PO_TYPE ADD CONSTRAINT "pk_REF_PO_TYPE" PRIMARY KEY ( PO_TYPE_DB_ID, PO_TYPE_CD ) ;


CREATE TABLE REF_PPC_ACTIVITY_TYPE
  (
    PPC_ACTIVITY_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PPC_ACTIVITY_TYPE_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DESC_SDESC              VARCHAR2 (80) ,
    DESC_LDESC              VARCHAR2 (4000) ,
    RSTAT_CD                NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER           VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_PPC_ACTIVITY_TYPE ADD CHECK ( PPC_ACTIVITY_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PPC_ACTIVITY_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_PPC_ACTIVITY_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_PPC_ACTIVITY_TYPE
IS
  'The list of allowable Production Planning and Control activity types, such as a phase or a milestone.' ;
ALTER TABLE REF_PPC_ACTIVITY_TYPE ADD CONSTRAINT PK_REF_PPC_ACTIVITY_TYPE PRIMARY KEY ( PPC_ACTIVITY_TYPE_DB_ID, PPC_ACTIVITY_TYPE_CD ) ;


CREATE TABLE REF_PPC_MILESTONE_TYPE
  (
    PPC_MILESTONE_TYPE_DB_ID NUMBER (10) NOT NULL ,
    PPC_MILESTONE_TYPE_CD    VARCHAR2 (16) NOT NULL ,
    DESC_SDESC               VARCHAR2 (80) ,
    DESC_LDESC               VARCHAR2 (4000) ,
    RSTAT_CD                 NUMBER (3) NOT NULL ,
    CREATION_DT              DATE NOT NULL ,
    REVISION_DT              DATE NOT NULL ,
    REVISION_DB_ID           NUMBER (10) NOT NULL ,
    REVISION_USER            VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE REF_PPC_MILESTONE_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE REF_PPC_MILESTONE_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON TABLE REF_PPC_MILESTONE_TYPE
IS
  'This table lists two milestone types, Technical and Project. A Technical Milestone indicates a change of condition of the aircraft during the execution of a work package. The required conditions can be indicated on job cards and then the job cards can be mapped to the technical milestones. E.g. Electric power on, or Aircraft Jacks on, Flaps at 30 degrees, etc. A Project milestone is for administrative or planning purposes and does not relate to aircraft conditions.' ;
ALTER TABLE REF_PPC_MILESTONE_TYPE ADD CONSTRAINT PK_REF_PPC_MILESTONE_TYPE PRIMARY KEY ( PPC_MILESTONE_TYPE_DB_ID, PPC_MILESTONE_TYPE_CD ) ;


CREATE TABLE REF_PPC_OPT_STATUS
  (
    PPC_OPT_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PPC_OPT_STATUS_CD    VARCHAR2 (20) NOT NULL DEFERRABLE ,
    USER_CD              VARCHAR2 (20) NOT NULL DEFERRABLE ,
    DESC_SDESC           VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC           VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_PPC_OPT_STATUS ADD CHECK ( PPC_OPT_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PPC_OPT_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_PPC_OPT_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_PPC_OPT_STATUS
IS
  'The list of possible statuses of a Production Planning and Control optimization. For example, Pending Optimization, Optimization Completed, Optimization Failed, etc.' ;
ALTER TABLE REF_PPC_OPT_STATUS ADD CONSTRAINT PK_REF_PPC_OPT_STATUS PRIMARY KEY ( PPC_OPT_STATUS_DB_ID, PPC_OPT_STATUS_CD ) ;


CREATE TABLE REF_PPC_PUBLISH_FAIL_TYPE
  (
    PPC_PUBLISH_FAIL_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PPC_PUBLISH_FAIL_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG                  NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC                  VARCHAR2 (80) ,
    DESC_LDESC                  VARCHAR2 (4000) ,
    RSTAT_CD                    NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT                 DATE NOT NULL DEFERRABLE ,
    REVISION_DT                 DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER               VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_PPC_PUBLISH_FAIL_TYPE ADD CHECK ( PPC_PUBLISH_FAIL_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PPC_PUBLISH_FAIL_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PPC_PUBLISH_FAIL_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PPC_PUBLISH_FAIL_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_PPC_PUBLISH_FAIL_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_PPC_PUBLISH_FAIL_TYPE
IS
  'The list of reasons why a Production Planning and Control publishing activity failed. For example, Task is out of the scope of the work package.' ;
ALTER TABLE REF_PPC_PUBLISH_FAIL_TYPE ADD CONSTRAINT PK_REF_PPC_PUBLISH_FAIL_TYPE PRIMARY KEY ( PPC_PUBLISH_FAIL_TYPE_DB_ID, PPC_PUBLISH_FAIL_TYPE_CD ) ;


CREATE TABLE REF_PREC_PROC
  (
    PREC_PROC_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PREC_PROC_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID    NUMBER (10) ,
    BITMAP_TAG      NUMBER (10) ,
    DESC_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC      VARCHAR2 (4000) ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_PREC_PROC ADD CHECK ( PREC_PROC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PREC_PROC ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PREC_PROC ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PREC_PROC ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_PREC_PROC ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_PREC_PROC
IS
  'The list of precautionary procedures or actions that can be associated with a fault that has a flight safety impact. Some examples of precautionary procedures are unscheduled landing, aborted takeoff, and fuel dumped.' ;
  COMMENT ON COLUMN REF_PREC_PROC.PREC_PROC_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_PREC_PROC.PREC_PROC_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_PREC_PROC.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_PREC_PROC.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_PREC_PROC.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_PREC_PROC.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_PREC_PROC.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_PREC_PROC.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_PREC_PROC.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_PREC_PROC.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_PREC_PROC.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_PREC_PROC ADD CONSTRAINT PK_REF_PREC_PROC PRIMARY KEY ( PREC_PROC_DB_ID, PREC_PROC_CD ) ;


CREATE TABLE REF_PRICE_TYPE
  (
    PRICE_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PRICE_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG       NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC       VARCHAR2 (80) ,
    DESC_LDESC       VARCHAR2 (4000) ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_PRICE_TYPE ADD CHECK ( PRICE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PRICE_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PRICE_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PRICE_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_PRICE_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_PRICE_TYPE
IS
  '[EXTENDABLE] The list of price types, such as Firm, that can be selected when adding or editing a part price.' ;
  COMMENT ON COLUMN REF_PRICE_TYPE.PRICE_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_PRICE_TYPE.PRICE_TYPE_CD
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN REF_PRICE_TYPE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_PRICE_TYPE.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_PRICE_TYPE.DESC_SDESC
IS
  'Short description of the price type.' ;
  COMMENT ON COLUMN REF_PRICE_TYPE.DESC_LDESC
IS
  'Long description of the price type.' ;
  COMMENT ON COLUMN REF_PRICE_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_PRICE_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_PRICE_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_PRICE_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_PRICE_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_PRICE_TYPE ADD CONSTRAINT "pk_REF_PRICE_TYPE" PRIMARY KEY ( PRICE_TYPE_DB_ID, PRICE_TYPE_CD ) ;


CREATE TABLE REF_PRINTER_TYPE
  (
    PRINTER_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PRINTER_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_PRINTER_TYPE ADD CHECK ( PRINTER_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PRINTER_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_PRINTER_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_PRINTER_TYPE
IS
  'This is a list of printer types, including PHYSICAL, EMAIL, FTP etc.' ;
  COMMENT ON COLUMN REF_PRINTER_TYPE.PRINTER_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_PRINTER_TYPE.PRINTER_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_PRINTER_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_PRINTER_TYPE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_PRINTER_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_PRINTER_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_PRINTER_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_PRINTER_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_PRINTER_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_PRINTER_TYPE ADD CONSTRAINT "pk_REF_PRINTER_TYPE" PRIMARY KEY ( PRINTER_TYPE_DB_ID, PRINTER_TYPE_CD ) ;


CREATE TABLE REF_PURCH_TYPE
  (
    PURCH_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PURCH_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC       VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC       VARCHAR2 (4000) ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_PURCH_TYPE ADD CHECK ( PURCH_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_PURCH_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_PURCH_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_PURCH_TYPE
IS
  '[EXTENDABLE] Lists the categories for BOM parts and stock numbers that Purchasing uses. Purchasing agents can then filter their purchasing list based on the purchase type.' ;
  COMMENT ON COLUMN REF_PURCH_TYPE.PURCH_TYPE_DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN REF_PURCH_TYPE.PURCH_TYPE_CD
IS
  'A unique, user entered value that identifies the reference term.' ;
  COMMENT ON COLUMN REF_PURCH_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_PURCH_TYPE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_PURCH_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_PURCH_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_PURCH_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_PURCH_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_PURCH_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_PURCH_TYPE ADD CONSTRAINT PK_REF_PURCH_TYPE PRIMARY KEY ( PURCH_TYPE_DB_ID, PURCH_TYPE_CD ) ;


CREATE TABLE REF_QTY_UNIT
  (
    QTY_UNIT_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    QTY_UNIT_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC        VARCHAR2 (80) ,
    DESC_LDESC        VARCHAR2 (4000) ,
    DECIMAL_PLACES_QT NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID      NUMBER (10) ,
    BITMAP_TAG        NUMBER (10) ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_QTY_UNIT ADD CHECK ( QTY_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_QTY_UNIT ADD CHECK ( DECIMAL_PLACES_QT BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_QTY_UNIT ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_QTY_UNIT ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_QTY_UNIT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_QTY_UNIT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_QTY_UNIT
IS
  '[EXTENDABLE] Lists the units of measure that are used to describe stock quantities for storage, movement, purchasing, etc. Every part number within this stock number must have the same unit of measure. For example, FT (FOOT)' ;
  COMMENT ON COLUMN REF_QTY_UNIT.QTY_UNIT_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_QTY_UNIT.QTY_UNIT_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_QTY_UNIT.DESC_SDESC
IS
  'Short description of the qty unit.' ;
  COMMENT ON COLUMN REF_QTY_UNIT.DESC_LDESC
IS
  'Long description of the qty unit.' ;
  COMMENT ON COLUMN REF_QTY_UNIT.DECIMAL_PLACES_QT
IS
  'Each unit of measure describes how many decimal places will be shown in the GUI, given by the REF_QTY_UNIT.DECIMAL_PLACES_CT column.' ;
  COMMENT ON COLUMN REF_QTY_UNIT.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_QTY_UNIT.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_QTY_UNIT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_QTY_UNIT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_QTY_UNIT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_QTY_UNIT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_QTY_UNIT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_QTY_UNIT ADD CONSTRAINT "pk_REF_QTY_UNIT" PRIMARY KEY ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) ;


CREATE TABLE REF_QUAR_ACTION_CATGRY
  (
    QUAR_ACTION_CATGRY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    QUAR_ACTION_CATGRY_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC               VARCHAR2 (80) NOT NULL DEFERRABLE ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_QUAR_ACTION_CATGRY ADD CHECK ( QUAR_ACTION_CATGRY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_QUAR_ACTION_CATGRY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_QUAR_ACTION_CATGRY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_QUAR_ACTION_CATGRY
IS
  '[EXTENDABLE] The list of corrective action categories when a part is being quarantined.' ;
  COMMENT ON COLUMN REF_QUAR_ACTION_CATGRY.QUAR_ACTION_CATGRY_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_QUAR_ACTION_CATGRY.QUAR_ACTION_CATGRY_CD
IS
  'Unique code for the quarantine corrective action catagory.' ;
  COMMENT ON COLUMN REF_QUAR_ACTION_CATGRY.DESC_SDESC
IS
  'Description of the quarantine corrective action category.' ;
  COMMENT ON COLUMN REF_QUAR_ACTION_CATGRY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_QUAR_ACTION_CATGRY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_QUAR_ACTION_CATGRY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_QUAR_ACTION_CATGRY.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_QUAR_ACTION_CATGRY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_QUAR_ACTION_CATGRY ADD CONSTRAINT PK_REF_QUAR_ACTION_CATGRY PRIMARY KEY ( QUAR_ACTION_CATGRY_DB_ID, QUAR_ACTION_CATGRY_CD ) ;


CREATE TABLE REF_QUAR_ACTION_STATUS
  (
    QUAR_ACTION_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    QUAR_ACTION_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC               VARCHAR2 (80) NOT NULL DEFERRABLE ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_QUAR_ACTION_STATUS ADD CHECK ( QUAR_ACTION_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_QUAR_ACTION_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_QUAR_ACTION_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_QUAR_ACTION_STATUS
IS
  'The list of quarantine corrective action categories when adding a Quarantine Corrective Action.' ;
  COMMENT ON COLUMN REF_QUAR_ACTION_STATUS.QUAR_ACTION_STATUS_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_QUAR_ACTION_STATUS.QUAR_ACTION_STATUS_CD
IS
  'Unique code for the quarantine corrective action status' ;
  COMMENT ON COLUMN REF_QUAR_ACTION_STATUS.DESC_SDESC
IS
  'Description of the quarantine corrective action status' ;
  COMMENT ON COLUMN REF_QUAR_ACTION_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_QUAR_ACTION_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_QUAR_ACTION_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_QUAR_ACTION_STATUS.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_QUAR_ACTION_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_QUAR_ACTION_STATUS ADD CONSTRAINT PK_REF_QUAR_ACTION_STATUS PRIMARY KEY ( QUAR_ACTION_STATUS_DB_ID, QUAR_ACTION_STATUS_CD ) ;


CREATE TABLE REF_QUICKTEXT_TYPE
  (
    QUICKTEXT_TYPE_CD VARCHAR2 (16) NOT NULL ,
    DESC_SDESC        VARCHAR2 (80) NOT NULL ,
    DESC_LDESC        VARCHAR2 (4000) NOT NULL ,
    RSTAT_CD          NUMBER (3) NOT NULL ,
    REVISION_NO       NUMBER (10) NOT NULL ,
    CTRL_DB_ID        NUMBER (10) NOT NULL ,
    CREATION_DT       DATE NOT NULL ,
    REVISION_DT       DATE NOT NULL ,
    REVISION_DB_ID    NUMBER (10) NOT NULL ,
    REVISION_USER     VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE REF_QUICKTEXT_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
COMMENT ON COLUMN REF_QUICKTEXT_TYPE.QUICKTEXT_TYPE_CD
IS
  'Primary key for the reference term.' ;
  COMMENT ON COLUMN REF_QUICKTEXT_TYPE.DESC_SDESC
IS
  'Name for the term.' ;
  COMMENT ON COLUMN REF_QUICKTEXT_TYPE.DESC_LDESC
IS
  'Description for the term, useful for tooltips and help text.' ;
  COMMENT ON COLUMN REF_QUICKTEXT_TYPE.RSTAT_CD
IS
  'Status of the record.' ;
  COMMENT ON COLUMN REF_QUICKTEXT_TYPE.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN REF_QUICKTEXT_TYPE.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN REF_QUICKTEXT_TYPE.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN REF_QUICKTEXT_TYPE.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN REF_QUICKTEXT_TYPE.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN REF_QUICKTEXT_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
CREATE UNIQUE INDEX IX_REF_QUICKTEXT_TYPE_NK ON REF_QUICKTEXT_TYPE
  (
    QUICKTEXT_TYPE_CD ASC , CTRL_DB_ID ASC
  )
  ;
ALTER TABLE REF_QUICKTEXT_TYPE ADD CONSTRAINT PK_REF_QUICKTEXT_TYPE PRIMARY KEY ( QUICKTEXT_TYPE_CD ) ;


CREATE TABLE REF_RCV_PRIORITY
  (
    RCV_PRIORITY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RCV_PRIORITY_CD    VARCHAR2 (64) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID       NUMBER (10) ,
    BITMAP_TAG         NUMBER (10) ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_RCV_PRIORITY ADD CHECK ( RCV_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_RCV_PRIORITY ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_RCV_PRIORITY ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_RCV_PRIORITY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_RCV_PRIORITY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_RCV_PRIORITY
IS
  '[EXTENDABLE] The list of possible priorities (low, medium, high) that can be assigned to a received shipment.' ;
  COMMENT ON COLUMN REF_RCV_PRIORITY.RCV_PRIORITY_DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN REF_RCV_PRIORITY.RCV_PRIORITY_CD
IS
  'A unique, user entered value that identifies the reference term.' ;
  COMMENT ON COLUMN REF_RCV_PRIORITY.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_RCV_PRIORITY.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_RCV_PRIORITY.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_RCV_PRIORITY.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_RCV_PRIORITY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_RCV_PRIORITY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_RCV_PRIORITY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_RCV_PRIORITY.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_RCV_PRIORITY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_RCV_PRIORITY ADD CONSTRAINT PK_REF_RCV_PRIORITY PRIMARY KEY ( RCV_PRIORITY_DB_ID, RCV_PRIORITY_CD ) ;


CREATE TABLE REF_RCV_ROUTING
  (
    RCV_ROUTING_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RCV_ROUTING_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID      NUMBER (10) ,
    BITMAP_TAG        NUMBER (10) ,
    DESC_SDESC        VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC        VARCHAR2 (4000) ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_RCV_ROUTING ADD CHECK ( RCV_ROUTING_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_RCV_ROUTING ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_RCV_ROUTING ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_RCV_ROUTING ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_RCV_ROUTING ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_RCV_ROUTING
IS
  'Receiving routing table.' ;
  COMMENT ON COLUMN REF_RCV_ROUTING.RCV_ROUTING_DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN REF_RCV_ROUTING.RCV_ROUTING_CD
IS
  'A unique, user entered value that identifies the reference term.' ;
  COMMENT ON COLUMN REF_RCV_ROUTING.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_RCV_ROUTING.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_RCV_ROUTING.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_RCV_ROUTING.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_RCV_ROUTING.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_RCV_ROUTING.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_RCV_ROUTING.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_RCV_ROUTING.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_RCV_ROUTING.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_RCV_ROUTING ADD CONSTRAINT PK_REF_RCV_ROUTING PRIMARY KEY ( RCV_ROUTING_DB_ID, RCV_ROUTING_CD ) ;


CREATE TABLE REF_RECEIVE_COND
  (
    RECEIVE_COND_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RECEIVE_COND_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_RECEIVE_COND ADD CHECK ( RECEIVE_COND_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_RECEIVE_COND ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_RECEIVE_COND ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_RECEIVE_COND
IS
  '[EXTENDABLE] The list of possible conditions in which a shipment part could be received. For example, when receiving a shipment, a part could be REP (Repaired), NEW (New), OVHL (Overhauled), etc.' ;
  COMMENT ON COLUMN REF_RECEIVE_COND.RECEIVE_COND_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_RECEIVE_COND.RECEIVE_COND_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_RECEIVE_COND.DESC_SDESC
IS
  'A short description of the received condition.' ;
  COMMENT ON COLUMN REF_RECEIVE_COND.DESC_LDESC
IS
  'A short description of the received condition.' ;
  COMMENT ON COLUMN REF_RECEIVE_COND.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_RECEIVE_COND.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_RECEIVE_COND.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_RECEIVE_COND.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_RECEIVE_COND.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_RECEIVE_COND ADD CONSTRAINT "pk_REF_RECEIVE_COND" PRIMARY KEY ( RECEIVE_COND_DB_ID, RECEIVE_COND_CD ) ;


CREATE TABLE REF_REFERENCE_REQUEST_STATUS
  (
    REFERENCE_REQUEST_STATUS_CD VARCHAR2 (16) NOT NULL ,
    DESC_LDESC                  VARCHAR2 (4000 CHAR) ,
    BITMAP_DB_ID                NUMBER (10) NOT NULL ,
    BITMAP_TAG                  NUMBER (10) NOT NULL ,
    CTRL_DB_ID                  NUMBER (10) NOT NULL ,
    REVISION_NO                 NUMBER (10) NOT NULL ,
    CREATION_DB_ID              NUMBER (10) NOT NULL ,
    RSTAT_CD                    NUMBER (3) NOT NULL ,
    CREATION_DT                 DATE NOT NULL ,
    REVISION_DT                 DATE NOT NULL ,
    REVISION_DB_ID              NUMBER (10) NOT NULL ,
    REVISION_USER               VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE REF_REFERENCE_REQUEST_STATUS ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE REF_REFERENCE_REQUEST_STATUS ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE REF_REFERENCE_REQUEST_STATUS ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE REF_REFERENCE_REQUEST_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE REF_REFERENCE_REQUEST_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON TABLE REF_REFERENCE_REQUEST_STATUS
IS
  'Contains system values for the status of a reference approval  request. Values should not be added or changed as there is logic around the existing states. ' ;
  COMMENT ON COLUMN REF_REFERENCE_REQUEST_STATUS.REFERENCE_REQUEST_STATUS_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_REFERENCE_REQUEST_STATUS.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explaination purposes only.' ;
  COMMENT ON COLUMN REF_REFERENCE_REQUEST_STATUS.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_REFERENCE_REQUEST_STATUS.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_REFERENCE_REQUEST_STATUS.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN REF_REFERENCE_REQUEST_STATUS.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN REF_REFERENCE_REQUEST_STATUS.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN REF_REFERENCE_REQUEST_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_REFERENCE_REQUEST_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_REFERENCE_REQUEST_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_REFERENCE_REQUEST_STATUS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_REFERENCE_REQUEST_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_REFERENCE_REQUEST_STATUS ADD CONSTRAINT PK_REF_REFERENCE_REQ_STATUS PRIMARY KEY ( REFERENCE_REQUEST_STATUS_CD ) ;


CREATE TABLE REF_REF_UNIT
  (
    REF_UNIT_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REF_UNIT_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG     NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_REF_UNIT ADD CHECK ( REF_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_REF_UNIT ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_REF_UNIT ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_REF_UNIT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_REF_UNIT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_REF_UNIT
IS
  'Reference Unit References. This class defines the most basic list of indicator types within the system. The intent of this class is to provide a means to group like units of measure in support of unit conversions and for reporting purposes. This class may be prepopulated from the MIMOSA initiative.' ;
  COMMENT ON COLUMN REF_REF_UNIT.REF_UNIT_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_REF_UNIT.REF_UNIT_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_REF_UNIT.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_REF_UNIT.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_REF_UNIT.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_REF_UNIT.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_REF_UNIT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_REF_UNIT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_REF_UNIT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_REF_UNIT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_REF_UNIT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_REF_UNIT ADD CONSTRAINT PK_REF_REF_UNIT PRIMARY KEY ( REF_UNIT_DB_ID, REF_UNIT_CD ) ;


CREATE TABLE REF_REG_BODY
  (
    REG_BODY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REG_BODY_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID   NUMBER (10) ,
    BITMAP_TAG     NUMBER (10) ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_REG_BODY ADD CHECK ( REG_BODY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_REG_BODY ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_REG_BODY ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_REG_BODY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_REG_BODY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_REG_BODY
IS
  '[EXTENDABLE] A list of regulatory bodies, such as the FAA. You select a regulatory body for an aircraft when editing an inventory page. You also choose a regulatory body when creating or editing a reference document.' ;
  COMMENT ON COLUMN REF_REG_BODY.REG_BODY_DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN REF_REG_BODY.REG_BODY_CD
IS
  'A unique, user entered value that defines the PK of this reference term.' ;
  COMMENT ON COLUMN REF_REG_BODY.BITMAP_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_REG_BODY.BITMAP_TAG
IS
  'Unique idenifier assigned from Sequence BITMAP_TAG_SEQ.' ;
  COMMENT ON COLUMN REF_REG_BODY.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_REG_BODY.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_REG_BODY.RSTAT_CD
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_REG_BODY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_REG_BODY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_REG_BODY.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_REG_BODY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_REG_BODY ADD CONSTRAINT PK_REF_REG_BODY PRIMARY KEY ( REG_BODY_DB_ID, REG_BODY_CD ) ;


CREATE TABLE REF_RELIABILITY_NOTE_TYPE
  (
    RELIABILITY_NOTE_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RELIABILITY_NOTE_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC                  VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC                  VARCHAR2 (4000) ,
    SHOW_WARNING_BOOL           NUMBER (1) DEFAULT 0 ,
    WARNING_TEXT                VARCHAR2 (40) ,
    RSTAT_CD                    NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT                 DATE NOT NULL DEFERRABLE ,
    REVISION_DT                 DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER               VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_RELIABILITY_NOTE_TYPE ADD CHECK ( RELIABILITY_NOTE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_RELIABILITY_NOTE_TYPE ADD CHECK ( SHOW_WARNING_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_RELIABILITY_NOTE_TYPE ADD CHECK ( RSTAT_CD          IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_RELIABILITY_NOTE_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_RELIABILITY_NOTE_TYPE
IS
  'The types of reliability notes that an be added to a note the Inventory Details page.' ;
  COMMENT ON COLUMN REF_RELIABILITY_NOTE_TYPE.RELIABILITY_NOTE_TYPE_DB_ID
IS
  'A unique serial number assigned by mxi to each physical maintenix database. allows data to be merged or consolidated from independent sources without pk collisions.
' ;
  COMMENT ON COLUMN REF_RELIABILITY_NOTE_TYPE.RELIABILITY_NOTE_TYPE_CD
IS
  'A unique, user entered value that identifies the reliability note types.' ;
  COMMENT ON COLUMN REF_RELIABILITY_NOTE_TYPE.DESC_SDESC
IS
  'Short description of the reliability note type.' ;
  COMMENT ON COLUMN REF_RELIABILITY_NOTE_TYPE.DESC_LDESC
IS
  'Long description of the reliability note type.' ;
  COMMENT ON COLUMN REF_RELIABILITY_NOTE_TYPE.SHOW_WARNING_BOOL
IS
  'Boolean flag to indicate if the warning text is to be displayed or not.' ;
  COMMENT ON COLUMN REF_RELIABILITY_NOTE_TYPE.WARNING_TEXT
IS
  'Warning text to be displayed.' ;
  COMMENT ON COLUMN REF_RELIABILITY_NOTE_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_RELIABILITY_NOTE_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_RELIABILITY_NOTE_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_RELIABILITY_NOTE_TYPE.REVISION_DB_ID
IS
  'The database identifer captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_RELIABILITY_NOTE_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_RELIABILITY_NOTE_TYPE ADD CONSTRAINT PK_REF_RELIABILITY_NOTE_TYPE PRIMARY KEY ( RELIABILITY_NOTE_TYPE_DB_ID, RELIABILITY_NOTE_TYPE_CD ) ;


CREATE TABLE REF_REL_TYPE
  (
    REL_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REL_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_REL_TYPE ADD CHECK ( REL_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_REL_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_REL_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_REL_TYPE
IS
  'The type of relationship between task dependencies.' ;
  COMMENT ON COLUMN REF_REL_TYPE.REL_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_REL_TYPE.REL_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_REL_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_REL_TYPE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_REL_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_REL_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_REL_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_REL_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_REL_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_REL_TYPE ADD CONSTRAINT PK_REF_REL_TYPE PRIMARY KEY ( REL_TYPE_DB_ID, REL_TYPE_CD ) ;


CREATE TABLE REF_REMOVE_REASON
  (
    REMOVE_REASON_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REMOVE_REASON_CD        VARCHAR2 (8) NOT NULL DEFERRABLE ,
    INV_COND_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    INV_COND_CD             VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC              VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC              VARCHAR2 (4000) ,
    SPEC2K_REMOVE_REASON_CD VARCHAR2 (8) ,
    RSTAT_CD                NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER           VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_REMOVE_REASON ADD CHECK ( REMOVE_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_REMOVE_REASON ADD CHECK ( INV_COND_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_REMOVE_REASON ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_REMOVE_REASON ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_REMOVE_REASON
IS
  '[EXTENDABLE] The list of possible reasons for removing a part in a task definition, a task or a fault.' ;
  COMMENT ON COLUMN REF_REMOVE_REASON.REMOVE_REASON_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_REMOVE_REASON.REMOVE_REASON_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_REMOVE_REASON.INV_COND_DB_ID
IS
  'FK to REF_REMOVE_REASON.' ;
  COMMENT ON COLUMN REF_REMOVE_REASON.INV_COND_CD
IS
  'FK to REF_REMOVE_REASON.' ;
  COMMENT ON COLUMN REF_REMOVE_REASON.DESC_SDESC
IS
  'Short description of the removal reason.' ;
  COMMENT ON COLUMN REF_REMOVE_REASON.DESC_LDESC
IS
  'Long description of the removal reason.' ;
  COMMENT ON COLUMN REF_REMOVE_REASON.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_REMOVE_REASON.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_REMOVE_REASON.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_REMOVE_REASON.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_REMOVE_REASON.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_REMOVE_REASON ADD CONSTRAINT "pk_REF_REMOVE_REASON" PRIMARY KEY ( REMOVE_REASON_DB_ID, REMOVE_REASON_CD ) ;


CREATE TABLE REF_REQ_ACTION
  (
    REQ_ACTION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REQ_ACTION_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC        VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC        VARCHAR2 (4000) ,
    USER_CD           VARCHAR2 (8) ,
    GENERATE_REQ_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    DEFAULT_BOOL      NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_REQ_ACTION ADD CHECK ( REQ_ACTION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_REQ_ACTION ADD CHECK ( GENERATE_REQ_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_REQ_ACTION ADD CHECK ( DEFAULT_BOOL      IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_REQ_ACTION ADD CHECK ( RSTAT_CD          IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_REQ_ACTION ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_REQ_ACTION
IS
  'Defines action options that control logic for part request generation.' ;
ALTER TABLE REF_REQ_ACTION ADD CONSTRAINT PK_REF_REQ_ACTION PRIMARY KEY ( REQ_ACTION_DB_ID, REQ_ACTION_CD ) ;


CREATE TABLE REF_REQ_PRIORITY
  (
    REQ_PRIORITY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REQ_PRIORITY_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    BITMAP_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG         NUMBER (10) NOT NULL DEFERRABLE ,
    PRIORITY_ORD       NUMBER (4) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE ,
    DEFAULT_BOOL       NUMBER (1) DEFAULT 0 NOT NULL
  ) ;
ALTER TABLE REF_REQ_PRIORITY ADD CHECK ( REQ_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_REQ_PRIORITY ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_REQ_PRIORITY ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_REQ_PRIORITY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_REQ_PRIORITY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_REQ_PRIORITY ADD CHECK ( DEFAULT_BOOL IN (0, 1)) ;
COMMENT ON TABLE REF_REQ_PRIORITY
IS
  '[EXTENDABLE] The list of request priorities that can be applied to a part request. These priorities help the supply department determine which requests should be addressed first. An example of a request priority is Expedite. This option is found under Part Requirements for Task Definitions, Task, and Faults.' ;
  COMMENT ON COLUMN REF_REQ_PRIORITY.REQ_PRIORITY_DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN REF_REQ_PRIORITY.REQ_PRIORITY_CD
IS
  'A unique, user entered value that identifies the reference term.' ;
  COMMENT ON COLUMN REF_REQ_PRIORITY.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_REQ_PRIORITY.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_REQ_PRIORITY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_REQ_PRIORITY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_REQ_PRIORITY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_REQ_PRIORITY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_REQ_PRIORITY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_REQ_PRIORITY ADD CONSTRAINT PK_REF_REQ_PRIORITY PRIMARY KEY ( REQ_PRIORITY_DB_ID, REQ_PRIORITY_CD ) ;


CREATE TABLE REF_REQ_TYPE
  (
    REQ_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REQ_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_REQ_TYPE ADD CHECK ( REQ_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_REQ_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_REQ_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_REQ_TYPE
IS
  'System defined types that describe the purpose of a part request, e.g. to fulfill a task, replenish stock, etc. ' ;
  COMMENT ON COLUMN REF_REQ_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_REQ_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_REQ_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_REQ_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_REQ_TYPE ADD CONSTRAINT "pk_REF_REQ_TYPE" PRIMARY KEY ( REQ_TYPE_DB_ID, REQ_TYPE_CD ) ;


CREATE TABLE REF_RESCHED_FROM
  (
    RESCHED_FROM_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RESCHED_FROM_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    DEFAULT_BOOL       NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_RESCHED_FROM ADD CHECK ( DEFAULT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_RESCHED_FROM ADD CHECK ( RSTAT_CD     IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_RESCHED_FROM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_RESCHED_FROM
IS
  'Defines the intended scheduling rule options when rescheduling the subsequent recurring tasks' ;
  COMMENT ON COLUMN REF_RESCHED_FROM.RESCHED_FROM_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_RESCHED_FROM.RESCHED_FROM_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_RESCHED_FROM.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_RESCHED_FROM.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_RESCHED_FROM.DEFAULT_BOOL
IS
  'Used to indicate the single value in this table that is the default row.' ;
  COMMENT ON COLUMN REF_RESCHED_FROM.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_RESCHED_FROM.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_RESCHED_FROM.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_RESCHED_FROM.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_RESCHED_FROM.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_RESCHED_FROM ADD CONSTRAINT PK_REF_RESCHED_FROM PRIMARY KEY ( RESCHED_FROM_DB_ID, RESCHED_FROM_CD ) ;


CREATE TABLE REF_RESULT_EVENT
  (
    RESULT_EVENT_DB_ID NUMBER (10) NOT NULL ,
    RESULT_EVENT_CD    VARCHAR2 (16) NOT NULL ,
    USER_CD            VARCHAR2 (16) NOT NULL ,
    DESC_SDESC         VARCHAR2 (80) ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_RESULT_EVENT ADD CHECK ( RESULT_EVENT_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE REF_RESULT_EVENT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_RESULT_EVENT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_RESULT_EVENT
IS
  '[EXTENDABLE] This table contains the list of possible subsequent events that can occur when a fault is found. For example, ABT (Aborted Approach), ATB (Air Turn Back), DIV (Diversion), DLY (Delay)' ;
  COMMENT ON COLUMN REF_RESULT_EVENT.RESULT_EVENT_DB_ID
IS
  'Database identifier for resulting event.' ;
  COMMENT ON COLUMN REF_RESULT_EVENT.RESULT_EVENT_CD
IS
  'Unique resulting event code of the resulting event.' ;
  COMMENT ON COLUMN REF_RESULT_EVENT.DESC_SDESC
IS
  'Short descirption of the resulting event.' ;
  COMMENT ON COLUMN REF_RESULT_EVENT.DESC_LDESC
IS
  'Detailed description of the resulting event.' ;
  COMMENT ON COLUMN REF_RESULT_EVENT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_RESULT_EVENT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_RESULT_EVENT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was updated.' ;
  COMMENT ON COLUMN REF_RESULT_EVENT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_RESULT_EVENT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_RESULT_EVENT ADD CONSTRAINT PK_REF_RESULT_EVENT PRIMARY KEY ( RESULT_EVENT_DB_ID, RESULT_EVENT_CD ) ;
ALTER TABLE REF_RESULT_EVENT ADD CONSTRAINT IX_REFRESEVENTCD_UNQ UNIQUE ( RESULT_EVENT_CD ) ;
ALTER TABLE REF_RESULT_EVENT ADD CONSTRAINT IX_REFRESEVENTUSERCD_UNQ UNIQUE ( USER_CD ) ;


CREATE TABLE REF_SCHED_FROM
  (
    SCHED_FROM_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_FROM_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC       VARCHAR2 (80) ,
    DESC_LDESC       VARCHAR2 (4000) ,
    BITMAP_DB_ID     NUMBER (10) ,
    BITMAP_TAG       NUMBER (10) ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_SCHED_FROM ADD CHECK ( SCHED_FROM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SCHED_FROM ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SCHED_FROM ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SCHED_FROM ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_SCHED_FROM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_SCHED_FROM
IS
  'System defined rules for scheduling an event.' ;
  COMMENT ON COLUMN REF_SCHED_FROM.SCHED_FROM_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_SCHED_FROM.SCHED_FROM_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_SCHED_FROM.DESC_SDESC
IS
  'Short description.' ;
  COMMENT ON COLUMN REF_SCHED_FROM.DESC_LDESC
IS
  'Long description.' ;
  COMMENT ON COLUMN REF_SCHED_FROM.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_SCHED_FROM.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_SCHED_FROM.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_SCHED_FROM.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_SCHED_FROM.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_SCHED_FROM.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_SCHED_FROM.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_SCHED_FROM ADD CONSTRAINT "pk_REF_SCHED_FROM" PRIMARY KEY ( SCHED_FROM_DB_ID, SCHED_FROM_CD ) ;


CREATE TABLE REF_SCHED_PART_STATUS
  (
    SCHED_PART_STATUS_DB_ID NUMBER (10) CONSTRAINT NN_REFSCHDPRTSTATS_SCHDPRTDBID NOT NULL DEFERRABLE ,
    SCHED_PART_STATUS_CD    VARCHAR2 (16) CONSTRAINT NN_REFSCHDPRTSTATS_SCHEDPARTCD NOT NULL DEFERRABLE ,
    BITMAP_DB_ID            NUMBER (10) ,
    BITMAP_TAG              NUMBER (10) ,
    DESC_SDESC              VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC              VARCHAR2 (4000) ,
    RSTAT_CD                NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID          NUMBER (10) CONSTRAINT NN_RFSCHDPRTSTS_REVDBID NOT NULL DEFERRABLE ,
    REVISION_USER           VARCHAR2 (30) CONSTRAINT NN_RFSCHDPRTSTS_REVUSER NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_SCHED_PART_STATUS ADD CHECK ( SCHED_PART_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SCHED_PART_STATUS ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SCHED_PART_STATUS ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SCHED_PART_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_SCHED_PART_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_SCHED_PART_STATUS
IS
  'Indicates the status of a part requirement. There are only two statuses: ACTV and CANCEL.' ;
  COMMENT ON COLUMN REF_SCHED_PART_STATUS.SCHED_PART_STATUS_DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN REF_SCHED_PART_STATUS.SCHED_PART_STATUS_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_SCHED_PART_STATUS.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_SCHED_PART_STATUS.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_SCHED_PART_STATUS.DESC_SDESC
IS
  'A short description or label for the reference term.
' ;
  COMMENT ON COLUMN REF_SCHED_PART_STATUS.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.
' ;
  COMMENT ON COLUMN REF_SCHED_PART_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_SCHED_PART_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_SCHED_PART_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_SCHED_PART_STATUS.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_SCHED_PART_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_SCHED_PART_STATUS ADD CONSTRAINT PK_REF_SCHED_PART_STATUS PRIMARY KEY ( SCHED_PART_STATUS_DB_ID, SCHED_PART_STATUS_CD ) ;


CREATE TABLE REF_SCHED_PRIORITY
  (
    SCHED_PRIORITY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_PRIORITY_CD    VARCHAR2 (8) CONSTRAINT NN_REFSCHEDPRIORTY_SHDPRIORCD NOT NULL DEFERRABLE ,
    BITMAP_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG           NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC           VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC           VARCHAR2 (4000) ,
    PRIORITY_ORD         NUMBER (4) NOT NULL DEFERRABLE ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_SCHED_PRIORITY ADD CHECK ( SCHED_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SCHED_PRIORITY ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SCHED_PRIORITY ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SCHED_PRIORITY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_SCHED_PRIORITY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_SCHED_PRIORITY
IS
  'Scheduling Priority References. Defines the priority model for task scheduling/execution.' ;
  COMMENT ON COLUMN REF_SCHED_PRIORITY.SCHED_PRIORITY_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_SCHED_PRIORITY.SCHED_PRIORITY_CD
IS
  'A unique value that defines the PK.' ;
  COMMENT ON COLUMN REF_SCHED_PRIORITY.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_SCHED_PRIORITY.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_SCHED_PRIORITY.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_SCHED_PRIORITY.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_SCHED_PRIORITY.PRIORITY_ORD
IS
  'Used to order the priority model (least to most).' ;
  COMMENT ON COLUMN REF_SCHED_PRIORITY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_SCHED_PRIORITY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_SCHED_PRIORITY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_SCHED_PRIORITY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_SCHED_PRIORITY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_SCHED_PRIORITY ADD CONSTRAINT PK_REF_SCHED_PRIORITY PRIMARY KEY ( SCHED_PRIORITY_DB_ID, SCHED_PRIORITY_CD ) ;


CREATE TABLE REF_SD_NATURE
  (
    SD_NATURE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SD_NATURE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID    NUMBER (10) ,
    BITMAP_TAG      NUMBER (10) ,
    DESC_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC      VARCHAR2 (4000) ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_SD_NATURE ADD CHECK ( SD_NATURE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SD_NATURE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SD_NATURE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SD_NATURE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_SD_NATURE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_SD_NATURE
IS
  '[EXTENDABLE] The list of conditions for reporting faults with a flight safety impact. Some examples are ground turnback indicator, partial engine power loss, emergency descent indicator, etc.' ;
  COMMENT ON COLUMN REF_SD_NATURE.SD_NATURE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_SD_NATURE.SD_NATURE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_SD_NATURE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_SD_NATURE.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_SD_NATURE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_SD_NATURE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_SD_NATURE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_SD_NATURE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_SD_NATURE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_SD_NATURE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_SD_NATURE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_SD_NATURE ADD CONSTRAINT PK_REF_SD_NATURE PRIMARY KEY ( SD_NATURE_DB_ID, SD_NATURE_CD ) ;


CREATE TABLE REF_SD_TYPE
  (
    SD_TYPE_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    SD_TYPE_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG       NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC       VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC       VARCHAR2 (4000) ,
    REPORT_REQD_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_SD_TYPE ADD CHECK ( SD_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SD_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SD_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SD_TYPE ADD CHECK ( REPORT_REQD_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_SD_TYPE ADD CHECK ( RSTAT_CD         IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_SD_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_SD_TYPE
IS
  '[EXTENDABLE] The list of failure severity levels, such as minor, catastrophic, MEL, etc.' ;
  COMMENT ON COLUMN REF_SD_TYPE.SD_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_SD_TYPE.SD_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_SD_TYPE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_SD_TYPE.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_SD_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_SD_TYPE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_SD_TYPE.REPORT_REQD_BOOL
IS
  'Indicates that a report must be submitted to the regulator.' ;
  COMMENT ON COLUMN REF_SD_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_SD_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_SD_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_SD_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_SD_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_SD_TYPE ADD CONSTRAINT PK_REF_SD_TYPE PRIMARY KEY ( SD_TYPE_DB_ID, SD_TYPE_CD ) ;


CREATE TABLE REF_SENSITIVITY
  (
    SENSITIVITY_CD VARCHAR2 (8) NOT NULL ,
    DESC_SDESC     VARCHAR2 (80) ,
    DESC_LDESC     VARCHAR2 (4000) ,
    ORD_ID         NUMBER (8) ,
    WARNING_LDESC  VARCHAR2 (4000) DEFAULT 'This system is compliance sensitive - the aircraft may require recertification.' NOT NULL ,
    ACTIVE_BOOL    NUMBER (1) DEFAULT 0 ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE REF_SENSITIVITY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE REF_SENSITIVITY ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE REF_SENSITIVITY ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE REF_SENSITIVITY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON TABLE REF_SENSITIVITY
IS
  'REF_SENSITIVITY : The Table is used to define and activate sensitivities.' ;
  COMMENT ON COLUMN REF_SENSITIVITY.SENSITIVITY_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_SENSITIVITY.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_SENSITIVITY.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_SENSITIVITY.ORD_ID
IS
  'Display order of the Sensitive System.' ;
  COMMENT ON COLUMN REF_SENSITIVITY.WARNING_LDESC
IS
  'Warning message assosiated with the Sensitive System.' ;
  COMMENT ON COLUMN REF_SENSITIVITY.ACTIVE_BOOL
IS
  'Indicates if a Sensitive System is active or not.' ;
  COMMENT ON COLUMN REF_SENSITIVITY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_SENSITIVITY.CTRL_DB_ID
IS
  'The identifier of the database that owns the record. The meaning of this column may be specific to the entity.' ;
  COMMENT ON COLUMN REF_SENSITIVITY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_SENSITIVITY.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record. For new tables with single-column keys, this column replaces the DB_ID column of the legacy multi-column primary keys.' ;
  COMMENT ON COLUMN REF_SENSITIVITY.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN REF_SENSITIVITY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_SENSITIVITY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_SENSITIVITY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_SENSITIVITY ADD CONSTRAINT PK_REF_SENSITIVITY PRIMARY KEY ( SENSITIVITY_CD ) ;


CREATE TABLE REF_SERVICE_TYPE
  (
    SERVICE_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SERVICE_TYPE_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_SERVICE_TYPE ADD CHECK ( SERVICE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SERVICE_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_SERVICE_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_SERVICE_TYPE
IS
  '[EXTENDABLE] The list of service types, such as inspection, overhaul, modification, etc., that a vendor can be approved for.' ;
  COMMENT ON COLUMN REF_SERVICE_TYPE.SERVICE_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_SERVICE_TYPE.SERVICE_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_SERVICE_TYPE.DESC_SDESC
IS
  'Short description of the service type.' ;
  COMMENT ON COLUMN REF_SERVICE_TYPE.DESC_LDESC
IS
  'Long descirption of the service type.' ;
  COMMENT ON COLUMN REF_SERVICE_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_SERVICE_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_SERVICE_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_SERVICE_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_SERVICE_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_SERVICE_TYPE ADD CONSTRAINT PK_REF_SERVICE_TYPE PRIMARY KEY ( SERVICE_TYPE_DB_ID, SERVICE_TYPE_CD ) ;


CREATE TABLE REF_SEV_TYPE
  (
    SEV_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SEV_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC     VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC     VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_SEV_TYPE ADD CHECK ( SEV_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SEV_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_SEV_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_SEV_TYPE
IS
  'Required system definitions for severity of a fault: UNKNOWN, MEL, AOG, MINOR, BLKOUT. ' ;
ALTER TABLE REF_SEV_TYPE ADD CONSTRAINT "pk_REF_SEV_TYPE" PRIMARY KEY ( SEV_TYPE_DB_ID, SEV_TYPE_CD ) ;


CREATE TABLE REF_SHIPMENT_REASON
  (
    SHIPMENT_REASON_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SHIPMENT_REASON_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    SHIPMENT_TYPE_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    SHIPMENT_TYPE_CD      VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC            VARCHAR2 (30) NOT NULL DEFERRABLE ,
    DESC_LDESC            VARCHAR2 (4000) ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_SHIPMENT_REASON ADD CHECK ( SHIPMENT_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SHIPMENT_REASON ADD CHECK ( SHIPMENT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SHIPMENT_REASON ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_SHIPMENT_REASON ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_SHIPMENT_REASON
IS
  '[EXTENDABLE] The list of shipment reasons that can be assigned when creating a shipment. There can be multiple shipment reasons for each shipment type. Some examples of shipment reasons are stock replenishment, for a repair to be performed, for a borrow return, etc.' ;
  COMMENT ON COLUMN REF_SHIPMENT_REASON.SHIPMENT_REASON_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_SHIPMENT_REASON.SHIPMENT_REASON_CD
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN REF_SHIPMENT_REASON.SHIPMENT_TYPE_DB_ID
IS
  'FK to REF_SHIPMENT_TYPE.' ;
  COMMENT ON COLUMN REF_SHIPMENT_REASON.SHIPMENT_TYPE_CD
IS
  'FK to REF_SHIPMENT_TYPE.' ;
  COMMENT ON COLUMN REF_SHIPMENT_REASON.DESC_SDESC
IS
  'Short description of the shipment reason.' ;
  COMMENT ON COLUMN REF_SHIPMENT_REASON.DESC_LDESC
IS
  'Long description of the shipment reason.' ;
  COMMENT ON COLUMN REF_SHIPMENT_REASON.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_SHIPMENT_REASON.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_SHIPMENT_REASON.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_SHIPMENT_REASON.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_SHIPMENT_REASON.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_SHIPMENT_REASON ADD CONSTRAINT "pk_REF_SHIPMENT_REASON" PRIMARY KEY ( SHIPMENT_REASON_DB_ID, SHIPMENT_REASON_CD ) ;


CREATE TABLE REF_SHIPMENT_TYPE
  (
    SHIPMENT_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SHIPMENT_TYPE_CD    VARCHAR2 (8) CONSTRAINT NN_REFSHPMENTTP_SHIPMNTTYPCD NOT NULL DEFERRABLE ,
    BITMAP_DB_ID        NUMBER (10) ,
    BITMAP_TAG          NUMBER (10) ,
    DESC_SDESC          VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC          VARCHAR2 (4000) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_SHIPMENT_TYPE ADD CHECK ( SHIPMENT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SHIPMENT_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SHIPMENT_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SHIPMENT_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_SHIPMENT_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_SHIPMENT_TYPE
IS
  'The list of shipment types such as stock transfer, return to vendor, loaner return, etc.' ;
  COMMENT ON COLUMN REF_SHIPMENT_TYPE.SHIPMENT_TYPE_DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN REF_SHIPMENT_TYPE.SHIPMENT_TYPE_CD
IS
  'A unique, user entered value that identifies the reference term.' ;
  COMMENT ON COLUMN REF_SHIPMENT_TYPE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_SHIPMENT_TYPE.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_SHIPMENT_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.
' ;
  COMMENT ON COLUMN REF_SHIPMENT_TYPE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_SHIPMENT_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_SHIPMENT_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_SHIPMENT_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_SHIPMENT_TYPE.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_SHIPMENT_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_SHIPMENT_TYPE ADD CONSTRAINT PK_REF_SHIPMENT_TYPE PRIMARY KEY ( SHIPMENT_TYPE_DB_ID, SHIPMENT_TYPE_CD ) ;


CREATE TABLE REF_SHIPPING_INSTR
  (
    SHIPPING_INSTR_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SHIPPING_INSTR_CD    VARCHAR2 (8) CONSTRAINT NN_SHIPINSTCD NOT NULL DEFERRABLE ,
    BITMAP_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG           NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC           VARCHAR2 (80) ,
    DESC_LDESC           VARCHAR2 (4000) ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_SHIPPING_INSTR ADD CHECK ( SHIPPING_INSTR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SHIPPING_INSTR ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SHIPPING_INSTR ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SHIPPING_INSTR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_SHIPPING_INSTR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_SHIPPING_INSTR
IS
  '[EXTENDABLE] Storage for special shipping instructions, e.g. for hazardous materials. Suggested values are provided, but this data may be fully customized by the operator. ' ;
  COMMENT ON COLUMN REF_SHIPPING_INSTR.SHIPPING_INSTR_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_SHIPPING_INSTR.SHIPPING_INSTR_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_SHIPPING_INSTR.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_SHIPPING_INSTR.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_SHIPPING_INSTR.DESC_SDESC
IS
  'Short description of the shipping instructions.' ;
  COMMENT ON COLUMN REF_SHIPPING_INSTR.DESC_LDESC
IS
  'Long description of the shipping instructions.' ;
  COMMENT ON COLUMN REF_SHIPPING_INSTR.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_SHIPPING_INSTR.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_SHIPPING_INSTR.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_SHIPPING_INSTR.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_SHIPPING_INSTR.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_SHIPPING_INSTR ADD CONSTRAINT "pk_REF_SHIPPING_INSTR" PRIMARY KEY ( SHIPPING_INSTR_DB_ID, SHIPPING_INSTR_CD ) ;


CREATE TABLE REF_SHIP_SEGMENT_STATUS
  (
    SEGMENT_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SEGMENT_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC           VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC           VARCHAR2 (4000) ,
    USER_CD              VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_SHIP_SEGMENT_STATUS ADD CHECK ( SEGMENT_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SHIP_SEGMENT_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_SHIP_SEGMENT_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_SHIP_SEGMENT_STATUS
IS
  'This table contains the possible statuses for a shipping segment.' ;
  COMMENT ON COLUMN REF_SHIP_SEGMENT_STATUS.SEGMENT_STATUS_CD
IS
  'This is the shipment segment status code.' ;
  COMMENT ON COLUMN REF_SHIP_SEGMENT_STATUS.DESC_SDESC
IS
  'This is the shipment segment status description.' ;
  COMMENT ON COLUMN REF_SHIP_SEGMENT_STATUS.DESC_LDESC
IS
  'This is the shipment segment status long description.' ;
  COMMENT ON COLUMN REF_SHIP_SEGMENT_STATUS.USER_CD
IS
  'This is the shipment segment status user code.' ;
  COMMENT ON COLUMN REF_SHIP_SEGMENT_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_SHIP_SEGMENT_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_SHIP_SEGMENT_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_SHIP_SEGMENT_STATUS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_SHIP_SEGMENT_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_SHIP_SEGMENT_STATUS ADD CONSTRAINT PK_REF_SHIP_SEGMENT_STATUS PRIMARY KEY ( SEGMENT_STATUS_DB_ID, SEGMENT_STATUS_CD ) ;


CREATE TABLE REF_SIZE_CLASS
  (
    SIZE_CLASS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SIZE_CLASS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC       VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC       VARCHAR2 (4000) ,
    BITMAP_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG       NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_SIZE_CLASS ADD CHECK ( SIZE_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SIZE_CLASS ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SIZE_CLASS ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SIZE_CLASS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_SIZE_CLASS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_SIZE_CLASS
IS
  '[EXTENDABLE] The list of shipment size classes (broadly categorized dimensions and weights) that can be selected when creating or editing a shipment.' ;
  COMMENT ON COLUMN REF_SIZE_CLASS.SIZE_CLASS_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_SIZE_CLASS.SIZE_CLASS_CD
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN REF_SIZE_CLASS.DESC_SDESC
IS
  'Short description of the size class.' ;
  COMMENT ON COLUMN REF_SIZE_CLASS.DESC_LDESC
IS
  'Long description of the size class.' ;
  COMMENT ON COLUMN REF_SIZE_CLASS.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_SIZE_CLASS.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_SIZE_CLASS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_SIZE_CLASS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_SIZE_CLASS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_SIZE_CLASS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_SIZE_CLASS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_SIZE_CLASS ADD CONSTRAINT "pk_REF_SIZE_CLASS" PRIMARY KEY ( SIZE_CLASS_DB_ID, SIZE_CLASS_CD ) ;


CREATE TABLE REF_SPEC2K_CMND
  (
    SPEC2K_CMND_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SPEC2K_CMND_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC        VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC        VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_SPEC2K_CMND ADD CHECK ( SPEC2K_CMND_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SPEC2K_CMND ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_SPEC2K_CMND ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_SPEC2K_CMND
IS
  'The list of Spec 2000 commands that can be enabled or disabled for a vendor.' ;
  COMMENT ON COLUMN REF_SPEC2K_CMND.SPEC2K_CMND_DB_ID
IS
  'This is the Spec 2000 command primary key. ' ;
  COMMENT ON COLUMN REF_SPEC2K_CMND.SPEC2K_CMND_CD
IS
  'This is the Spec 2000 command primary key. ' ;
  COMMENT ON COLUMN REF_SPEC2K_CMND.DESC_SDESC
IS
  'Short description of the Spec 2000 command. ' ;
  COMMENT ON COLUMN REF_SPEC2K_CMND.DESC_LDESC
IS
  'Long description of the Spec 2000 command. ' ;
  COMMENT ON COLUMN REF_SPEC2K_CMND.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_SPEC2K_CMND.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_SPEC2K_CMND.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_SPEC2K_CMND.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_SPEC2K_CMND.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_SPEC2K_CMND ADD CONSTRAINT PK_REF_SPEC2K_CMND PRIMARY KEY ( SPEC2K_CMND_DB_ID, SPEC2K_CMND_CD ) ;


CREATE TABLE REF_SPEC2K_CUST
  (
    SPEC2K_CUST_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SPEC2K_CUST_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC        VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC        VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    DEFAULT_BOOL      NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_SPEC2K_CUST ADD CHECK ( SPEC2K_CUST_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SPEC2K_CUST ADD CHECK ( DEFAULT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_SPEC2K_CUST ADD CHECK ( RSTAT_CD     IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_SPEC2K_CUST ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_SPEC2K_CUST
IS
  '[EXTENDABLE] A custom definition of operators used by Spec 2000. For most deployments, a single customer record will be created here.' ;
  COMMENT ON COLUMN REF_SPEC2K_CUST.SPEC2K_CUST_DB_ID
IS
  'This is the customer code refterm primary key. ' ;
  COMMENT ON COLUMN REF_SPEC2K_CUST.SPEC2K_CUST_CD
IS
  'This is the customer code refterm primary key. ' ;
  COMMENT ON COLUMN REF_SPEC2K_CUST.DESC_SDESC
IS
  'Short description of the customer. ' ;
  COMMENT ON COLUMN REF_SPEC2K_CUST.DESC_LDESC
IS
  'Long description of the customer. ' ;
  COMMENT ON COLUMN REF_SPEC2K_CUST.DEFAULT_BOOL
IS
  'Default customer used for transmitting/receiving external data. ' ;
  COMMENT ON COLUMN REF_SPEC2K_CUST.CREATION_DT
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_SPEC2K_CUST.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_SPEC2K_CUST.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_SPEC2K_CUST.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_SPEC2K_CUST ADD CONSTRAINT PK_REF_SPEC2K_CUST PRIMARY KEY ( SPEC2K_CUST_DB_ID, SPEC2K_CUST_CD ) ;


CREATE TABLE REF_STAGE_REASON
  (
    STAGE_REASON_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    STAGE_REASON_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    EVENT_STATUS_DB_ID NUMBER (10) ,
    EVENT_STATUS_CD    VARCHAR2 (16) ,
    BITMAP_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG         NUMBER (10) NOT NULL DEFERRABLE ,
    USER_REASON_CD     VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_STAGE_REASON ADD CHECK ( STAGE_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_STAGE_REASON ADD CHECK ( EVENT_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_STAGE_REASON ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_STAGE_REASON ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_STAGE_REASON ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_STAGE_REASON ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_STAGE_REASON
IS
  '[EXTENDABLE] Lifecycle Stage Reasons: Defines potential reasons for a workflow change for any event type. The system provides mandatory records out of the box but additional records may be added.' ;
  COMMENT ON COLUMN REF_STAGE_REASON.STAGE_REASON_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_STAGE_REASON.STAGE_REASON_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_STAGE_REASON.EVENT_STATUS_DB_ID
IS
  'FK to ref_event_status.  Allows for the association of event reasons with event statuses.' ;
  COMMENT ON COLUMN REF_STAGE_REASON.EVENT_STATUS_CD
IS
  'FK to ref_event_status.  Allows for the association of event reasons with event statuses.' ;
  COMMENT ON COLUMN REF_STAGE_REASON.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_STAGE_REASON.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_STAGE_REASON.USER_REASON_CD
IS
  'A user entered value that allows a customer to use their own terminology for the Maintenix event model.' ;
  COMMENT ON COLUMN REF_STAGE_REASON.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_STAGE_REASON.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_STAGE_REASON.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_STAGE_REASON.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_STAGE_REASON.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_STAGE_REASON.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_STAGE_REASON.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_STAGE_REASON ADD CONSTRAINT PK_REF_STAGE_REASON PRIMARY KEY ( STAGE_REASON_DB_ID, STAGE_REASON_CD ) ;


CREATE TABLE REF_STATE
  (
    COUNTRY_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    COUNTRY_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    STATE_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG     NUMBER (10) NOT NULL DEFERRABLE ,
    STATE_NAME     VARCHAR2 (40) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_STATE ADD CHECK ( COUNTRY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_STATE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_STATE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_STATE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_STATE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_STATE
IS
  '[EXTENDABLE] The states or provinces for each country.' ;
  COMMENT ON COLUMN REF_STATE.COUNTRY_DB_ID
IS
  'FK to REF_COUNTRY.' ;
  COMMENT ON COLUMN REF_STATE.COUNTRY_CD
IS
  'FK to REF_COUNTRY.' ;
  COMMENT ON COLUMN REF_STATE.STATE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_STATE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_STATE.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_STATE.STATE_NAME
IS
  'The name of the state or province.' ;
  COMMENT ON COLUMN REF_STATE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_STATE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_STATE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_STATE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_STATE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_STATE ADD CONSTRAINT PK_REF_STATE PRIMARY KEY ( COUNTRY_DB_ID, COUNTRY_CD, STATE_CD ) ;


CREATE TABLE REF_STEP_STATUS
  (
    STEP_STATUS_CD VARCHAR2 (20) NOT NULL DEFERRABLE ,
    DISPLAY_NAME   VARCHAR2 (20) NOT NULL DEFERRABLE ,
    HISTORIC_BOOL  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ORD_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO    NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_STEP_STATUS ADD CHECK ( HISTORIC_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_STEP_STATUS ADD CHECK ( ORD_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_STEP_STATUS ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_STEP_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_STEP_STATUS ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_STEP_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_STEP_STATUS
IS
  'This table contains the status possibilities of a step on a job card.' ;
  COMMENT ON COLUMN REF_STEP_STATUS.STEP_STATUS_CD
IS
  'Primary key.' ;
  COMMENT ON COLUMN REF_STEP_STATUS.DISPLAY_NAME
IS
  'Name for the term.' ;
  COMMENT ON COLUMN REF_STEP_STATUS.HISTORIC_BOOL
IS
  'Indicates if the status is historic.' ;
  COMMENT ON COLUMN REF_STEP_STATUS.ORD_ID
IS
  'The order id.' ;
  COMMENT ON COLUMN REF_STEP_STATUS.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN REF_STEP_STATUS.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN REF_STEP_STATUS.CREATION_DT
IS
  'The data and time at which the record was inserted.' ;
  COMMENT ON COLUMN REF_STEP_STATUS.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN REF_STEP_STATUS.REVISION_DT
IS
  'The data and time at which the record was updated.' ;
  COMMENT ON COLUMN REF_STEP_STATUS.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN REF_STEP_STATUS.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
ALTER TABLE REF_STEP_STATUS ADD CONSTRAINT PK_REF_STEP_STATUS PRIMARY KEY ( STEP_STATUS_CD ) ;


CREATE TABLE REF_STOCK_DIST_REQ_STATUS
  (
    STATUS_CD      VARCHAR2 (20) NOT NULL ,
    STATUS_DB_ID   NUMBER (10) NOT NULL ,
    DESC_SDESC     VARCHAR2 (80) ,
    DESC_LDESC     VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE REF_STOCK_DIST_REQ_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
COMMENT ON TABLE REF_STOCK_DIST_REQ_STATUS
IS
  '[NOT EXTENDABLE] New Ref table to store the 0-level status codes for Stock Distribution Request such as OPEN/INPROGRESS/PICKED/COMPLETED/CANCELLED.' ;
  COMMENT ON COLUMN REF_STOCK_DIST_REQ_STATUS.STATUS_CD
IS
  'A unique value to indicate the status code for stock distribution request. ' ;
  COMMENT ON COLUMN REF_STOCK_DIST_REQ_STATUS.STATUS_DB_ID
IS
  'Identifies the creation database for the status record and forms part of primary key.' ;
  COMMENT ON COLUMN REF_STOCK_DIST_REQ_STATUS.DESC_SDESC
IS
  'This is the short description of possible statuses for the stock distribution request.' ;
  COMMENT ON COLUMN REF_STOCK_DIST_REQ_STATUS.DESC_LDESC
IS
  'This is the long  description of possible statuses for the stock distribution request.' ;
  COMMENT ON COLUMN REF_STOCK_DIST_REQ_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_STOCK_DIST_REQ_STATUS.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN REF_STOCK_DIST_REQ_STATUS.CTRL_DB_ID
IS
  'The identifier of the database that owns the record. The meaning of this column may be specific to the entity.' ;
  COMMENT ON COLUMN REF_STOCK_DIST_REQ_STATUS.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN REF_STOCK_DIST_REQ_STATUS.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN REF_STOCK_DIST_REQ_STATUS.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN REF_STOCK_DIST_REQ_STATUS.REVISION_USER
IS
  'The name of the user that last updated the record' ;
ALTER TABLE REF_STOCK_DIST_REQ_STATUS ADD CONSTRAINT PK_REF_STOCK_DIST_REQ_STATUS PRIMARY KEY ( STATUS_CD, STATUS_DB_ID ) ;


CREATE TABLE REF_STOCK_LOW_ACTN
  (
    STOCK_LOW_ACTN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    STOCK_LOW_ACTN_CD    VARCHAR2 (8) CONSTRAINT NN_STCLWACTNCD NOT NULL DEFERRABLE ,
    DESC_SDESC           VARCHAR2 (80) ,
    DESC_LDESC           VARCHAR2 (4000) ,
    PROC_NAME_LDESC      VARCHAR2 (4000) ,
    BITMAP_DB_ID         NUMBER (10) ,
    BITMAP_TAG           NUMBER (10) ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) CONSTRAINT NN_REVDBID NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_STOCK_LOW_ACTN ADD CHECK ( STOCK_LOW_ACTN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_STOCK_LOW_ACTN ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_STOCK_LOW_ACTN ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_STOCK_LOW_ACTN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_STOCK_LOW_ACTN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_STOCK_LOW_ACTN
IS
  'This table contains the list of actions to be taken when the stock at a supply location falls below the reorder level.' ;
  COMMENT ON COLUMN REF_STOCK_LOW_ACTN.STOCK_LOW_ACTN_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_STOCK_LOW_ACTN.STOCK_LOW_ACTN_CD
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN REF_STOCK_LOW_ACTN.DESC_SDESC
IS
  'Short description of the Stock low action.' ;
  COMMENT ON COLUMN REF_STOCK_LOW_ACTN.DESC_LDESC
IS
  'Long description of the Stock low action.' ;
  COMMENT ON COLUMN REF_STOCK_LOW_ACTN.PROC_NAME_LDESC
IS
  'Procedure description.' ;
  COMMENT ON COLUMN REF_STOCK_LOW_ACTN.BITMAP_DB_ID
IS
  'FK to ref_bitmap.' ;
  COMMENT ON COLUMN REF_STOCK_LOW_ACTN.BITMAP_TAG
IS
  'FK to ref_bitmap.' ;
  COMMENT ON COLUMN REF_STOCK_LOW_ACTN.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_STOCK_LOW_ACTN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_STOCK_LOW_ACTN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_STOCK_LOW_ACTN.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_STOCK_LOW_ACTN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_STOCK_LOW_ACTN ADD CONSTRAINT PK_REF_STOCK_LOW_ACTN PRIMARY KEY ( STOCK_LOW_ACTN_DB_ID, STOCK_LOW_ACTN_CD ) ;


CREATE TABLE REF_STORAGE_INSTR
  (
    STORAGE_INSTR_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    STORAGE_INSTR_CD    VARCHAR2 (8) CONSTRAINT NN_STRINSTCD NOT NULL DEFERRABLE ,
    BITMAP_DB_ID        NUMBER (10) ,
    BITMAP_TAG          NUMBER (10) ,
    DESC_SDESC          VARCHAR2 (80) ,
    DESC_LDESC          VARCHAR2 (4000) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_STORAGE_INSTR ADD CHECK ( STORAGE_INSTR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_STORAGE_INSTR ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_STORAGE_INSTR ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_STORAGE_INSTR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_STORAGE_INSTR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_STORAGE_INSTR
IS
  '[EXTENDABLE] This table contains the list of special storage instructions and is found when editing a part. For example, WATER (Water Tight Storage)' ;
  COMMENT ON COLUMN REF_STORAGE_INSTR.STORAGE_INSTR_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_STORAGE_INSTR.STORAGE_INSTR_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_STORAGE_INSTR.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_STORAGE_INSTR.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_STORAGE_INSTR.DESC_SDESC
IS
  'Short description of the storage instructions.' ;
  COMMENT ON COLUMN REF_STORAGE_INSTR.DESC_LDESC
IS
  'Long description of the storage instructions.' ;
  COMMENT ON COLUMN REF_STORAGE_INSTR.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_STORAGE_INSTR.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_STORAGE_INSTR.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_STORAGE_INSTR.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_STORAGE_INSTR.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_STORAGE_INSTR ADD CONSTRAINT "pk_REF_STORAGE_INSTR" PRIMARY KEY ( STORAGE_INSTR_DB_ID, STORAGE_INSTR_CD ) ;


CREATE TABLE REF_SUPPLY_CHAIN
  (
    SUPPLY_CHAIN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SUPPLY_CHAIN_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_SUPPLY_CHAIN ADD CHECK ( SUPPLY_CHAIN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_SUPPLY_CHAIN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE REF_SUPPLY_CHAIN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_SUPPLY_CHAIN
IS
  'The codes that denote whether material requests are fulfilled internally or externally.' ;
  COMMENT ON COLUMN REF_SUPPLY_CHAIN.SUPPLY_CHAIN_DB_ID
IS
  'The primary key of ref_supply_chain.' ;
  COMMENT ON COLUMN REF_SUPPLY_CHAIN.SUPPLY_CHAIN_CD
IS
  'A unique value that defines the PK.' ;
  COMMENT ON COLUMN REF_SUPPLY_CHAIN.DESC_SDESC
IS
  'Short description of the supply chain.' ;
  COMMENT ON COLUMN REF_SUPPLY_CHAIN.DESC_LDESC
IS
  'Long description of the supply chain.' ;
  COMMENT ON COLUMN REF_SUPPLY_CHAIN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_SUPPLY_CHAIN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_SUPPLY_CHAIN.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_SUPPLY_CHAIN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_SUPPLY_CHAIN ADD CONSTRAINT PK_REF_SUPPLY_CHAIN PRIMARY KEY ( SUPPLY_CHAIN_DB_ID, SUPPLY_CHAIN_CD ) ;
ALTER TABLE REF_SUPPLY_CHAIN ADD CONSTRAINT IX_REFSUPPCHAINCD_UNQ UNIQUE ( SUPPLY_CHAIN_CD ) ;


CREATE TABLE REF_TASK_ADVISORY_TYPE
  (
    TASK_ADVISORY_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ADVISORY_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC               VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC               VARCHAR2 (4000) ,
    USER_CD                  VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_TASK_ADVISORY_TYPE ADD CHECK ( TASK_ADVISORY_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_ADVISORY_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_TASK_ADVISORY_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_TASK_ADVISORY_TYPE
IS
  'The list of advisories that can be added to a task definition.' ;
  COMMENT ON COLUMN REF_TASK_ADVISORY_TYPE.TASK_ADVISORY_TYPE_DB_ID
IS
  'this is the PK of ref_task_advisory_type.' ;
  COMMENT ON COLUMN REF_TASK_ADVISORY_TYPE.TASK_ADVISORY_TYPE_CD
IS
  'this is the PK of ref_task_advisory_type.' ;
  COMMENT ON COLUMN REF_TASK_ADVISORY_TYPE.DESC_SDESC
IS
  'this is the a short description of ref_task_advisory_type code' ;
  COMMENT ON COLUMN REF_TASK_ADVISORY_TYPE.DESC_LDESC
IS
  'this is the a long description of ref_task_advisory_type code' ;
  COMMENT ON COLUMN REF_TASK_ADVISORY_TYPE.USER_CD
IS
  'this is the code to be displayed to a user in maintenix of ref_task_advisory_type code' ;
ALTER TABLE REF_TASK_ADVISORY_TYPE ADD CONSTRAINT PK_REF_TASK_ADVISORY_TYPE PRIMARY KEY ( TASK_ADVISORY_TYPE_DB_ID, TASK_ADVISORY_TYPE_CD ) ;


CREATE TABLE REF_TASK_CLASS
  (
    TASK_CLASS_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_CLASS_CD            VARCHAR2 (16) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG               NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC               VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC               VARCHAR2 (4000) ,
    AUTO_COMPLETE_BOOL       NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    UNIQUE_BOOL              NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    WORKSCOPE_BOOL           NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CLASS_MODE_CD            VARCHAR2 (8) ,
    NR_EST_BOOL              NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ASSIGNABLE_TO_BLOCK_BOOL NUMBER (1) DEFAULT 1 NOT NULL ,
    ASSIGNABLE_TO_MAINT_BOOL NUMBER (1) DEFAULT 1 NOT NULL ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_TASK_CLASS ADD CHECK ( TASK_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_CLASS ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_CLASS ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_CLASS ADD CHECK ( AUTO_COMPLETE_BOOL       IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_TASK_CLASS ADD CHECK ( UNIQUE_BOOL              IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_TASK_CLASS ADD CHECK ( WORKSCOPE_BOOL           IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_TASK_CLASS ADD CHECK ( NR_EST_BOOL              IN (0, 1)) DEFERRABLE ;
ALTER TABLE REF_TASK_CLASS ADD CHECK ( ASSIGNABLE_TO_BLOCK_BOOL IN (0, 1)) ;
ALTER TABLE REF_TASK_CLASS ADD CHECK ( ASSIGNABLE_TO_MAINT_BOOL IN (0, 1)) ;
ALTER TABLE REF_TASK_CLASS ADD CHECK ( RSTAT_CD                 IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_TASK_CLASS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_TASK_CLASS
IS
  '[EXTENDABLE] The first and most generalized classification level for task definitions (Blocks, Reference Documents, Requirements, Job Cards, Master Panel Cards) and tasks (including Ad-Hoc tasks, Work Packages and Component Repair Orders). For example, removal, installation, modification, inspection, servicing.' ;
  COMMENT ON COLUMN REF_TASK_CLASS.TASK_CLASS_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_TASK_CLASS.TASK_CLASS_CD
IS
  'A unique value that defines the PK.' ;
  COMMENT ON COLUMN REF_TASK_CLASS.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_TASK_CLASS.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_TASK_CLASS.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_TASK_CLASS.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_TASK_CLASS.AUTO_COMPLETE_BOOL
IS
  'Indicates that when the last sub-task is completed that the parent task should be rendered complete.
' ;
  COMMENT ON COLUMN REF_TASK_CLASS.UNIQUE_BOOL
IS
  'The UNIQUE_BOOL is used to indicate that an inventory cannot have more than one instance of a "active" task based on this task class. "Active" in this case means, not histroic and not FORECAST.' ;
  COMMENT ON COLUMN REF_TASK_CLASS.WORKSCOPE_BOOL
IS
  'The WORKSCOPE_BOOL is used to indicate that a task based on this task definition is part of Check/Work Order worscope.' ;
  COMMENT ON COLUMN REF_TASK_CLASS.CLASS_MODE_CD
IS
  'Identifies task classes as job cards or blocks or requirements.' ;
  COMMENT ON COLUMN REF_TASK_CLASS.ASSIGNABLE_TO_BLOCK_BOOL
IS
  'Indicates if this type of task class can be added to a block; 0 being No and 1 being Yes.' ;
  COMMENT ON COLUMN REF_TASK_CLASS.ASSIGNABLE_TO_MAINT_BOOL
IS
  'Indicates if this type of task class can be added to a Maintenance Program; 0 being No and 1 being Yes.' ;
  COMMENT ON COLUMN REF_TASK_CLASS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_TASK_CLASS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_TASK_CLASS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_TASK_CLASS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_TASK_CLASS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_TASK_CLASS ADD CONSTRAINT PK_REF_TASK_CLASS PRIMARY KEY ( TASK_CLASS_DB_ID, TASK_CLASS_CD ) ;


CREATE TABLE REF_TASK_DEF_DISPOSITION
  (
    TASK_DEF_DISPOSITION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEF_DISPOSITION_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC                 VARCHAR2 (80) ,
    DESC_LDESC                 VARCHAR2 (4000) ,
    RSTAT_CD                   NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT                DATE NOT NULL DEFERRABLE ,
    REVISION_DT                DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER              VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_TASK_DEF_DISPOSITION ADD CHECK ( TASK_DEF_DISPOSITION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_DEF_DISPOSITION ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_TASK_DEF_DISPOSITION ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_TASK_DEF_DISPOSITION
IS
  '[EXTENDABLE] The list of actions that can be taken when creating or editing a reference document. An example of an action could be that a change described in the reference document requires the creation of a new Engineering Order.' ;
ALTER TABLE REF_TASK_DEF_DISPOSITION ADD CONSTRAINT PK_REF_TASK_DEF_DISPOSITION PRIMARY KEY ( TASK_DEF_DISPOSITION_DB_ID, TASK_DEF_DISPOSITION_CD ) ;


CREATE TABLE REF_TASK_DEF_ISSUE_BY
  (
    TASK_DEF_ISSUE_BY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEF_ISSUE_BY_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC              VARCHAR2 (80) ,
    DESC_LDESC              VARCHAR2 (4000) ,
    RSTAT_CD                NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER           VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_TASK_DEF_ISSUE_BY ADD CHECK ( TASK_DEF_ISSUE_BY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_DEF_ISSUE_BY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_TASK_DEF_ISSUE_BY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_TASK_DEF_ISSUE_BY
IS
  '[EXTENDABLE] The list of Issued by options which can be selected when creating or editing a reference document.' ;
ALTER TABLE REF_TASK_DEF_ISSUE_BY ADD CONSTRAINT PK_REF_TASK_DEF_ISSUE_BY PRIMARY KEY ( TASK_DEF_ISSUE_BY_DB_ID, TASK_DEF_ISSUE_BY_CD ) ;


CREATE TABLE REF_TASK_DEF_STATUS
  (
    TASK_DEF_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEF_STATUS_CD    VARCHAR2 (8) CONSTRAINT NN_REFTSKDFSTUS_TASKDEFSTACD NOT NULL DEFERRABLE ,
    BITMAP_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG            NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC            VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC            VARCHAR2 (4000) ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_TASK_DEF_STATUS ADD CHECK ( TASK_DEF_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_DEF_STATUS ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_DEF_STATUS ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_DEF_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_TASK_DEF_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_TASK_DEF_STATUS
IS
  'The workflow steps for a Baseline Task (maintenance requirement).' ;
  COMMENT ON COLUMN REF_TASK_DEF_STATUS.TASK_DEF_STATUS_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_TASK_DEF_STATUS.TASK_DEF_STATUS_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_TASK_DEF_STATUS.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_TASK_DEF_STATUS.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_TASK_DEF_STATUS.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_TASK_DEF_STATUS.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_TASK_DEF_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_TASK_DEF_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_TASK_DEF_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_TASK_DEF_STATUS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_TASK_DEF_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_TASK_DEF_STATUS ADD CONSTRAINT PK_REF_TASK_DEF_STATUS PRIMARY KEY ( TASK_DEF_STATUS_DB_ID, TASK_DEF_STATUS_CD ) ;


CREATE TABLE REF_TASK_DEP_ACTION
  (
    TASK_DEP_ACTION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEP_ACTION_CD    VARCHAR2 (10) CONSTRAINT NN_RFTASKDEPACTION_TSKDPACTcd NOT NULL DEFERRABLE ,
    BITMAP_DB_ID          NUMBER (10) ,
    BITMAP_TAG            NUMBER (10) ,
    DESC_SDESC            VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC            VARCHAR2 (4000) ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_TASK_DEP_ACTION ADD CHECK ( TASK_DEP_ACTION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_DEP_ACTION ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_DEP_ACTION ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_DEP_ACTION ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_TASK_DEP_ACTION ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_TASK_DEP_ACTION
IS
  '[EXTENDABLE] Task Dependency References. Defines the type of resulting actions for each task dependency.' ;
  COMMENT ON COLUMN REF_TASK_DEP_ACTION.TASK_DEP_ACTION_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_TASK_DEP_ACTION.TASK_DEP_ACTION_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_TASK_DEP_ACTION.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_TASK_DEP_ACTION.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_TASK_DEP_ACTION.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_TASK_DEP_ACTION.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_TASK_DEP_ACTION.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_TASK_DEP_ACTION.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_TASK_DEP_ACTION.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_TASK_DEP_ACTION.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_TASK_DEP_ACTION.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_TASK_DEP_ACTION ADD CONSTRAINT PK_REF_TASK_DEP_ACTION PRIMARY KEY ( TASK_DEP_ACTION_DB_ID, TASK_DEP_ACTION_CD ) ;


CREATE TABLE REF_TASK_MUST_REMOVE
  (
    TASK_MUST_REMOVE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_MUST_REMOVE_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    USER_CD                VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_SDESC             VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC             VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_TASK_MUST_REMOVE ADD CHECK ( TASK_MUST_REMOVE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_MUST_REMOVE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_TASK_MUST_REMOVE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_TASK_MUST_REMOVE
IS
  'The list of options (N/A, Off Parent, Off-Wing) that determine whether or not a component must be removed for the part transformation work to be completed.' ;
  COMMENT ON COLUMN REF_TASK_MUST_REMOVE.TASK_MUST_REMOVE_DB_ID
IS
  'DB ID for an off-wing or off-parent task in the task_task table.' ;
  COMMENT ON COLUMN REF_TASK_MUST_REMOVE.TASK_MUST_REMOVE_CD
IS
  'Code to classify an off-wing or off-parent task in the task_task table. Values can be NA, OFFPARENT and OFFWING.' ;
ALTER TABLE REF_TASK_MUST_REMOVE ADD CONSTRAINT PK_REF_TASK_MUST_REMOVE PRIMARY KEY ( TASK_MUST_REMOVE_DB_ID, TASK_MUST_REMOVE_CD ) ;


CREATE TABLE REF_TASK_ORIGINATOR
  (
    TASK_ORIGINATOR_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ORIGINATOR_CD    VARCHAR2 (8) CONSTRAINT NN_RFTSKORIGINATOR_TASKORIGICD NOT NULL DEFERRABLE ,
    BITMAP_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG            NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC            VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC            VARCHAR2 (4000) ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE CONSTRAINT NN_REFTSKORIGINTR_REVISIONDT NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_TASK_ORIGINATOR ADD CHECK ( TASK_ORIGINATOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_ORIGINATOR ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_ORIGINATOR ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_ORIGINATOR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_TASK_ORIGINATOR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_TASK_ORIGINATOR
IS
  '[EXTENDABLE] The list of originators for all task definitions (Blocks, Reference Documents, Requirements, Job Cards, Master Panel Cards) and ad-hoc tasks in an approved maintenance program. Some example of originators are customer requirements, ETOPS requirements, aircraft maintenance manual, etc.
' ;
  COMMENT ON COLUMN REF_TASK_ORIGINATOR.TASK_ORIGINATOR_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_TASK_ORIGINATOR.TASK_ORIGINATOR_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_TASK_ORIGINATOR.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_TASK_ORIGINATOR.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_TASK_ORIGINATOR.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_TASK_ORIGINATOR.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_TASK_ORIGINATOR.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_TASK_ORIGINATOR.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_TASK_ORIGINATOR.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_TASK_ORIGINATOR.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_TASK_ORIGINATOR.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_TASK_ORIGINATOR ADD CONSTRAINT PK_REF_TASK_ORIGINATOR PRIMARY KEY ( TASK_ORIGINATOR_DB_ID, TASK_ORIGINATOR_CD ) ;


CREATE TABLE REF_TASK_PRIORITY
  (
    TASK_PRIORITY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_PRIORITY_CD    VARCHAR2 (8) CONSTRAINT NN_REFTASKPRIORTY_TSKPRIRITCD NOT NULL DEFERRABLE ,
    TASK_PRIORITY_ORD   NUMBER DEFAULT 0 ,
    BITMAP_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG          NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC          VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC          VARCHAR2 (4000) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_TASK_PRIORITY ADD CHECK ( TASK_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_PRIORITY ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_PRIORITY ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_PRIORITY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_TASK_PRIORITY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_TASK_PRIORITY
IS
  '[EXTENDABLE] The priorities that a line controller or supervisor can assign to a task.' ;
  COMMENT ON COLUMN REF_TASK_PRIORITY.TASK_PRIORITY_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_TASK_PRIORITY.TASK_PRIORITY_CD
IS
  'A unique value that defines the PK.' ;
  COMMENT ON COLUMN REF_TASK_PRIORITY.TASK_PRIORITY_ORD
IS
  'This column allows you to setup priority order for the task priorities. 0 is neutral. Negative is low priority, anything above 0 is high priority. ' ;
  COMMENT ON COLUMN REF_TASK_PRIORITY.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_TASK_PRIORITY.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_TASK_PRIORITY.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_TASK_PRIORITY.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_TASK_PRIORITY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_TASK_PRIORITY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_TASK_PRIORITY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_TASK_PRIORITY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_TASK_PRIORITY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_TASK_PRIORITY ADD CONSTRAINT PK_REF_TASK_PRIORITY PRIMARY KEY ( TASK_PRIORITY_DB_ID, TASK_PRIORITY_CD ) ;


CREATE TABLE REF_TASK_REV_REASON
  (
    TASK_REV_REASON_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_REV_REASON_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC            VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC            VARCHAR2 (4000) ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_TASK_REV_REASON ADD CHECK ( TASK_REV_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_REV_REASON ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_TASK_REV_REASON ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_TASK_REV_REASON
IS
  '[EXTENDABLE] The list of revision reasons for task definitions (Blocks, Reference Documents, Requirements, Job Cards, Master Panel Cards) and maintenance programs.' ;
  COMMENT ON COLUMN REF_TASK_REV_REASON.TASK_REV_REASON_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_TASK_REV_REASON.TASK_REV_REASON_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_TASK_REV_REASON.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_TASK_REV_REASON.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_TASK_REV_REASON.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_TASK_REV_REASON.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_TASK_REV_REASON.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_TASK_REV_REASON.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_TASK_REV_REASON.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_TASK_REV_REASON ADD CONSTRAINT PK_REF_TASK_REV_REASON PRIMARY KEY ( TASK_REV_REASON_DB_ID, TASK_REV_REASON_CD ) ;


CREATE TABLE REF_TASK_SCHED_FROM
  (
    TASK_SCHED_FROM_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_SCHED_FROM_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DISPLAY_CODE          VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DISPLAY_NAME          VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DISPLAY_DESC          VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    DISPLAY_ORD           NUMBER (5) NOT NULL DEFERRABLE ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_TASK_SCHED_FROM ADD CHECK ( TASK_SCHED_FROM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_SCHED_FROM ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_TASK_SCHED_FROM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_TASK_SCHED_FROM
IS
  'The list of possible schedule-from options for a task definitions. Tasks, when initialized, are scheduled according to this value, e.g. from the effective date, from the manufactured date, from the received date, from the maintenance program activation date, or even based on completion of a previous task.' ;
  COMMENT ON COLUMN REF_TASK_SCHED_FROM.TASK_SCHED_FROM_CD
IS
  'A code to classify the scheduling option for the task_task table.' ;
  COMMENT ON COLUMN REF_TASK_SCHED_FROM.DISPLAY_CODE
IS
  'A code used for display purposes.' ;
  COMMENT ON COLUMN REF_TASK_SCHED_FROM.DISPLAY_NAME
IS
  'A name used for display purposes.' ;
  COMMENT ON COLUMN REF_TASK_SCHED_FROM.DISPLAY_DESC
IS
  'A detailed description of the reference term.' ;
  COMMENT ON COLUMN REF_TASK_SCHED_FROM.DISPLAY_ORD
IS
  'The sort order of the term when displayed in an ordered list.' ;
  COMMENT ON COLUMN REF_TASK_SCHED_FROM.RSTAT_CD
IS
  'Status of the record' ;
  COMMENT ON COLUMN REF_TASK_SCHED_FROM.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN REF_TASK_SCHED_FROM.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN REF_TASK_SCHED_FROM.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN REF_TASK_SCHED_FROM.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
ALTER TABLE REF_TASK_SCHED_FROM ADD CONSTRAINT PK_REF_TASK_SCHED_FROM PRIMARY KEY ( TASK_SCHED_FROM_DB_ID, TASK_SCHED_FROM_CD ) ;


CREATE TABLE REF_TASK_SUBCLASS
  (
    TASK_SUBCLASS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_SUBCLASS_CD    VARCHAR2 (8) CONSTRAINT NN_RFTSKSUBCLASS_TSKSUBCLASCD NOT NULL DEFERRABLE ,
    TASK_CLASS_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_CLASS_CD       VARCHAR2 (16) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG          NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC          VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC          VARCHAR2 (4000) ,
    USER_SUBCLASS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_TASK_SUBCLASS ADD CHECK ( TASK_SUBCLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_SUBCLASS ADD CHECK ( TASK_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_SUBCLASS ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_SUBCLASS ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TASK_SUBCLASS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_TASK_SUBCLASS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_TASK_SUBCLASS
IS
  '[EXTENDABLE] The list of specialized classification levels for tasks. Some examples are Remove and Repair, Structural Inspection, Painting, Removal, etc.' ;
  COMMENT ON COLUMN REF_TASK_SUBCLASS.TASK_SUBCLASS_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_TASK_SUBCLASS.TASK_SUBCLASS_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_TASK_SUBCLASS.TASK_CLASS_DB_ID
IS
  'FK to REF_TASK_CLASS.' ;
  COMMENT ON COLUMN REF_TASK_SUBCLASS.TASK_CLASS_CD
IS
  'FK to REF_TASK_CLASS.' ;
  COMMENT ON COLUMN REF_TASK_SUBCLASS.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_TASK_SUBCLASS.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_TASK_SUBCLASS.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_TASK_SUBCLASS.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_TASK_SUBCLASS.USER_SUBCLASS_CD
IS
  'User defined task subclass code.' ;
  COMMENT ON COLUMN REF_TASK_SUBCLASS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_TASK_SUBCLASS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_TASK_SUBCLASS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_TASK_SUBCLASS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_TASK_SUBCLASS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_TASK_SUBCLASS ADD CONSTRAINT PK_REF_TASK_SUBCLASS PRIMARY KEY ( TASK_SUBCLASS_DB_ID, TASK_SUBCLASS_CD ) ;


CREATE TABLE REF_TERMS_CONDITIONS
  (
    TERMS_CONDITIONS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TERMS_CONDITIONS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC             VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC             VARCHAR2 (4000) ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_TERMS_CONDITIONS ADD CHECK ( TERMS_CONDITIONS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TERMS_CONDITIONS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_TERMS_CONDITIONS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_TERMS_CONDITIONS
IS
  '[EXTENDABLE] The shipping payment terms and conditions for an invoice. Some examples are Net30, Net60, Payment Plan' ;
  COMMENT ON COLUMN REF_TERMS_CONDITIONS.TERMS_CONDITIONS_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_TERMS_CONDITIONS.TERMS_CONDITIONS_CD
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN REF_TERMS_CONDITIONS.DESC_SDESC
IS
  'Short description of the terms and conditions.' ;
  COMMENT ON COLUMN REF_TERMS_CONDITIONS.DESC_LDESC
IS
  'Long description of the terms and conditions.' ;
  COMMENT ON COLUMN REF_TERMS_CONDITIONS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_TERMS_CONDITIONS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_TERMS_CONDITIONS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_TERMS_CONDITIONS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_TERMS_CONDITIONS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_TERMS_CONDITIONS ADD CONSTRAINT "pk_REF_TERMS_CONDITIONS" PRIMARY KEY ( TERMS_CONDITIONS_DB_ID, TERMS_CONDITIONS_CD ) ;


CREATE TABLE REF_THRESHOLD_MODE
  (
    THRESHOLD_MODE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    THRESHOLD_MODE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC           VARCHAR2 (80) NOT NULL DEFERRABLE ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_THRESHOLD_MODE ADD CHECK ( THRESHOLD_MODE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_THRESHOLD_MODE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_THRESHOLD_MODE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_THRESHOLD_MODE
IS
  'The threshold modes determine the algorithm used when checking for fault thresholds.' ;
  COMMENT ON COLUMN REF_THRESHOLD_MODE.THRESHOLD_MODE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_THRESHOLD_MODE.THRESHOLD_MODE_CD
IS
  'A unique value that identifies the reference term.' ;
  COMMENT ON COLUMN REF_THRESHOLD_MODE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_THRESHOLD_MODE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
ALTER TABLE REF_THRESHOLD_MODE ADD CONSTRAINT PK_REF_THRESHOLD_MODE PRIMARY KEY ( THRESHOLD_MODE_DB_ID, THRESHOLD_MODE_CD ) ;


CREATE TABLE REF_TIMEOFF_TYPE
  (
    TIMEOFF_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TIMEOFF_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_TIMEOFF_TYPE ADD CHECK ( TIMEOFF_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TIMEOFF_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_TIMEOFF_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_TIMEOFF_TYPE
IS
  '[EXTENDABLE] The various types of time off that can be recorded for a user. Vacation is a type of time off.' ;
  COMMENT ON COLUMN REF_TIMEOFF_TYPE.TIMEOFF_TYPE_DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN REF_TIMEOFF_TYPE.TIMEOFF_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_TIMEOFF_TYPE.DESC_SDESC
IS
  'Short description of the timeoff type.' ;
  COMMENT ON COLUMN REF_TIMEOFF_TYPE.DESC_LDESC
IS
  'Long description of the timeoff type.' ;
  COMMENT ON COLUMN REF_TIMEOFF_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_TIMEOFF_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_TIMEOFF_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_TIMEOFF_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_TIMEOFF_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_TIMEOFF_TYPE ADD CONSTRAINT PK_REF_TIMEOFF_TYPE PRIMARY KEY ( TIMEOFF_TYPE_DB_ID, TIMEOFF_TYPE_CD ) ;


CREATE TABLE REF_TRANSPORT_TYPE
  (
    TRANSPORT_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TRANSPORT_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC           VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC           VARCHAR2 (4000) ,
    BITMAP_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG           NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_TRANSPORT_TYPE ADD CHECK ( TRANSPORT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TRANSPORT_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TRANSPORT_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_TRANSPORT_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_TRANSPORT_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_TRANSPORT_TYPE
IS
  '[EXTENDABLE] The list of possible transportation methods for how the inventory is being shipped.' ;
  COMMENT ON COLUMN REF_TRANSPORT_TYPE.TRANSPORT_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_TRANSPORT_TYPE.TRANSPORT_TYPE_CD
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN REF_TRANSPORT_TYPE.DESC_SDESC
IS
  'Short description of the transport type.' ;
  COMMENT ON COLUMN REF_TRANSPORT_TYPE.DESC_LDESC
IS
  'Long description of the transport type.' ;
  COMMENT ON COLUMN REF_TRANSPORT_TYPE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_TRANSPORT_TYPE.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_TRANSPORT_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_TRANSPORT_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_TRANSPORT_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_TRANSPORT_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_TRANSPORT_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_TRANSPORT_TYPE ADD CONSTRAINT "pk_REF_TRANSPORT_TYPE" PRIMARY KEY ( TRANSPORT_TYPE_DB_ID, TRANSPORT_TYPE_CD ) ;


CREATE TABLE REF_USAGE_TYPE
  (
    USAGE_TYPE_CD  VARCHAR2 (12) NOT NULL DEFERRABLE ,
    DISPLAY_CODE   VARCHAR2 (12) NOT NULL DEFERRABLE ,
    DISPLAY_NAME   VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DISPLAY_DESC   VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    DISPLAY_ORD    NUMBER (4) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG     NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_NO    NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_USAGE_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_USAGE_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_USAGE_TYPE ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_USAGE_TYPE ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_USAGE_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_USAGE_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_USAGE_TYPE
IS
  'The types of usage that are recorded against inventory items, such as ACCRUAL, ADJUSTMENT, CORRECTION, and FLIGHT.' ;
  COMMENT ON COLUMN REF_USAGE_TYPE.USAGE_TYPE_CD
IS
  'PK to REF_USAGE_TYPE table.' ;
  COMMENT ON COLUMN REF_USAGE_TYPE.DISPLAY_CODE
IS
  'User call signs for this REF_USAGE_TYPE entry.' ;
  COMMENT ON COLUMN REF_USAGE_TYPE.DISPLAY_NAME
IS
  'User call signs for this REF_USAGE_TYPE entry.' ;
  COMMENT ON COLUMN REF_USAGE_TYPE.DISPLAY_DESC
IS
  'Detailed description of the ref term.' ;
  COMMENT ON COLUMN REF_USAGE_TYPE.DISPLAY_ORD
IS
  'The stage in the workplow process.' ;
  COMMENT ON COLUMN REF_USAGE_TYPE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_USAGE_TYPE.BITMAP_TAG
IS
  'FK to REF_BITMAP' ;
  COMMENT ON COLUMN REF_USAGE_TYPE.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN REF_USAGE_TYPE.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN REF_USAGE_TYPE.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN REF_USAGE_TYPE.RSTAT_CD
IS
  'The status of the record.' ;
  COMMENT ON COLUMN REF_USAGE_TYPE.CREATION_DT
IS
  'The data and time at which the record was inserted.' ;
  COMMENT ON COLUMN REF_USAGE_TYPE.REVISION_DT
IS
  'The data and time at which the record was updated.' ;
  COMMENT ON COLUMN REF_USAGE_TYPE.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN REF_USAGE_TYPE.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
CREATE UNIQUE INDEX IX_REF_USAGE_TYPE_NK ON REF_USAGE_TYPE ( DISPLAY_CODE ASC , CTRL_DB_ID ASC ) ;
ALTER TABLE REF_USAGE_TYPE ADD CONSTRAINT PK_REF_USAGE_TYPE PRIMARY KEY ( USAGE_TYPE_CD ) ;


CREATE TABLE REF_USG_SNAPSHOT_SRC_TYPE
  (
    SOURCE_DB_ID   NUMBER (10) NOT NULL ,
    SOURCE_CD      VARCHAR2 (20) NOT NULL ,
    SOURCE_SDESC   VARCHAR2 (80) ,
    SOURCE_LDESC   VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE REF_USG_SNAPSHOT_SRC_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
COMMENT ON TABLE REF_USG_SNAPSHOT_SRC_TYPE
IS
  'Usage Snapshot Source Type: This table identifies the two sources of usage snapshots: automatically calculated by IFS Maintenix or manually entered by a user.' ;
  COMMENT ON COLUMN REF_USG_SNAPSHOT_SRC_TYPE.SOURCE_DB_ID
IS
  'PK to the REF_USG_SNAPSHOT_SRC_TYPE table.' ;
  COMMENT ON COLUMN REF_USG_SNAPSHOT_SRC_TYPE.SOURCE_CD
IS
  'PK to the REF_USG_SNAPSHOT_SRC_TYPE table.' ;
  COMMENT ON COLUMN REF_USG_SNAPSHOT_SRC_TYPE.SOURCE_SDESC
IS
  'A short description of the usage snapshot source.' ;
  COMMENT ON COLUMN REF_USG_SNAPSHOT_SRC_TYPE.SOURCE_LDESC
IS
  'A long description of the usage snapshot source.' ;
  COMMENT ON COLUMN REF_USG_SNAPSHOT_SRC_TYPE.RSTAT_CD
IS
  'The physical attribute that defines the read and write access of the record.' ;
  COMMENT ON COLUMN REF_USG_SNAPSHOT_SRC_TYPE.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN REF_USG_SNAPSHOT_SRC_TYPE.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN REF_USG_SNAPSHOT_SRC_TYPE.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN REF_USG_SNAPSHOT_SRC_TYPE.CREATION_DT
IS
  'The database server timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_USG_SNAPSHOT_SRC_TYPE.REVISION_DT
IS
  'The date and time at which the record was updated.' ;
  COMMENT ON COLUMN REF_USG_SNAPSHOT_SRC_TYPE.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN REF_USG_SNAPSHOT_SRC_TYPE.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
ALTER TABLE REF_USG_SNAPSHOT_SRC_TYPE ADD CONSTRAINT PK_REF_USG_SNAPSHOT_SRC_TYPE PRIMARY KEY ( SOURCE_DB_ID, SOURCE_CD ) ;


CREATE TABLE REF_VENDOR_APPROVAL
  (
    VENDOR_APPROVAL_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_APPROVAL_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC            VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC            VARCHAR2 (4000) ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_VENDOR_APPROVAL ADD CHECK ( VENDOR_APPROVAL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_VENDOR_APPROVAL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_VENDOR_APPROVAL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_VENDOR_APPROVAL
IS
  '[EXTENDABLE] The type of approval that is required for a vendor, e.g. who can approve or required level of approval. This value is set when creating or editing a vendor. Definitions are completely customized by the operator but possible approval types might be "Purchasing", "QA", or "Finance". ' ;
  COMMENT ON COLUMN REF_VENDOR_APPROVAL.VENDOR_APPROVAL_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_VENDOR_APPROVAL.VENDOR_APPROVAL_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_VENDOR_APPROVAL.DESC_SDESC
IS
  'Short description of the Vendor QA approval type.' ;
  COMMENT ON COLUMN REF_VENDOR_APPROVAL.DESC_LDESC
IS
  'Long description of the Vendor QA approval type.' ;
  COMMENT ON COLUMN REF_VENDOR_APPROVAL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_VENDOR_APPROVAL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_VENDOR_APPROVAL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_VENDOR_APPROVAL.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_VENDOR_APPROVAL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_VENDOR_APPROVAL ADD CONSTRAINT "pk_REF_VENDOR_APPROVAL" PRIMARY KEY ( VENDOR_APPROVAL_DB_ID, VENDOR_APPROVAL_CD ) ;


CREATE TABLE REF_VENDOR_STATUS
  (
    VENDOR_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_STATUS_CD    VARCHAR2 (8) CONSTRAINT NN_VENDSTATUSCD NOT NULL DEFERRABLE ,
    DESC_SDESC          VARCHAR2 (80) ,
    DESC_LDESC          VARCHAR2 (4000) ,
    BITMAP_DB_ID        NUMBER (10) ,
    BITMAP_TAG          NUMBER (10) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_VENDOR_STATUS ADD CHECK ( VENDOR_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_VENDOR_STATUS ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_VENDOR_STATUS ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_VENDOR_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_VENDOR_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_VENDOR_STATUS
IS
  'Defines the status for a vendor, which reflects whether they are reliable, allowing operators to determine who they do business with. System provided options are Approved, Warning, Unapproved, and N/A.' ;
  COMMENT ON COLUMN REF_VENDOR_STATUS.VENDOR_STATUS_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_VENDOR_STATUS.VENDOR_STATUS_CD
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN REF_VENDOR_STATUS.DESC_SDESC
IS
  'Short description of the vendor status.' ;
  COMMENT ON COLUMN REF_VENDOR_STATUS.DESC_LDESC
IS
  'Long description of the vendor status.' ;
  COMMENT ON COLUMN REF_VENDOR_STATUS.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_VENDOR_STATUS.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_VENDOR_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_VENDOR_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_VENDOR_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_VENDOR_STATUS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_VENDOR_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_VENDOR_STATUS ADD CONSTRAINT "pk_REF_VENDOR_STATUS" PRIMARY KEY ( VENDOR_STATUS_DB_ID, VENDOR_STATUS_CD ) ;


CREATE TABLE REF_VENDOR_TYPE
  (
    VENDOR_TYPE_DB_ID NUMBER (10) NOT NULL ,
    VENDOR_TYPE_CD    VARCHAR2 (8) NOT NULL ,
    BITMAP_TAG        NUMBER (10) ,
    BITMAP_DB_ID      NUMBER (10) ,
    DESC_SDESC        VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC        VARCHAR2 (4000) ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_VENDOR_TYPE ADD CHECK ( VENDOR_TYPE_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE REF_VENDOR_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_VENDOR_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_VENDOR_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_VENDOR_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_VENDOR_TYPE
IS
  '[EXTENDABLE] The vendor types that can be selected under Vendor Details. For example, vendors can supply parts (purchase vendors) or supply maintenance (repair vendors). They can be part of a parts pool, or be a source of loan or borrowing of parts. They could primarily deal in tools. The system defines several level-0 vendor types out of the box, but these can be added to by the operator as necessary. ' ;
  COMMENT ON COLUMN REF_VENDOR_TYPE.VENDOR_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_VENDOR_TYPE.VENDOR_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_VENDOR_TYPE.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_VENDOR_TYPE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_VENDOR_TYPE.DESC_SDESC
IS
  'Short description of the Vendor Type.' ;
  COMMENT ON COLUMN REF_VENDOR_TYPE.DESC_LDESC
IS
  'Long description of the Vendor Type.' ;
  COMMENT ON COLUMN REF_VENDOR_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_VENDOR_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_VENDOR_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_VENDOR_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_VENDOR_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_VENDOR_TYPE ADD CONSTRAINT "pk_REF_VENDOR_TYPE" PRIMARY KEY ( VENDOR_TYPE_DB_ID, VENDOR_TYPE_CD ) ;
ALTER TABLE REF_VENDOR_TYPE ADD CONSTRAINT IX_REFVENDORTYPECD_UNQ UNIQUE ( VENDOR_TYPE_CD ) ;


CREATE TABLE REF_WARRANTY_EVAL_STATUS
  (
    WARRANTY_EVAL_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_STATUS_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    USER_CD                    VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_SDESC                 VARCHAR2 (80) ,
    DESC_LDESC                 VARCHAR2 (4000) ,
    RSTAT_CD                   NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT                DATE NOT NULL DEFERRABLE ,
    REVISION_DT                DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER              VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_WARRANTY_EVAL_STATUS ADD CHECK ( WARRANTY_EVAL_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_WARRANTY_EVAL_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_WARRANTY_EVAL_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_WARRANTY_EVAL_STATUS
IS
  'Defines the type of workflow that applies to this workflow template.' ;
  COMMENT ON COLUMN REF_WARRANTY_EVAL_STATUS.USER_CD
IS
  'displayed status of a warranty evaluation.' ;
  COMMENT ON COLUMN REF_WARRANTY_EVAL_STATUS.DESC_SDESC
IS
  'short description of a warranty evaluation status.' ;
  COMMENT ON COLUMN REF_WARRANTY_EVAL_STATUS.DESC_LDESC
IS
  'long descirption of a warranty evaluation status.' ;
  COMMENT ON COLUMN REF_WARRANTY_EVAL_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_WARRANTY_EVAL_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_WARRANTY_EVAL_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_WARRANTY_EVAL_STATUS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_WARRANTY_EVAL_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_WARRANTY_EVAL_STATUS ADD CONSTRAINT PK_REF_WARRANTY_EVAL_STATUS PRIMARY KEY ( WARRANTY_EVAL_STATUS_DB_ID, WARRANTY_EVAL_STATUS_CD ) ;


CREATE TABLE REF_WARRANTY_PRIORITY
  (
    WARRANTY_PRIORITY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_PRIORITY_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PRIORITY_ORD            INTEGER NOT NULL DEFERRABLE ,
    USER_CD                 VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_SDESC              VARCHAR2 (80) ,
    DESC_LDESC              VARCHAR2 (4000) ,
    RSTAT_CD                NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER           VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_WARRANTY_PRIORITY ADD CHECK ( WARRANTY_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_WARRANTY_PRIORITY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_WARRANTY_PRIORITY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_WARRANTY_PRIORITY
IS
  '[EXTENDABLE] This table contains the list of warranty priorities (e.g. low, medium, high). The priority is set when creating or editing a  warranty contract. Values are fully customized by the operator.' ;
  COMMENT ON COLUMN REF_WARRANTY_PRIORITY.PRIORITY_ORD
IS
  'DEFINES THE ORDER OF THE PRIORITY.' ;
  COMMENT ON COLUMN REF_WARRANTY_PRIORITY.USER_CD
IS
  'value displayed to user on maintenix.' ;
  COMMENT ON COLUMN REF_WARRANTY_PRIORITY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_WARRANTY_PRIORITY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_WARRANTY_PRIORITY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_WARRANTY_PRIORITY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_WARRANTY_PRIORITY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_WARRANTY_PRIORITY ADD CONSTRAINT PK_REF_WARRANTY_PRIORITY PRIMARY KEY ( WARRANTY_PRIORITY_DB_ID, WARRANTY_PRIORITY_CD ) ;


CREATE TABLE REF_WARRANTY_STATUS
  (
    WARRANTY_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    USER_CD               VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_SDESC            VARCHAR2 (80) ,
    DESC_LDESC            VARCHAR2 (4000) ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_WARRANTY_STATUS ADD CHECK ( WARRANTY_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_WARRANTY_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_WARRANTY_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_WARRANTY_STATUS
IS
  'Required system table to define when a warranty contract (template that defines the details, terms, and conditions of a warranty) is in build, active, or inactive.' ;
  COMMENT ON COLUMN REF_WARRANTY_STATUS.WARRANTY_STATUS_DB_ID
IS
  'PRIMARY KEY OF WARRANTY STATUS' ;
  COMMENT ON COLUMN REF_WARRANTY_STATUS.WARRANTY_STATUS_CD
IS
  'PRIMARY KEY OF WARRANTY STATUS' ;
  COMMENT ON COLUMN REF_WARRANTY_STATUS.USER_CD
IS
  'value dispalyed to end user of maintenix' ;
  COMMENT ON COLUMN REF_WARRANTY_STATUS.DESC_SDESC
IS
  'SHORT DESCRIPTION OF A WARRANTY STATUS' ;
  COMMENT ON COLUMN REF_WARRANTY_STATUS.DESC_LDESC
IS
  'LONG DESCREPTION OF A WARRANTY STATUS
' ;
  COMMENT ON COLUMN REF_WARRANTY_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_WARRANTY_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_WARRANTY_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_WARRANTY_STATUS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_WARRANTY_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_WARRANTY_STATUS ADD CONSTRAINT PK_REF_WARRANTY_STATUS PRIMARY KEY ( WARRANTY_STATUS_DB_ID, WARRANTY_STATUS_CD ) ;


CREATE TABLE REF_WARRANTY_SUB_TYPE
  (
    WARRANTY_SUB_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_SUB_TYPE_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    WARRANTY_TYPE_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_TYPE_CD        VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DESC_SDESC              VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC              VARCHAR2 (4000) ,
    RSTAT_CD                NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER           VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_WARRANTY_SUB_TYPE ADD CHECK ( WARRANTY_SUB_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_WARRANTY_SUB_TYPE ADD CHECK ( WARRANTY_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_WARRANTY_SUB_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_WARRANTY_SUB_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_WARRANTY_SUB_TYPE
IS
  '[EXTENDABLE] This table contains the list of warranty subtypes and associates each subtype to a warranty type. A subtype is assigned to when creating or editing a warranty contract. Warranty subtypes are operator-defined but "level-10" suggested subtypes include "Standard Life", "Aircraft Repair", "Component Purchase", "Component Repair", "Service Bulletin", "Assembly Repair", and "Assembly Purchase".' ;
  COMMENT ON COLUMN REF_WARRANTY_SUB_TYPE.WARRANTY_SUB_TYPE_DB_ID
IS
  'PRIMARY KEY OF A WARRANTY SUB TYPE' ;
  COMMENT ON COLUMN REF_WARRANTY_SUB_TYPE.WARRANTY_SUB_TYPE_CD
IS
  'PRIMARY KEY OF A WARRANTY SUB TYPE' ;
  COMMENT ON COLUMN REF_WARRANTY_SUB_TYPE.DESC_SDESC
IS
  'SHORT DESCRIPTION OF A WARRANTY SUB TYPE' ;
  COMMENT ON COLUMN REF_WARRANTY_SUB_TYPE.DESC_LDESC
IS
  'LONG DESCRIPTION OF A WARRANTY SUB TYPE' ;
  COMMENT ON COLUMN REF_WARRANTY_SUB_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_WARRANTY_SUB_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_WARRANTY_SUB_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_WARRANTY_SUB_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_WARRANTY_SUB_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_WARRANTY_SUB_TYPE ADD CONSTRAINT PK_REF_WARRANTY_SUB_TYPE PRIMARY KEY ( WARRANTY_SUB_TYPE_DB_ID, WARRANTY_SUB_TYPE_CD ) ;


CREATE TABLE REF_WARRANTY_TERMS_STATE
  (
    WARRANTY_TERMS_STATE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_TERMS_STATE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC                 VARCHAR2 (80) ,
    DESC_LDESC                 VARCHAR2 (4000) ,
    RSTAT_CD                   NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT                DATE NOT NULL DEFERRABLE ,
    REVISION_DT                DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER              VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_WARRANTY_TERMS_STATE ADD CHECK ( WARRANTY_TERMS_STATE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_WARRANTY_TERMS_STATE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_WARRANTY_TERMS_STATE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_WARRANTY_TERMS_STATE
IS
  'Defines states for warranty terms (NONE, ALL, INCLUDE, EXCLUDE).' ;
  COMMENT ON COLUMN REF_WARRANTY_TERMS_STATE.WARRANTY_TERMS_STATE_DB_ID
IS
  'PRIMARY KEY OF TERM STATES FOR A WARRANTY' ;
  COMMENT ON COLUMN REF_WARRANTY_TERMS_STATE.WARRANTY_TERMS_STATE_CD
IS
  'PRIMARY KEY OF TERM STATES FOR A WARRANTY' ;
  COMMENT ON COLUMN REF_WARRANTY_TERMS_STATE.DESC_SDESC
IS
  'SHORT DESCRIPTION OF A WARRANTY TERM STATE' ;
  COMMENT ON COLUMN REF_WARRANTY_TERMS_STATE.DESC_LDESC
IS
  'LONG DESCRIPTION OF A WARRANTY TERM STATE' ;
  COMMENT ON COLUMN REF_WARRANTY_TERMS_STATE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_WARRANTY_TERMS_STATE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_WARRANTY_TERMS_STATE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_WARRANTY_TERMS_STATE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_WARRANTY_TERMS_STATE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_WARRANTY_TERMS_STATE ADD CONSTRAINT PK_REF_WARRANTY_TERMS_STATE PRIMARY KEY ( WARRANTY_TERMS_STATE_DB_ID, WARRANTY_TERMS_STATE_CD ) ;


CREATE TABLE REF_WARRANTY_TYPE
  (
    WARRANTY_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_TYPE_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DESC_SDESC          VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC          VARCHAR2 (4000) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_WARRANTY_TYPE ADD CHECK ( WARRANTY_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_WARRANTY_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_WARRANTY_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_WARRANTY_TYPE
IS
  'There are 3 types of Warranty Contracts: Assembly, Component, and Task. Note that the warranty contract only becomes a "live" warranty when it is manually or automatically initialized against *specific* assemblies, components, or tasks.' ;
  COMMENT ON COLUMN REF_WARRANTY_TYPE.WARRANTY_TYPE_DB_ID
IS
  'WARRANTY TYPE PRIMARY KEY' ;
  COMMENT ON COLUMN REF_WARRANTY_TYPE.WARRANTY_TYPE_CD
IS
  'WARRANTY TYPE PRIMARY KEY' ;
  COMMENT ON COLUMN REF_WARRANTY_TYPE.DESC_SDESC
IS
  'SHORT DESCRIPTION OF WARRANTY TYPE.' ;
  COMMENT ON COLUMN REF_WARRANTY_TYPE.DESC_LDESC
IS
  'LONG DESCRIPTION OF WARRANTY TYPE!' ;
  COMMENT ON COLUMN REF_WARRANTY_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_WARRANTY_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_WARRANTY_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_WARRANTY_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_WARRANTY_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_WARRANTY_TYPE ADD CONSTRAINT PK_REF_WARRANTY_TYPE PRIMARY KEY ( WARRANTY_TYPE_DB_ID, WARRANTY_TYPE_CD ) ;


CREATE TABLE REF_WF_DEFN_TYPE
  (
    WF_DEFN_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WF_DEFN_TYPE_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_WF_DEFN_TYPE ADD CHECK ( WF_DEFN_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_WF_DEFN_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_WF_DEFN_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_WF_DEFN_TYPE
IS
  'Defines the type of workflow that applies to this workflow template.' ;
ALTER TABLE REF_WF_DEFN_TYPE ADD CONSTRAINT PK_REF_WF_DEFN_TYPE PRIMARY KEY ( WF_DEFN_TYPE_DB_ID, WF_DEFN_TYPE_CD ) ;


CREATE TABLE REF_WF_PRIORITY
  (
    WF_PRIORITY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WF_PRIORITY_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DESC_SDESC        VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC        VARCHAR2 (4000) ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_WF_PRIORITY ADD CHECK ( WF_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_WF_PRIORITY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_WF_PRIORITY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_WF_PRIORITY
IS
  '[EXTENDABLE] The priority levels, such as High, Medium, Low, that can be assigned to an approval when creating or editing a task definition.' ;
ALTER TABLE REF_WF_PRIORITY ADD CONSTRAINT PK_REF_WF_PRIORITY PRIMARY KEY ( WF_PRIORITY_DB_ID, WF_PRIORITY_CD ) ;


CREATE TABLE REF_WF_STATUS
  (
    WF_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WF_STATUS_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DESC_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC      VARCHAR2 (4000) ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_WF_STATUS ADD CHECK ( WF_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_WF_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_WF_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_WF_STATUS
IS
  'Status of a given workflow (Complete, Restarted, Rejected, In Progress); used to drive system logic for workflows.' ;
ALTER TABLE REF_WF_STATUS ADD CONSTRAINT PK_REF_WF_STATUS PRIMARY KEY ( WF_STATUS_DB_ID, WF_STATUS_CD ) ;


CREATE TABLE REF_WF_STEP_REASON
  (
    WF_STEP_REASON_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WF_STEP_REASON_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    USER_CD              VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_SDESC           VARCHAR2 (80) ,
    DESC_LDESC           VARCHAR2 (4000) ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_WF_STEP_REASON ADD CHECK ( WF_STEP_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_WF_STEP_REASON ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_WF_STEP_REASON ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_WF_STEP_REASON
IS
  '[EXTENDABLE] The list of approval and rejection reasons when approving a task workflow.' ;
ALTER TABLE REF_WF_STEP_REASON ADD CONSTRAINT PK_REF_WF_STEP_REASON PRIMARY KEY ( WF_STEP_REASON_DB_ID, WF_STEP_REASON_CD ) ;


CREATE TABLE REF_WF_STEP_STATUS
  (
    WF_STEP_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WF_STEP_STATUS_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DESC_SDESC           VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC           VARCHAR2 (4000) ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_WF_STEP_STATUS ADD CHECK ( WF_STEP_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_WF_STEP_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_WF_STEP_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_WF_STEP_STATUS
IS
  'The list of reasons for approving or rejecting a task.' ;
ALTER TABLE REF_WF_STEP_STATUS ADD CONSTRAINT PK_REF_WF_STEP_STATUS PRIMARY KEY ( WF_STEP_STATUS_DB_ID, WF_STEP_STATUS_CD ) ;


CREATE TABLE REF_WORK_TYPE
  (
    WORK_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WORK_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID    NUMBER (10) ,
    BITMAP_TAG      NUMBER (10) ,
    DESC_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC      VARCHAR2 (4000) ,
    WORK_TYPE_ORD   NUMBER (4) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_WORK_TYPE ADD CHECK ( WORK_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_WORK_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_WORK_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_WORK_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_WORK_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_WORK_TYPE
IS
  '[EXTENDABLE] The types of checks, such as A Check, Hangar Check etc., that can be assigned to tasks (Ad-Hoc tasks, Work Packages and Component Repair Orders) and task definitions (Blocks, Reference Documents, Requirements, Job Cards, Master Panel Cards).' ;
  COMMENT ON COLUMN REF_WORK_TYPE.WORK_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_WORK_TYPE.WORK_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_WORK_TYPE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_WORK_TYPE.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_WORK_TYPE.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_WORK_TYPE.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_WORK_TYPE.WORK_TYPE_ORD
IS
  'The order in the hierarchy that the work type with respect to other work types. The highest work type order (of all the work types assigned to tasks within a work package) is considered the driving work type. Used in the extraction rule logic.' ;
  COMMENT ON COLUMN REF_WORK_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_WORK_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_WORK_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_WORK_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REF_WORK_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_WORK_TYPE ADD CONSTRAINT PK_REF_WORK_TYPE PRIMARY KEY ( WORK_TYPE_DB_ID, WORK_TYPE_CD ) ;


CREATE TABLE REF_WP_SIGN_REQ_STATUS
  (
    WP_SIGN_REQ_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WP_SIGN_REQ_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC               VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC               VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_WP_SIGN_REQ_STATUS ADD CHECK ( WP_SIGN_REQ_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_WP_SIGN_REQ_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_WP_SIGN_REQ_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_WP_SIGN_REQ_STATUS
IS
  'System table tracking the signoff requirement for a work package, i.e. ACTV (not yet occurred) or COMPLETE (signoff completed).' ;
  COMMENT ON COLUMN REF_WP_SIGN_REQ_STATUS.WP_SIGN_REQ_STATUS_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN REF_WP_SIGN_REQ_STATUS.WP_SIGN_REQ_STATUS_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_WP_SIGN_REQ_STATUS.DESC_SDESC
IS
  'A short description or label for the reference term.' ;
  COMMENT ON COLUMN REF_WP_SIGN_REQ_STATUS.DESC_LDESC
IS
  'A long detailed description for the reference term - displayed for explanation purposes only.' ;
  COMMENT ON COLUMN REF_WP_SIGN_REQ_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_WP_SIGN_REQ_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REF_WP_SIGN_REQ_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REF_WP_SIGN_REQ_STATUS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_WP_SIGN_REQ_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE REF_WP_SIGN_REQ_STATUS ADD CONSTRAINT PK_REF_WP_SIGN_REQ_STATUS PRIMARY KEY ( WP_SIGN_REQ_STATUS_DB_ID, WP_SIGN_REQ_STATUS_CD ) ;


CREATE TABLE REF_XACTION_TYPE
  (
    XACTION_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    XACTION_TYPE_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_XACTION_TYPE ADD CHECK ( XACTION_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_XACTION_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_XACTION_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_XACTION_TYPE
IS
  'The list of transaction types that apply to inventory, such as issuing a consumable part, scrapping inventory, receiving a purchased part, etc.' ;
  COMMENT ON COLUMN REF_XACTION_TYPE.XACTION_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_XACTION_TYPE.XACTION_TYPE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN REF_XACTION_TYPE.DESC_SDESC
IS
  'Short description of the transaction type.' ;
  COMMENT ON COLUMN REF_XACTION_TYPE.DESC_LDESC
IS
  'Long description of the transaction type.' ;
  COMMENT ON COLUMN REF_XACTION_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REF_XACTION_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_XACTION_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_XACTION_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_XACTION_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_XACTION_TYPE ADD CONSTRAINT "pk_REF_XACTION_TYPE" PRIMARY KEY ( XACTION_TYPE_DB_ID, XACTION_TYPE_CD ) ;


CREATE TABLE REF_XFER_TYPE
  (
    XFER_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    XFER_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BITMAP_TAG      NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    DESC_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC      VARCHAR2 (4000) ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE REF_XFER_TYPE ADD CHECK ( XFER_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_XFER_TYPE ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_XFER_TYPE ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REF_XFER_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REF_XFER_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REF_XFER_TYPE
IS
  'The types of transfer that can appear on a transfer ticket. An example of a type of transfer is STKTRN for Stock Transfer.' ;
  COMMENT ON COLUMN REF_XFER_TYPE.XFER_TYPE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.
' ;
  COMMENT ON COLUMN REF_XFER_TYPE.XFER_TYPE_CD
IS
  'A unique, user entered value that defines the PK.
' ;
  COMMENT ON COLUMN REF_XFER_TYPE.BITMAP_DB_ID
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_XFER_TYPE.BITMAP_TAG
IS
  'FK to REF_BITMAP.' ;
  COMMENT ON COLUMN REF_XFER_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN REF_XFER_TYPE.DESC_SDESC
IS
  'Short description of the transfer type.' ;
  COMMENT ON COLUMN REF_XFER_TYPE.DESC_LDESC
IS
  'Long description of the transfer type.' ;
  COMMENT ON COLUMN REF_XFER_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN REF_XFER_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN REF_XFER_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN REF_XFER_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE REF_XFER_TYPE ADD CONSTRAINT "pk_REF_XFER_TYPE" PRIMARY KEY ( XFER_TYPE_DB_ID, XFER_TYPE_CD ) ;


CREATE TABLE REQ_PART
  (
    REQ_PART_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REQ_PART_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    REQ_TYPE_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REQ_TYPE_CD              VARCHAR2 (8) NOT NULL DEFERRABLE ,
    REQ_PRIORITY_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REQ_PRIORITY_CD          VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PO_PART_NO_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    PO_PART_NO_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    REQ_BOM_PART_DB_ID       NUMBER (10) ,
    REQ_BOM_PART_ID          NUMBER (10) ,
    REQ_STOCK_NO_DB_ID       NUMBER (10) ,
    REQ_STOCK_NO_ID          NUMBER (10) ,
    REQ_SPEC_PART_NO_DB_ID   NUMBER (10) ,
    REQ_SPEC_PART_NO_ID      NUMBER (10) ,
    REQ_LOC_DB_ID            NUMBER (10) ,
    REQ_LOC_ID               NUMBER (10) ,
    REMOTE_LOC_DB_ID         NUMBER (10) ,
    REMOTE_LOC_ID            NUMBER (10) ,
    REQ_HR_DB_ID             NUMBER (10) ,
    REQ_HR_ID                NUMBER (10) ,
    REQ_AC_INV_NO_DB_ID      NUMBER (10) ,
    REQ_AC_INV_NO_ID         NUMBER (10) ,
    SCHED_DB_ID              NUMBER (10) ,
    SCHED_ID                 NUMBER (10) ,
    SCHED_PART_ID            NUMBER (10) ,
    SCHED_INST_PART_ID       NUMBER (10) ,
    INV_NO_DB_ID             NUMBER (10) ,
    INV_NO_ID                NUMBER (10) ,
    PO_DEST_LOC_DB_ID        NUMBER (10) ,
    PO_DEST_LOC_ID           NUMBER (10) ,
    ISSUE_ACCOUNT_DB_ID      NUMBER (10) ,
    ISSUE_ACCOUNT_ID         NUMBER (10) ,
    PURCH_TYPE_DB_ID         NUMBER (10) ,
    PURCH_TYPE_CD            VARCHAR2 (8) ,
    PART_PROVIDER_TYPE_DB_ID NUMBER (10) ,
    PART_PROVIDER_TYPE_CD    VARCHAR2 (8) ,
    PO_DB_ID                 NUMBER (10) ,
    PO_ID                    NUMBER (10) ,
    PO_LINE_ID               NUMBER (10) ,
    SHIPMENT_LINE_DB_ID      NUMBER (10) ,
    SHIPMENT_LINE_ID         NUMBER (10) ,
    PRINTED_SUPPLY_LOC_DB_ID NUMBER (10) ,
    PRINTED_SUPPLY_LOC_ID    NUMBER (10) ,
    PR_SCHED_DB_ID           NUMBER (10) ,
    PR_SCHED_ID              NUMBER (10) ,
    REQ_MASTER_ID            VARCHAR2 (80) NOT NULL DEFERRABLE ,
    REQ_QT FLOAT ,
    REQ_BY_DT            DATE ,
    EST_ARRIVAL_DT       DATE ,
    REQ_NOTE             VARCHAR2 (4000) ,
    REQ_TASK_SDESC       VARCHAR2 (80) ,
    LOCK_RESERVE_BOOL    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    LAST_AUTO_RSRV_DT    DATE ,
    MA_TRACK_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RFQ_DB_ID            NUMBER (10) ,
    RFQ_ID               NUMBER (10) ,
    RFQ_LINE_ID          NUMBER (10) ,
    PO_VENDOR_DB_ID      NUMBER (10) ,
    PO_VENDOR_ID         NUMBER (10) ,
    ISSUE_UNIT_PRICE     NUMBER (15,5) ,
    ISSUE_DATE           DATE ,
    RECEIVED_BY_HR_DB_ID NUMBER (10) ,
    RECEIVED_BY_HR_ID    NUMBER (10) ,
    CSGN_VENDOR_DB_ID    NUMBER (10) ,
    CSGN_VENDOR_ID       NUMBER (10) ,
    CSGN_OWED_QT FLOAT ,
    ASSIGN_HR_DB_ID NUMBER (10) ,
    ASSIGN_HR_ID    NUMBER (10) ,
    ALT_ID RAW (16) NOT NULL ,
    SUPPLY_CHAIN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SUPPLY_CHAIN_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    UPDATED_ETA        DATE ,
    DELIVERY_NOTE      VARCHAR2 (4000) ,
    QTY_UNIT_DB_ID     NUMBER (10) ,
    QTY_UNIT_CD        VARCHAR2 (8) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE ,
    PRINTED_DT         DATE
  ) ;
ALTER TABLE REQ_PART ADD CHECK ( REQ_PART_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( REQ_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( REQ_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( REQ_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( PO_PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( PO_PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( REQ_BOM_PART_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( REQ_BOM_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( REQ_STOCK_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( REQ_STOCK_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( REQ_SPEC_PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( REQ_SPEC_PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( REQ_LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( REQ_LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( REMOTE_LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( REMOTE_LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( REQ_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( REQ_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( REQ_AC_INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( REQ_AC_INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( SCHED_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( SCHED_INST_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( PO_DEST_LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( PO_DEST_LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( ISSUE_ACCOUNT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( ISSUE_ACCOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( PURCH_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( PART_PROVIDER_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( PO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( PO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( PO_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( SHIPMENT_LINE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( SHIPMENT_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( PRINTED_SUPPLY_LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( PRINTED_SUPPLY_LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( PR_SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( PR_SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( LOCK_RESERVE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( MA_TRACK_BOOL     IN (0, 1)) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( RFQ_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( RFQ_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( RFQ_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( PO_VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( PO_VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( RECEIVED_BY_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( RECEIVED_BY_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( CSGN_VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( CSGN_VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( ASSIGN_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( ASSIGN_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( SUPPLY_CHAIN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE REQ_PART ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE REQ_PART
IS
  'Materiel Request Part List: This entity lists all of the parts that are required in a particular materiel request. Parts can be requested in the form of a BOM part (allows for alternates), or an explicit part number. Once a particular inventory item has been selected to fulfill this materiel request, the inventory record can be assigned to this list.' ;
  COMMENT ON COLUMN REQ_PART.REQ_PRIORITY_DB_ID
IS
  'FK REF_REQ_PRIORITY. Every part request has a priority. This priority is used to indicate which requests are more important, and should be dealt with first. ' ;
  COMMENT ON COLUMN REQ_PART.REQ_PRIORITY_CD
IS
  'FK REF_REQ_PRIORITY. Every part request has a priority. This priority is used to indicate which requests are more important, and should be dealt with first. ' ;
  COMMENT ON COLUMN REQ_PART.PO_PART_NO_DB_ID
IS
  'FK to EQP_PART_NO.  the default to-be-purchased part number.' ;
  COMMENT ON COLUMN REQ_PART.PO_PART_NO_ID
IS
  'FK to EQP_PART_NO.  the default to-be-purchased part number.' ;
  COMMENT ON COLUMN REQ_PART.REQ_BOM_PART_DB_ID
IS
  'FK to EQP_BOM_PART. The requested bom part. By specifying a BOM part instead of a specific part number, you are requesting one from a list of alternate parts.' ;
  COMMENT ON COLUMN REQ_PART.REQ_BOM_PART_ID
IS
  'FK to EQP_BOM_PART. The requested bom part. By specifying a BOM part instead of a specific part number, you are requesting one from a list of alternate parts.' ;
  COMMENT ON COLUMN REQ_PART.REQ_SPEC_PART_NO_DB_ID
IS
  'FK to EQP_PART_NO. The specifically requested part number. By specifying the specific part number, no alternates are allowed.' ;
  COMMENT ON COLUMN REQ_PART.REQ_SPEC_PART_NO_ID
IS
  'FK to EQP_PART_NO. The specifically requested part number. By specifying the specific part number, no alternates are allowed.' ;
  COMMENT ON COLUMN REQ_PART.REQ_LOC_DB_ID
IS
  'FK INV_LOC. This is the location where the part is needed.' ;
  COMMENT ON COLUMN REQ_PART.REQ_LOC_ID
IS
  'FK INV_LOC. This is the location where the part is needed.' ;
  COMMENT ON COLUMN REQ_PART.REMOTE_LOC_DB_ID
IS
  'This is the remote location for the reservation.' ;
  COMMENT ON COLUMN REQ_PART.REMOTE_LOC_ID
IS
  'This is the remote location for the reservation.' ;
  COMMENT ON COLUMN REQ_PART.REQ_HR_DB_ID
IS
  'FK ORG_HR. If this is an ad-hoc part request, then this will represent the user that originally requested the part.' ;
  COMMENT ON COLUMN REQ_PART.REQ_HR_ID
IS
  'FK ORG_HR. If this is an ad-hoc part request, then this will represent the user that originally requested the part.' ;
  COMMENT ON COLUMN REQ_PART.REQ_AC_INV_NO_DB_ID
IS
  'FK INV_AC_REG. If this is an ad-hoc part request, then these columns will allow you to record an aircraft for this request. This field is data only, and will not be used for any logic.' ;
  COMMENT ON COLUMN REQ_PART.REQ_AC_INV_NO_ID
IS
  'FK INV_AC_REG. If this is an ad-hoc part request, then these columns will allow you to record an aircraft for this request. This field is data only, and will not be used for any logic.' ;
  COMMENT ON COLUMN REQ_PART.SCHED_DB_ID
IS
  'FK SCHED_INST_PART. This is the task part requirement that is being filled by the part request. ' ;
  COMMENT ON COLUMN REQ_PART.SCHED_ID
IS
  'FK SCHED_INST_PART. This is the task part requirement that is being filled by the part request. ' ;
  COMMENT ON COLUMN REQ_PART.SCHED_PART_ID
IS
  'FK SCHED_INST_PART. This is the task part requirement that is being filled by the part request. ' ;
  COMMENT ON COLUMN REQ_PART.SCHED_INST_PART_ID
IS
  'FK SCHED_INST_PART. This is the task part requirement that is being filled by the part request. ' ;
  COMMENT ON COLUMN REQ_PART.INV_NO_DB_ID
IS
  'FK to INV_INV. This reference is used to record the inventory item that will be issued in response to this part request. It is filled in once you have found the inventory item that will be issued to maintenance.' ;
  COMMENT ON COLUMN REQ_PART.INV_NO_ID
IS
  'FK to INV_INV. This reference is used to record the inventory item that will be issued in response to this part request. It is filled in once you have found the inventory item that will be issued to maintenance.' ;
  COMMENT ON COLUMN REQ_PART.PO_DEST_LOC_DB_ID
IS
  'FK INV_LOC.' ;
  COMMENT ON COLUMN REQ_PART.PO_DEST_LOC_ID
IS
  'FK INV_LOC.' ;
  COMMENT ON COLUMN REQ_PART.ISSUE_ACCOUNT_DB_ID
IS
  'FK FNC_ACCOUNT. This is the account that you want to charge the requested part to when it is issued.' ;
  COMMENT ON COLUMN REQ_PART.ISSUE_ACCOUNT_ID
IS
  'FK FNC_ACCOUNT. This is the account that you want to charge the requested part to when it is issued.' ;
  COMMENT ON COLUMN REQ_PART.PURCH_TYPE_DB_ID
IS
  'FK to REF_PURCH_TYPE.  Used to categorize part requests for purchasing.' ;
  COMMENT ON COLUMN REQ_PART.PURCH_TYPE_CD
IS
  'FK to REF_PURCH_TYPE.  Used to categorize part requests for purchasing.' ;
  COMMENT ON COLUMN REQ_PART.PART_PROVIDER_TYPE_DB_ID
IS
  'FK to REF_PART_PROVIDER_TYPE.  Specified part provider.' ;
  COMMENT ON COLUMN REQ_PART.PART_PROVIDER_TYPE_CD
IS
  'FK to REF_PART_PROVIDER_TYPE.  Specified part provider.' ;
  COMMENT ON COLUMN REQ_PART.PO_DB_ID
IS
  'FK PO_LINE. This is a link to the purchase order line that is being used to fill the part request. ' ;
  COMMENT ON COLUMN REQ_PART.PO_ID
IS
  'FK PO_LINE. This is a link to the purchase order line that is being used to fill the part request. ' ;
  COMMENT ON COLUMN REQ_PART.PO_LINE_ID
IS
  'FK PO_LINE. This is a link to the purchase order line that is being used to fill the part request. ' ;
  COMMENT ON COLUMN REQ_PART.SHIPMENT_LINE_DB_ID
IS
  'This is the shipment line used to ship remote inventory to fulfill the part request. This is not filled in for part requests that are filled by purchase orders. ' ;
  COMMENT ON COLUMN REQ_PART.SHIPMENT_LINE_ID
IS
  'This is the shipment line used to ship remote inventory to fulfill the part request. This is not filled in for part requests that are filled by purchase orders. ' ;
  COMMENT ON COLUMN REQ_PART.PRINTED_SUPPLY_LOC_DB_ID
IS
  'FK to INV_LOC.  The last supply location that the part request was automatically printed at.' ;
  COMMENT ON COLUMN REQ_PART.PRINTED_SUPPLY_LOC_ID
IS
  'FK to INV_LOC.  The last supply location that the part request was automatically printed at.' ;
  COMMENT ON COLUMN REQ_PART.PR_SCHED_DB_ID
IS
  'FK SCHED_STASK. This is the task part requirement that is being filled by the part request. ' ;
  COMMENT ON COLUMN REQ_PART.PR_SCHED_ID
IS
  'FK SCHED_STASK. This is the task part requirement that is being filled by the part request. ' ;
  COMMENT ON COLUMN REQ_PART.REQ_MASTER_ID
IS
  'Master id of the part request. Groups part requests together under the original part request id that was split by Maintenix.' ;
  COMMENT ON COLUMN REQ_PART.REQ_QT
IS
  'The number of parts that you are requesting.' ;
  COMMENT ON COLUMN REQ_PART.REQ_BY_DT
IS
  'This is the date when the request is needed.' ;
  COMMENT ON COLUMN REQ_PART.EST_ARRIVAL_DT
IS
  'Estimated arrival date of the requested inventory (local time)' ;
  COMMENT ON COLUMN REQ_PART.REQ_NOTE
IS
  'Any notes that you may want to mention about the requested part.' ;
  COMMENT ON COLUMN REQ_PART.REQ_TASK_SDESC
IS
  'If this is an ad-hoc part request, then this column will allow you to enter a freeform task reference. This field is data only, and will not be used for any logic.' ;
  COMMENT ON COLUMN REQ_PART.LOCK_RESERVE_BOOL
IS
  'In certain situations, you will want to lock the reservation of an inventory item against a part request. When an inventory reservation is locked, Maintenix will never try to break this link during the auto-reservation ' ;
  COMMENT ON COLUMN REQ_PART.LAST_AUTO_RSRV_DT
IS
  'This field stores the last date/time that the autoreservation logic ran for the part request. ' ;
  COMMENT ON COLUMN REQ_PART.RFQ_DB_ID
IS
  'FK RFQ_LINE. This is a link to the RFQ line that is being used to fill the part request.' ;
  COMMENT ON COLUMN REQ_PART.RFQ_ID
IS
  'FK RFQ_LINE. This is a link to the RFQ line that is being used to fill the part request.' ;
  COMMENT ON COLUMN REQ_PART.RFQ_LINE_ID
IS
  'FK RFQ_LINE. This is a link to the RFQ line that is being used to fill the part request.' ;
  COMMENT ON COLUMN REQ_PART.RECEIVED_BY_HR_DB_ID
IS
  'FK ORG_HR. This is a link to the user who received the issued part.' ;
  COMMENT ON COLUMN REQ_PART.RECEIVED_BY_HR_ID
IS
  'FK ORG_HR. This is a link to the user who received the issued part.' ;
  COMMENT ON COLUMN REQ_PART.ASSIGN_HR_DB_ID
IS
  'The user who is assigned to this part request.' ;
  COMMENT ON COLUMN REQ_PART.ASSIGN_HR_ID
IS
  'The user who is assigned to this part request.' ;
  COMMENT ON COLUMN REQ_PART.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.' ;
  COMMENT ON COLUMN REQ_PART.SUPPLY_CHAIN_DB_ID
IS
  'FK REF_SUPPLY_CHAIN. This is a link to the supply chain for this request.' ;
  COMMENT ON COLUMN REQ_PART.SUPPLY_CHAIN_CD
IS
  'FK REF_SUPPLY_CHAIN. This is a link to the supply chain for this request.' ;
  COMMENT ON COLUMN REQ_PART.UPDATED_ETA
IS
  'The estimated time of arrival of the part to the organization''s network. This is set manually by the material controller so that the line planner can schedule the work. Not to be confused with EST_ARRIVAL_DATE, which is calculated by Maintenix, but not always available or accurate.' ;
  COMMENT ON COLUMN REQ_PART.DELIVERY_NOTE
IS
  'A note about the delivery ofthe part to the organization''s network. This is set manually by the material controller so that the line planner can schedule the work. ' ;
  COMMENT ON COLUMN REQ_PART.QTY_UNIT_DB_ID
IS
  'The db_id of the unit of measure for the part request quantity.' ;
  COMMENT ON COLUMN REQ_PART.QTY_UNIT_CD
IS
  'The code of the unit of measure for the part request quantity' ;
  COMMENT ON COLUMN REQ_PART.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN REQ_PART.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN REQ_PART.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN REQ_PART.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN REQ_PART.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  COMMENT ON COLUMN REQ_PART.PRINTED_DT
IS
  'The date that a part request issue transfer was last printed.' ;
  CREATE INDEX IX_EQPBOMPART_REQPART ON REQ_PART
    (
      REQ_BOM_PART_DB_ID ASC ,
      REQ_BOM_PART_ID ASC
    ) ;
  CREATE INDEX IX_EQPPARTNO_REQPART_SPEC ON REQ_PART
    (
      REQ_SPEC_PART_NO_DB_ID ASC ,
      REQ_SPEC_PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_EQPPARTNO_REQPART_PO ON REQ_PART
    (
      PO_PART_NO_DB_ID ASC ,
      PO_PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVACREG_REQPART ON REQ_PART
    (
      REQ_AC_INV_NO_DB_ID ASC ,
      REQ_AC_INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVINV_REQPART ON REQ_PART
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVLOCREQ_REQPART ON REQ_PART
    (
      REQ_LOC_DB_ID ASC ,
      REQ_LOC_ID ASC
    ) ;
  CREATE INDEX IX_INVLOCPO_REQPART ON REQ_PART
    (
      PO_DEST_LOC_DB_ID ASC ,
      PO_DEST_LOC_ID ASC
    ) ;
  CREATE INDEX IX_INVLOCPRINTED_REQPART ON REQ_PART
    (
      PRINTED_SUPPLY_LOC_DB_ID ASC ,
      PRINTED_SUPPLY_LOC_ID ASC
    ) ;
  CREATE INDEX IX_INVLOC_REQPART ON REQ_PART
    (
      REMOTE_LOC_DB_ID ASC ,
      REMOTE_LOC_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_REQPART ON REQ_PART
    (
      REQ_HR_DB_ID ASC ,
      REQ_HR_ID ASC
    ) ;
  CREATE INDEX IX_ASSIGNORGHR_REQPART ON REQ_PART
    (
      ASSIGN_HR_DB_ID ASC ,
      ASSIGN_HR_ID ASC
    ) ;
  CREATE INDEX IX_FK_ORGHR_REQPART_REC ON REQ_PART
    (
      RECEIVED_BY_HR_DB_ID ASC ,
      RECEIVED_BY_HR_ID ASC
    ) ;
  CREATE INDEX IX_ORGVENDOR_REQPART ON REQ_PART
    (
      PO_VENDOR_DB_ID ASC ,
      PO_VENDOR_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDSTASK_REQPART ON REQ_PART
    (
      PR_SCHED_DB_ID ASC ,
      PR_SCHED_ID ASC
    ) ;
  CREATE INDEX IX_SHIPSHIPMENTLINE_REQPART ON REQ_PART
    (
      SHIPMENT_LINE_DB_ID ASC ,
      SHIPMENT_LINE_ID ASC
    ) ;
  CREATE INDEX IX_EQPSTCKNO_REQPART ON REQ_PART
    (
      REQ_STOCK_NO_DB_ID ASC ,
      REQ_STOCK_NO_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDINSTPART_REQPART ON REQ_PART
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC ,
      SCHED_PART_ID ASC ,
      SCHED_INST_PART_ID ASC
    ) ;
  CREATE INDEX IX_POLINE_REQPART ON REQ_PART
    (
      PO_DB_ID ASC ,
      PO_ID ASC ,
      PO_LINE_ID ASC
    ) ;
  CREATE INDEX IX_FNCACCNT_REQPART ON REQ_PART
    (
      ISSUE_ACCOUNT_DB_ID ASC ,
      ISSUE_ACCOUNT_ID ASC
    ) ;
  CREATE INDEX IX_RFQLINE_REQPART ON REQ_PART
    (
      RFQ_DB_ID ASC ,
      RFQ_ID ASC ,
      RFQ_LINE_ID ASC
    ) ;
  CREATE INDEX IX_FK_SUPPLYCHAIN_REQPART ON REQ_PART
    (
      SUPPLY_CHAIN_DB_ID ASC ,
      SUPPLY_CHAIN_CD ASC
    ) ;
ALTER TABLE REQ_PART ADD CONSTRAINT PK_REQ_PART PRIMARY KEY ( REQ_PART_DB_ID, REQ_PART_ID ) ;
ALTER TABLE REQ_PART ADD CONSTRAINT IX_REQPARTALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE RFQ_HEADER
  (
    RFQ_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    RFQ_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    CONTACT_HR_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    CONTACT_HR_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    CURRENCY_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    CURRENCY_CD      VARCHAR2 (8) NOT NULL DEFERRABLE ,
    EXCHG_QT FLOAT NOT NULL DEFERRABLE ,
    RESPOND_BY_DT          DATE ,
    TERMS_CONDITIONS_DB_ID NUMBER (10) ,
    TERMS_CONDITIONS_CD    VARCHAR2 (8) ,
    FOB_DB_ID              NUMBER (10) ,
    FOB_CD                 VARCHAR2 (8) ,
    TRANSPORT_TYPE_DB_ID   NUMBER (10) ,
    TRANSPORT_TYPE_CD      VARCHAR2 (8) ,
    VENDOR_NOTE            VARCHAR2 (4000) ,
    SPEC2K_CUST_DB_ID      NUMBER (10) ,
    SPEC2K_CUST_CD         VARCHAR2 (8) ,
    ISSUED_DT              DATE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE RFQ_HEADER ADD CHECK ( RFQ_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_HEADER ADD CHECK ( RFQ_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_HEADER ADD CHECK ( CONTACT_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_HEADER ADD CHECK ( CONTACT_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_HEADER ADD CHECK ( CURRENCY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_HEADER ADD CHECK ( TERMS_CONDITIONS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_HEADER ADD CHECK ( FOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_HEADER ADD CHECK ( TRANSPORT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_HEADER ADD CHECK ( SPEC2K_CUST_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_HEADER ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE RFQ_HEADER ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE RFQ_HEADER
IS
  'This entity records the header information (purchasing contact, currency, terms & conditions, etc) of an RFQ.' ;
  COMMENT ON COLUMN RFQ_HEADER.RFQ_DB_ID
IS
  'PK: FK EVT_EVENT' ;
  COMMENT ON COLUMN RFQ_HEADER.RFQ_ID
IS
  'PK: FK EVT_EVENT.' ;
  COMMENT ON COLUMN RFQ_HEADER.CONTACT_HR_DB_ID
IS
  'FK ORG_HR: This is the purchasing contact for the RFQ' ;
  COMMENT ON COLUMN RFQ_HEADER.CONTACT_HR_ID
IS
  'FK ORG_HR: This is the purchasing contact for the RFQ' ;
  COMMENT ON COLUMN RFQ_HEADER.CURRENCY_DB_ID
IS
  'FK REF_CURRENCY: This is the desired currency for the RFQ.' ;
  COMMENT ON COLUMN RFQ_HEADER.CURRENCY_CD
IS
  'FK REF_CURRENCY: This is the desired currency for the RFQ.' ;
  COMMENT ON COLUMN RFQ_HEADER.EXCHG_QT
IS
  'This is the exchange rate' ;
  COMMENT ON COLUMN RFQ_HEADER.RESPOND_BY_DT
IS
  'This is the repond by date for the RFQ' ;
  COMMENT ON COLUMN RFQ_HEADER.TERMS_CONDITIONS_DB_ID
IS
  'FK REF_TERMS_CONDITIONS: This is the desired terms & conditions for the RFQ.' ;
  COMMENT ON COLUMN RFQ_HEADER.TERMS_CONDITIONS_CD
IS
  'FK REF_TERMS_CONDITIONS: This is the desired terms & conditions for the RFQ.' ;
  COMMENT ON COLUMN RFQ_HEADER.FOB_DB_ID
IS
  'FK REF_FOB: This is the desired freight on board for the RFQ.' ;
  COMMENT ON COLUMN RFQ_HEADER.FOB_CD
IS
  'FK REF_FOB: This is the desired freight on board for the RFQ.' ;
  COMMENT ON COLUMN RFQ_HEADER.TRANSPORT_TYPE_DB_ID
IS
  'FK REF_TRANSPORT_TYPE: This is the desired transportation type for the RFQ.' ;
  COMMENT ON COLUMN RFQ_HEADER.TRANSPORT_TYPE_CD
IS
  'FK REF_TRANSPORT_TYPE: This is the desired transportation type for the RFQ.' ;
  COMMENT ON COLUMN RFQ_HEADER.VENDOR_NOTE
IS
  'This is the note to send to the vendors.' ;
  COMMENT ON COLUMN RFQ_HEADER.SPEC2K_CUST_DB_ID
IS
  'REF_SPEC2K_CUST reference term, identifies customer responsible for the request for quote transmission.' ;
  COMMENT ON COLUMN RFQ_HEADER.SPEC2K_CUST_CD
IS
  'REF_SPEC2K_CUST reference term, identifies customer responsible for the request for quote transmission.' ;
  COMMENT ON COLUMN RFQ_HEADER.ISSUED_DT
IS
  'Date the RFQ was issued.' ;
  COMMENT ON COLUMN RFQ_HEADER.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN RFQ_HEADER.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN RFQ_HEADER.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN RFQ_HEADER.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN RFQ_HEADER.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGHR_RFQHEADER ON RFQ_HEADER
    (
      CONTACT_HR_DB_ID ASC ,
      CONTACT_HR_ID ASC
    ) ;
ALTER TABLE RFQ_HEADER ADD CONSTRAINT PK_RFQ_HEADER PRIMARY KEY ( RFQ_DB_ID, RFQ_ID ) ;
ALTER TABLE RFQ_HEADER ADD CONSTRAINT IX_RFQHEADERALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE RFQ_LINE
  (
    RFQ_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    RFQ_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    RFQ_LINE_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LINE_NO_ORD NUMBER (4) NOT NULL DEFERRABLE ,
    LINE_LDESC  VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    RFQ_QT FLOAT NOT NULL DEFERRABLE ,
    QTY_UNIT_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    QTY_UNIT_CD        VARCHAR2 (8) NOT NULL DEFERRABLE ,
    SHIP_TO_LOC_DB_ID  NUMBER (10) ,
    SHIP_TO_LOC_ID     NUMBER (10) ,
    REQ_PRIORITY_DB_ID NUMBER (10) ,
    REQ_PRIORITY_CD    VARCHAR2 (8) ,
    PART_NO_DB_ID      NUMBER (10) ,
    PART_NO_ID         NUMBER (10) ,
    ACCOUNT_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ACCOUNT_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_NOTE        VARCHAR2 (4000) ,
    PO_DB_ID           NUMBER (10) ,
    PO_ID              NUMBER (10) ,
    PO_LINE_ID         NUMBER (10) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE RFQ_LINE ADD CHECK ( RFQ_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE ADD CHECK ( RFQ_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE ADD CHECK ( RFQ_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE ADD CHECK ( QTY_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE ADD CHECK ( SHIP_TO_LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE ADD CHECK ( SHIP_TO_LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE ADD CHECK ( REQ_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE ADD CHECK ( ACCOUNT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE ADD CHECK ( ACCOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE ADD CHECK ( PO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE ADD CHECK ( PO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE ADD CHECK ( PO_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE RFQ_LINE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE RFQ_LINE
IS
  'This entity stores the lines that make up an RFQ. There are two types of lines: part and miscellaneous.' ;
  COMMENT ON COLUMN RFQ_LINE.RFQ_DB_ID
IS
  'PK: FK RFQ_HEADER' ;
  COMMENT ON COLUMN RFQ_LINE.RFQ_ID
IS
  'PK: FK RFQ_HEADER' ;
  COMMENT ON COLUMN RFQ_LINE.RFQ_LINE_ID
IS
  'PK' ;
  COMMENT ON COLUMN RFQ_LINE.LINE_NO_ORD
IS
  'This is the line number' ;
  COMMENT ON COLUMN RFQ_LINE.LINE_LDESC
IS
  'This is the line description' ;
  COMMENT ON COLUMN RFQ_LINE.RFQ_QT
IS
  'This is the requested quantity' ;
  COMMENT ON COLUMN RFQ_LINE.QTY_UNIT_DB_ID
IS
  'FK REF_QTY_UNIT: This is the requested unit of measure' ;
  COMMENT ON COLUMN RFQ_LINE.QTY_UNIT_CD
IS
  'FK REF_QTY_UNIT: This is the requested unit of measure' ;
  COMMENT ON COLUMN RFQ_LINE.SHIP_TO_LOC_DB_ID
IS
  'FK INV_LOC: This is the ship to location for the line' ;
  COMMENT ON COLUMN RFQ_LINE.SHIP_TO_LOC_ID
IS
  'FK INV_LOC: This is the ship to location for the line' ;
  COMMENT ON COLUMN RFQ_LINE.REQ_PRIORITY_DB_ID
IS
  'FK REF_REQ_PRIORITY: This is the priority for the line' ;
  COMMENT ON COLUMN RFQ_LINE.REQ_PRIORITY_CD
IS
  'FK REF_REQ_PRIORITY: This is the priority for the line' ;
  COMMENT ON COLUMN RFQ_LINE.PART_NO_DB_ID
IS
  'FK EQP_PART_NO: This is the requested part number. This is NULL for miscellaneous lines.' ;
  COMMENT ON COLUMN RFQ_LINE.PART_NO_ID
IS
  'FK EQP_PART_NO: This is the requested part number. This is NULL for miscellaneous lines.' ;
  COMMENT ON COLUMN RFQ_LINE.ACCOUNT_DB_ID
IS
  'FK FNC_ACCOUNT: This is the EXPENSE account for miscellaneous lines' ;
  COMMENT ON COLUMN RFQ_LINE.ACCOUNT_ID
IS
  'FK FNC_ACCOUNT: This is the EXPENSE account for miscellaneous lines' ;
  COMMENT ON COLUMN RFQ_LINE.VENDOR_NOTE
IS
  'This is the note to send to the vendor.' ;
  COMMENT ON COLUMN RFQ_LINE.PO_DB_ID
IS
  'FK PO_LINE: This is the resulting PO for the line' ;
  COMMENT ON COLUMN RFQ_LINE.PO_ID
IS
  'FK PO_LINE: This is the resulting PO for the line' ;
  COMMENT ON COLUMN RFQ_LINE.PO_LINE_ID
IS
  'FK PO_LINE: This is the resulting PO for the line' ;
  COMMENT ON COLUMN RFQ_LINE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN RFQ_LINE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN RFQ_LINE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN RFQ_LINE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN RFQ_LINE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPPRTNO_RFQLINE ON RFQ_LINE
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVLOC_RFQLINE ON RFQ_LINE
    (
      SHIP_TO_LOC_DB_ID ASC ,
      SHIP_TO_LOC_ID ASC
    ) ;
  CREATE INDEX IX_POLINE_RFQLINE ON RFQ_LINE
    (
      PO_DB_ID ASC ,
      PO_ID ASC ,
      PO_LINE_ID ASC
    ) ;
  CREATE INDEX IX_FNCACCOUNT_RFQLINE ON RFQ_LINE
    (
      ACCOUNT_DB_ID ASC ,
      ACCOUNT_ID ASC
    ) ;
  CREATE INDEX IX_RFQHEADER_RFQLINE ON RFQ_LINE
    ( RFQ_DB_ID ASC , RFQ_ID ASC
    ) ;
ALTER TABLE RFQ_LINE ADD CONSTRAINT PK_RFQ_LINE PRIMARY KEY ( RFQ_DB_ID, RFQ_ID, RFQ_LINE_ID ) ;
ALTER TABLE RFQ_LINE ADD CONSTRAINT IX_RFQLINEALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE RFQ_LINE_VENDOR
  (
    RFQ_DB_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    RFQ_ID                  NUMBER (10) NOT NULL DEFERRABLE ,
    RFQ_LINE_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    NO_SUPPLY_BOOL          NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    NO_QUOTE_BOOL           NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    PART_NO_DB_ID           NUMBER (10) ,
    PART_NO_ID              NUMBER (10) ,
    RECEIVE_COND_DB_ID      NUMBER (10) ,
    RECEIVE_COND_CD         VARCHAR2 (8) ,
    PURCH_VENDOR_DB_ID      NUMBER (10) ,
    PURCH_VENDOR_ID         NUMBER (10) ,
    PURCH_PART_NO_DB_ID     NUMBER (10) ,
    PURCH_PART_NO_ID        NUMBER (10) ,
    PART_VENDOR_PRICE_DB_ID NUMBER (10) ,
    PART_VENDOR_PRICE_ID    NUMBER (10) ,
    QUOTE_DT                DATE ,
    QUOTE_QT FLOAT ,
    QTY_UNIT_DB_ID NUMBER (10) ,
    QTY_UNIT_CD    VARCHAR2 (8) ,
    UNIT_PRICE     NUMBER (15,5) ,
    LINE_PRICE     NUMBER (15,5) ,
    LEAD_TIME FLOAT ,
    EFFECTIVE_TO_DT       DATE ,
    VENDOR_NOTE           VARCHAR2 (4000) ,
    DOC_REF_SDESC         VARCHAR2 (80) ,
    RESPONDED_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    INVALID_RESPONSE_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( RFQ_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( RFQ_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( RFQ_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( NO_SUPPLY_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( NO_QUOTE_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( RECEIVE_COND_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( PURCH_VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( PURCH_VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( PURCH_PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( PURCH_PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( PART_VENDOR_PRICE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( PART_VENDOR_PRICE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( QTY_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( RESPONDED_BOOL        IN (0, 1)) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( INVALID_RESPONSE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( RSTAT_CD              IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE RFQ_LINE_VENDOR
IS
  'This entity store the vendor quotes for each RFQ line.' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.RFQ_DB_ID
IS
  'PK: FK RFQ_LINE' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.RFQ_ID
IS
  'PK: FK RFQ_LINE' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.RFQ_LINE_ID
IS
  'PK: FK RFQ_LINE' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.VENDOR_DB_ID
IS
  'PK: FK ORG_VENDOR' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.VENDOR_ID
IS
  'PK: FK ORG_VENDOR' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.NO_SUPPLY_BOOL
IS
  'This indicates that the vendor does not supply the requested part' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.NO_QUOTE_BOOL
IS
  'This indicates that the vendor did not quote on a part' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.PART_NO_DB_ID
IS
  'FK EQP_PART_NO: This is the part the vendor quoted' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.PART_NO_ID
IS
  'FK EQP_PART_NO: This is the part the vendor quoted' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.RECEIVE_COND_DB_ID
IS
  'FK REF_RECEIVE_COND: This is the condition of the quoted part. The vendor may quote on overhauled, factory new, resale new, etc.' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.RECEIVE_COND_CD
IS
  'FK REF_RECEIVE_COND: This is the condition of the quoted part. The vendor may quote on overhauled, factory new, resale new, etc.' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.PURCH_VENDOR_DB_ID
IS
  'FK EQP_PART_VENDOR' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.PURCH_VENDOR_ID
IS
  'FK EQP_PART_VENDOR' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.PURCH_PART_NO_DB_ID
IS
  'FK EQP_PART_VENDOR' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.PURCH_PART_NO_ID
IS
  'FK EQP_PART_VENDOR' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.PART_VENDOR_PRICE_DB_ID
IS
  'FK EQP_PART_VENDOR_PRICE' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.PART_VENDOR_PRICE_ID
IS
  'FK EQP_PART_VENDOR_PRICE' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.QUOTE_DT
IS
  'Quotation date for the given part. ' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.QUOTE_QT
IS
  'This is the quantity the vendor quoted' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.QTY_UNIT_DB_ID
IS
  'FK REF_QTY_UNIT: This is the unit of measure the vendor quoted' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.QTY_UNIT_CD
IS
  'FK REF_QTY_UNIT: This is the unit of measure the vendor quoted' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.UNIT_PRICE
IS
  'This is the unit price the vendor quoted for a miscellaneous line' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.LINE_PRICE
IS
  'This is the overall line price (including all charges and taxes)' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.LEAD_TIME
IS
  'This is the lead time the vendor quoted for a miscellaneous line' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.EFFECTIVE_TO_DT
IS
  'This is the effective to date the vendor quoted for a miscellaneous line' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.VENDOR_NOTE
IS
  'This is the note the vendor gave for a miscellaneous line.' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.RESPONDED_BOOL
IS
  'Identifies that supplier successfully responded to the part quotation request. ' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.INVALID_RESPONSE_BOOL
IS
  'Identifies invalid quotation response for the given part. Default 0.' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPPARTNO_RFQLINEVENDOR ON RFQ_LINE_VENDOR
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_ORGVENDOR_RFQLINEVENDOR ON RFQ_LINE_VENDOR
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
  CREATE INDEX IX_EQPPRTVNDR_RFQLINEVENDOR ON RFQ_LINE_VENDOR
    (
      PURCH_VENDOR_DB_ID ASC ,
      PURCH_VENDOR_ID ASC ,
      PURCH_PART_NO_DB_ID ASC ,
      PURCH_PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_EQPPRTVNDRPRICE_RFQLINEVNDR ON RFQ_LINE_VENDOR
    (
      PART_VENDOR_PRICE_DB_ID ASC ,
      PART_VENDOR_PRICE_ID ASC
    ) ;
  CREATE INDEX IX_RFQLINE_RFQLINEVENDOR ON RFQ_LINE_VENDOR
    (
      RFQ_DB_ID ASC ,
      RFQ_ID ASC ,
      RFQ_LINE_ID ASC
    ) ;
ALTER TABLE RFQ_LINE_VENDOR ADD CONSTRAINT PK_RFQ_LINE_VENDOR PRIMARY KEY ( RFQ_DB_ID, RFQ_ID, RFQ_LINE_ID, VENDOR_DB_ID, VENDOR_ID ) ;


CREATE TABLE RFQ_LINE_VENDOR_CHARGE
  (
    RFQ_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    RFQ_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    RFQ_LINE_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    CHARGE_ID RAW (16) NOT NULL DEFERRABLE ,
    CHARGE_AMOUNT  NUMBER (15,5) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE RFQ_LINE_VENDOR_CHARGE ADD CHECK ( RFQ_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR_CHARGE ADD CHECK ( RFQ_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR_CHARGE ADD CHECK ( RFQ_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR_CHARGE ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR_CHARGE ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR_CHARGE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR_CHARGE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE RFQ_LINE_VENDOR_CHARGE
IS
  'This entity stores the charges for a vendor quote' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_CHARGE.RFQ_DB_ID
IS
  'PK: FK RFQ_LINE_VENDOR' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_CHARGE.RFQ_ID
IS
  'PK: FK RFQ_LINE_VENDOR' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_CHARGE.RFQ_LINE_ID
IS
  'PK: FK RFQ_LINE_VENDOR' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_CHARGE.VENDOR_DB_ID
IS
  'PK: FK RFQ_LINE_VENDOR' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_CHARGE.VENDOR_ID
IS
  'PK: FK RFQ_LINE_VENDOR' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_CHARGE.CHARGE_ID
IS
  'PK: FK CHARGE' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_CHARGE.CHARGE_AMOUNT
IS
  'User specified charge amount.' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_CHARGE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_CHARGE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_CHARGE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_CHARGE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_CHARGE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_RFQLINEVNDR_RFQLINEVNDRCHRG ON RFQ_LINE_VENDOR_CHARGE
    (
      RFQ_DB_ID ASC ,
      RFQ_ID ASC ,
      RFQ_LINE_ID ASC ,
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
  CREATE INDEX IX_CHARGE_RFQLINEVENDORCHARGE ON RFQ_LINE_VENDOR_CHARGE
    (
      CHARGE_ID ASC
    ) ;
ALTER TABLE RFQ_LINE_VENDOR_CHARGE ADD CONSTRAINT PK_RFQ_LINE_VENDOR_CHARGE PRIMARY KEY ( RFQ_DB_ID, RFQ_ID, RFQ_LINE_ID, VENDOR_DB_ID, VENDOR_ID, CHARGE_ID ) ;


CREATE TABLE RFQ_LINE_VENDOR_TAX
  (
    RFQ_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    RFQ_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    RFQ_LINE_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    TAX_ID RAW (16) NOT NULL DEFERRABLE ,
    TAX_RATE FLOAT ,
    COMPOUND_BOOL  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE RFQ_LINE_VENDOR_TAX ADD CHECK ( RFQ_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR_TAX ADD CHECK ( RFQ_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR_TAX ADD CHECK ( RFQ_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR_TAX ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR_TAX ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR_TAX ADD CHECK ( COMPOUND_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR_TAX ADD CHECK ( RSTAT_CD      IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE RFQ_LINE_VENDOR_TAX ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE RFQ_LINE_VENDOR_TAX
IS
  'This entity stores the taxes for a vendor quote' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_TAX.RFQ_DB_ID
IS
  'PK: FK RFQ_LINE_VENDOR' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_TAX.RFQ_ID
IS
  'PK: FK RFQ_LINE_VENDOR' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_TAX.RFQ_LINE_ID
IS
  'PK: FK RFQ_LINE_VENDOR' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_TAX.VENDOR_DB_ID
IS
  'PK: FK RFQ_LINE_VENDOR' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_TAX.VENDOR_ID
IS
  'PK: FK RFQ_LINE_VENDOR' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_TAX.TAX_ID
IS
  'PK: FK TAX' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_TAX.TAX_RATE
IS
  'User specified tax rate.' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_TAX.COMPOUND_BOOL
IS
  'Flag indicating if tax is compound or not.' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_TAX.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_TAX.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_TAX.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_TAX.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN RFQ_LINE_VENDOR_TAX.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_RFQLINEVNDR_RFQLINEVNDRTAX ON RFQ_LINE_VENDOR_TAX
    (
      RFQ_DB_ID ASC ,
      RFQ_ID ASC ,
      RFQ_LINE_ID ASC ,
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
  CREATE INDEX IX_TAX_RFQLINEVENDORTAX ON RFQ_LINE_VENDOR_TAX
    ( TAX_ID ASC
    ) ;
ALTER TABLE RFQ_LINE_VENDOR_TAX ADD CONSTRAINT PK_RFQ_LINE_VENDOR_TAX PRIMARY KEY ( RFQ_DB_ID, RFQ_ID, RFQ_LINE_ID, VENDOR_DB_ID, VENDOR_ID, TAX_ID ) ;


CREATE TABLE RFQ_VENDOR
  (
    RFQ_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    RFQ_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    CURRENCY_DB_ID NUMBER (10) ,
    CURRENCY_CD    VARCHAR2 (8) ,
    EXCHG_QT FLOAT ,
    TERMS_CONDITIONS_DB_ID NUMBER (10) ,
    TERMS_CONDITIONS_CD    VARCHAR2 (8) ,
    FOB_DB_ID              NUMBER (10) ,
    FOB_CD                 VARCHAR2 (8) ,
    TRANSPORT_TYPE_DB_ID   NUMBER (10) ,
    TRANSPORT_TYPE_CD      VARCHAR2 (8) ,
    VENDOR_NOTE            VARCHAR2 (4000) ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE RFQ_VENDOR ADD CHECK ( RFQ_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_VENDOR ADD CHECK ( RFQ_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_VENDOR ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_VENDOR ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_VENDOR ADD CHECK ( CURRENCY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_VENDOR ADD CHECK ( TERMS_CONDITIONS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_VENDOR ADD CHECK ( FOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_VENDOR ADD CHECK ( TRANSPORT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE RFQ_VENDOR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE RFQ_VENDOR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE RFQ_VENDOR
IS
  'This entity stores the vendors that are assigned to an RFQ.' ;
  COMMENT ON COLUMN RFQ_VENDOR.RFQ_DB_ID
IS
  'PK: FK RFQ_HEADER' ;
  COMMENT ON COLUMN RFQ_VENDOR.RFQ_ID
IS
  'PK: FK RFQ_HEADER' ;
  COMMENT ON COLUMN RFQ_VENDOR.VENDOR_DB_ID
IS
  'PK: FK ORG_VENDOR' ;
  COMMENT ON COLUMN RFQ_VENDOR.VENDOR_ID
IS
  'PK: FK ORG_VENDOR' ;
  COMMENT ON COLUMN RFQ_VENDOR.CURRENCY_DB_ID
IS
  'FK REF_CURRENCY: This is the currency the vendor quoted.' ;
  COMMENT ON COLUMN RFQ_VENDOR.CURRENCY_CD
IS
  'FK REF_CURRENCY: This is the currency the vendor quoted.' ;
  COMMENT ON COLUMN RFQ_VENDOR.EXCHG_QT
IS
  'This is the exchange rate.' ;
  COMMENT ON COLUMN RFQ_VENDOR.TERMS_CONDITIONS_DB_ID
IS
  'FK REF_TERMS_CONDITIONS: This is the terms & conditions the vendor quoted' ;
  COMMENT ON COLUMN RFQ_VENDOR.TERMS_CONDITIONS_CD
IS
  'FK REF_TERMS_CONDITIONS: This is the terms & conditions the vendor quoted' ;
  COMMENT ON COLUMN RFQ_VENDOR.FOB_DB_ID
IS
  'FK REF_FOB: This is the freight on board the vendor quoted' ;
  COMMENT ON COLUMN RFQ_VENDOR.FOB_CD
IS
  'FK REF_FOB: This is the freight on board the vendor quoted' ;
  COMMENT ON COLUMN RFQ_VENDOR.TRANSPORT_TYPE_DB_ID
IS
  'FK REF_TRANSPORT_TYPE: This is the transportation type the vendor quoted' ;
  COMMENT ON COLUMN RFQ_VENDOR.TRANSPORT_TYPE_CD
IS
  'FK REF_TRANSPORT_TYPE: This is the transportation type the vendor quoted' ;
  COMMENT ON COLUMN RFQ_VENDOR.VENDOR_NOTE
IS
  'This is a textual note from the vendor.' ;
  COMMENT ON COLUMN RFQ_VENDOR.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN RFQ_VENDOR.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN RFQ_VENDOR.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN RFQ_VENDOR.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN RFQ_VENDOR.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGVENDOR_RFQVENDOR ON RFQ_VENDOR
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
  CREATE INDEX IX_RFQHEADER_RFQVENDOR ON RFQ_VENDOR
    (
      RFQ_DB_ID ASC ,
      RFQ_ID ASC
    ) ;
ALTER TABLE RFQ_VENDOR ADD CONSTRAINT PK_RFQ_VENDOR PRIMARY KEY ( RFQ_DB_ID, RFQ_ID, VENDOR_DB_ID, VENDOR_ID ) ;


CREATE TABLE SB_ASSMBL
  (
    STATUS_BOARD_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    STATUS_BOARD_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD          VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SB_ASSMBL ADD CHECK ( STATUS_BOARD_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SB_ASSMBL ADD CHECK ( STATUS_BOARD_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SB_ASSMBL ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SB_ASSMBL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SB_ASSMBL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SB_ASSMBL
IS
  'Used to dictate which assembly types are displayed on the status board.' ;
  COMMENT ON COLUMN SB_ASSMBL.STATUS_BOARD_DB_ID
IS
  'Primary key of the status board.' ;
  COMMENT ON COLUMN SB_ASSMBL.STATUS_BOARD_ID
IS
  'Primary key of the status board.' ;
  COMMENT ON COLUMN SB_ASSMBL.ASSMBL_DB_ID
IS
  'Primary key for the assembly type.' ;
  COMMENT ON COLUMN SB_ASSMBL.ASSMBL_CD
IS
  'Primary key for the assembly type.' ;
  COMMENT ON COLUMN SB_ASSMBL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record. ' ;
  COMMENT ON COLUMN SB_ASSMBL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SB_ASSMBL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SB_ASSMBL.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SB_ASSMBL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQP_ASSMBL ON SB_ASSMBL
    ( ASSMBL_DB_ID ASC , ASSMBL_CD ASC
    ) ;
  CREATE INDEX IX_SBSB_SBASSMBL ON SB_ASSMBL
    (
      STATUS_BOARD_DB_ID ASC ,
      STATUS_BOARD_ID ASC
    ) ;
ALTER TABLE SB_ASSMBL ADD CONSTRAINT PK_SB_ASSMBL PRIMARY KEY ( STATUS_BOARD_DB_ID, STATUS_BOARD_ID, ASSMBL_DB_ID, ASSMBL_CD ) ;


CREATE TABLE SB_COLUMN
  (
    STATUS_BOARD_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    STATUS_BOARD_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    QUERY_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    COLUMN_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    COLUMN_CD             VARCHAR2 (8) NOT NULL DEFERRABLE ,
    GROUP_ID              NUMBER (10) ,
    DESC_SDESC            VARCHAR2 (40) NOT NULL DEFERRABLE ,
    ORDER_SEQ             NUMBER (4) NOT NULL DEFERRABLE ,
    ALIGNMENT             VARCHAR2 (10) NOT NULL DEFERRABLE ,
    COL_DISPLAY           VARCHAR2 (40) NOT NULL DEFERRABLE ,
    COL_DISPLAY_DATA_TYPE VARCHAR2 (8) NOT NULL DEFERRABLE ,
    COL_SORT              VARCHAR2 (40) ,
    COL_SORT_DATA_TYPE    VARCHAR2 (8) ,
    COL_BG_COLOR          VARCHAR2 (40) ,
    COL_TEXT_COLOR        VARCHAR2 (40) ,
    WIDTH                 NUMBER (4) ,
    DEFAULT_BG_COLOR      VARCHAR2 (6) ,
    DEFAULT_TEXT_COLOR    VARCHAR2 (6) ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SB_COLUMN ADD CHECK ( STATUS_BOARD_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SB_COLUMN ADD CHECK ( STATUS_BOARD_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SB_COLUMN ADD CHECK ( QUERY_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SB_COLUMN ADD CHECK ( COLUMN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SB_COLUMN ADD CHECK ( GROUP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SB_COLUMN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SB_COLUMN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SB_COLUMN
IS
  'Stores meta data for status board columns.' ;
  COMMENT ON COLUMN SB_COLUMN.STATUS_BOARD_DB_ID
IS
  'Primary key of the status board column.' ;
  COMMENT ON COLUMN SB_COLUMN.STATUS_BOARD_ID
IS
  'Primary key of the status board column.' ;
  COMMENT ON COLUMN SB_COLUMN.QUERY_ID
IS
  'Query_id primary key of the status board column group.' ;
  COMMENT ON COLUMN SB_COLUMN.COLUMN_ID
IS
  'Column id primary key of the status board column entity.' ;
  COMMENT ON COLUMN SB_COLUMN.COLUMN_CD
IS
  'This code is used when constructing the status board.' ;
  COMMENT ON COLUMN SB_COLUMN.GROUP_ID
IS
  'The column group that the column is included in.' ;
  COMMENT ON COLUMN SB_COLUMN.DESC_SDESC
IS
  'This is the title for the column.' ;
  COMMENT ON COLUMN SB_COLUMN.ORDER_SEQ
IS
  'The order in which status board colums are displayed.' ;
  COMMENT ON COLUMN SB_COLUMN.ALIGNMENT
IS
  'Alignment to use when rendering column contents.' ;
  COMMENT ON COLUMN SB_COLUMN.COL_DISPLAY
IS
  'Name of the query column containing the query to be displayed.' ;
  COMMENT ON COLUMN SB_COLUMN.COL_DISPLAY_DATA_TYPE
IS
  'Data type for the display column.' ;
  COMMENT ON COLUMN SB_COLUMN.COL_SORT
IS
  'Name of the column query used to sort the column contents.' ;
  COMMENT ON COLUMN SB_COLUMN.COL_SORT_DATA_TYPE
IS
  'Sorting column for datatype.' ;
  COMMENT ON COLUMN SB_COLUMN.COL_BG_COLOR
IS
  'Name of query column used to set the background color.' ;
  COMMENT ON COLUMN SB_COLUMN.COL_TEXT_COLOR
IS
  'Name of query column used to set text color.' ;
  COMMENT ON COLUMN SB_COLUMN.WIDTH
IS
  'Width in pixels of the status  board column.' ;
  COMMENT ON COLUMN SB_COLUMN.DEFAULT_BG_COLOR
IS
  'Default background color from the column.' ;
  COMMENT ON COLUMN SB_COLUMN.DEFAULT_TEXT_COLOR
IS
  'Default text color for the column.' ;
  COMMENT ON COLUMN SB_COLUMN.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record. ' ;
  COMMENT ON COLUMN SB_COLUMN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SB_COLUMN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SB_COLUMN.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SB_COLUMN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
CREATE UNIQUE INDEX IX_SBCOLUMN_UNIQUE_FIELD ON SB_COLUMN
  (
    STATUS_BOARD_DB_ID ASC , STATUS_BOARD_ID ASC , COLUMN_CD ASC
  )
  ;
  CREATE INDEX IX_SBCOLUMNGROUP_SBCOLUMN ON SB_COLUMN
    (
      STATUS_BOARD_DB_ID ASC ,
      STATUS_BOARD_ID ASC ,
      GROUP_ID ASC
    ) ;
  CREATE INDEX IX_SBQUERY_SBCOLUMN ON SB_COLUMN
    (
      STATUS_BOARD_DB_ID ASC ,
      STATUS_BOARD_ID ASC ,
      QUERY_ID ASC
    ) ;
ALTER TABLE SB_COLUMN ADD CONSTRAINT PK_SB_COLUMN PRIMARY KEY ( STATUS_BOARD_DB_ID, STATUS_BOARD_ID, QUERY_ID, COLUMN_ID ) ;


CREATE TABLE SB_COLUMN_GROUP
  (
    STATUS_BOARD_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    STATUS_BOARD_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    GROUP_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (40) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SB_COLUMN_GROUP ADD CHECK ( STATUS_BOARD_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SB_COLUMN_GROUP ADD CHECK ( STATUS_BOARD_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SB_COLUMN_GROUP ADD CHECK ( GROUP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SB_COLUMN_GROUP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SB_COLUMN_GROUP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SB_COLUMN_GROUP
IS
  'Table used to group status board columns together under a single header.' ;
  COMMENT ON COLUMN SB_COLUMN_GROUP.STATUS_BOARD_DB_ID
IS
  'Primary key of the status board column group.' ;
  COMMENT ON COLUMN SB_COLUMN_GROUP.STATUS_BOARD_ID
IS
  'Primary key of the status board column group.' ;
  COMMENT ON COLUMN SB_COLUMN_GROUP.GROUP_ID
IS
  'Group_id primary key of the status board column group.' ;
  COMMENT ON COLUMN SB_COLUMN_GROUP.DESC_SDESC
IS
  'This is the title for the column group.' ;
  COMMENT ON COLUMN SB_COLUMN_GROUP.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record. ' ;
  COMMENT ON COLUMN SB_COLUMN_GROUP.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SB_COLUMN_GROUP.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SB_COLUMN_GROUP.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SB_COLUMN_GROUP.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_SBSB_SBCOLUMNGROUP ON SB_COLUMN_GROUP
    (
      STATUS_BOARD_DB_ID ASC ,
      STATUS_BOARD_ID ASC
    ) ;
ALTER TABLE SB_COLUMN_GROUP ADD CONSTRAINT PK_SB_COLUMN_GROUP PRIMARY KEY ( STATUS_BOARD_DB_ID, STATUS_BOARD_ID, GROUP_ID ) ;


CREATE TABLE SB_QUERY
  (
    STATUS_BOARD_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    STATUS_BOARD_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    QUERY_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (40) NOT NULL DEFERRABLE ,
    QUERY_SQL CLOB NOT NULL DEFERRABLE ,
    REFRESH_START      DATE NOT NULL DEFERRABLE ,
    REFRESH_INTERVAL   NUMBER (5) NOT NULL DEFERRABLE ,
    LAST_REFRESH_START DATE ,
    LAST_REFRESH_END   DATE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SB_QUERY ADD CHECK ( STATUS_BOARD_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SB_QUERY ADD CHECK ( STATUS_BOARD_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SB_QUERY ADD CHECK ( QUERY_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SB_QUERY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SB_QUERY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SB_QUERY
IS
  'Contains queries that are used to retrieve status board data' ;
  COMMENT ON COLUMN SB_QUERY.STATUS_BOARD_DB_ID
IS
  'Primary key for the query.' ;
  COMMENT ON COLUMN SB_QUERY.STATUS_BOARD_ID
IS
  'Primary key for the query.' ;
  COMMENT ON COLUMN SB_QUERY.QUERY_ID
IS
  'Primary key for the query.' ;
  COMMENT ON COLUMN SB_QUERY.DESC_SDESC
IS
  'Short description of the query.' ;
  COMMENT ON COLUMN SB_QUERY.QUERY_SQL
IS
  'Sql code for the query.' ;
  COMMENT ON COLUMN SB_QUERY.REFRESH_START
IS
  'Time of day that the refresh interval is relative to.' ;
  COMMENT ON COLUMN SB_QUERY.REFRESH_INTERVAL
IS
  'Time interval (in seconds) between data refreshes for data populated by this query.' ;
  COMMENT ON COLUMN SB_QUERY.LAST_REFRESH_START
IS
  'Time stamp for the last time the data started being refreshed.' ;
  COMMENT ON COLUMN SB_QUERY.LAST_REFRESH_END
IS
  'Time stamp for the last time the data finished being refreshed.' ;
  COMMENT ON COLUMN SB_QUERY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record. ' ;
  COMMENT ON COLUMN SB_QUERY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SB_QUERY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SB_QUERY.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SB_QUERY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_SBSB_SBQUERY ON SB_QUERY
    (
      STATUS_BOARD_DB_ID ASC ,
      STATUS_BOARD_ID ASC
    ) ;
ALTER TABLE SB_QUERY ADD CONSTRAINT PK_SB_QUERY PRIMARY KEY ( STATUS_BOARD_DB_ID, STATUS_BOARD_ID, QUERY_ID ) ;


CREATE TABLE SB_STATUS_BOARD
  (
    STATUS_BOARD_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    STATUS_BOARD_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    STATUS_BOARD_CD    VARCHAR2 (8) NOT NULL ,
    DESC_SDESC         VARCHAR2 (40) NOT NULL DEFERRABLE ,
    DESC_LDESC         VARCHAR2 (2000) ,
    ASSET_URL          VARCHAR2 (1500) ,
    REFRESH_INTERVAL   NUMBER (4) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SB_STATUS_BOARD ADD CHECK ( STATUS_BOARD_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SB_STATUS_BOARD ADD CHECK ( STATUS_BOARD_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SB_STATUS_BOARD ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SB_STATUS_BOARD ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SB_STATUS_BOARD
IS
  'The main table for status boards.' ;
  COMMENT ON COLUMN SB_STATUS_BOARD.STATUS_BOARD_DB_ID
IS
  'Primary key of the status board.' ;
  COMMENT ON COLUMN SB_STATUS_BOARD.STATUS_BOARD_ID
IS
  'Primary key of the status board.' ;
  COMMENT ON COLUMN SB_STATUS_BOARD.STATUS_BOARD_CD
IS
  'Unique code used for the construction of status board data tables.' ;
  COMMENT ON COLUMN SB_STATUS_BOARD.DESC_SDESC
IS
  'Name of the status board.' ;
  COMMENT ON COLUMN SB_STATUS_BOARD.DESC_LDESC
IS
  'Description of the status board.' ;
  COMMENT ON COLUMN SB_STATUS_BOARD.ASSET_URL
IS
  'Url for asset column hyperlink.' ;
  COMMENT ON COLUMN SB_STATUS_BOARD.REFRESH_INTERVAL
IS
  'Time interval (in seconds) between data refreshes for data populated by this query.' ;
  COMMENT ON COLUMN SB_STATUS_BOARD.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record. ' ;
  COMMENT ON COLUMN SB_STATUS_BOARD.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SB_STATUS_BOARD.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SB_STATUS_BOARD.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SB_STATUS_BOARD.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE SB_STATUS_BOARD ADD CONSTRAINT PK_SB_STATUS_BOARD PRIMARY KEY ( STATUS_BOARD_DB_ID, STATUS_BOARD_ID ) ;
ALTER TABLE SB_STATUS_BOARD ADD CONSTRAINT IX_SBSTATBOARDCD_UNQ UNIQUE ( STATUS_BOARD_CD ) ;


CREATE TABLE SCHED_ACTION
  (
    SCHED_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    ACTION_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    ACTION_LDESC       VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    HR_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    ACTION_DT          DATE NOT NULL DEFERRABLE ,
    CANCEL_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CANCEL_SIGNED_BOOL NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    CANCEL_LDESC       VARCHAR2 (4000) ,
    CANCEL_HR_DB_ID    NUMBER (10) ,
    CANCEL_HR_ID       NUMBER (10) ,
    CANCEL_DT          DATE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_ACTION ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_ACTION ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_ACTION ADD CHECK ( ACTION_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_ACTION ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_ACTION ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_ACTION ADD CHECK ( CANCEL_BOOL        IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_ACTION ADD CHECK ( CANCEL_SIGNED_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_ACTION ADD CHECK ( CANCEL_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_ACTION ADD CHECK ( CANCEL_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_ACTION ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_ACTION ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_ACTION.CANCEL_BOOL
IS
  'A flag to determine if an action has been cancelled or not.' ;
  COMMENT ON COLUMN SCHED_ACTION.CANCEL_LDESC
IS
  'The description of the cancelled action.' ;
  COMMENT ON COLUMN SCHED_ACTION.CANCEL_HR_DB_ID
IS
  'The human resource who cancelled the action.' ;
  COMMENT ON COLUMN SCHED_ACTION.CANCEL_HR_ID
IS
  'The human resource who cancelled the action.' ;
  COMMENT ON COLUMN SCHED_ACTION.CANCEL_DT
IS
  'The date the action was cancelled.' ;
  CREATE INDEX IX_ORGHR_SCHEDACTION ON SCHED_ACTION
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_SCHEDACTIONCANCELHR ON SCHED_ACTION
    (
      CANCEL_HR_DB_ID ASC ,
      CANCEL_HR_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDSTASK_SCHEDACTION ON SCHED_ACTION
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
ALTER TABLE SCHED_ACTION ADD CONSTRAINT PK_SCHED_ACTION PRIMARY KEY ( SCHED_DB_ID, SCHED_ID, ACTION_ID ) ;


CREATE TABLE SCHED_COST_LINE_ITEM
  (
    SCHED_DB_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID                  NUMBER (10) NOT NULL DEFERRABLE ,
    COST_LINE_ITEM_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    COST_LINE_ITEM_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    COST_LINE_ITEM_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    INIT_EXP_COST             NUMBER (15,5) NOT NULL DEFERRABLE ,
    EXP_COST                  NUMBER (15,5) ,
    ACTUAL_COST               NUMBER (15,5) ,
    ITEM_NOTE                 VARCHAR2 (4000) ,
    INVOICE_NO_SDESC          VARCHAR2 (40) ,
    INVOICE_RECEIVED_DT       DATE ,
    RSTAT_CD                  NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT               DATE NOT NULL DEFERRABLE ,
    REVISION_DT               DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER             VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_COST_LINE_ITEM ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_COST_LINE_ITEM ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_COST_LINE_ITEM ADD CHECK ( COST_LINE_ITEM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_COST_LINE_ITEM ADD CHECK ( COST_LINE_ITEM_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_COST_LINE_ITEM ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_COST_LINE_ITEM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_COST_LINE_ITEM.SCHED_DB_ID
IS
  'The SCHED_DB_ID and SCHED_ID columns are a foreign key to SCHED_STASK' ;
  COMMENT ON COLUMN SCHED_COST_LINE_ITEM.SCHED_ID
IS
  'The SCHED_DB_ID and SCHED_ID columns are a foreign key to SCHED_STASK' ;
  COMMENT ON COLUMN SCHED_COST_LINE_ITEM.COST_LINE_ITEM_ID
IS
  'The SCHED_DB_ID and SCHED_ID columns are a foreign key to SCHED_STASK' ;
  COMMENT ON COLUMN SCHED_COST_LINE_ITEM.COST_LINE_ITEM_TYPE_DB_ID
IS
  'These mandatory fields are a foreign key to REF_COST_LINE_ITEM_TYPE' ;
  COMMENT ON COLUMN SCHED_COST_LINE_ITEM.COST_LINE_ITEM_TYPE_CD
IS
  'These mandatory fields are a foreign key to REF_COST_LINE_ITEM_TYPE' ;
  COMMENT ON COLUMN SCHED_COST_LINE_ITEM.INIT_EXP_COST
IS
  'This mandatory column contains the initial expected cost for the cost line item.' ;
  COMMENT ON COLUMN SCHED_COST_LINE_ITEM.EXP_COST
IS
  'This optional column contains the expected cost for the cost line item.' ;
  COMMENT ON COLUMN SCHED_COST_LINE_ITEM.ACTUAL_COST
IS
  'This optional column contains the actual cost for the cost line item.' ;
  COMMENT ON COLUMN SCHED_COST_LINE_ITEM.ITEM_NOTE
IS
  'This optional column contains user entered notes for the cost line item.' ;
  COMMENT ON COLUMN SCHED_COST_LINE_ITEM.INVOICE_NO_SDESC
IS
  'Invoice number.' ;
  COMMENT ON COLUMN SCHED_COST_LINE_ITEM.INVOICE_RECEIVED_DT
IS
  'Invoice received date.' ;
  COMMENT ON COLUMN SCHED_COST_LINE_ITEM.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SCHED_COST_LINE_ITEM.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SCHED_COST_LINE_ITEM.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SCHED_COST_LINE_ITEM.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SCHED_COST_LINE_ITEM.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_SCHEDSTASK_SCHEDCOSTLINE ON SCHED_COST_LINE_ITEM
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
ALTER TABLE SCHED_COST_LINE_ITEM ADD CONSTRAINT PK_SCHED_COST_LINE_ITEM PRIMARY KEY ( SCHED_DB_ID, SCHED_ID, COST_LINE_ITEM_ID ) ;


CREATE TABLE SCHED_EXT_PART
  (
    SCHED_DB_ID         NUMBER (10) NOT NULL ,
    SCHED_ID            NUMBER (10) NOT NULL ,
    SCHED_EXT_PART_ID   NUMBER (10) NOT NULL ,
    SCHED_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    RMV_PART_NO         VARCHAR2 (40) ,
    RMV_SERIAL_BATCH_NO VARCHAR2 (40) ,
    RMV_QT FLOAT ,
    INST_PART_NO         VARCHAR2 (40) ,
    INST_SERIAL_BATCH_NO VARCHAR2 (40) ,
    INST_QT FLOAT ,
    INST_SERVICE_TAG_SDESC VARCHAR2 (80) ,
    NOTES                  VARCHAR2 (200) ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_EXT_PART ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE SCHED_EXT_PART ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE SCHED_EXT_PART ADD CHECK ( SCHED_EXT_PART_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE SCHED_EXT_PART ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_EXT_PART ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SCHED_EXT_PART
IS
  'Entity to hold the customer part information for a scheduled task.' ;
  COMMENT ON COLUMN SCHED_EXT_PART.SCHED_DB_ID
IS
  'FK to SCHED_STASK table.' ;
  COMMENT ON COLUMN SCHED_EXT_PART.SCHED_ID
IS
  'FK to SCHED_STASK table.' ;
  COMMENT ON COLUMN SCHED_EXT_PART.SCHED_EXT_PART_ID
IS
  'PK for SCHED_EXT_PART table.' ;
  COMMENT ON COLUMN SCHED_EXT_PART.SCHED_SDESC
IS
  'Short description of the externally controlled part being added/removed.' ;
  COMMENT ON COLUMN SCHED_EXT_PART.RMV_PART_NO
IS
  'Part number of externally controlled part being removed.' ;
  COMMENT ON COLUMN SCHED_EXT_PART.RMV_SERIAL_BATCH_NO
IS
  'Serial number or Batch number of externally controlled part being removed.' ;
  COMMENT ON COLUMN SCHED_EXT_PART.RMV_QT
IS
  'Quantity of externally controlled parts being removed.' ;
  COMMENT ON COLUMN SCHED_EXT_PART.INST_PART_NO
IS
  'Part number of externally controlled part being installed.' ;
  COMMENT ON COLUMN SCHED_EXT_PART.INST_SERIAL_BATCH_NO
IS
  'Serial number or Batch number of externally controlled part being installed.' ;
  COMMENT ON COLUMN SCHED_EXT_PART.INST_QT
IS
  'Quantity of externally controlled parts being installed.' ;
  COMMENT ON COLUMN SCHED_EXT_PART.INST_SERVICE_TAG_SDESC
IS
  'Provides service tag related information about the externally controlled part being installed.' ;
  COMMENT ON COLUMN SCHED_EXT_PART.NOTES
IS
  'Provides additional notes about the parts being installed or removed.' ;
  COMMENT ON COLUMN SCHED_EXT_PART.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SCHED_EXT_PART.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SCHED_EXT_PART.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SCHED_EXT_PART.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_SCHEDSTASK_SCHEDEXTPART ON SCHED_EXT_PART
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
ALTER TABLE SCHED_EXT_PART ADD CONSTRAINT PK_SCHED_EXT_PART PRIMARY KEY ( SCHED_DB_ID, SCHED_ID, SCHED_EXT_PART_ID ) ;
ALTER TABLE SCHED_EXT_PART ADD CONSTRAINT IX_SCHEDEXTPARTID_UNQ UNIQUE ( SCHED_EXT_PART_ID ) ;


CREATE TABLE SCHED_IMPACT
  (
    IMPACT_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    IMPACT_CD      VARCHAR2 (20) NOT NULL DEFERRABLE ,
    SCHED_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    IMPACT_LDESC   VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_IMPACT ADD CHECK ( IMPACT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_IMPACT ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_IMPACT ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_IMPACT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_IMPACT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_SCHEDSTASK_SCHEDIMPACT ON SCHED_IMPACT
  (
    SCHED_DB_ID ASC ,
    SCHED_ID ASC
  ) ;
ALTER TABLE SCHED_IMPACT ADD CONSTRAINT PK_SCHED_IMPACT PRIMARY KEY ( IMPACT_DB_ID, IMPACT_CD, SCHED_DB_ID, SCHED_ID ) ;


CREATE TABLE SCHED_INST_PART
  (
    SCHED_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_PART_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_INST_PART_ID NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID       NUMBER (10) ,
    INV_NO_ID          NUMBER (10) ,
    PART_NO_DB_ID      NUMBER (10) ,
    PART_NO_ID         NUMBER (10) ,
    SERIAL_NO_OEM      VARCHAR2 (40) ,
    INST_QT FLOAT ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_INST_PART ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_INST_PART ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_INST_PART ADD CHECK ( SCHED_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_INST_PART ADD CHECK ( SCHED_INST_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_INST_PART ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_INST_PART ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_INST_PART ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_INST_PART ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_INST_PART ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_INST_PART ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SCHED_INST_PART
IS
  'Storage for part information on parts that are due to be installed.' ;
  COMMENT ON COLUMN SCHED_INST_PART.SCHED_DB_ID
IS
  'PK - FK to SCHED_PART.' ;
  COMMENT ON COLUMN SCHED_INST_PART.SCHED_ID
IS
  'PK - FK to SCHED_PART.' ;
  COMMENT ON COLUMN SCHED_INST_PART.SCHED_PART_ID
IS
  'PK - FK to SCHED_PART.' ;
  COMMENT ON COLUMN SCHED_INST_PART.SCHED_INST_PART_ID
IS
  'PK - Installation Part ID.' ;
  COMMENT ON COLUMN SCHED_INST_PART.INV_NO_DB_ID
IS
  'FK to INV_INV.' ;
  COMMENT ON COLUMN SCHED_INST_PART.INV_NO_ID
IS
  'FK to INV_INV.' ;
  COMMENT ON COLUMN SCHED_INST_PART.PART_NO_DB_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN SCHED_INST_PART.PART_NO_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN SCHED_INST_PART.SERIAL_NO_OEM
IS
  'Identifies the serial number of the item that was installed. This only applies to serialized part numbers.' ;
  COMMENT ON COLUMN SCHED_INST_PART.INST_QT
IS
  'Only applies to non-serialized items. If the desired part number is serialized, then inst_qt=1.' ;
  COMMENT ON COLUMN SCHED_INST_PART.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SCHED_INST_PART.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN SCHED_INST_PART.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN SCHED_INST_PART.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN SCHED_INST_PART.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EQPRTNO_SCHDINSTPRT ON SCHED_INST_PART
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVINV_SCDINSTPRT ON SCHED_INST_PART
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDPRT_SCDINSTPRT ON SCHED_INST_PART
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC ,
      SCHED_PART_ID ASC
    ) ;
ALTER TABLE SCHED_INST_PART ADD CONSTRAINT "pk_SCHED_INST_PART" PRIMARY KEY ( SCHED_DB_ID, SCHED_ID, SCHED_PART_ID, SCHED_INST_PART_ID ) ;


CREATE TABLE SCHED_KIT_MAP
  (
    SCHED_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    KIT_INV_NO_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    KIT_INV_NO_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    INV_COND_DB_ID   NUMBER (10) ,
    INV_COND_CD      VARCHAR2 (8) ,
    OWNER_DB_ID      NUMBER (10) ,
    OWNER_ID         NUMBER (10) ,
    LOC_DB_ID        NUMBER (10) ,
    LOC_ID           NUMBER (10) ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_KIT_MAP ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_KIT_MAP ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_KIT_MAP ADD CHECK ( KIT_INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_KIT_MAP ADD CHECK ( KIT_INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_KIT_MAP ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_KIT_MAP ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_KIT_MAP ADD CHECK ( INV_COND_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_KIT_MAP ADD CHECK ( OWNER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_KIT_MAP ADD CHECK ( OWNER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_KIT_MAP ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_KIT_MAP ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_KIT_MAP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_KIT_MAP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SCHED_KIT_MAP
IS
  'This table maps kits to the tasks and inventory for a kit work package' ;
  COMMENT ON COLUMN SCHED_KIT_MAP.INV_COND_DB_ID
IS
  'FK to REF_INV_COND.  Represents owner of inventory in kit.' ;
  COMMENT ON COLUMN SCHED_KIT_MAP.INV_COND_CD
IS
  'FK to REF_INV_COND.  Represents owner of inventory in kit.' ;
  COMMENT ON COLUMN SCHED_KIT_MAP.OWNER_DB_ID
IS
  'FK to REF_INV_COND.  Represents inventory condition of inventory in kit.' ;
  COMMENT ON COLUMN SCHED_KIT_MAP.OWNER_ID
IS
  'FK to REF_INV_COND.  Represents inventory condition of inventory in kit.' ;
  COMMENT ON COLUMN SCHED_KIT_MAP.LOC_DB_ID
IS
  'FK to INV_LOC.  Represents the location of inventory in kit.' ;
  COMMENT ON COLUMN SCHED_KIT_MAP.LOC_ID
IS
  'FK to INV_LOC.  Represents the location of inventory in kit.' ;
  CREATE INDEX IX_INVINV_SCHEDKITMAP ON SCHED_KIT_MAP
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVLOC_SCHEDKITMAP ON SCHED_KIT_MAP
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
  CREATE INDEX IX_INVOWNER_SCHEDKITMAP ON SCHED_KIT_MAP
    (
      OWNER_DB_ID ASC ,
      OWNER_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDSTASK_SCHEDKITMAP ON SCHED_KIT_MAP
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_INVKIT_SCHEDKITMAP ON SCHED_KIT_MAP
    (
      KIT_INV_NO_DB_ID ASC ,
      KIT_INV_NO_ID ASC
    ) ;
ALTER TABLE SCHED_KIT_MAP ADD CONSTRAINT PK_SCHED_KIT_MAP PRIMARY KEY ( SCHED_DB_ID, SCHED_ID, KIT_INV_NO_DB_ID, KIT_INV_NO_ID, INV_NO_DB_ID, INV_NO_ID ) ;


CREATE TABLE SCHED_LABOUR
  (
    LABOUR_DB_ID                 NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ID                    NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID                  NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID                     NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_STAGE_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_STAGE_CD              VARCHAR2 (8) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_CD              VARCHAR2 (8) NOT NULL DEFERRABLE ,
    WORK_PERF_BOOL               NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    CERT_BOOL                    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    INSP_BOOL                    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CURRENT_STATUS_ORD           NUMBER (10) NOT NULL DEFERRABLE ,
    WO_SCHED_DB_ID               NUMBER (10) ,
    WO_SCHED_ID                  NUMBER (10) ,
    STAGE_REASON_DB_ID           NUMBER (10) ,
    STAGE_REASON_CD              VARCHAR2 (16) ,
    REM_HR                       NUMBER (9,5) ,
    NOTE_LDESC                   VARCHAR2 (4000) ,
    EXT_KEY_SDESC                VARCHAR2 (80) ,
    SOURCE_JOB_STOP_LABOUR_DB_ID NUMBER (10) DEFAULT NULL ,
    SOURCE_JOB_STOP_LABOUR_ID    NUMBER (10) DEFAULT NULL ,
    ALT_ID RAW (16) NOT NULL ,
    REQ_RES_CT FLOAT DEFAULT 1.0 NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_LABOUR ADD CHECK ( LABOUR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR ADD CHECK ( LABOUR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR ADD CHECK ( LABOUR_STAGE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR ADD CHECK ( WORK_PERF_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR ADD CHECK ( CERT_BOOL      IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR ADD CHECK ( INSP_BOOL      IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR ADD CHECK ( CURRENT_STATUS_ORD BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR ADD CHECK ( WO_SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR ADD CHECK ( WO_SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR ADD CHECK ( STAGE_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_LABOUR.EXT_KEY_SDESC
IS
  'The new column is used for action amending in Electronic Logbook adapter project' ;
  COMMENT ON COLUMN SCHED_LABOUR.SOURCE_JOB_STOP_LABOUR_DB_ID
IS
  'FK to SCHED_LABOUR (recursive). When not null, represents the associated labour row that was job stopped resulting in this labour row being created.' ;
  COMMENT ON COLUMN SCHED_LABOUR.SOURCE_JOB_STOP_LABOUR_ID
IS
  'FK to SCHED_LABOUR (recursive). When not null, represents the associated labour row that was job stopped resulting in this labour row being created.' ;
  CREATE INDEX IX_SCHEDSTASK_SCHDLBR ON SCHED_LABOUR
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_SCHDSTASK_WOSCHDLBR ON SCHED_LABOUR
    (
      WO_SCHED_DB_ID ASC ,
      WO_SCHED_ID ASC
    ) ;
  CREATE INDEX IX_SCHDLBR_SRCJOBSTOPSCHDLBR ON SCHED_LABOUR
    (
      SOURCE_JOB_STOP_LABOUR_DB_ID ASC ,
      SOURCE_JOB_STOP_LABOUR_ID ASC
    ) ;
ALTER TABLE SCHED_LABOUR ADD CONSTRAINT PK_SCHED_LABOUR PRIMARY KEY ( LABOUR_DB_ID, LABOUR_ID ) ;
ALTER TABLE SCHED_LABOUR ADD CONSTRAINT IX_SCHEDLABOURALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE SCHED_LABOUR_ACTION
  (
    LABOUR_ROLE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ROLE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    ACTION_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    SIGNED_BOOL       NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_LABOUR_ACTION ADD CHECK ( LABOUR_ROLE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ACTION ADD CHECK ( LABOUR_ROLE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ACTION ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ACTION ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ACTION ADD CHECK ( ACTION_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ACTION ADD CHECK ( SIGNED_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ACTION ADD CHECK ( RSTAT_CD    IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ACTION ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_LABOUR_ACTION.LABOUR_ROLE_DB_ID
IS
  'FK to SCHED_LABOUR_ROLE' ;
  COMMENT ON COLUMN SCHED_LABOUR_ACTION.LABOUR_ROLE_ID
IS
  'FK to SCHED_LABOUR_ROLE' ;
  COMMENT ON COLUMN SCHED_LABOUR_ACTION.SCHED_DB_ID
IS
  'FK to SCHED_ACTION' ;
  COMMENT ON COLUMN SCHED_LABOUR_ACTION.SCHED_ID
IS
  'FK to SCHED_ACTION' ;
  COMMENT ON COLUMN SCHED_LABOUR_ACTION.ACTION_ID
IS
  'FK to SCHED_ACTION' ;
  COMMENT ON COLUMN SCHED_LABOUR_ACTION.SIGNED_BOOL
IS
  'Indicates whether the sched_action row associated with this row has been signed. If electronic signatures are enabled a signature document would have to be signed, otherwise capturing work automatically signs the action. Unsigned actions are cleared before capturing new work, when cancelling out of capturing work and when completing a task.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ACTION.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ACTION.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ACTION.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ACTION.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ACTION.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
CREATE UNIQUE INDEX IX_SCHED_ACTION ON SCHED_LABOUR_ACTION
  (
    SCHED_DB_ID ASC , SCHED_ID ASC , ACTION_ID ASC
  )
  ;
  CREATE INDEX IX_SCHEDLBRROLE_SCHEDLBRACTION ON SCHED_LABOUR_ACTION
    (
      LABOUR_ROLE_DB_ID ASC ,
      LABOUR_ROLE_ID ASC
    ) ;
ALTER TABLE SCHED_LABOUR_ACTION ADD CONSTRAINT PK_SCHED_LABOUR_ACTION PRIMARY KEY ( LABOUR_ROLE_DB_ID, LABOUR_ROLE_ID, SCHED_DB_ID, SCHED_ID, ACTION_ID ) ;


CREATE TABLE SCHED_LABOUR_ESIG
  (
    STATUS_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    STATUS_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    DOC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    DOC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_LABOUR_ESIG ADD CHECK ( STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ESIG ADD CHECK ( STATUS_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ESIG ADD CHECK ( DOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ESIG ADD CHECK ( DOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ESIG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ESIG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_LABOUR_ESIG.STATUS_DB_ID
IS
  'FK to SCHED_LABOUR_ROLE_STATUS' ;
  COMMENT ON COLUMN SCHED_LABOUR_ESIG.STATUS_ID
IS
  'FK to SCHED_LABOUR_ROLE_STATUS' ;
  COMMENT ON COLUMN SCHED_LABOUR_ESIG.DOC_DB_ID
IS
  'FK to ESIG_DOC' ;
  COMMENT ON COLUMN SCHED_LABOUR_ESIG.DOC_ID
IS
  'FK to ESIG_DOC' ;
  COMMENT ON COLUMN SCHED_LABOUR_ESIG.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ESIG.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ESIG.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ESIG.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ESIG.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ESIGDOC_SCHEDLBRESIG ON SCHED_LABOUR_ESIG
    (
      DOC_DB_ID ASC ,
      DOC_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDLBRROLESTAT_SCHEDLBRES ON SCHED_LABOUR_ESIG
    (
      STATUS_DB_ID ASC ,
      STATUS_ID ASC
    ) ;
ALTER TABLE SCHED_LABOUR_ESIG ADD CONSTRAINT PK_SCHED_LABOUR_ESIG PRIMARY KEY ( STATUS_DB_ID, STATUS_ID, DOC_DB_ID, DOC_ID ) ;


CREATE TABLE SCHED_LABOUR_EXT_PART
  (
    LABOUR_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_EXT_PART_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_LABOUR_EXT_PART ADD CHECK ( LABOUR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_EXT_PART ADD CHECK ( LABOUR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_EXT_PART ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_EXT_PART ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_EXT_PART ADD CHECK ( SCHED_EXT_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_EXT_PART ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_EXT_PART ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SCHED_LABOUR_EXT_PART
IS
  'Entity to map labour requirements to customer part requirements:' ;
  COMMENT ON COLUMN SCHED_LABOUR_EXT_PART.LABOUR_DB_ID
IS
  'Foreign key to the SCHED_LABOUR table.' ;
  COMMENT ON COLUMN SCHED_LABOUR_EXT_PART.LABOUR_ID
IS
  'Foreign key to the SCHED_LABOUR table.' ;
  COMMENT ON COLUMN SCHED_LABOUR_EXT_PART.SCHED_DB_ID
IS
  'Foreign key to the SCHED_STASK table.' ;
  COMMENT ON COLUMN SCHED_LABOUR_EXT_PART.SCHED_ID
IS
  'Foreign key to the SCHED_STASK table.' ;
  COMMENT ON COLUMN SCHED_LABOUR_EXT_PART.SCHED_EXT_PART_ID
IS
  'Foreign key to the SCHED_EXT_PART table.' ;
  COMMENT ON COLUMN SCHED_LABOUR_EXT_PART.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SCHED_LABOUR_EXT_PART.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SCHED_LABOUR_EXT_PART.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SCHED_LABOUR_EXT_PART.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SCHED_LABOUR_EXT_PART.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_SCHEDLAB_SCHEDLABEXTPART ON SCHED_LABOUR_EXT_PART
    (
      LABOUR_DB_ID ASC ,
      LABOUR_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDEXTPART_SCHEDLABEXT ON SCHED_LABOUR_EXT_PART
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC ,
      SCHED_EXT_PART_ID ASC
    ) ;
ALTER TABLE SCHED_LABOUR_EXT_PART ADD CONSTRAINT PK_SCHED_LABOUR_EXT_PART PRIMARY KEY ( LABOUR_DB_ID, LABOUR_ID, SCHED_DB_ID, SCHED_ID, SCHED_EXT_PART_ID ) ;


CREATE TABLE SCHED_LABOUR_INST_PART
  (
    LABOUR_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_PART_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_INST_PART_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_LABOUR_INST_PART ADD CHECK ( LABOUR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_INST_PART ADD CHECK ( LABOUR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_INST_PART ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_INST_PART ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_INST_PART ADD CHECK ( SCHED_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_INST_PART ADD CHECK ( SCHED_INST_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_INST_PART ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_INST_PART ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_LABOUR_INST_PART.LABOUR_DB_ID
IS
  'FK to SCHED_LABOUR' ;
  COMMENT ON COLUMN SCHED_LABOUR_INST_PART.LABOUR_ID
IS
  'FK to SCHED_LABOUR' ;
  COMMENT ON COLUMN SCHED_LABOUR_INST_PART.SCHED_DB_ID
IS
  'FK to SCHED_INST_PART' ;
  COMMENT ON COLUMN SCHED_LABOUR_INST_PART.SCHED_ID
IS
  'FK to SCHED_INST_PART' ;
  COMMENT ON COLUMN SCHED_LABOUR_INST_PART.SCHED_PART_ID
IS
  'FK to SCHED_INST_PART' ;
  COMMENT ON COLUMN SCHED_LABOUR_INST_PART.SCHED_INST_PART_ID
IS
  'FK to SCHED_INST_PART' ;
  COMMENT ON COLUMN SCHED_LABOUR_INST_PART.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN SCHED_LABOUR_INST_PART.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SCHED_LABOUR_INST_PART.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SCHED_LABOUR_INST_PART.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN SCHED_LABOUR_INST_PART.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
CREATE UNIQUE INDEX IX_INST_PART ON SCHED_LABOUR_INST_PART
  (
    SCHED_DB_ID ASC , SCHED_ID ASC , SCHED_PART_ID ASC , SCHED_INST_PART_ID ASC
  )
  ;
  CREATE INDEX IX_SCHEDLBR_SCHEDLBRINSTPART ON SCHED_LABOUR_INST_PART
    (
      LABOUR_DB_ID ASC ,
      LABOUR_ID ASC
    ) ;
ALTER TABLE SCHED_LABOUR_INST_PART ADD CONSTRAINT PK_SCHED_LABOUR_INST_PART PRIMARY KEY ( LABOUR_DB_ID, LABOUR_ID, SCHED_DB_ID, SCHED_ID, SCHED_PART_ID, SCHED_INST_PART_ID ) ;


CREATE TABLE SCHED_LABOUR_PANEL
  (
    LABOUR_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_PANEL_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_LABOUR_PANEL ADD CHECK ( LABOUR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_PANEL ADD CHECK ( LABOUR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_PANEL ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_PANEL ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_PANEL ADD CHECK ( SCHED_PANEL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_PANEL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_PANEL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_LABOUR_PANEL.LABOUR_DB_ID
IS
  'FK to SCHED_LABOUR' ;
  COMMENT ON COLUMN SCHED_LABOUR_PANEL.LABOUR_ID
IS
  'FK to SCHED_LABOUR' ;
  COMMENT ON COLUMN SCHED_LABOUR_PANEL.SCHED_DB_ID
IS
  'FK to SCHED_PANEL' ;
  COMMENT ON COLUMN SCHED_LABOUR_PANEL.SCHED_ID
IS
  'FK to SCHED_PANEL' ;
  COMMENT ON COLUMN SCHED_LABOUR_PANEL.SCHED_PANEL_ID
IS
  'FK to SCHED_PANEL' ;
  COMMENT ON COLUMN SCHED_LABOUR_PANEL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SCHED_LABOUR_PANEL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SCHED_LABOUR_PANEL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SCHED_LABOUR_PANEL.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN SCHED_LABOUR_PANEL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_SCHEDPANEL_SCHEDLBRPANEL ON SCHED_LABOUR_PANEL
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC ,
      SCHED_PANEL_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDLBR_SCHEDLBRPANEL ON SCHED_LABOUR_PANEL
    (
      LABOUR_DB_ID ASC ,
      LABOUR_ID ASC
    ) ;
ALTER TABLE SCHED_LABOUR_PANEL ADD CONSTRAINT PK_SCHED_LABOUR_PANEL PRIMARY KEY ( LABOUR_DB_ID, LABOUR_ID, SCHED_DB_ID, SCHED_ID, SCHED_PANEL_ID ) ;


CREATE TABLE SCHED_LABOUR_PARM_DATA
  (
    LABOUR_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_INV_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_LABOUR_PARM_DATA ADD CHECK ( LABOUR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_PARM_DATA ADD CHECK ( LABOUR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_PARM_DATA ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_PARM_DATA ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_PARM_DATA ADD CHECK ( EVENT_INV_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_PARM_DATA ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_PARM_DATA ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_PARM_DATA ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_PARM_DATA ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_PARM_DATA ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_PARM_DATA ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_LABOUR_PARM_DATA.LABOUR_DB_ID
IS
  'FK to SCHED_LABOUR' ;
  COMMENT ON COLUMN SCHED_LABOUR_PARM_DATA.LABOUR_ID
IS
  'FK to SCHED_LABOUR' ;
  COMMENT ON COLUMN SCHED_LABOUR_PARM_DATA.EVENT_DB_ID
IS
  'FK to INV_PARM_DATA' ;
  COMMENT ON COLUMN SCHED_LABOUR_PARM_DATA.EVENT_ID
IS
  'FK to INV_PARM_DATA' ;
  COMMENT ON COLUMN SCHED_LABOUR_PARM_DATA.EVENT_INV_ID
IS
  'FK to INV_PARM_DATA' ;
  COMMENT ON COLUMN SCHED_LABOUR_PARM_DATA.DATA_TYPE_DB_ID
IS
  'FK to INV_PARM_DATA' ;
  COMMENT ON COLUMN SCHED_LABOUR_PARM_DATA.DATA_TYPE_ID
IS
  'FK to INV_PARM_DATA' ;
  COMMENT ON COLUMN SCHED_LABOUR_PARM_DATA.INV_NO_DB_ID
IS
  'FK to INV_PARM_DATA' ;
  COMMENT ON COLUMN SCHED_LABOUR_PARM_DATA.INV_NO_ID
IS
  'FK to INV_PARM_DATA' ;
  COMMENT ON COLUMN SCHED_LABOUR_PARM_DATA.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SCHED_LABOUR_PARM_DATA.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SCHED_LABOUR_PARM_DATA.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SCHED_LABOUR_PARM_DATA.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SCHED_LABOUR_PARM_DATA.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
CREATE UNIQUE INDEX IX_PARM_DATA ON SCHED_LABOUR_PARM_DATA
  (
    EVENT_DB_ID ASC , EVENT_ID ASC , EVENT_INV_ID ASC , DATA_TYPE_DB_ID ASC , DATA_TYPE_ID ASC , INV_NO_DB_ID ASC , INV_NO_ID ASC
  )
  ;
  CREATE INDEX IX_SCHEDLBR_SCHEDLBR_PARMDATA ON SCHED_LABOUR_PARM_DATA
    (
      LABOUR_DB_ID ASC ,
      LABOUR_ID ASC
    ) ;
ALTER TABLE SCHED_LABOUR_PARM_DATA ADD CONSTRAINT PK_SCHED_LABOUR_PARM_DATA PRIMARY KEY ( LABOUR_DB_ID, LABOUR_ID, EVENT_DB_ID, EVENT_ID, EVENT_INV_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID, INV_NO_DB_ID, INV_NO_ID ) ;


CREATE TABLE SCHED_LABOUR_RMVD_PART
  (
    LABOUR_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_PART_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_RMVD_PART_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_LABOUR_RMVD_PART ADD CHECK ( LABOUR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_RMVD_PART ADD CHECK ( LABOUR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_RMVD_PART ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_RMVD_PART ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_RMVD_PART ADD CHECK ( SCHED_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_RMVD_PART ADD CHECK ( SCHED_RMVD_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_RMVD_PART ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_RMVD_PART ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_LABOUR_RMVD_PART.LABOUR_DB_ID
IS
  'FK to SCHED_LABOUR' ;
  COMMENT ON COLUMN SCHED_LABOUR_RMVD_PART.LABOUR_ID
IS
  'FK to SCHED_LABOUR' ;
  COMMENT ON COLUMN SCHED_LABOUR_RMVD_PART.SCHED_DB_ID
IS
  'FK to SCHED_RMVD_PART' ;
  COMMENT ON COLUMN SCHED_LABOUR_RMVD_PART.SCHED_ID
IS
  'FK to SCHED_RMVD_PART' ;
  COMMENT ON COLUMN SCHED_LABOUR_RMVD_PART.SCHED_PART_ID
IS
  'FK to SCHED_RMVD_PART' ;
  COMMENT ON COLUMN SCHED_LABOUR_RMVD_PART.SCHED_RMVD_PART_ID
IS
  'FK to SCHED_RMVD_PART' ;
  COMMENT ON COLUMN SCHED_LABOUR_RMVD_PART.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN SCHED_LABOUR_RMVD_PART.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SCHED_LABOUR_RMVD_PART.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SCHED_LABOUR_RMVD_PART.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SCHED_LABOUR_RMVD_PART.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
CREATE UNIQUE INDEX IX_RMVD_PART ON SCHED_LABOUR_RMVD_PART
  (
    SCHED_DB_ID ASC , SCHED_ID ASC , SCHED_PART_ID ASC , SCHED_RMVD_PART_ID ASC
  )
  ;
  CREATE INDEX IX_SCHEDLBR_SCHEDLBRRMVDPART ON SCHED_LABOUR_RMVD_PART
    (
      LABOUR_DB_ID ASC ,
      LABOUR_ID ASC
    ) ;
ALTER TABLE SCHED_LABOUR_RMVD_PART ADD CONSTRAINT PK_SCHED_LABOUR_RMVD_PART PRIMARY KEY ( LABOUR_DB_ID, LABOUR_ID, SCHED_DB_ID, SCHED_ID, SCHED_PART_ID, SCHED_RMVD_PART_ID ) ;


CREATE TABLE SCHED_LABOUR_ROLE
  (
    LABOUR_ROLE_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ROLE_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ROLE_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ROLE_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    LABOUR_TIME_DB_ID      NUMBER (10) ,
    LABOUR_TIME_CD         VARCHAR2 (8) ,
    SCHED_HR               NUMBER (9,5) ,
    ACTUAL_HR              NUMBER (9,5) ,
    ADJUSTED_BILLING_HR    NUMBER (9,5) ,
    LABOUR_COST            NUMBER (15,5) ,
    ACTUAL_START_DT        DATE ,
    ACTUAL_END_DT          DATE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_LABOUR_ROLE ADD CHECK ( LABOUR_ROLE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ROLE ADD CHECK ( LABOUR_ROLE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ROLE ADD CHECK ( LABOUR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ROLE ADD CHECK ( LABOUR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ROLE ADD CHECK ( LABOUR_ROLE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ROLE ADD CHECK ( LABOUR_TIME_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ROLE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ROLE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_LABOUR_ROLE.LABOUR_ROLE_DB_ID
IS
  'This is the primary key of a sched labour role' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE.LABOUR_ROLE_ID
IS
  'This is the primary key of a sched labour role' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE.LABOUR_DB_ID
IS
  'FK to SCHED_LABOUR' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE.LABOUR_ID
IS
  'FK to SCHED_LABOUR' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE.LABOUR_ROLE_TYPE_DB_ID
IS
  'FK to REF_LABOUR_ROLE_TYPE' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE.LABOUR_ROLE_TYPE_CD
IS
  'FK to REF_LABOUR_ROLE_TYPE' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE.LABOUR_TIME_DB_ID
IS
  'FK to REF_LABOUR_TIME' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE.LABOUR_TIME_CD
IS
  'FK to REF_LABOUR_TIME' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE.ACTUAL_HR
IS
  'This column stores the actual hours that the role spent on the labor requirement.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE.ADJUSTED_BILLING_HR
IS
  'This column stores the adjusted for billing hours for the role on the labor requirement.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE.LABOUR_COST
IS
  'This column stores the labor cost for the role on the labor requirement.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE.ACTUAL_START_DT
IS
  'This column stores the actual start date/time for the role on the labor requirement.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE.ACTUAL_END_DT
IS
  'This column stores the actual end date/time for the role on the labor requirement.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_SCHEDLBR_SCHEDLBRROLE ON SCHED_LABOUR_ROLE
    (
      LABOUR_DB_ID ASC ,
      LABOUR_ID ASC
    ) ;
ALTER TABLE SCHED_LABOUR_ROLE ADD CONSTRAINT PK_SCHED_LABOUR_ROLE PRIMARY KEY ( LABOUR_ROLE_DB_ID, LABOUR_ROLE_ID ) ;
ALTER TABLE SCHED_LABOUR_ROLE ADD CONSTRAINT IX_SCHEDLABOUROLEALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE SCHED_LABOUR_ROLE_STATUS
  (
    STATUS_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    STATUS_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ROLE_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ROLE_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ROLE_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ROLE_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    STATUS_ORD               NUMBER (10) NOT NULL DEFERRABLE ,
    PASS_BOOL                NUMBER (1) DEFAULT 1 ,
    HR_DB_ID                 NUMBER (10) ,
    HR_ID                    NUMBER (10) ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_LABOUR_ROLE_STATUS ADD CHECK ( STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ROLE_STATUS ADD CHECK ( STATUS_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ROLE_STATUS ADD CHECK ( LABOUR_ROLE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ROLE_STATUS ADD CHECK ( LABOUR_ROLE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ROLE_STATUS ADD CHECK ( LABOUR_ROLE_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ROLE_STATUS ADD CHECK ( STATUS_ORD BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ROLE_STATUS ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ROLE_STATUS ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ROLE_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_ROLE_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_LABOUR_ROLE_STATUS.STATUS_DB_ID
IS
  'This is the primary key of a sched labour role status' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE_STATUS.STATUS_ID
IS
  'This is the primary key of a sched labour role status' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE_STATUS.LABOUR_ROLE_DB_ID
IS
  'FK to SCHED_LABOUR_ROLE' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE_STATUS.LABOUR_ROLE_ID
IS
  'FK to SCHED_LABOUR_ROLE' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE_STATUS.LABOUR_ROLE_STATUS_DB_ID
IS
  'FK to REF_LABOUR_ROLE_STATUS' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE_STATUS.LABOUR_ROLE_STATUS_CD
IS
  'FK to REF_LABOUR_ROLE_STATUS' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE_STATUS.PASS_BOOL
IS
  'true for Pass Inspection' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE_STATUS.HR_DB_ID
IS
  'FK to ORG_HR. This column indicate the user who is assigned to / completed the labor role.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE_STATUS.HR_ID
IS
  'FK to ORG_HR. This column indicate the user who is assigned to / completed the labor role.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE_STATUS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE_STATUS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE_STATUS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE_STATUS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SCHED_LABOUR_ROLE_STATUS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGHR_SCHEDLBRROLESTAT ON SCHED_LABOUR_ROLE_STATUS
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDLBRRL_SCHEDLBRRLSTAT ON SCHED_LABOUR_ROLE_STATUS
    (
      LABOUR_ROLE_DB_ID ASC ,
      LABOUR_ROLE_ID ASC
    ) ;
ALTER TABLE SCHED_LABOUR_ROLE_STATUS ADD CONSTRAINT PK_SCHED_LABOUR_ROLE_STATUS PRIMARY KEY ( STATUS_DB_ID, STATUS_ID ) ;


CREATE TABLE SCHED_LABOUR_STEP
  (
    LABOUR_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    STEP_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    STEP_SKILL_ID RAW (16) ,
    NOTES_LDESC    VARCHAR2 (4000) ,
    STEP_STATUS_CD VARCHAR2 (20) NOT NULL DEFERRABLE ,
    ORD_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE ,
    REVISION_NO    NUMBER (10) DEFAULT 1 NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL
  ) ;
ALTER TABLE SCHED_LABOUR_STEP ADD CHECK ( LABOUR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_STEP ADD CHECK ( LABOUR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_STEP ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_STEP ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_STEP ADD CHECK ( STEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_STEP ADD CHECK ( ORD_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_STEP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_STEP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_STEP ADD CONSTRAINT SCHED_LABOUR_STEP_CHK_CTRL CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE SCHED_LABOUR_STEP ADD CONSTRAINT SCHED_LABOUR_STEP_CHK_CREAT CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON COLUMN SCHED_LABOUR_STEP.LABOUR_DB_ID
IS
  'FK to SCHED_LABOUR' ;
  COMMENT ON COLUMN SCHED_LABOUR_STEP.LABOUR_ID
IS
  'FK to SCHED_LABOUR' ;
  COMMENT ON COLUMN SCHED_LABOUR_STEP.SCHED_DB_ID
IS
  'FK to SCHED_STEP' ;
  COMMENT ON COLUMN SCHED_LABOUR_STEP.SCHED_ID
IS
  'FK to SCHED_STEP' ;
  COMMENT ON COLUMN SCHED_LABOUR_STEP.STEP_ID
IS
  'FK to SCHED_STEP' ;
  COMMENT ON COLUMN SCHED_LABOUR_STEP.NOTES_LDESC
IS
  'Used by technician to elaborate on the work archieved for a specific step.' ;
  COMMENT ON COLUMN SCHED_LABOUR_STEP.STEP_STATUS_CD
IS
  'Used to capture the step status at the time the step was signed.' ;
  COMMENT ON COLUMN SCHED_LABOUR_STEP.ORD_ID
IS
  'Used to chronologically order the step signers.' ;
  COMMENT ON COLUMN SCHED_LABOUR_STEP.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SCHED_LABOUR_STEP.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SCHED_LABOUR_STEP.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SCHED_LABOUR_STEP.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SCHED_LABOUR_STEP.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_SCHEDSTEP_SCHEDLBRSTEP ON SCHED_LABOUR_STEP
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC ,
      STEP_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDLBR_SCHEDLBRSTEP ON SCHED_LABOUR_STEP
    (
      LABOUR_DB_ID ASC ,
      LABOUR_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDLBRSTEP_TASKSTEPSKILL ON SCHED_LABOUR_STEP
    (
      STEP_SKILL_ID ASC
    ) ;
ALTER TABLE SCHED_LABOUR_STEP ADD CONSTRAINT PK_SCHED_LABOUR_STEP PRIMARY KEY ( LABOUR_DB_ID, LABOUR_ID, SCHED_DB_ID, SCHED_ID, STEP_ID ) ;


CREATE TABLE SCHED_LABOUR_TOOL
  (
    LABOUR_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    EVENT_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    TOOL_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_LABOUR_TOOL ADD CHECK ( LABOUR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_TOOL ADD CHECK ( LABOUR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_TOOL ADD CHECK ( EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_TOOL ADD CHECK ( EVENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_TOOL ADD CHECK ( TOOL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_TOOL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_LABOUR_TOOL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_LABOUR_TOOL.LABOUR_DB_ID
IS
  'FK to SCHED_LABOUR' ;
  COMMENT ON COLUMN SCHED_LABOUR_TOOL.LABOUR_ID
IS
  'FK to SCHED_LABOUR' ;
  COMMENT ON COLUMN SCHED_LABOUR_TOOL.EVENT_DB_ID
IS
  'FK to EVT_TOOL' ;
  COMMENT ON COLUMN SCHED_LABOUR_TOOL.EVENT_ID
IS
  'FK to EVT_TOOL' ;
  COMMENT ON COLUMN SCHED_LABOUR_TOOL.TOOL_ID
IS
  'FK to EVT_TOOL' ;
  COMMENT ON COLUMN SCHED_LABOUR_TOOL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SCHED_LABOUR_TOOL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SCHED_LABOUR_TOOL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN SCHED_LABOUR_TOOL.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SCHED_LABOUR_TOOL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EVTTOOL_SCHEDLBRTOOL ON SCHED_LABOUR_TOOL
    (
      EVENT_DB_ID ASC ,
      EVENT_ID ASC ,
      TOOL_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDLBR_SCHEDLBRTOOL ON SCHED_LABOUR_TOOL
    (
      LABOUR_DB_ID ASC ,
      LABOUR_ID ASC
    ) ;
ALTER TABLE SCHED_LABOUR_TOOL ADD CONSTRAINT PK_SCHED_LABOUR_TOOL PRIMARY KEY ( LABOUR_DB_ID, LABOUR_ID, EVENT_DB_ID, EVENT_ID, TOOL_ID ) ;


CREATE TABLE SCHED_PANEL
  (
    SCHED_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_PANEL_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    PANEL_DB_ID            NUMBER (10) ,
    PANEL_ID               NUMBER (10) ,
    OPN_MPC_SCHED_DB_ID    NUMBER (10) ,
    OPN_MPC_SCHED_ID       NUMBER (10) ,
    OPN_MPC_SCHED_PANEL_ID NUMBER (10) ,
    CLS_MPC_SCHED_DB_ID    NUMBER (10) ,
    CLS_MPC_SCHED_ID       NUMBER (10) ,
    CLS_MPC_SCHED_PANEL_ID NUMBER (10) ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_PANEL ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PANEL ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PANEL ADD CHECK ( SCHED_PANEL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PANEL ADD CHECK ( PANEL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PANEL ADD CHECK ( PANEL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PANEL ADD CHECK ( OPN_MPC_SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PANEL ADD CHECK ( OPN_MPC_SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PANEL ADD CHECK ( OPN_MPC_SCHED_PANEL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PANEL ADD CHECK ( CLS_MPC_SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PANEL ADD CHECK ( CLS_MPC_SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PANEL ADD CHECK ( CLS_MPC_SCHED_PANEL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PANEL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_PANEL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_PANEL.OPN_MPC_SCHED_DB_ID
IS
  'This relationship means that the following task is scheduled to open the panel' ;
  COMMENT ON COLUMN SCHED_PANEL.CLS_MPC_SCHED_DB_ID
IS
  'This relationship means that the following task is scheduled to close the panel' ;
  COMMENT ON COLUMN SCHED_PANEL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN SCHED_PANEL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN SCHED_PANEL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN SCHED_PANEL.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN SCHED_PANEL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_SCHEDSTASK_SCHEDPANEL ON SCHED_PANEL
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_EQPTSKPANEL_SCHED_PANEL ON SCHED_PANEL
    (
      PANEL_DB_ID ASC ,
      PANEL_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDPANEL_OPNMPCSCHEDPANEL ON SCHED_PANEL
    (
      OPN_MPC_SCHED_DB_ID ASC ,
      OPN_MPC_SCHED_ID ASC ,
      OPN_MPC_SCHED_PANEL_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDPANEL_CLSMPCSCHEDPANEL ON SCHED_PANEL
    (
      CLS_MPC_SCHED_DB_ID ASC ,
      CLS_MPC_SCHED_ID ASC ,
      CLS_MPC_SCHED_PANEL_ID ASC
    ) ;
ALTER TABLE SCHED_PANEL ADD CONSTRAINT "pk_SCHED_PANEL" PRIMARY KEY ( SCHED_DB_ID, SCHED_ID, SCHED_PANEL_ID ) ;


CREATE TABLE SCHED_PART
  (
    SCHED_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_PART_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_BOM_PART_DB_ID    NUMBER (10) ,
    SCHED_BOM_PART_ID       NUMBER (10) ,
    SCHED_PART_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_PART_STATUS_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    SPEC_PART_NO_DB_ID      NUMBER (10) ,
    SPEC_PART_NO_ID         NUMBER (10) ,
    NH_ASSMBL_DB_ID         NUMBER (10) ,
    NH_ASSMBL_CD            VARCHAR2 (8) ,
    NH_ASSMBL_BOM_ID        NUMBER (10) ,
    NH_ASSMBL_POS_ID        NUMBER (10) ,
    ASSMBL_DB_ID            NUMBER (10) ,
    ASSMBL_CD               VARCHAR2 (8) ,
    ASSMBL_BOM_ID           NUMBER (10) ,
    ASSMBL_POS_ID           NUMBER (10) ,
    SCHED_QT FLOAT NOT NULL DEFERRABLE ,
    PART_COST        NUMBER (15,5) ,
    PART_NOTE        VARCHAR2 (4000) ,
    REQ_ACTION_DB_ID NUMBER (10) ,
    REQ_ACTION_CD    VARCHAR2 (8) ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    EXT_REF_ITEM_DB_ID   NUMBER (10) ,
    EXT_REF_ITEM_ID      NUMBER (10) ,
    CONTROL_METHOD_DB_ID NUMBER (10) ,
    CONTROL_METHOD_CD    VARCHAR2 (8)
  ) ;
ALTER TABLE SCHED_PART ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PART ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PART ADD CHECK ( SCHED_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PART ADD CHECK ( SCHED_BOM_PART_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PART ADD CHECK ( SCHED_BOM_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PART ADD CHECK ( SCHED_PART_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PART ADD CHECK ( SPEC_PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PART ADD CHECK ( SPEC_PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PART ADD CHECK ( NH_ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PART ADD CHECK ( NH_ASSMBL_BOM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PART ADD CHECK ( NH_ASSMBL_POS_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PART ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PART ADD CHECK ( ASSMBL_BOM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PART ADD CHECK ( ASSMBL_POS_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PART ADD CHECK ( REQ_ACTION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_PART ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_PART ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SCHED_PART
IS
  'Task Parts List: This entity identifies all of the parts that were consumed/removed during the execution of the task. It includes attributes to aid with scheduling (scheduled parts, materiel request, etc.), as well as attributes to record the actual components that were installed/removed.' ;
  COMMENT ON COLUMN SCHED_PART.SCHED_DB_ID
IS
  'FK to SCHED_STASK. The task for which this part will be consumed/removed.' ;
  COMMENT ON COLUMN SCHED_PART.SCHED_ID
IS
  'FK to SCHED_STASK. The task for which this part will be consumed/removed.' ;
  COMMENT ON COLUMN SCHED_PART.SCHED_PART_ID
IS
  'Identifier used to distinguish between different parts on the same task. It is unique in context of the task.' ;
  COMMENT ON COLUMN SCHED_PART.SCHED_BOM_PART_DB_ID
IS
  'FK to EQP_BOM_PART. Identifies the bill of materiel item that is scheduled to be installed. You must specify either the bom part or the explicit part number. By specifying the bom part, you are allowing for alternate part numbers (specified in the assembly baseline)' ;
  COMMENT ON COLUMN SCHED_PART.SCHED_BOM_PART_ID
IS
  'FK to EQP_BOM_PART. Identifies the bill of materiel item that is scheduled to be installed. You must specify either the bom part or the explicit part number. By specifying the bom part, you are allowing for alternate part numbers (specified in the assembly baseline)' ;
  COMMENT ON COLUMN SCHED_PART.SCHED_PART_STATUS_DB_ID
IS
  'FK to REF_SCHED_PART_STATUS.' ;
  COMMENT ON COLUMN SCHED_PART.SCHED_PART_STATUS_CD
IS
  'FK to REF_SCHED_PART_STATUS.' ;
  COMMENT ON COLUMN SCHED_PART.SPEC_PART_NO_DB_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN SCHED_PART.SPEC_PART_NO_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN SCHED_PART.NH_ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL_POS. Position of the assembly under which we schedule part requirement.' ;
  COMMENT ON COLUMN SCHED_PART.NH_ASSMBL_CD
IS
  'FK to EQP_ASSMBL_POS. Position of the assembly under which we schedule part requirement.' ;
  COMMENT ON COLUMN SCHED_PART.NH_ASSMBL_BOM_ID
IS
  'FK to EQP_ASSMBL_POS. Position of the assembly under which we schedule part requirement.' ;
  COMMENT ON COLUMN SCHED_PART.NH_ASSMBL_POS_ID
IS
  'FK to EQP_ASSMBL_POS. Position of the assembly under which we schedule part requirement.' ;
  COMMENT ON COLUMN SCHED_PART.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL_POS. The log card for which this position is defined.' ;
  COMMENT ON COLUMN SCHED_PART.ASSMBL_CD
IS
  'FK to EQP_ASSMBL_POS. The log card for which this position is defined.' ;
  COMMENT ON COLUMN SCHED_PART.ASSMBL_BOM_ID
IS
  'FK to EQP_ASSMBL_POS. The log card for which this position is defined.' ;
  COMMENT ON COLUMN SCHED_PART.ASSMBL_POS_ID
IS
  'Unique identifier assigned in context of the log card (assmbl_pos_id = 1..n).' ;
  COMMENT ON COLUMN SCHED_PART.SCHED_QT
IS
  'Identifies the number of parts that are scheduled to be installed/consumed. This only applies to non-serialized items. If the desired part number is serialized, then sched_qt=1.' ;
  COMMENT ON COLUMN SCHED_PART.PART_COST
IS
  'Total cost of the Part line item.' ;
  COMMENT ON COLUMN SCHED_PART.PART_NOTE
IS
  'Used to record notes against a materiel request line item.' ;
  COMMENT ON COLUMN SCHED_PART.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SCHED_PART.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SCHED_PART.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SCHED_PART.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SCHED_PART.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  COMMENT ON COLUMN SCHED_PART.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.' ;
  COMMENT ON COLUMN SCHED_PART.EXT_REF_ITEM_DB_ID
IS
  'FK to EXT_REF_ITEM. The reference associated to the part request.' ;
  COMMENT ON COLUMN SCHED_PART.EXT_REF_ITEM_ID
IS
  'FK to EXT_REF_ITEM. The reference associated to the part request.' ;
  COMMENT ON COLUMN SCHED_PART.CONTROL_METHOD_DB_ID
IS
  'FK to REF_CONTROL_METHOD. Method indicating how the part requirement was created (MANUAL/BASELINE/EXTERNAL).' ;
  COMMENT ON COLUMN SCHED_PART.CONTROL_METHOD_CD
IS
  'FK to REF_CONTROL_METHOD. Method indicating how the part requirement was created (MANUAL/BASELINE/EXTERNAL).' ;
  CREATE INDEX IX_EQPASSMBLPOS_SCHEDPART ON SCHED_PART
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC ,
      ASSMBL_BOM_ID ASC ,
      ASSMBL_POS_ID ASC
    ) ;
  CREATE INDEX IX_NH_EQPASSMBLPOS_SCHEDPART ON SCHED_PART
    (
      NH_ASSMBL_DB_ID ASC ,
      NH_ASSMBL_CD ASC ,
      NH_ASSMBL_BOM_ID ASC ,
      NH_ASSMBL_POS_ID ASC
    ) ;
  CREATE INDEX IX_EQPBOMPART_SCHEDPART ON SCHED_PART
    (
      SCHED_BOM_PART_DB_ID ASC ,
      SCHED_BOM_PART_ID ASC
    ) ;
  CREATE INDEX IX_EQPPRTN_SCHEDPART ON SCHED_PART
    (
      SPEC_PART_NO_DB_ID ASC ,
      SPEC_PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDSTASK_SCHEDPART ON SCHED_PART
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_EXTREFITEM_SCHEDPART ON SCHED_PART
    (
      EXT_REF_ITEM_ID ASC ,
      EXT_REF_ITEM_DB_ID ASC
    ) ;
  CREATE INDEX IX_CONTROLMETHOD_SCHEDPART ON SCHED_PART
    (
      CONTROL_METHOD_DB_ID ASC ,
      CONTROL_METHOD_CD ASC
    ) ;
ALTER TABLE SCHED_PART ADD CONSTRAINT PK_SCHED_PART PRIMARY KEY ( SCHED_DB_ID, SCHED_ID, SCHED_PART_ID ) ;
ALTER TABLE SCHED_PART ADD CONSTRAINT IX_SCHEDPARTALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE SCHED_RMVD_PART
  (
    SCHED_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_PART_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_RMVD_PART_ID NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID       NUMBER (10) ,
    INV_NO_ID          NUMBER (10) ,
    PART_NO_DB_ID      NUMBER (10) ,
    PART_NO_ID         NUMBER (10) ,
    SERIAL_NO_OEM      VARCHAR2 (40) ,
    RMVD_QT FLOAT ,
    REMOVE_REASON_DB_ID NUMBER (10) ,
    REMOVE_REASON_CD    VARCHAR2 (8) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_RMVD_PART ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_RMVD_PART ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_RMVD_PART ADD CHECK ( SCHED_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_RMVD_PART ADD CHECK ( SCHED_RMVD_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_RMVD_PART ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_RMVD_PART ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_RMVD_PART ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_RMVD_PART ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_RMVD_PART ADD CHECK ( REMOVE_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_RMVD_PART ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_RMVD_PART ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SCHED_RMVD_PART
IS
  'This table defines the part or inventory that was removed during the execution of a task.' ;
  COMMENT ON COLUMN SCHED_RMVD_PART.SCHED_DB_ID
IS
  'PK- FK to SCHED_PART.' ;
  COMMENT ON COLUMN SCHED_RMVD_PART.SCHED_ID
IS
  'PK- FK to SCHED_PART.' ;
  COMMENT ON COLUMN SCHED_RMVD_PART.SCHED_PART_ID
IS
  'PK- FK to SCHED_PART.' ;
  COMMENT ON COLUMN SCHED_RMVD_PART.SCHED_RMVD_PART_ID
IS
  'PK - Removed Part ID.' ;
  COMMENT ON COLUMN SCHED_RMVD_PART.INV_NO_DB_ID
IS
  'FK to INV_INV.' ;
  COMMENT ON COLUMN SCHED_RMVD_PART.INV_NO_ID
IS
  'FK to INV_INV.' ;
  COMMENT ON COLUMN SCHED_RMVD_PART.PART_NO_DB_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN SCHED_RMVD_PART.PART_NO_ID
IS
  'FK to EQP_PART_NO. ' ;
  COMMENT ON COLUMN SCHED_RMVD_PART.SERIAL_NO_OEM
IS
  'Identifies the serial number of the item that was removed. This only applies to serialized part numbers.' ;
  COMMENT ON COLUMN SCHED_RMVD_PART.RMVD_QT
IS
  'Only applies to non-serialized items. If the desired part number is serialized, then inst_qt=1.' ;
  COMMENT ON COLUMN SCHED_RMVD_PART.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN SCHED_RMVD_PART.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN SCHED_RMVD_PART.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN SCHED_RMVD_PART.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN SCHED_RMVD_PART.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_SCHDRMVDPRT_EQPPRTNO ON SCHED_RMVD_PART
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVINV_SCHDRMVDPRT ON SCHED_RMVD_PART
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDPRT_SCHDRMVDPRT ON SCHED_RMVD_PART
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC ,
      SCHED_PART_ID ASC
    ) ;
ALTER TABLE SCHED_RMVD_PART ADD CONSTRAINT "pk_SCHED_RMVD_PART" PRIMARY KEY ( SCHED_DB_ID, SCHED_ID, SCHED_PART_ID, SCHED_RMVD_PART_ID ) ;


CREATE TABLE SCHED_SERVICE_TYPE
  (
    SCHED_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    SERVICE_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SERVICE_TYPE_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_SERVICE_TYPE ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_SERVICE_TYPE ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_SERVICE_TYPE ADD CHECK ( SERVICE_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_SERVICE_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_SERVICE_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SCHED_SERVICE_TYPE
IS
  'Entity to store the service types applicable for a work package.' ;
  COMMENT ON COLUMN SCHED_SERVICE_TYPE.SCHED_DB_ID
IS
  'FK to SCHED_STASK' ;
  COMMENT ON COLUMN SCHED_SERVICE_TYPE.SCHED_ID
IS
  'FK to SCHED_STASK' ;
  COMMENT ON COLUMN SCHED_SERVICE_TYPE.SERVICE_TYPE_DB_ID
IS
  'FK to REF_SERVICE_TYPE' ;
  COMMENT ON COLUMN SCHED_SERVICE_TYPE.SERVICE_TYPE_CD
IS
  'FK to REF_SERVICE_TYPE' ;
  COMMENT ON COLUMN SCHED_SERVICE_TYPE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SCHED_SERVICE_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SCHED_SERVICE_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SCHED_SERVICE_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SCHED_SERVICE_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_SCHEDSTASK_SCHEDSRVTYPE ON SCHED_SERVICE_TYPE
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
ALTER TABLE SCHED_SERVICE_TYPE ADD CONSTRAINT PK_SCHED_SERVICE_TYPE PRIMARY KEY ( SCHED_DB_ID, SCHED_ID, SERVICE_TYPE_DB_ID, SERVICE_TYPE_CD ) ;


CREATE TABLE SCHED_STASK
  (
    SCHED_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    H_SCHED_DB_ID         NUMBER (10) ,
    H_SCHED_ID            NUMBER (10) ,
    DUP_JIC_SCHED_DB_ID   NUMBER (10) ,
    DUP_JIC_SCHED_ID      NUMBER (10) ,
    TASK_DB_ID            NUMBER (10) ,
    TASK_ID               NUMBER (10) ,
    FAULT_DB_ID           NUMBER (10) ,
    FAULT_ID              NUMBER (10) ,
    TASK_PRIORITY_DB_ID   NUMBER (10) ,
    TASK_PRIORITY_CD      VARCHAR2 (8) ,
    TASK_CLASS_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_CLASS_CD         VARCHAR2 (16) NOT NULL DEFERRABLE ,
    TASK_SUBCLASS_DB_ID   NUMBER (10) ,
    TASK_SUBCLASS_CD      VARCHAR2 (8) ,
    RO_VENDOR_DB_ID       NUMBER (10) ,
    RO_VENDOR_ID          NUMBER (10) ,
    ORIG_PART_NO_DB_ID    NUMBER (10) ,
    ORIG_PART_NO_ID       NUMBER (10) ,
    TASK_ORIGINATOR_DB_ID NUMBER (10) ,
    TASK_ORIGINATOR_CD    VARCHAR2 (8) ,
    MAIN_INV_NO_DB_ID     NUMBER (10) ,
    MAIN_INV_NO_ID        NUMBER (10) ,
    RECEIVE_COND_DB_ID    NUMBER (10) ,
    RECEIVE_COND_CD       VARCHAR2 (8) ,
    REPAIR_QT FLOAT ,
    TASK_REF_SDESC VARCHAR2 (80) ,
    MIN_PLAN_YIELD_PCT FLOAT ,
    ISSUE_ACCOUNT_DB_ID NUMBER (10) ,
    ISSUE_ACCOUNT_ID    NUMBER (10) ,
    ISSUED_DT           DATE ,
    ISSUED_GDT          DATE ,
    WARRANTY_NOTE       VARCHAR2 (4000) ,
    WO_REF_SDESC        VARCHAR2 (80) ,
    WO_DB_ID            NUMBER (10) ,
    WO_ID               NUMBER (10) ,
    ROUTINE_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    REQUEST_PARTS_BOOL  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RESOURCE_SUM_BOOL   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ADHOC_RECUR_BOOL    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    AUTO_COMPLETE_BOOL  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CORR_FIX_BOOL       NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    INSTRUCTION_LDESC   VARCHAR2 (4000) ,
    VENDOR_WO_REF_SDESC VARCHAR2 (80) ,
    WO_COMMIT_LINE_ORD  NUMBER (10) ,
    RO_REF_SDESC        VARCHAR2 (80) ,
    BARCODE_SDESC       VARCHAR2 (80) NOT NULL DEFERRABLE ,
    TASK_LOCK_BOOL      NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    PREVENT_LPA_BOOL    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    EST_DURATION_QT FLOAT DEFAULT 0 ,
    WATCH_BOOL                 NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    HEAVY_BOOL                 NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    SOFT_DEADLINE_BOOL         NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    COLLECTION_REQUIRED_BOOL   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    INIT_EXP_COST_LOCKED_BOOL  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    EXP_COST_LOCKED_BOOL       NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ACTUAL_COST_LOCKED_BOOL    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    TOOLS_READY_BOOL           NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    PARTS_READY_BOOL           NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    LRP_BOOL                   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ETOPS_BOOL                 NUMBER (1) DEFAULT 0 ,
    ORPHAN_FRCT_BOOL           NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    PREVENT_DEADLINE_SYNC_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    SCHED_HR_MULT_QT FLOAT ,
    ADJUSTED_BILLING_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    PLAN_BY_DT            DATE ,
    REPL_SCHED_DB_ID      NUMBER (10) ,
    REPL_SCHED_ID         NUMBER (10) ,
    REPL_SCHED_PART_ID    NUMBER (10) ,
    HIST_BOOL_RO          NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_STASK ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( H_SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( H_SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( DUP_JIC_SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( DUP_JIC_SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( FAULT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( FAULT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( TASK_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( TASK_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( TASK_SUBCLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( RO_VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( RO_VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( ORIG_PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( ORIG_PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( TASK_ORIGINATOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( MAIN_INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( MAIN_INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( RECEIVE_COND_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( MIN_PLAN_YIELD_PCT BETWEEN 0 AND 1) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( ISSUE_ACCOUNT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( ISSUE_ACCOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( WO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( WO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( ROUTINE_BOOL       IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( REQUEST_PARTS_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( RESOURCE_SUM_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( ADHOC_RECUR_BOOL   IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( AUTO_COMPLETE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( CORR_FIX_BOOL      IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( WO_COMMIT_LINE_ORD BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( TASK_LOCK_BOOL             IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( PREVENT_LPA_BOOL           IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( WATCH_BOOL                 IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( HEAVY_BOOL                 IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( SOFT_DEADLINE_BOOL         IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( COLLECTION_REQUIRED_BOOL   IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( INIT_EXP_COST_LOCKED_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( EXP_COST_LOCKED_BOOL       IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( ACTUAL_COST_LOCKED_BOOL    IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( TOOLS_READY_BOOL           IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( PARTS_READY_BOOL           IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( LRP_BOOL                   IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( ETOPS_BOOL                 IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( ORPHAN_FRCT_BOOL           IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( PREVENT_DEADLINE_SYNC_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( ADJUSTED_BILLING_BOOL      IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( REPL_SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( REPL_SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( REPL_SCHED_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( HIST_BOOL_RO IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( RSTAT_CD     IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_STASK ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SCHED_STASK
IS
  'Scheduled Maintenance Task: This is node in the GEN-SPEC event construct. It defines the actual scheduled tasks, either preventive or corrective.' ;
  COMMENT ON COLUMN SCHED_STASK.SCHED_DB_ID
IS
  'FK to EVT_EVENT (with GEN classification of EVENT_TYPE_CD = ''TS''). Primary key is transcribed onto this entity.' ;
  COMMENT ON COLUMN SCHED_STASK.SCHED_ID
IS
  'FK to EVT_EVENT (with GEN classification of EVENT_TYPE_CD = ''TS''). Primary key is transcribed onto this entity.' ;
  COMMENT ON COLUMN SCHED_STASK.H_SCHED_DB_ID
IS
  'FK to SCHED_STASK.  Points to the higest task that is not a check or work order.  This will be null for checks and work orders.' ;
  COMMENT ON COLUMN SCHED_STASK.H_SCHED_ID
IS
  'FK to SCHED_STASK.  Points to the higest task that is not a check or work order.  This will be null for checks and work orders.' ;
  COMMENT ON COLUMN SCHED_STASK.TASK_DB_ID
IS
  'FK to TASK_TASK. The baseline task definition of this task.' ;
  COMMENT ON COLUMN SCHED_STASK.TASK_ID
IS
  'FK to TASK_TASK. The baseline task definition of this task.' ;
  COMMENT ON COLUMN SCHED_STASK.FAULT_DB_ID
IS
  'FK to SD_FAULT.  Identifies the fault that this task is a corrective action for.' ;
  COMMENT ON COLUMN SCHED_STASK.FAULT_ID
IS
  'FK to SD_FAULT.  Identifies the fault that this task is a corrective action for.' ;
  COMMENT ON COLUMN SCHED_STASK.TASK_PRIORITY_DB_ID
IS
  'FK to ref_task_priority.  Indicates the priority of a task as given by the line contoller/supervisor.' ;
  COMMENT ON COLUMN SCHED_STASK.TASK_PRIORITY_CD
IS
  'FK to ref_task_priority.  Indicates the priority of a task as given by the line contoller/supervisor.' ;
  COMMENT ON COLUMN SCHED_STASK.TASK_CLASS_DB_ID
IS
  'FK to REF_TASK_CLASS. Identifies the class of the task, which is used to activate various Maintenix functionality.' ;
  COMMENT ON COLUMN SCHED_STASK.TASK_CLASS_CD
IS
  'FK to REF_TASK_CLASS. Identifies the class of the task definition, which is used to activate various Maintenix functionality.' ;
  COMMENT ON COLUMN SCHED_STASK.TASK_SUBCLASS_DB_ID
IS
  'FK to REF_TASK_SUBCLASS. Identifies the subclass for this task, which is used to categorize tasks and help with reporting.' ;
  COMMENT ON COLUMN SCHED_STASK.TASK_SUBCLASS_CD
IS
  'FK to REF_TASK_SUBCLASS. Identifies the subclass for this task, which is used to categorize tasks and help with reporting.' ;
  COMMENT ON COLUMN SCHED_STASK.RO_VENDOR_DB_ID
IS
  'FK to ORG_VENDOR. Used when this task represents a repair order. This identifies the vendor/mro that is performing the repair activity.' ;
  COMMENT ON COLUMN SCHED_STASK.RO_VENDOR_ID
IS
  'FK to ORG_VENDOR. Used when this task represents a repair order. This identifies the vendor/mro that is performing the repair activity.' ;
  COMMENT ON COLUMN SCHED_STASK.ORIG_PART_NO_DB_ID
IS
  'FK to EQP_PART_NO. The part number prior to the task being completed (if there is a transformation, the part number will change after the task is competed).' ;
  COMMENT ON COLUMN SCHED_STASK.ORIG_PART_NO_ID
IS
  'FK to EQP_PART_NO. The part number prior to the task being completed (if there is a transformation, the part number will change after the task is competed).' ;
  COMMENT ON COLUMN SCHED_STASK.TASK_ORIGINATOR_DB_ID
IS
  'FK to REF_TASK_ORIGINATOR.' ;
  COMMENT ON COLUMN SCHED_STASK.TASK_ORIGINATOR_CD
IS
  'FK to REF_TASK_ORIGINATOR.' ;
  COMMENT ON COLUMN SCHED_STASK.MAIN_INV_NO_DB_ID
IS
  'The main inventory of the task.' ;
  COMMENT ON COLUMN SCHED_STASK.MAIN_INV_NO_ID
IS
  'The main inventory of the task.' ;
  COMMENT ON COLUMN SCHED_STASK.RECEIVE_COND_DB_ID
IS
  'FK to REF_RECEIVE_COND.' ;
  COMMENT ON COLUMN SCHED_STASK.RECEIVE_COND_CD
IS
  'FK to REF_RECEIVE_COND.' ;
  COMMENT ON COLUMN SCHED_STASK.REPAIR_QT
IS
  'The Repair Quantity will be defaulted to the batch?s bin quantity, but it is editable as long as the WO has not started yet. When the WO is started, if the repair quantity is smaller than the bin quantity, then Maintenix will split the batch and create a new batch for the repair quantity. ' ;
  COMMENT ON COLUMN SCHED_STASK.TASK_REF_SDESC
IS
  'A lable used to mark any external reference for the task (Tech Pub link, FK in external system , etc...)' ;
  COMMENT ON COLUMN SCHED_STASK.MIN_PLAN_YIELD_PCT
IS
  'This percentage value applied to deadline interval with respect to the task due date indicates a starting point of an optimal planning window. ' ;
  COMMENT ON COLUMN SCHED_STASK.ISSUE_ACCOUNT_DB_ID
IS
  'This is foreign key to FNC_ACCOUNT. All aircraft in the system must have an issue to account.' ;
  COMMENT ON COLUMN SCHED_STASK.ISSUE_ACCOUNT_ID
IS
  'This is foreign key to FNC_ACCOUNT. All aircraft in the system must have an issue to account.' ;
  COMMENT ON COLUMN SCHED_STASK.ISSUED_DT
IS
  'The local time the task was issued.' ;
  COMMENT ON COLUMN SCHED_STASK.ISSUED_GDT
IS
  'The GMT the task was issued.' ;
  COMMENT ON COLUMN SCHED_STASK.WARRANTY_NOTE
IS
  'This attribute identifies any warranty information associated with the task.' ;
  COMMENT ON COLUMN SCHED_STASK.WO_REF_SDESC
IS
  'This column indicates the internal work order number for a task.' ;
  COMMENT ON COLUMN SCHED_STASK.WO_DB_ID
IS
  'The Work Order under which a task was completed.' ;
  COMMENT ON COLUMN SCHED_STASK.WO_ID
IS
  'The Work Order under which a task was completed.' ;
  COMMENT ON COLUMN SCHED_STASK.ROUTINE_BOOL
IS
  'Specifies whether this task is considered "routine" work or not. The routine flag is typically used for reporting purposes.' ;
  COMMENT ON COLUMN SCHED_STASK.REQUEST_PARTS_BOOL
IS
  'Boolean indicating where or not parts have been requested.  Only applies to checks or work orders.' ;
  COMMENT ON COLUMN SCHED_STASK.RESOURCE_SUM_BOOL
IS
  'Specifies whether this Task summarizes the resource requirements of it''s sub-Tasks or it contains the resource requirements.' ;
  COMMENT ON COLUMN SCHED_STASK.ADHOC_RECUR_BOOL
IS
  'This column is used to indicate whether a task that is not based on a task definition is recurring.' ;
  COMMENT ON COLUMN SCHED_STASK.AUTO_COMPLETE_BOOL
IS
  'Defines if a task will be auto completed once all it''s child tasks have been completed.' ;
  COMMENT ON COLUMN SCHED_STASK.CORR_FIX_BOOL
IS
  'Indicates whether a corrective task actually fixed the originating problem.' ;
  COMMENT ON COLUMN SCHED_STASK.INSTRUCTION_LDESC
IS
  'This column is used to record the instructions for a task. This column will be copied from the baseline task definition.' ;
  COMMENT ON COLUMN SCHED_STASK.VENDOR_WO_REF_SDESC
IS
  'The coorespondent for the Work Order of an external repair shop.' ;
  COMMENT ON COLUMN SCHED_STASK.WO_COMMIT_LINE_ORD
IS
  'Order of the last task in a commited check or work order.
' ;
  COMMENT ON COLUMN SCHED_STASK.RO_REF_SDESC
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN SCHED_STASK.TASK_LOCK_BOOL
IS
  'Tasks can be downloaded via the  Portable Detached Adaptor into Maintenix. These tasks are marked as locked via this field.' ;
  COMMENT ON COLUMN SCHED_STASK.PREVENT_LPA_BOOL
IS
  'This column allows you to prevent line planning automation to make any changes to this work package. ' ;
  COMMENT ON COLUMN SCHED_STASK.EST_DURATION_QT
IS
  'This is an estimated duration of the task.' ;
  COMMENT ON COLUMN SCHED_STASK.HEAVY_BOOL
IS
  'Boolean that when flagged, denotes that this a heavy check.' ;
  COMMENT ON COLUMN SCHED_STASK.SOFT_DEADLINE_BOOL
IS
  'This flag indicates whether all deadlines on the task will be considered ''soft''.' ;
  COMMENT ON COLUMN SCHED_STASK.COLLECTION_REQUIRED_BOOL
IS
  'Indicates that the workscope task''s job card has been physically collected.' ;
  COMMENT ON COLUMN SCHED_STASK.INIT_EXP_COST_LOCKED_BOOL
IS
  'This Boolean field denotes whether the initial expected costs have been locked down for the work package. This is a mandatory field that defaults to 0.' ;
  COMMENT ON COLUMN SCHED_STASK.EXP_COST_LOCKED_BOOL
IS
  'This Boolean field denotes whether the expected costs have been locked down for the work package. This is a mandatory field that defaults to 0.' ;
  COMMENT ON COLUMN SCHED_STASK.ACTUAL_COST_LOCKED_BOOL
IS
  'This Boolean field denotes whether the actual costs have been locked down for the work package. This is a mandatory field that defaults to 0.' ;
  COMMENT ON COLUMN SCHED_STASK.TOOLS_READY_BOOL
IS
  'This flag indicates that tools required for the maintenance task are ready when set to 1, we are still awaiting tools if set to 0' ;
  COMMENT ON COLUMN SCHED_STASK.PARTS_READY_BOOL
IS
  'This flag indicates that parts required for the maintenance task are ready when set to 1, we are still awaiting parts if set to 0. ' ;
  COMMENT ON COLUMN SCHED_STASK.LRP_BOOL
IS
  'Identify if this work package is an LRP published work package.' ;
  COMMENT ON COLUMN SCHED_STASK.ETOPS_BOOL
IS
  'True is the task is ETOPS significant.' ;
  COMMENT ON COLUMN SCHED_STASK.ORPHAN_FRCT_BOOL
IS
  'Identifies if the task is an orphaned forecasted task.' ;
  COMMENT ON COLUMN SCHED_STASK.PREVENT_DEADLINE_SYNC_BOOL
IS
  'Indicates whether this task has manual scheduling enabled.' ;
  COMMENT ON COLUMN SCHED_STASK.SCHED_HR_MULT_QT
IS
  'This is a factor set on a work package that account for inefficiencies in executing this work package. It applies to the Scheduled Labour Hours.' ;
  COMMENT ON COLUMN SCHED_STASK.ADJUSTED_BILLING_BOOL
IS
  'This is used to mark whether a task has been adjusted for billing hours for each labor skill on a task.' ;
  COMMENT ON COLUMN SCHED_STASK.REPL_SCHED_DB_ID
IS
  'A reference to the replacement part requirement for replacement tasks and their sub-tasks.' ;
  COMMENT ON COLUMN SCHED_STASK.REPL_SCHED_ID
IS
  'A reference to the replacement part requirement for replacement tasks and their sub-tasks.' ;
  COMMENT ON COLUMN SCHED_STASK.REPL_SCHED_PART_ID
IS
  'A reference to the replacement part requirement for replacement tasks and their sub-tasks.' ;
  COMMENT ON COLUMN SCHED_STASK.HIST_BOOL_RO
IS
  'This column is a copy of evt_event.hist_bool that will be kept in sync by database triggers. The column is read-only and must be updated through evt_event instead.' ;
  COMMENT ON COLUMN SCHED_STASK.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.' ;
  COMMENT ON COLUMN SCHED_STASK.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN SCHED_STASK.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SCHED_STASK.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SCHED_STASK.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SCHED_STASK.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_REF_TASK_CLASS_SCHEDSTASK_F ON SCHED_STASK
    (
      TASK_CLASS_DB_ID ASC ,
      TASK_CLASS_CD ASC
    ) ;
  CREATE INDEX IX_W0_REF_SDESC ON SCHED_STASK
    ( WO_REF_SDESC ASC
    ) ;
  CREATE INDEX IX_UQ_BARCODE_SDESC ON SCHED_STASK
    ( BARCODE_SDESC ASC
    ) ;
  CREATE INDEX IX_SCHEDSTASK_PLANBYDT ON SCHED_STASK
    ( PLAN_BY_DT ASC
    ) ;
  CREATE INDEX IX_EQPPARTNO_SCHEDSTASK ON SCHED_STASK
    (
      ORIG_PART_NO_DB_ID ASC ,
      ORIG_PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_FK_WO_SCHEDSTASK ON SCHED_STASK
    ( WO_DB_ID ASC , WO_ID ASC
    ) ;
  CREATE INDEX IX_MAININV_SHEDSTASK ON SCHED_STASK
    (
      MAIN_INV_NO_DB_ID ASC ,
      MAIN_INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_ORGVENDOR_SCHEDSTASK ON SCHED_STASK
    (
      RO_VENDOR_DB_ID ASC ,
      RO_VENDOR_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDPART_SCHEDSTASK ON SCHED_STASK
    (
      REPL_SCHED_DB_ID ASC ,
      REPL_SCHED_ID ASC ,
      REPL_SCHED_PART_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDSTASK_SCHEDSTASK ON SCHED_STASK
    (
      DUP_JIC_SCHED_DB_ID ASC ,
      DUP_JIC_SCHED_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDSTASK_HSCHEDSTASK ON SCHED_STASK
    (
      H_SCHED_DB_ID ASC ,
      H_SCHED_ID ASC
    ) ;
  CREATE INDEX IX_SDFAULT_SCHEDSTASK ON SCHED_STASK
    (
      FAULT_DB_ID ASC ,
      FAULT_ID ASC
    ) ;
  CREATE INDEX IX_TASKTASK_SCHEDSTASK ON SCHED_STASK
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
  CREATE INDEX IX_FNCACCOUNT_SCHEDSTASK ON SCHED_STASK
    (
      ISSUE_ACCOUNT_DB_ID ASC ,
      ISSUE_ACCOUNT_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDSTASK_HISTBOOL ON SCHED_STASK
    ( HIST_BOOL_RO ASC
    ) ;
ALTER TABLE SCHED_STASK ADD CONSTRAINT PK_SCHED_STASK PRIMARY KEY ( SCHED_DB_ID, SCHED_ID ) ;
ALTER TABLE SCHED_STASK ADD CONSTRAINT IX_SCHEDSTASKALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE SCHED_STASK_FLAGS
  (
    SCHED_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    PREVENT_EXE_BOOL        NUMBER (1) DEFAULT 0 ,
    PREVENT_EXE_REVIEW_DT   DATE ,
    AUTO_CANCEL_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    DO_AT_NEXT_INSTALL_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD                NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER           VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_STASK_FLAGS ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK_FLAGS ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STASK_FLAGS ADD CHECK ( PREVENT_EXE_BOOL        IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK_FLAGS ADD CHECK ( AUTO_CANCEL_BOOL        IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK_FLAGS ADD CHECK ( DO_AT_NEXT_INSTALL_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_STASK_FLAGS ADD CHECK ( RSTAT_CD                IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_STASK_FLAGS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_STASK_FLAGS.PREVENT_EXE_BOOL
IS
  'This flag determines if the actual task is currently prevented from being executed or not' ;
  COMMENT ON COLUMN SCHED_STASK_FLAGS.PREVENT_EXE_REVIEW_DT
IS
  'This date corresponds to the prevent_exe_bool is being changed' ;
  COMMENT ON COLUMN SCHED_STASK_FLAGS.AUTO_CANCEL_BOOL
IS
  'Boolean flag that indicates if the sched task was manually or automatically cancelled.' ;
  COMMENT ON COLUMN SCHED_STASK_FLAGS.DO_AT_NEXT_INSTALL_BOOL
IS
  'Boolean flag that indicates if the sched task was deferred as ''Do at next install''' ;
ALTER TABLE SCHED_STASK_FLAGS ADD CONSTRAINT PK_SCHED_STASK_FLAGS PRIMARY KEY ( SCHED_DB_ID, SCHED_ID ) ;


CREATE TABLE SCHED_STEP
  (
    SCHED_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    STEP_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    STEP_ORD       NUMBER (4) NOT NULL DEFERRABLE ,
    STEP_LDESC     VARCHAR2 (4000) ,
    STEP_STATUS_CD VARCHAR2 (20) NOT NULL DEFERRABLE ,
    TASK_DB_ID     NUMBER (10) ,
    TASK_ID        NUMBER (10) ,
    TASK_STEP_ID   NUMBER (10) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE ,
    REVISION_NO    NUMBER (10) DEFAULT 1 NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL
  ) ;
ALTER TABLE SCHED_STEP ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STEP ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STEP ADD CHECK ( STEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STEP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_STEP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_STEP ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE SCHED_STEP ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON COLUMN SCHED_STEP.STEP_STATUS_CD
IS
  'Used to capture the step status at the time the step was signed.' ;
  COMMENT ON COLUMN SCHED_STEP.TASK_DB_ID
IS
  'Part of the key to the task_step table that indicates which baseline step this step was created from.' ;
  COMMENT ON COLUMN SCHED_STEP.TASK_ID
IS
  'Part of the key to the task_step table that indicates which baseline step this step was created from.' ;
  COMMENT ON COLUMN SCHED_STEP.TASK_STEP_ID
IS
  'Part of the key to the task_step table that indicates which baseline step this step was created from.' ;
  CREATE INDEX IX_SCHEDSTASK_SCHEDSTEP ON SCHED_STEP
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_TASKSTEP_SCHEDSTEP ON SCHED_STEP
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC ,
      TASK_STEP_ID ASC
    ) ;
ALTER TABLE SCHED_STEP ADD CONSTRAINT PK_SCHED_STEP PRIMARY KEY ( SCHED_DB_ID, SCHED_ID, STEP_ID ) ;
ALTER TABLE SCHED_STEP ADD CONSTRAINT UK_SCHEDSTEP_STEPORD UNIQUE ( SCHED_DB_ID , SCHED_ID , STEP_ORD ) DEFERRABLE INITIALLY DEFERRED ;


CREATE TABLE SCHED_STEP_APPL_LOG
  (
    SCHED_DB_ID    NUMBER (10) NOT NULL ,
    SCHED_ID       NUMBER (10) NOT NULL ,
    STEP_ID        NUMBER (10) NOT NULL ,
    LOG_ID         NUMBER (10) NOT NULL ,
    NOTES_LDESC    VARCHAR2 (4000) ,
    STEP_STATUS_CD VARCHAR2 (20) ,
    HR_DB_ID       NUMBER (10) ,
    HR_ID          NUMBER (10) ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL ,
    REVISION_NO    NUMBER (10) DEFAULT 1 NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL
  ) ;
ALTER TABLE SCHED_STEP_APPL_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE SCHED_STEP_APPL_LOG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE SCHED_STEP_APPL_LOG ADD CONSTRAINT SCHED_STEP_APPL_LOG_CHK_CTRL CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE SCHED_STEP_APPL_LOG ADD CONSTRAINT SCHED_STEP_APPL_LOG_CHK_CREAT CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
CREATE INDEX IX_ORGHR_SCHEDSTEPAPPLLOG ON SCHED_STEP_APPL_LOG
  (
    HR_DB_ID ASC ,
    HR_ID ASC
  ) ;
ALTER TABLE SCHED_STEP_APPL_LOG ADD CONSTRAINT PK_SCHED_STEP_APPL_LOG PRIMARY KEY ( SCHED_DB_ID, SCHED_ID, STEP_ID, LOG_ID ) ;


CREATE TABLE SCHED_WORK_TYPE
  (
    SCHED_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    WORK_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WORK_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_WORK_TYPE ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WORK_TYPE ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WORK_TYPE ADD CHECK ( WORK_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WORK_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_WORK_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_WORK_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SCHED_WORK_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SCHED_WORK_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SCHED_WORK_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_SCHEDSTASK_SCHEDWORKTYPE ON SCHED_WORK_TYPE
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
ALTER TABLE SCHED_WORK_TYPE ADD CONSTRAINT PK_SCHED_WORK_TYPE PRIMARY KEY ( SCHED_DB_ID, SCHED_ID, WORK_TYPE_DB_ID, WORK_TYPE_CD ) ;


CREATE TABLE SCHED_WO_LINE
  (
    WO_SCHED_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    WO_SCHED_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    WO_LINE_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    TALLY_LINE_ORD      NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    RO_LINE_SDESC       VARCHAR2 (80) ,
    UNASSIGN_BOOL       NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    COLLECTED_BOOL      NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    COLLECTION_HR_DB_ID NUMBER (10) ,
    COLLECTION_HR_ID    NUMBER (10) ,
    COLLECTION_DT       DATE ,
    WORKSCOPE_ORDER     NUMBER DEFAULT NULL ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_WO_LINE ADD CHECK ( WO_SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WO_LINE ADD CHECK ( WO_SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WO_LINE ADD CHECK ( WO_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WO_LINE ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WO_LINE ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WO_LINE ADD CHECK ( UNASSIGN_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_WO_LINE ADD CHECK ( COLLECTED_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_WO_LINE ADD CHECK ( COLLECTION_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WO_LINE ADD CHECK ( COLLECTION_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WO_LINE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_WO_LINE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_WO_LINE.WO_SCHED_DB_ID
IS
  'FK to SCHED_STASK.  The Check listed under a task.  A line item listing on the Workscope tab page.' ;
  COMMENT ON COLUMN SCHED_WO_LINE.WO_SCHED_ID
IS
  'FK to SCHED_STASK.  The Check listed under a task.  A line item listing on the Workscope tab page.' ;
  COMMENT ON COLUMN SCHED_WO_LINE.WO_LINE_ID
IS
  'The mechanism that outlines how to order line items on the Workscope tab page.
' ;
  COMMENT ON COLUMN SCHED_WO_LINE.TALLY_LINE_ORD
IS
  'Update the tally line numbers for an existing work package' ;
  COMMENT ON COLUMN SCHED_WO_LINE.SCHED_DB_ID
IS
  'FK  to SCHED_STASK.  The Task that the line items or checks are assigned to.  The line items or checks are entries in the wo_sched_db_id/id fields of this table.  There can be many items or checks for one task.' ;
  COMMENT ON COLUMN SCHED_WO_LINE.SCHED_ID
IS
  'FK  to SCHED_STASK.  The Task that the line items or checks are assigned to.  The line items or checks are entries in the wo_sched_db_id/id fields of this table.  There can be many items or checks for one task.' ;
  COMMENT ON COLUMN SCHED_WO_LINE.RO_LINE_SDESC
IS
  'This value represents the vendors work order line number.
' ;
  COMMENT ON COLUMN SCHED_WO_LINE.UNASSIGN_BOOL
IS
  'Determines if the task is displayed.  If the field is zero than the task''s status is displayed.  If the field is one then the column for Task Status will display the UNASSIGN text.' ;
  COMMENT ON COLUMN SCHED_WO_LINE.COLLECTED_BOOL
IS
  'Indicates that the workscope task''s job card has been physically collected.' ;
  COMMENT ON COLUMN SCHED_WO_LINE.COLLECTION_HR_DB_ID
IS
  'The user that recorded the collection of the job cards' ;
  COMMENT ON COLUMN SCHED_WO_LINE.COLLECTION_HR_ID
IS
  'The user that recorded the collection of the job cards' ;
  COMMENT ON COLUMN SCHED_WO_LINE.COLLECTION_DT
IS
  'Date when the job card was marked as collected. ' ;
  COMMENT ON COLUMN SCHED_WO_LINE.WORKSCOPE_ORDER
IS
  'Work scope order of the task. ' ;
  COMMENT ON COLUMN SCHED_WO_LINE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SCHED_WO_LINE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN SCHED_WO_LINE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN SCHED_WO_LINE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN SCHED_WO_LINE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_ORGHR_SCHEDWOLINE ON SCHED_WO_LINE
    (
      COLLECTION_HR_DB_ID ASC ,
      COLLECTION_HR_ID ASC
    ) ;
  CREATE INDEX IX_WO_SCHDSTSK_SCHEDWOLINE ON SCHED_WO_LINE
    (
      WO_SCHED_DB_ID ASC ,
      WO_SCHED_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDSTSK_SCDWOLINE ON SCHED_WO_LINE
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
ALTER TABLE SCHED_WO_LINE ADD CONSTRAINT "pk_SCHED_WO_LINE" PRIMARY KEY ( WO_SCHED_DB_ID, WO_SCHED_ID, WO_LINE_ID ) ;


CREATE TABLE SCHED_WO_MPC
  (
    SCHED_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_WO_MPC ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WO_MPC ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WO_MPC ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WO_MPC ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WO_MPC ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_WO_MPC ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SCHED_WO_MPC
IS
  'Lists Master Panel Cards selected at the time of Work Package is scheduled' ;
  COMMENT ON COLUMN SCHED_WO_MPC.SCHED_DB_ID
IS
  'Work package' ;
  COMMENT ON COLUMN SCHED_WO_MPC.TASK_DB_ID
IS
  'Master Panel Card' ;
  CREATE INDEX IX_SCHEDSTASK_SCHEDWOMPC ON SCHED_WO_MPC
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_TASKTASK_SCHEDWOMPC ON SCHED_WO_MPC
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
ALTER TABLE SCHED_WO_MPC ADD CONSTRAINT PK_SCHED_WO_MPC PRIMARY KEY ( SCHED_DB_ID, SCHED_ID, TASK_DB_ID, TASK_ID ) ;


CREATE TABLE SCHED_WP
  (
    SCHED_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    RELEASE_REMARKS_LDESC   VARCHAR2 (4000) ,
    RELEASE_NUMBER_SDESC    VARCHAR2 (80) ,
    ENFORCE_WORKSCOPE_BOOL  NUMBER (1) DEFAULT 0 ,
    DELAY_BOOL              NUMBER (1) DEFAULT 0 ,
    ENFORCE_NSV             NUMBER (10) DEFAULT 0 NOT NULL DEFERRABLE ,
    RELEASE_TO_SERVICE_BOOL NUMBER (1) DEFAULT 0 NOT NULL ,
    RSTAT_CD                NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER           VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_WP ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WP ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WP ADD CHECK ( ENFORCE_WORKSCOPE_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_WP ADD CHECK ( DELAY_BOOL              IN (0, 1)) DEFERRABLE ;
ALTER TABLE SCHED_WP ADD CHECK ( ENFORCE_NSV             IN (0,1,2)) DEFERRABLE ;
ALTER TABLE SCHED_WP ADD CHECK ( RELEASE_TO_SERVICE_BOOL IN (0,1)) ;
ALTER TABLE SCHED_WP ADD CHECK ( RSTAT_CD                IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_WP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_WP.ENFORCE_WORKSCOPE_BOOL
IS
  'Determines if work scope ordering needs to be enforced at the work package level.  When enforced, the tasks needs to be executed in order specified.' ;
  COMMENT ON COLUMN SCHED_WP.DELAY_BOOL
IS
  'Indicates if the work package is delayed.' ;
  COMMENT ON COLUMN SCHED_WP.ENFORCE_NSV
IS
  'Indicates the Enforce Next Shop Visit Tasks state of the workpackage.
0 = not applicable (e.g. when a non-component workpackage)
1 = component WP is enforcing NSV tasks
2 = component WP is ignoring NSV tasks' ;
  COMMENT ON COLUMN SCHED_WP.RELEASE_TO_SERVICE_BOOL
IS
  'Specifies whether the work package has released the aircraft back into service or not. ' ;
ALTER TABLE SCHED_WP ADD CONSTRAINT PK_SCHED_WP PRIMARY KEY ( SCHED_DB_ID, SCHED_ID ) ;


CREATE TABLE SCHED_WP_ERROR
  (
    WP_SCHED_DB_ID   NUMBER (10) NOT NULL ,
    WP_SCHED_ID      NUMBER (10) NOT NULL ,
    TASK_SCHED_DB_ID NUMBER (10) NOT NULL ,
    TASK_SCHED_ID    NUMBER (10) NOT NULL ,
    WORKSCOPE_BOOL   NUMBER (1) DEFAULT 0 NOT NULL ,
    ERROR_MSG CLOB NOT NULL ,
    ERROR_DT       DATE NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE SCHED_WP_ERROR ADD CHECK ( WORKSCOPE_BOOL IN (0,1)) ;
CREATE INDEX IX_SCHEDWPERROR_WORKSCOPEBOOL ON SCHED_WP_ERROR
  (
    WORKSCOPE_BOOL ASC
  ) ;
CREATE INDEX IX_SCHEDWPERROR_SCHEDWP ON SCHED_WP_ERROR
  (
    WP_SCHED_DB_ID ASC ,
    WP_SCHED_ID ASC
  ) ;
CREATE INDEX IX_SCHEDWPERROR_SCHEDSTASK ON SCHED_WP_ERROR
  (
    TASK_SCHED_DB_ID ASC ,
    TASK_SCHED_ID ASC
  ) ;
ALTER TABLE SCHED_WP_ERROR ADD CONSTRAINT PK_SCHED_WP_ERROR PRIMARY KEY ( WP_SCHED_DB_ID, WP_SCHED_ID, TASK_SCHED_DB_ID, TASK_SCHED_ID ) ;


CREATE TABLE SCHED_WP_SIGN
  (
    SIGN_REQ_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SIGN_REQ_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    HR_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    SIGNOFF_DT     DATE NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_WP_SIGN ADD CHECK ( SIGN_REQ_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WP_SIGN ADD CHECK ( SIGN_REQ_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WP_SIGN ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WP_SIGN ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WP_SIGN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_WP_SIGN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_WP_SIGN.SIGN_REQ_DB_ID
IS
  'FK to SCHED_WP_SIGN_REQ' ;
  COMMENT ON COLUMN SCHED_WP_SIGN.SIGN_REQ_ID
IS
  'FK to SCHED_WP_SIGN_REQ' ;
  COMMENT ON COLUMN SCHED_WP_SIGN.HR_DB_ID
IS
  'FK to ORG_HR' ;
  COMMENT ON COLUMN SCHED_WP_SIGN.HR_ID
IS
  'FK to ORG_HR' ;
  COMMENT ON COLUMN SCHED_WP_SIGN.SIGNOFF_DT
IS
  'This is the date/time that the signoff occurred.' ;
  COMMENT ON COLUMN SCHED_WP_SIGN.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SCHED_WP_SIGN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SCHED_WP_SIGN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SCHED_WP_SIGN.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN SCHED_WP_SIGN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGHR_SCHEDWPSIGN ON SCHED_WP_SIGN
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
ALTER TABLE SCHED_WP_SIGN ADD CONSTRAINT PK_SCHED_WP_SIGN PRIMARY KEY ( SIGN_REQ_DB_ID, SIGN_REQ_ID ) ;


CREATE TABLE SCHED_WP_SIGN_ESIG
  (
    SIGN_REQ_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SIGN_REQ_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    DOC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    DOC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_WP_SIGN_ESIG ADD CHECK ( SIGN_REQ_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WP_SIGN_ESIG ADD CHECK ( SIGN_REQ_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WP_SIGN_ESIG ADD CHECK ( DOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WP_SIGN_ESIG ADD CHECK ( DOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WP_SIGN_ESIG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_WP_SIGN_ESIG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_WP_SIGN_ESIG.SIGN_REQ_DB_ID
IS
  'FK to SCHED_WP_SIGN' ;
  COMMENT ON COLUMN SCHED_WP_SIGN_ESIG.SIGN_REQ_ID
IS
  'FK to SCHED_WP_SIGN' ;
  COMMENT ON COLUMN SCHED_WP_SIGN_ESIG.DOC_DB_ID
IS
  'FK to ESIG_DOC' ;
  COMMENT ON COLUMN SCHED_WP_SIGN_ESIG.DOC_ID
IS
  'FK to ESIG_DOC' ;
  COMMENT ON COLUMN SCHED_WP_SIGN_ESIG.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SCHED_WP_SIGN_ESIG.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SCHED_WP_SIGN_ESIG.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SCHED_WP_SIGN_ESIG.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SCHED_WP_SIGN_ESIG.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_ESIGDOC_SCHEDWPSIGNESIG ON SCHED_WP_SIGN_ESIG
    (
      DOC_DB_ID ASC ,
      DOC_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDWPSIGN_SCHEDWPSIGNESIG ON SCHED_WP_SIGN_ESIG
    (
      SIGN_REQ_DB_ID ASC ,
      SIGN_REQ_ID ASC
    ) ;
ALTER TABLE SCHED_WP_SIGN_ESIG ADD CONSTRAINT PK_SCHED_WP_SIGN_ESIG PRIMARY KEY ( SIGN_REQ_DB_ID, SIGN_REQ_ID, DOC_DB_ID, DOC_ID ) ;


CREATE TABLE SCHED_WP_SIGN_REQ
  (
    SIGN_REQ_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    SIGN_REQ_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID                 NUMBER (10) NOT NULL DEFERRABLE ,
    WP_SIGN_REQ_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WP_SIGN_REQ_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_CD          VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_WP_SIGN_REQ ADD CHECK ( SIGN_REQ_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WP_SIGN_REQ ADD CHECK ( SIGN_REQ_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WP_SIGN_REQ ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WP_SIGN_REQ ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WP_SIGN_REQ ADD CHECK ( WP_SIGN_REQ_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WP_SIGN_REQ ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_WP_SIGN_REQ ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_WP_SIGN_REQ ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_WP_SIGN_REQ.SIGN_REQ_DB_ID
IS
  'This is a primary key' ;
  COMMENT ON COLUMN SCHED_WP_SIGN_REQ.SIGN_REQ_ID
IS
  'This is a primary key' ;
  COMMENT ON COLUMN SCHED_WP_SIGN_REQ.SCHED_DB_ID
IS
  'FK to SCHED_WP' ;
  COMMENT ON COLUMN SCHED_WP_SIGN_REQ.SCHED_ID
IS
  'FK to SCHED_WP' ;
  COMMENT ON COLUMN SCHED_WP_SIGN_REQ.WP_SIGN_REQ_STATUS_DB_ID
IS
  'FK to REF_WP_SIGN_REQ_STATUS.' ;
  COMMENT ON COLUMN SCHED_WP_SIGN_REQ.WP_SIGN_REQ_STATUS_CD
IS
  'FK to REF_WP_SIGN_REQ_STATUS.' ;
  COMMENT ON COLUMN SCHED_WP_SIGN_REQ.LABOUR_SKILL_DB_ID
IS
  'FK to REF_LABOUR_SKILL.' ;
  COMMENT ON COLUMN SCHED_WP_SIGN_REQ.LABOUR_SKILL_CD
IS
  'FK to REF_LABOUR_SKILL.' ;
  COMMENT ON COLUMN SCHED_WP_SIGN_REQ.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SCHED_WP_SIGN_REQ.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SCHED_WP_SIGN_REQ.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN SCHED_WP_SIGN_REQ.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SCHED_WP_SIGN_REQ.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_SCHEDWP_SCHEDWPSIGNREQ ON SCHED_WP_SIGN_REQ
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
ALTER TABLE SCHED_WP_SIGN_REQ ADD CONSTRAINT PK_SCHED_WP_SIGN_REQ PRIMARY KEY ( SIGN_REQ_DB_ID, SIGN_REQ_ID ) ;


CREATE TABLE SCHED_ZONE
  (
    SCHED_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ZONE_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    ZONE_DB_ID     NUMBER (10) ,
    ZONE_ID        NUMBER (10) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SCHED_ZONE ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_ZONE ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_ZONE ADD CHECK ( SCHED_ZONE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_ZONE ADD CHECK ( ZONE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_ZONE ADD CHECK ( ZONE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SCHED_ZONE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SCHED_ZONE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SCHED_ZONE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN SCHED_ZONE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN SCHED_ZONE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN SCHED_ZONE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN SCHED_ZONE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_SCHEDSTASK_SCHEDZONE ON SCHED_ZONE
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_EQPTSKZN_SCHEDZONE ON SCHED_ZONE
    (
      ZONE_DB_ID ASC ,
      ZONE_ID ASC
    ) ;
ALTER TABLE SCHED_ZONE ADD CONSTRAINT "pk_SCHED_ZONE" PRIMARY KEY ( SCHED_DB_ID, SCHED_ID, SCHED_ZONE_ID ) ;


CREATE TABLE SD_FAULT
  (
    FAULT_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    FAULT_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_MODE_DB_ID      NUMBER (10) ,
    FAIL_MODE_ID         NUMBER (10) ,
    FAIL_CATGRY_DB_ID    NUMBER (10) ,
    FAIL_CATGRY_CD       VARCHAR2 (8) ,
    FLIGHT_STAGE_DB_ID   NUMBER (10) ,
    FLIGHT_STAGE_CD      VARCHAR2 (8) ,
    FAIL_DEFER_DB_ID     NUMBER (10) ,
    FAIL_DEFER_CD        VARCHAR2 (8) ,
    FAIL_PRIORITY_DB_ID  NUMBER (10) ,
    FAIL_PRIORITY_CD     VARCHAR2 (8) ,
    FAIL_TYPE_DB_ID      NUMBER (10) ,
    FAIL_TYPE_CD         VARCHAR2 (8) ,
    FAULT_SOURCE_DB_ID   NUMBER (10) ,
    FAULT_SOURCE_CD      VARCHAR2 (8) ,
    FOUND_BY_HR_DB_ID    NUMBER (10) ,
    FOUND_BY_HR_ID       NUMBER (10) ,
    FAIL_SEV_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_SEV_CD          VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DEFER_REF_SDESC      VARCHAR2 (80) ,
    PREC_PROC_LDESC      VARCHAR2 (4000) ,
    SDR_BOOL             NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    OP_RESTRICTION_LDESC VARCHAR2 (4000) ,
    DEFER_CD_SDESC       VARCHAR2 (80) ,
    EVAL_BOOL            NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    MAINT_EVT_BOOL       NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    LEG_ID RAW (16) ,
    FAULT_LOG_TYPE_DB_ID     NUMBER (10) ,
    FAULT_LOG_TYPE_CD        VARCHAR2 (8) ,
    FRM_SDESC                VARCHAR2 (80) ,
    EXT_RAISED_BOOL          NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    EXT_CONTROLLED_BOOL      NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RESOLUTION_ASSMBL_DB_ID  NUMBER (10) ,
    RESOLUTION_ASSMBL_CD     VARCHAR2 (8) ,
    RESOLUTION_ASSMBL_BOM_ID NUMBER (10) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SD_FAULT ADD CHECK ( FAULT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT ADD CHECK ( FAULT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT ADD CHECK ( FAIL_MODE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT ADD CHECK ( FAIL_MODE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT ADD CHECK ( FAIL_CATGRY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT ADD CHECK ( FLIGHT_STAGE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT ADD CHECK ( FAIL_DEFER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT ADD CHECK ( FAIL_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT ADD CHECK ( FAIL_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT ADD CHECK ( FAULT_SOURCE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT ADD CHECK ( FOUND_BY_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT ADD CHECK ( FOUND_BY_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT ADD CHECK ( FAIL_SEV_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT ADD CHECK ( SDR_BOOL       IN (0, 1)) DEFERRABLE ;
ALTER TABLE SD_FAULT ADD CHECK ( EVAL_BOOL      IN (0, 1)) DEFERRABLE ;
ALTER TABLE SD_FAULT ADD CHECK ( MAINT_EVT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE SD_FAULT ADD CHECK ( FAULT_LOG_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT ADD CHECK ( EXT_RAISED_BOOL     IN (0, 1)) DEFERRABLE ;
ALTER TABLE SD_FAULT ADD CHECK ( EXT_CONTROLLED_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE SD_FAULT ADD CHECK ( RESOLUTION_ASSMBL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE SD_FAULT ADD CHECK ( RESOLUTION_ASSMBL_BOM_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE SD_FAULT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SD_FAULT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SD_FAULT
IS
  'Component Fault: This is a node in the GEN-SPEC event construct. It defines the actual faults registered against aircraft, engines, assemblies or components.' ;
  COMMENT ON COLUMN SD_FAULT.FAULT_DB_ID
IS
  'FK to EVT_EVENT (with GEN classification of EVENT_TYPE_CD = ''CF''.)' ;
  COMMENT ON COLUMN SD_FAULT.FAULT_ID
IS
  'FK to EVT_EVENT (with GEN classification of EVENT_TYPE_CD = ''CF''.)' ;
  COMMENT ON COLUMN SD_FAULT.FAIL_MODE_DB_ID
IS
  'FK to baseline failure mode in FAIL_MODE.' ;
  COMMENT ON COLUMN SD_FAULT.FAIL_MODE_ID
IS
  'FK to baseline failure mode in FAIL_MODE.' ;
  COMMENT ON COLUMN SD_FAULT.FAIL_CATGRY_DB_ID
IS
  'FK to REF_FAIL_CATGRY' ;
  COMMENT ON COLUMN SD_FAULT.FAIL_CATGRY_CD
IS
  'FK to REF_FAIL_CATGRY' ;
  COMMENT ON COLUMN SD_FAULT.FLIGHT_STAGE_DB_ID
IS
  'FK to ref_flight_stage.  Determines the flight stage where the fault occured.' ;
  COMMENT ON COLUMN SD_FAULT.FLIGHT_STAGE_CD
IS
  'FK to ref_flight_stage.  Determines the flight stage where the fault occured.' ;
  COMMENT ON COLUMN SD_FAULT.FAIL_DEFER_DB_ID
IS
  'fk to REF_FAIL_DEFER' ;
  COMMENT ON COLUMN SD_FAULT.FAIL_DEFER_CD
IS
  'fk to REF_FAIL_DEFER' ;
  COMMENT ON COLUMN SD_FAULT.FAIL_PRIORITY_DB_ID
IS
  'FK to REF_FAIL_PRIORITY.' ;
  COMMENT ON COLUMN SD_FAULT.FAIL_PRIORITY_CD
IS
  'FK to REF_FAIL_PRIORITY.' ;
  COMMENT ON COLUMN SD_FAULT.FAIL_TYPE_DB_ID
IS
  'FK to REF_FAIL_TYPE.' ;
  COMMENT ON COLUMN SD_FAULT.FAIL_TYPE_CD
IS
  'FK to REF_FAIL_TYPE.' ;
  COMMENT ON COLUMN SD_FAULT.FAULT_SOURCE_DB_ID
IS
  'FK to REF_FAULT_SOURCE' ;
  COMMENT ON COLUMN SD_FAULT.FAULT_SOURCE_CD
IS
  'FK to REF_FAULT_SOURCE' ;
  COMMENT ON COLUMN SD_FAULT.FOUND_BY_HR_DB_ID
IS
  'FK to org_hr.  Displays the user that found the fault.' ;
  COMMENT ON COLUMN SD_FAULT.FOUND_BY_HR_ID
IS
  'FK to org_hr.  Displays the user that found the fault.' ;
  COMMENT ON COLUMN SD_FAULT.FAIL_SEV_DB_ID
IS
  'FK to REF_FAIL_SEV' ;
  COMMENT ON COLUMN SD_FAULT.FAIL_SEV_CD
IS
  'FK to REF_FAIL_SEV' ;
  COMMENT ON COLUMN SD_FAULT.DEFER_REF_SDESC
IS
  'The deferral reference for a fault.' ;
  COMMENT ON COLUMN SD_FAULT.PREC_PROC_LDESC
IS
  'This text describes the precautionary procedures that were taken.' ;
  COMMENT ON COLUMN SD_FAULT.SDR_BOOL
IS
  'Indicates that the flight has a safety impact, and requires the raising of an SDR.' ;
  COMMENT ON COLUMN SD_FAULT.OP_RESTRICTION_LDESC
IS
  'Allows for the entering/editing of flight/operational restrictions on MEL faults when the fault is deferred.' ;
  COMMENT ON COLUMN SD_FAULT.DEFER_CD_SDESC
IS
  'Deference short description.' ;
  COMMENT ON COLUMN SD_FAULT.EVAL_BOOL
IS
  'Indicates whether the fault has been evaluated or not.' ;
  COMMENT ON COLUMN SD_FAULT.MAINT_EVT_BOOL
IS
  'Differentiate between faults from the event entry page and else where in maintenix.' ;
  COMMENT ON COLUMN SD_FAULT.LEG_ID
IS
  'FK to FL_LEG table.' ;
  COMMENT ON COLUMN SD_FAULT.FAULT_LOG_TYPE_DB_ID
IS
  'FK to REF_FAULT_LOG_TYPE' ;
  COMMENT ON COLUMN SD_FAULT.FAULT_LOG_TYPE_CD
IS
  'FK to REF_FAULT_LOG_TYPE' ;
  COMMENT ON COLUMN SD_FAULT.FRM_SDESC
IS
  'The troubleshooting code as listed in the Fault Reporting Manual' ;
  COMMENT ON COLUMN SD_FAULT.EXT_RAISED_BOOL
IS
  'True if the fault was created via the Logbook Adapter, false if raised via the Maintenix GUI' ;
  COMMENT ON COLUMN SD_FAULT.EXT_CONTROLLED_BOOL
IS
  'True if updates to the fault are to be accepted via the Logbook Adapter' ;
  COMMENT ON COLUMN SD_FAULT.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.' ;
  COMMENT ON COLUMN SD_FAULT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN SD_FAULT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SD_FAULT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SD_FAULT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SD_FAULT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_FAILMODE_SDFAULT ON SD_FAULT
    (
      FAIL_MODE_DB_ID ASC ,
      FAIL_MODE_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_SDFAULT ON SD_FAULT
    (
      FOUND_BY_HR_DB_ID ASC ,
      FOUND_BY_HR_ID ASC
    ) ;
  CREATE INDEX IX_FLLEG_SDFAULT ON SD_FAULT
    ( LEG_ID ASC
    ) ;
  CREATE INDEX IX_EQPASSMBLBOM_SDFAULT ON SD_FAULT
    (
      RESOLUTION_ASSMBL_DB_ID ASC ,
      RESOLUTION_ASSMBL_CD ASC ,
      RESOLUTION_ASSMBL_BOM_ID ASC
    ) ;
ALTER TABLE SD_FAULT ADD CONSTRAINT PK_SD_FAULT PRIMARY KEY ( FAULT_DB_ID, FAULT_ID ) ;
ALTER TABLE SD_FAULT ADD CONSTRAINT IX_SDFAULTALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE SD_FAULT_NATURE
  (
    FAULT_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    FAULT_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    SD_NATURE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SD_NATURE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SD_FAULT_NATURE ADD CHECK ( FAULT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT_NATURE ADD CHECK ( FAULT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT_NATURE ADD CHECK ( SD_NATURE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT_NATURE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SD_FAULT_NATURE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SD_FAULT_NATURE
IS
  'Table is used to record the list of ''Nature of Condition'' values that are needed whenever you raise a fault with SDR implications.' ;
  COMMENT ON COLUMN SD_FAULT_NATURE.FAULT_DB_ID
IS
  'FK to EVT_EVENT (with GEN classification of EVENT_TYPE_CD = ''CF''.)' ;
  COMMENT ON COLUMN SD_FAULT_NATURE.FAULT_ID
IS
  'FK to EVT_EVENT (with GEN classification of EVENT_TYPE_CD = ''CF''.)' ;
  COMMENT ON COLUMN SD_FAULT_NATURE.SD_NATURE_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN SD_FAULT_NATURE.SD_NATURE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN SD_FAULT_NATURE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SD_FAULT_NATURE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN SD_FAULT_NATURE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SD_FAULT_NATURE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN SD_FAULT_NATURE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_SDFAULT_SDFAULTNATURE ON SD_FAULT_NATURE
    (
      FAULT_DB_ID ASC ,
      FAULT_ID ASC
    ) ;
ALTER TABLE SD_FAULT_NATURE ADD CONSTRAINT PK_SD_FAULT_NATURE PRIMARY KEY ( FAULT_DB_ID, FAULT_ID, SD_NATURE_DB_ID, SD_NATURE_CD ) ;


CREATE TABLE SD_FAULT_PREC_PROC
  (
    FAULT_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    FAULT_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    PREC_PROC_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PREC_PROC_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SD_FAULT_PREC_PROC ADD CHECK ( FAULT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT_PREC_PROC ADD CHECK ( FAULT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT_PREC_PROC ADD CHECK ( PREC_PROC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT_PREC_PROC ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SD_FAULT_PREC_PROC ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN SD_FAULT_PREC_PROC.FAULT_DB_ID
IS
  'FK to EVT_EVENT (with GEN classification of EVENT_TYPE_CD = ''CF''.)' ;
  COMMENT ON COLUMN SD_FAULT_PREC_PROC.FAULT_ID
IS
  'FK to EVT_EVENT (with GEN classification of EVENT_TYPE_CD = ''CF''.)' ;
  COMMENT ON COLUMN SD_FAULT_PREC_PROC.PREC_PROC_DB_ID
IS
  'FK to REF_PREC_PROC.' ;
  COMMENT ON COLUMN SD_FAULT_PREC_PROC.PREC_PROC_CD
IS
  'FK to REF_PREC_PROC.' ;
  COMMENT ON COLUMN SD_FAULT_PREC_PROC.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN SD_FAULT_PREC_PROC.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SD_FAULT_PREC_PROC.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SD_FAULT_PREC_PROC.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN SD_FAULT_PREC_PROC.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_SDFAULT_SDFAULTPRECPROC ON SD_FAULT_PREC_PROC
    (
      FAULT_DB_ID ASC ,
      FAULT_ID ASC
    ) ;
ALTER TABLE SD_FAULT_PREC_PROC ADD CONSTRAINT PK_SD_FAULT_PREC_PROC PRIMARY KEY ( FAULT_DB_ID, FAULT_ID, PREC_PROC_DB_ID, PREC_PROC_CD ) ;


CREATE TABLE SD_FAULT_REFERENCE
  (
    FAULT_REF_DB_ID    NUMBER (10) NOT NULL ,
    FAULT_REF_ID       NUMBER (10) NOT NULL ,
    FAULT_DB_ID        NUMBER (10) NOT NULL ,
    FAULT_ID           NUMBER (10) NOT NULL ,
    REP_REF_DB_ID      NUMBER (10) ,
    REP_REF_ID         NUMBER (10) ,
    DEFER_REF_DB_ID    NUMBER (10) ,
    DEFER_REF_ID       NUMBER (10) ,
    STAGE_REASON_CD    VARCHAR2 (16) ,
    STAGE_REASON_DB_ID NUMBER (10) ,
    NOTES              VARCHAR2 (4000) ,
    CURRENT_BOOL       NUMBER (1) DEFAULT 0 ,
    RSTAT_CD           NUMBER (3) NOT NULL ,
    REVISION_NO        NUMBER (10) NOT NULL ,
    CTRL_DB_ID         NUMBER (10) NOT NULL ,
    CREATION_DT        DATE NOT NULL ,
    REVISION_DT        DATE NOT NULL ,
    REVISION_DB_ID     NUMBER (10) NOT NULL ,
    REVISION_USER      VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE SD_FAULT_REFERENCE ADD CHECK ( CURRENT_BOOL IN (0,1)) ;
ALTER TABLE SD_FAULT_REFERENCE ADD CHECK ( RSTAT_CD     IN (0, 1, 2, 3)) ;
COMMENT ON COLUMN SD_FAULT_REFERENCE.FAULT_REF_DB_ID
IS
  'Primary key for SD_FAULT_REFERENCE table' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE.FAULT_REF_ID
IS
  'Primary key for SD_FAULT_REFERENCE table' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE.FAULT_DB_ID
IS
  'FK to SD_FAULT. identifies the fault associated to the reference' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE.FAULT_ID
IS
  'FK to SD_FAULT. identifies the fault associated to the reference' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE.REP_REF_DB_ID
IS
  'FK to TASK_TASK. identifies the repair reference' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE.REP_REF_ID
IS
  'FK to TASK_TASK. identifies the repair reference' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE.DEFER_REF_DB_ID
IS
  'FK to FAIL_DEFER_REF. identifies the deferral reference' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE.DEFER_REF_ID
IS
  'FK to FAIL_DEFER_REF. identifies the deferral reference' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE.STAGE_REASON_CD
IS
  'FK to REF_FAIL_SEV. This is the deferral reason associated with the fault.' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE.STAGE_REASON_DB_ID
IS
  'FK to REF_FAIL_SEV. This is the deferral reason associated with the fault.' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE.NOTES
IS
  'Deferral notes' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE.CURRENT_BOOL
IS
  'Boolean indicating the latest reference selected for a fault' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE.RSTAT_CD
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_SDFAULTREF_FAULT_CURRENT ON SD_FAULT_REFERENCE
    (
      FAULT_ID ASC ,
      CURRENT_BOOL DESC ,
      FAULT_DB_ID ASC
    ) ;
  CREATE INDEX IX_SDFAULTREF_DEFER_REF_ID ON SD_FAULT_REFERENCE
    (
      DEFER_REF_DB_ID ASC ,
      DEFER_REF_ID ASC
    ) ;
  CREATE INDEX IX_SDFAULTREF_REPAIR_REF_ID ON SD_FAULT_REFERENCE
    (
      REP_REF_DB_ID ASC ,
      REP_REF_ID ASC
    ) ;
  CREATE INDEX IX_SDFAULTREF_FAULT_ID ON SD_FAULT_REFERENCE
    (
      FAULT_DB_ID ASC ,
      FAULT_ID ASC
    ) ;
ALTER TABLE SD_FAULT_REFERENCE ADD CONSTRAINT PK_SD_FAULT_REFERENCE PRIMARY KEY ( FAULT_REF_DB_ID, FAULT_REF_ID ) ;


CREATE TABLE SD_FAULT_REFERENCE_REQUEST
  (
    FAULT_REF_REQ_DB_ID NUMBER (10) NOT NULL ,
    FAULT_REF_REQ_ID    NUMBER (10) NOT NULL ,
    HR_DB_ID            NUMBER (10) NOT NULL ,
    HR_ID               NUMBER (10) NOT NULL ,
    APPROVER_HR_DB_ID   NUMBER (10) ,
    APPROVER_HR_ID      NUMBER (10) ,
    REQUEST_STATUS_CD   VARCHAR2 (16) NOT NULL ,
    DATE_REQUESTED      DATE NOT NULL ,
    DATE_RESOLVED       DATE ,
    RSTAT_CD            NUMBER (3) NOT NULL ,
    REVISION_NO         NUMBER (10) NOT NULL ,
    CTRL_DB_ID          NUMBER (10) NOT NULL ,
    CREATION_DT         DATE NOT NULL ,
    REVISION_DT         DATE NOT NULL ,
    REVISION_DB_ID      NUMBER (10) NOT NULL ,
    REVISION_USER       VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE SD_FAULT_REFERENCE_REQUEST ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
COMMENT ON COLUMN SD_FAULT_REFERENCE_REQUEST.HR_DB_ID
IS
  'FK to ORG_HR. identifies the user that made the request.' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE_REQUEST.HR_ID
IS
  'FK to ORG_HR. identifies the user that made the request.' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE_REQUEST.APPROVER_HR_DB_ID
IS
  'FK to ORG_HR. identifies the user that approved the request.' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE_REQUEST.APPROVER_HR_ID
IS
  'FK to ORG_HR. identifies the user that approved the request.' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE_REQUEST.REQUEST_STATUS_CD
IS
  'Foreign key to the request''s status (PENDING, APPROVED, REJECTED, and CANCELLED).' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE_REQUEST.RSTAT_CD
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE_REQUEST.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE_REQUEST.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE_REQUEST.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE_REQUEST.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SD_FAULT_REFERENCE_REQUEST.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_SDFAULTREFREQUEST_HRID ON SD_FAULT_REFERENCE_REQUEST
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
  CREATE INDEX IX_SDFAULTREFREQUEST_APPHRID ON SD_FAULT_REFERENCE_REQUEST
    (
      APPROVER_HR_ID ASC ,
      APPROVER_HR_DB_ID ASC
    ) ;
ALTER TABLE SD_FAULT_REFERENCE_REQUEST ADD CONSTRAINT PK_SD_FAULT_REFER_REQ PRIMARY KEY ( FAULT_REF_REQ_DB_ID, FAULT_REF_REQ_ID ) ;


CREATE TABLE SD_FAULT_RESULT
  (
    FAULT_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    FAULT_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    RESULT_EVENT_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RESULT_EVENT_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SD_FAULT_RESULT ADD CHECK ( FAULT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT_RESULT ADD CHECK ( FAULT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT_RESULT ADD CHECK ( RESULT_EVENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SD_FAULT_RESULT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SD_FAULT_RESULT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SD_FAULT_RESULT
IS
  'This table ties multiple resulting events to a fault.' ;
  COMMENT ON COLUMN SD_FAULT_RESULT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN SD_FAULT_RESULT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SD_FAULT_RESULT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was updated.' ;
  COMMENT ON COLUMN SD_FAULT_RESULT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SD_FAULT_RESULT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_SDFAULT_SDFAULTRESULT ON SD_FAULT_RESULT
    (
      FAULT_DB_ID ASC ,
      FAULT_ID ASC
    ) ;
ALTER TABLE SD_FAULT_RESULT ADD CONSTRAINT PK_SD_FAULT_RESULT PRIMARY KEY ( FAULT_DB_ID, FAULT_ID, RESULT_EVENT_DB_ID, RESULT_EVENT_CD ) ;


CREATE TABLE SHIFT_SHIFT
  (
    SHIFT_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SHIFT_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    SHIFT_CD    VARCHAR2 (80) NOT NULL ,
    SHIFT_NAME  VARCHAR2 (240) NOT NULL DEFERRABLE ,
    START_HOUR  NUMBER (6,2) NOT NULL DEFERRABLE ,
    DURATION_QT FLOAT NOT NULL DEFERRABLE ,
    WORK_HOURS_QT FLOAT NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SHIFT_SHIFT ADD CHECK ( SHIFT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIFT_SHIFT ADD CHECK ( SHIFT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIFT_SHIFT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SHIFT_SHIFT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SHIFT_SHIFT
IS
  'This entity represents shifts that employees could work at a particular station.' ;
  COMMENT ON COLUMN SHIFT_SHIFT.SHIFT_DB_ID
IS
  'Primary key of the shift.' ;
  COMMENT ON COLUMN SHIFT_SHIFT.SHIFT_ID
IS
  'Primary key of the shift.' ;
  COMMENT ON COLUMN SHIFT_SHIFT.SHIFT_CD
IS
  'Unique code for the shift.' ;
  COMMENT ON COLUMN SHIFT_SHIFT.SHIFT_NAME
IS
  'Descriptive title/name for the shift.' ;
  COMMENT ON COLUMN SHIFT_SHIFT.START_HOUR
IS
  'This is the hour of the day when the shift starts. For example, 3:00 PM would be 15.0. Therefore, this value must be between 0 and 24.' ;
  COMMENT ON COLUMN SHIFT_SHIFT.DURATION_QT
IS
  'This is the duration of the shift in hours. This value must be less than or equal to 24 hours.' ;
  COMMENT ON COLUMN SHIFT_SHIFT.WORK_HOURS_QT
IS
  'This is the number of workable hours in the shift, which is usually less than the duration (lunch, breaks, etc).' ;
  COMMENT ON COLUMN SHIFT_SHIFT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SHIFT_SHIFT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SHIFT_SHIFT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SHIFT_SHIFT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SHIFT_SHIFT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE SHIFT_SHIFT ADD CONSTRAINT PK_SHIFT_SHIFT PRIMARY KEY ( SHIFT_DB_ID, SHIFT_ID ) ;
ALTER TABLE SHIFT_SHIFT ADD CONSTRAINT IX_SHIFTSHIFTCD_UNQ UNIQUE ( SHIFT_CD ) ;
ALTER TABLE SHIFT_SHIFT ADD CONSTRAINT IX_SHIFTSHIFTALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE SHIP_SEGMENT
  (
    SEGMENT_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    SEGMENT_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    SEGMENT_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SEGMENT_STATUS_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    SHIP_FROM_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    SHIP_FROM_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    SHIP_TO_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    SHIP_TO_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    COMPLETE_DT          DATE ,
    COMPLETE_HR_DB_ID    NUMBER (10) ,
    COMPLETE_HR_ID       NUMBER (10) ,
    CUSTOMS_SDESC        VARCHAR2 (80) ,
    WAYBILL_SDESC        VARCHAR2 (80) ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SHIP_SEGMENT ADD CHECK ( SEGMENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SEGMENT ADD CHECK ( SEGMENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SEGMENT ADD CHECK ( SEGMENT_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SEGMENT ADD CHECK ( SHIP_FROM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SEGMENT ADD CHECK ( SHIP_FROM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SEGMENT ADD CHECK ( SHIP_TO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SEGMENT ADD CHECK ( SHIP_TO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SEGMENT ADD CHECK ( COMPLETE_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SEGMENT ADD CHECK ( COMPLETE_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SEGMENT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SHIP_SEGMENT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SHIP_SEGMENT
IS
  'This table describes the segments that make up the routing information for a shipment. Each segment is a to-from leg of a larger shipment.' ;
  COMMENT ON COLUMN SHIP_SEGMENT.SEGMENT_STATUS_DB_ID
IS
  'This is the shipment segment status.' ;
  COMMENT ON COLUMN SHIP_SEGMENT.SEGMENT_STATUS_CD
IS
  'This is the shipment segment status.' ;
  COMMENT ON COLUMN SHIP_SEGMENT.SHIP_FROM_DB_ID
IS
  'This is the segment''s ship from location.' ;
  COMMENT ON COLUMN SHIP_SEGMENT.SHIP_FROM_ID
IS
  'This is the segment''s ship from location.' ;
  COMMENT ON COLUMN SHIP_SEGMENT.SHIP_TO_DB_ID
IS
  'This is the segment''s ship to location.' ;
  COMMENT ON COLUMN SHIP_SEGMENT.SHIP_TO_ID
IS
  'This is the segment''s ship to location.' ;
  COMMENT ON COLUMN SHIP_SEGMENT.COMPLETE_DT
IS
  'This is the date that the segment was completed.' ;
  COMMENT ON COLUMN SHIP_SEGMENT.COMPLETE_HR_DB_ID
IS
  'This is the user that completed the segment.' ;
  COMMENT ON COLUMN SHIP_SEGMENT.COMPLETE_HR_ID
IS
  'This is the user that completed the segment.' ;
  COMMENT ON COLUMN SHIP_SEGMENT.CUSTOMS_SDESC
IS
  'This is the customs number when the segment was completed.' ;
  COMMENT ON COLUMN SHIP_SEGMENT.WAYBILL_SDESC
IS
  'This is the waybill number when the segment was completed.' ;
  COMMENT ON COLUMN SHIP_SEGMENT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SHIP_SEGMENT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SHIP_SEGMENT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SHIP_SEGMENT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SHIP_SEGMENT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVLOC_SHIPSEGTO ON SHIP_SEGMENT
    (
      SHIP_TO_DB_ID ASC ,
      SHIP_TO_ID ASC
    ) ;
  CREATE INDEX IX_INVLOC_SHIPSEGFROM ON SHIP_SEGMENT
    (
      SHIP_FROM_DB_ID ASC ,
      SHIP_FROM_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_SHIPSEG ON SHIP_SEGMENT
    (
      COMPLETE_HR_DB_ID ASC ,
      COMPLETE_HR_ID ASC
    ) ;
ALTER TABLE SHIP_SEGMENT ADD CONSTRAINT PK_SHIP_SEGMENT PRIMARY KEY ( SEGMENT_DB_ID, SEGMENT_ID ) ;


CREATE TABLE SHIP_SEGMENT_MAP
  (
    SHIPMENT_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SHIPMENT_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    SEGMENT_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    SEGMENT_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    SEGMENT_ORD    NUMBER (4) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SHIP_SEGMENT_MAP ADD CHECK ( SHIPMENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SEGMENT_MAP ADD CHECK ( SHIPMENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SEGMENT_MAP ADD CHECK ( SEGMENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SEGMENT_MAP ADD CHECK ( SEGMENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SEGMENT_MAP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SHIP_SEGMENT_MAP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SHIP_SEGMENT_MAP
IS
  'This table maps shipment segments to the shipment they apply to.' ;
  COMMENT ON COLUMN SHIP_SEGMENT_MAP.SEGMENT_ORD
IS
  'This is the segment order.' ;
  COMMENT ON COLUMN SHIP_SEGMENT_MAP.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SHIP_SEGMENT_MAP.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SHIP_SEGMENT_MAP.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SHIP_SEGMENT_MAP.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN SHIP_SEGMENT_MAP.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_SHIPSHIPMENT_SHIPSEGMAP ON SHIP_SEGMENT_MAP
    (
      SHIPMENT_DB_ID ASC ,
      SHIPMENT_ID ASC
    ) ;
  CREATE INDEX IX_SHIPSEG_SHIPSEGMAP ON SHIP_SEGMENT_MAP
    (
      SEGMENT_DB_ID ASC ,
      SEGMENT_ID ASC
    ) ;
ALTER TABLE SHIP_SEGMENT_MAP ADD CONSTRAINT PK_SHIP_SEGMENT_MAP PRIMARY KEY ( SHIPMENT_DB_ID, SHIPMENT_ID, SEGMENT_DB_ID, SEGMENT_ID ) ;


CREATE TABLE SHIP_SHIPMENT
  (
    SHIPMENT_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    SHIPMENT_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    SHIPMENT_TYPE_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    SHIPMENT_TYPE_CD      VARCHAR2 (8) NOT NULL DEFERRABLE ,
    SHIPMENT_REASON_DB_ID NUMBER (10) ,
    SHIPMENT_REASON_CD    VARCHAR2 (8) ,
    TRANSPORT_TYPE_DB_ID  NUMBER (10) ,
    TRANSPORT_TYPE_CD     VARCHAR2 (8) ,
    REQ_PRIORITY_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REQ_PRIORITY_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    SIZE_CLASS_DB_ID      NUMBER (10) ,
    SIZE_CLASS_CD         VARCHAR2 (8) ,
    CHECK_DB_ID           NUMBER (10) ,
    CHECK_ID              NUMBER (10) ,
    PO_DB_ID              NUMBER (10) ,
    PO_ID                 NUMBER (10) ,
    WAYBILL_SDESC         VARCHAR2 (80) ,
    CUSTOMS_DECLARATION   VARCHAR2 (4000) ,
    SHIP_BY_DT            DATE ,
    SHIP_AFTER_DT         DATE ,
    WEIGHT_ENG_UNIT_DB_ID NUMBER (10) ,
    WEIGHT_ENG_UNIT_CD    VARCHAR2 (8) ,
    WEIGHT_QT FLOAT ,
    DIMENSION_ENG_UNIT_DB_ID NUMBER (10) ,
    DIMENSION_ENG_UNIT_CD    VARCHAR2 (8) ,
    WIDTH_QT FLOAT ,
    HEIGHT_QT FLOAT ,
    LENGTH_QT FLOAT ,
    USE_FLIGHT_DESC      VARCHAR2 (80) ,
    CARRIER_NAME         VARCHAR2 (80) ,
    RETURN_PRICE         NUMBER (15,5) ,
    RETURN_AUTH_NO       VARCHAR2 (80) ,
    RETURN_ACCOUNT_DB_ID NUMBER (10) ,
    RETURN_ACCOUNT_ID    NUMBER (10) ,
    RMA_SDESC            VARCHAR2 (80) ,
    CONFIRM_RECEIPT_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CUSTOMS_SDESC        VARCHAR2 (80) ,
    FLIGHT_STATUS        VARCHAR2 (80) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SHIP_SHIPMENT ADD CHECK ( SHIPMENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT ADD CHECK ( SHIPMENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT ADD CHECK ( SHIPMENT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT ADD CHECK ( SHIPMENT_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT ADD CHECK ( TRANSPORT_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT ADD CHECK ( REQ_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT ADD CHECK ( SIZE_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT ADD CHECK ( CHECK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT ADD CHECK ( CHECK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT ADD CHECK ( PO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT ADD CHECK ( PO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT ADD CHECK ( WEIGHT_ENG_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT ADD CHECK ( DIMENSION_ENG_UNIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT ADD CHECK ( RETURN_ACCOUNT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT ADD CHECK ( RETURN_ACCOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT ADD CHECK ( CONFIRM_RECEIPT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT ADD CHECK ( RSTAT_CD             IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SHIP_SHIPMENT
IS
  'The shipment ''header'' is contained in the SHIP_SHIPMENT table.  Information stored in this table includes where the part originated and where it must go.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.SHIPMENT_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.SHIPMENT_ID
IS
  'Unique idenifier assigned from Sequence EVENT_ID_SEQ.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.SHIPMENT_TYPE_DB_ID
IS
  'FK to REF_SHIPMENT_TYPE.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.SHIPMENT_TYPE_CD
IS
  'FK to REF_SHIPMENT_TYPE.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.SHIPMENT_REASON_DB_ID
IS
  'FK to REF_SHIPMENT_REASON.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.SHIPMENT_REASON_CD
IS
  'FK to REF_SHIPMENT_REASON.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.TRANSPORT_TYPE_DB_ID
IS
  'FK to REF_TRANSPORT_TYPE.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.TRANSPORT_TYPE_CD
IS
  'FK to REF_TRANSPORT_TYPE.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.REQ_PRIORITY_DB_ID
IS
  'FK to REF_REQ_PRIORITY' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.REQ_PRIORITY_CD
IS
  'FK to REF_REQ_PRIORITY' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.SIZE_CLASS_DB_ID
IS
  'FK to REF_SIZE_CLASS.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.SIZE_CLASS_CD
IS
  'FK to REF_SIZE_CLASS.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.CHECK_DB_ID
IS
  'This is the work package that the shipment is for. A work package will have at most one pending shipment from any given supply location.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.CHECK_ID
IS
  'This is the work package that the shipment is for. A work package will have at most one pending shipment from any given supply location.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.WAYBILL_SDESC
IS
  'Waybill description.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.CUSTOMS_DECLARATION
IS
  'Storage for customs-related notes and information.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.SHIP_BY_DT
IS
  'This is the latest date/time that the shipment should be sent. ' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.SHIP_AFTER_DT
IS
  'This is the earliest date/time that the shipment should be sent. ' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.WEIGHT_ENG_UNIT_DB_ID
IS
  'This is the engineering unit of the weight (for example, lb or kg)' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.WEIGHT_ENG_UNIT_CD
IS
  'This is the engineering unit of the weight (for example, lb or kg)' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.WEIGHT_QT
IS
  'This is the weight of the item being shipped.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.DIMENSION_ENG_UNIT_DB_ID
IS
  'This is the engineering unit of the dimensions (for exampl, ft or cm)' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.DIMENSION_ENG_UNIT_CD
IS
  'This is the engineering unit of the dimensions (for exampl, ft or cm)' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.WIDTH_QT
IS
  'This the width of the item being shipped.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.LENGTH_QT
IS
  'This the length of the item being shipped.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.USE_FLIGHT_DESC
IS
  'Storage for the flight label or number.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.RETURN_PRICE
IS
  'This column is used for return-to-vendor shipments. It is the price at which the item is being returned.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.RETURN_AUTH_NO
IS
  'This column is used for return-to-vendor shipments. It is the vendor?s return authorization number, needed for all part returns.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.RETURN_ACCOUNT_DB_ID
IS
  'FK to FNC_ACCOUNT.  This column is used for return-to-vendor shipments. It is the account that is getting credit for the return.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.RETURN_ACCOUNT_ID
IS
  'FK to FNC_ACCOUNT.  This column is used for return-to-vendor shipments. It is the account that is getting credit for the return.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.RMA_SDESC
IS
  'Return Materials Authorization' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.CONFIRM_RECEIPT_BOOL
IS
  'This flag indicates that the receipt of the shipment has been confirmed.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.CUSTOMS_SDESC
IS
  'This is the customs number for the shipment.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.FLIGHT_STATUS
IS
  'This is the status of the flight that the shipment will be sent on. ' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN SHIP_SHIPMENT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_SCHEDSTASK_SHIPSHIPMENT ON SHIP_SHIPMENT
    (
      CHECK_DB_ID ASC ,
      CHECK_ID ASC
    ) ;
  CREATE INDEX IX_POHEADER_SHIPSHIPMENT ON SHIP_SHIPMENT
    (
      PO_DB_ID ASC ,
      PO_ID ASC
    ) ;
  CREATE INDEX IX_FNCACCOUNT_SHIPSHIPMENT ON SHIP_SHIPMENT
    (
      RETURN_ACCOUNT_DB_ID ASC ,
      RETURN_ACCOUNT_ID ASC
    ) ;
ALTER TABLE SHIP_SHIPMENT ADD CONSTRAINT PK_SHIP_SHIPMENT PRIMARY KEY ( SHIPMENT_DB_ID, SHIPMENT_ID ) ;
ALTER TABLE SHIP_SHIPMENT ADD CONSTRAINT IX_SHIFSHIPMENTALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE SHIP_SHIPMENT_LINE
  (
    SHIPMENT_LINE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SHIPMENT_LINE_ID    NUMBER (10) CONSTRAINT NN_SHPSHPMNTLNE_SHPMENTLICD NOT NULL DEFERRABLE ,
    RCV_PRIORITY_DB_ID  NUMBER (10) ,
    RCV_PRIORITY_CD     VARCHAR2 (64) ,
    SHIPMENT_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    SHIPMENT_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID        NUMBER (10) ,
    INV_NO_ID           NUMBER (10) ,
    ROUTE_COND_DB_ID    NUMBER (10) ,
    ROUTE_COND_CD       VARCHAR2 (8) ,
    PART_NO_DB_ID       NUMBER (10) ,
    PART_NO_ID          NUMBER (10) ,
    SERIAL_NO_OEM       VARCHAR2 (80) ,
    RECEIVE_QT FLOAT ,
    RECEIVE_DOC_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    EXPECT_QT FLOAT ,
    SHIPMENT_LINE_NOTES VARCHAR2 (4000) ,
    LINE_NO_ORD         NUMBER (4) DEFAULT 1 NOT NULL DEFERRABLE ,
    PO_DB_ID            NUMBER (10) ,
    PO_ID               NUMBER (10) ,
    PO_LINE_ID          NUMBER (10) ,
    QTY_UNIT_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    QTY_UNIT_CD         VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SHIP_SHIPMENT_LINE ADD CHECK ( SHIPMENT_LINE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT_LINE ADD CONSTRAINT CK_SHPSHPMNTLNE_SHIPMNTLID CHECK ( SHIPMENT_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT_LINE ADD CHECK ( RCV_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT_LINE ADD CHECK ( SHIPMENT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT_LINE ADD CHECK ( SHIPMENT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT_LINE ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT_LINE ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT_LINE ADD CHECK ( ROUTE_COND_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT_LINE ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT_LINE ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT_LINE ADD CHECK ( RECEIVE_DOC_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT_LINE ADD CHECK ( PO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT_LINE ADD CHECK ( PO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT_LINE ADD CHECK ( PO_LINE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT_LINE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE SHIP_SHIPMENT_LINE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE SHIP_SHIPMENT_LINE
IS
  'Each shipment line item is stored as a row in the SHIP_SHIPMENT_LINE table.  Includes details about the part being shipped, as well as routing and disposition information.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.SHIPMENT_LINE_DB_ID
IS
  'A unique serial number assigned by Mxi to each physical Maintenix database. Allows data to be merged or consolidated from independent sources without PK collisions.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.SHIPMENT_LINE_ID
IS
  'Unique idenifier assigned from Sequence SHIPSHIPLINE_ID_SEQ.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.RCV_PRIORITY_DB_ID
IS
  'FK to REF_RCV_PRIORITY.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.RCV_PRIORITY_CD
IS
  'FK to REF_RCV_PRIORITY.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.SHIPMENT_DB_ID
IS
  'FK to SHIP_SHIPMENT.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.SHIPMENT_ID
IS
  'FK to SHIP_SHIPMENT.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.INV_NO_DB_ID
IS
  'FK to INV_INV.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.INV_NO_ID
IS
  'FK to INV_INV.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.ROUTE_COND_DB_ID
IS
  'FK to REF_INV_COND indicating where the item was routed upon receipt of the shipment.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.ROUTE_COND_CD
IS
  'FK to REF_INV_COND indicating where the item was routed upon receipt of the shipment.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.PART_NO_DB_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.PART_NO_ID
IS
  'FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.SERIAL_NO_OEM
IS
  'Serial number of original equipment manufacturer.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.RECEIVE_QT
IS
  'Quantity received.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.RECEIVE_DOC_BOOL
IS
  'Documentation flag.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.EXPECT_QT
IS
  'Expected quantity' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.SHIPMENT_LINE_NOTES
IS
  'Shipment line note.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.QTY_UNIT_DB_ID
IS
  'Column to hold Units of measure that are used to describe inventory quantities for movement. FK to REF_QTY_UNIT.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.QTY_UNIT_CD
IS
  'Column to hold Units of measure that are used to describe inventory quantities for movement. FK to REF_QTY_UNIT.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_SHIP_SHIPLINE_SERIALNOOEM_F ON SHIP_SHIPMENT_LINE
    (
      SERIAL_NO_OEM ASC
    ) ;
  CREATE INDEX IX_EQPPARTNO_SHIPSHIPMENTLINE ON SHIP_SHIPMENT_LINE
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVINV_SHIPSHIPMENTLINE ON SHIP_SHIPMENT_LINE
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_SHIPSHIPMENT_SHIPSHIPMENTLI ON SHIP_SHIPMENT_LINE
    (
      SHIPMENT_DB_ID ASC ,
      SHIPMENT_ID ASC
    ) ;
  CREATE INDEX IX_POLINE_SHIPSHIPMENTLINE ON SHIP_SHIPMENT_LINE
    (
      PO_DB_ID ASC ,
      PO_ID ASC ,
      PO_LINE_ID ASC
    ) ;
ALTER TABLE SHIP_SHIPMENT_LINE ADD CONSTRAINT PK_SHIP_SHIPMENT_LINE PRIMARY KEY ( SHIPMENT_LINE_DB_ID, SHIPMENT_LINE_ID ) ;


CREATE TABLE SHIP_SHIPMENT_LINE_MP
  (
    SHIPMENT_LINE_DB_ID NUMBER (10) NOT NULL ,
    SHIPMENT_LINE_ID    NUMBER (10) NOT NULL ,
    MP_KEY_SDESC        VARCHAR2 (80) NOT NULL ,
    RSTAT_CD            NUMBER (3) NOT NULL ,
    REVISION_NO         NUMBER (10) NOT NULL ,
    CTRL_DB_ID          NUMBER (10) NOT NULL ,
    CREATION_DT         DATE NOT NULL ,
    CREATION_DB_ID      NUMBER (10) NOT NULL ,
    REVISION_DT         DATE NOT NULL ,
    REVISION_DB_ID      NUMBER (10) NOT NULL ,
    REVISION_USER       VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE SHIP_SHIPMENT_LINE_MP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE SHIP_SHIPMENT_LINE_MP ADD CHECK ( REVISION_NO BETWEEN 0 AND 4294967295) ;
ALTER TABLE SHIP_SHIPMENT_LINE_MP ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE SHIP_SHIPMENT_LINE_MP ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE SHIP_SHIPMENT_LINE_MP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON COLUMN SHIP_SHIPMENT_LINE_MP.SHIPMENT_LINE_DB_ID
IS
  'Primary key for the table' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE_MP.SHIPMENT_LINE_ID
IS
  'Primary key for the table' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE_MP.MP_KEY_SDESC
IS
  'External key of a related object in Material Planning application. To be used only in context of Material Planning API' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE_MP.RSTAT_CD
IS
  'Status of the record.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE_MP.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE_MP.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE_MP.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE_MP.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE_MP.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE_MP.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN SHIP_SHIPMENT_LINE_MP.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_SHIP_SHIP_LINE_MP_KEY ON SHIP_SHIPMENT_LINE_MP
    (
      MP_KEY_SDESC ASC
    ) ;
ALTER TABLE SHIP_SHIPMENT_LINE_MP ADD CONSTRAINT PK_SHIP_SHIPMENT_LINE_MP PRIMARY KEY ( SHIPMENT_LINE_DB_ID, SHIPMENT_LINE_ID ) ;


CREATE TABLE SSO_TICKET
  (
    ID RAW (16) NOT NULL DEFERRABLE ,
    PRINCIPAL VARCHAR2 (40) NOT NULL DEFERRABLE ,
    EXPIRE_DT DATE NOT NULL DEFERRABLE
  ) ;
ALTER TABLE SSO_TICKET ADD CONSTRAINT PK_SSO_TICKET PRIMARY KEY ( ID ) ;


CREATE TABLE STOCK_DIST_REQ
  (
    STOCK_DIST_REQ_ID    NUMBER (10) NOT NULL ,
    STOCK_DIST_REQ_DB_ID NUMBER (10) NOT NULL ,
    REQUEST_ID           VARCHAR2 (80) NOT NULL ,
    STOCK_NO_DB_ID       NUMBER (10) NOT NULL ,
    STOCK_NO_ID          NUMBER (10) NOT NULL ,
    OWNER_ID             NUMBER (10) ,
    OWNER_DB_ID          NUMBER (10) ,
    STATUS_CD            VARCHAR2 (20) NOT NULL ,
    STATUS_DB_ID         NUMBER (10) NOT NULL ,
    NEEDED_QTY FLOAT NOT NULL ,
    NEEDED_LOC_DB_ID   NUMBER (10) NOT NULL ,
    NEEDED_LOC_ID      NUMBER (10) NOT NULL ,
    SUPPLIER_LOC_DB_ID NUMBER (10) NOT NULL ,
    SUPPLIER_LOC_ID    NUMBER (10) NOT NULL ,
    ASSIGNED_HR_DB_ID  NUMBER (10) ,
    ASSIGNED_HR_ID     NUMBER (10) ,
    QTY_UNIT_DB_ID     NUMBER (10) NOT NULL ,
    QTY_UNIT_CD        VARCHAR2 (8) NOT NULL ,
    RSTAT_CD           NUMBER (3) NOT NULL ,
    REVISION_NO        NUMBER (10) NOT NULL ,
    CTRL_DB_ID         NUMBER (10) NOT NULL ,
    CREATION_DT        DATE NOT NULL ,
    REVISION_DT        DATE NOT NULL ,
    REVISION_DB_ID     NUMBER (10) NOT NULL ,
    REVISION_USER      VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE STOCK_DIST_REQ ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
COMMENT ON TABLE STOCK_DIST_REQ
IS
  'This table stores the stock distribution request data.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.STOCK_DIST_REQ_ID
IS
  'Unique idenifier assigned from Sequence STOCK_DIST_REQ_ID_SEQ. Primary key of the stock distribution request.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.STOCK_DIST_REQ_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the  primary key.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.REQUEST_ID
IS
  'Unique identifier for stock distribution request.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.STOCK_NO_DB_ID
IS
  'The stock number for the stock distribution request. Foreign key reference to eqp_stock_no table.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.STOCK_NO_ID
IS
  'The stock number for the stock distribution request. Foreign key reference to eqp_stock_no table.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.OWNER_ID
IS
  'The inventory owner for the stock distribution request. Foreign key reference to inv_owner table.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.OWNER_DB_ID
IS
  'The inventory owner for the stock distribution request. Foreign key reference to inv_owner table.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.STATUS_CD
IS
  'Current state of the distribution request such as OPEN/COMPLETED. Foreign key reference to REF_STOCK_DIST_REQ_STATUS.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.STATUS_DB_ID
IS
  'Current state of the distribution request such as OPEN/COMPLETED. Foreign key reference to REF_STOCK_DIST_REQ_STATUS.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.NEEDED_QTY
IS
  'Quantity to transfer for the distribution request.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.NEEDED_LOC_DB_ID
IS
  'Requesting srvstore for the stock. foreign key reference to INV_LOC table.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.NEEDED_LOC_ID
IS
  'Requesting srvstore for the stock. foreign key reference to INV_LOC table.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.SUPPLIER_LOC_DB_ID
IS
  'srvstore supplier location with in the same supply location. Foreign key reference to INV_LOC table.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.SUPPLIER_LOC_ID
IS
  'srvstore supplier location with in the same supply location. Foreign key reference to INV_LOC table.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.ASSIGNED_HR_DB_ID
IS
  'The user working on the stock distribution request.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.ASSIGNED_HR_ID
IS
  'The user working on the stock distribution request.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.QTY_UNIT_DB_ID
IS
  'Units of measure are used whenever you need to describe stock quantities for movement. FK to REF_QTY_UNIT.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.QTY_UNIT_CD
IS
  'Units of measure are used whenever you need to describe stock quantities for movement. FK to REF_QTY_UNIT.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.CTRL_DB_ID
IS
  'The identifier of the database that owns the record. The meaning of this column may be specific to the entity.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_EQPSTKNO_STKDISTREQ ON STOCK_DIST_REQ
    (
      STOCK_NO_DB_ID ASC ,
      STOCK_NO_ID ASC
    ) ;
  CREATE INDEX IX_STKDISTREQ_UNQ ON STOCK_DIST_REQ
    ( REQUEST_ID ASC
    ) ;
  CREATE INDEX IX_INVLOCREQ_STKDISTREQ ON STOCK_DIST_REQ
    (
      NEEDED_LOC_ID ASC ,
      NEEDED_LOC_DB_ID ASC
    ) ;
  CREATE INDEX IX_INVLOCSUP_STKDISTREQ ON STOCK_DIST_REQ
    (
      SUPPLIER_LOC_ID ASC ,
      SUPPLIER_LOC_DB_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_STKDISTREQ ON STOCK_DIST_REQ
    (
      ASSIGNED_HR_ID ASC ,
      ASSIGNED_HR_DB_ID ASC
    ) ;
  CREATE INDEX IX_INVOWNER_STKDISTREQ ON STOCK_DIST_REQ
    (
      OWNER_ID ASC ,
      OWNER_DB_ID ASC
    ) ;
ALTER TABLE STOCK_DIST_REQ ADD CONSTRAINT PK_STOCK_DIST_REQ PRIMARY KEY ( STOCK_DIST_REQ_ID, STOCK_DIST_REQ_DB_ID ) ;


CREATE TABLE STOCK_DIST_REQ_LOG
  (
    STOCK_DIST_REQ_ID     NUMBER (10) NOT NULL ,
    STOCK_DIST_REQ_DB_ID  NUMBER (10) NOT NULL ,
    STOCK_DIST_REQ_LOG_ID NUMBER (10) NOT NULL ,
    STATUS_CD             VARCHAR2 (20) NOT NULL ,
    STATUS_DB_ID          NUMBER (10) NOT NULL ,
    NOTES                 VARCHAR2 (4000) ,
    AUTO_GENERATED_BOOL   NUMBER (1) DEFAULT 0 ,
    RSTAT_CD              NUMBER (3) NOT NULL ,
    REVISION_NO           NUMBER (10) NOT NULL ,
    CTRL_DB_ID            NUMBER (10) NOT NULL ,
    CREATION_DT           DATE NOT NULL ,
    REVISION_DT           DATE NOT NULL ,
    REVISION_DB_ID        NUMBER (10) NOT NULL ,
    REVISION_USER         VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE STOCK_DIST_REQ_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
COMMENT ON TABLE STOCK_DIST_REQ_LOG
IS
  'This table stores the history log information for stock distribution request.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_LOG.STOCK_DIST_REQ_ID
IS
  'Foreign key to the stock distribution request table. Part of primary key.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_LOG.STOCK_DIST_REQ_DB_ID
IS
  'Foreign key to the stock distribution request table.Part of primary key.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_LOG.STOCK_DIST_REQ_LOG_ID
IS
  'Unique id of the stock distribution request log record. Part of Primary Key.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_LOG.STATUS_CD
IS
  'Status of the stock distribution request at the time history was logged.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_LOG.STATUS_DB_ID
IS
  'Status of the stock distribution request at the time history was logged.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_LOG.NOTES
IS
  'System or user note explaining the change.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_LOG.AUTO_GENERATED_BOOL
IS
  'Boolean flag to indicate whether the change was auto-generated.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_LOG.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_LOG.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_LOG.CTRL_DB_ID
IS
  'The identifier of the database that owns the record. The meaning of this column may be specific to the entity.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_LOG.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_LOG.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_LOG.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_LOG.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_STKDISTREQ_STKDISTREQLOG ON STOCK_DIST_REQ_LOG
    (
      STOCK_DIST_REQ_ID ASC ,
      STOCK_DIST_REQ_DB_ID ASC
    ) ;
ALTER TABLE STOCK_DIST_REQ_LOG ADD CONSTRAINT PK_STOCK_DIST_REQ_LOG PRIMARY KEY ( STOCK_DIST_REQ_ID, STOCK_DIST_REQ_DB_ID, STOCK_DIST_REQ_LOG_ID ) ;


CREATE TABLE STOCK_DIST_REQ_PICKED_ITEM
  (
    STOCK_DIST_REQ_ID    NUMBER (10) NOT NULL ,
    STOCK_DIST_REQ_DB_ID NUMBER (10) NOT NULL ,
    XFER_DB_ID           NUMBER (10) NOT NULL ,
    XFER_ID              NUMBER (10) NOT NULL ,
    RSTAT_CD             NUMBER (3) NOT NULL ,
    REVISION_NO          NUMBER (10) NOT NULL ,
    CTRL_DB_ID           NUMBER (10) NOT NULL ,
    CREATION_DT          DATE NOT NULL ,
    REVISION_DT          DATE NOT NULL ,
    REVISION_DB_ID       NUMBER (10) NOT NULL ,
    REVISION_USER        VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE STOCK_DIST_REQ_PICKED_ITEM ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
COMMENT ON TABLE STOCK_DIST_REQ_PICKED_ITEM
IS
  'This table stores the mapping for the picked items. The link between stock distribution request and inventory transfer record is one to many, meaning for one stock distribution request there could be multiple inventory transfers but not other way around.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_PICKED_ITEM.STOCK_DIST_REQ_ID
IS
  'Foreign key reference to the stock distribution request.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_PICKED_ITEM.STOCK_DIST_REQ_DB_ID
IS
  'Foreign key reference to the stock distribution request.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_PICKED_ITEM.XFER_DB_ID
IS
  'Foreign key reference to the inventory transfer record.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_PICKED_ITEM.XFER_ID
IS
  'Foreign key reference to the inventory transfer record.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_PICKED_ITEM.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_PICKED_ITEM.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_PICKED_ITEM.CTRL_DB_ID
IS
  'The identifier of the database that owns the record. The meaning of this column may be specific to the entity.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_PICKED_ITEM.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_PICKED_ITEM.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_PICKED_ITEM.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN STOCK_DIST_REQ_PICKED_ITEM.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_STKDSTREQ_DISTREQPICKITEM ON STOCK_DIST_REQ_PICKED_ITEM
    (
      STOCK_DIST_REQ_ID ASC ,
      STOCK_DIST_REQ_DB_ID ASC
    ) ;
  CREATE INDEX IX_INVXFER_DISTREQPICKITEM ON STOCK_DIST_REQ_PICKED_ITEM
    (
      XFER_ID ASC ,
      XFER_DB_ID ASC
    ) ;
ALTER TABLE STOCK_DIST_REQ_PICKED_ITEM ADD CONSTRAINT PK_STOCK_DIST_REQ_PICKED_ITEM PRIMARY KEY ( STOCK_DIST_REQ_ID, STOCK_DIST_REQ_DB_ID, XFER_DB_ID, XFER_ID ) ;


CREATE TABLE TAG_TAG
  (
    TAG_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TAG_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    HR_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    TAG_CD    VARCHAR2 (40) NOT NULL ,
    TAG_SDESC VARCHAR2 (80) NOT NULL DEFERRABLE ,
    TAG_LDESC VARCHAR2 (4000) ,
    TAG_DT    DATE NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TAG_TAG ADD CHECK ( TAG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TAG_TAG ADD CHECK ( TAG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TAG_TAG ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TAG_TAG ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TAG_TAG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TAG_TAG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_ORGHR_TAGTAG ON TAG_TAG
  ( HR_DB_ID ASC , HR_ID ASC
  ) ;
ALTER TABLE TAG_TAG ADD CONSTRAINT PK_TAG_TAG PRIMARY KEY ( TAG_DB_ID, TAG_ID ) ;
ALTER TABLE TAG_TAG ADD CONSTRAINT IX_TAGTAGCD_UNQ UNIQUE ( TAG_CD ) ;
ALTER TABLE TAG_TAG ADD CONSTRAINT IX_TAGTAGALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE TAG_TASK_DEFN
  (
    TAG_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    TAG_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TAG_TASK_DEFN ADD CHECK ( TAG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TAG_TASK_DEFN ADD CHECK ( TAG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TAG_TASK_DEFN ADD CHECK ( TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TAG_TASK_DEFN ADD CHECK ( TASK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TAG_TASK_DEFN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TAG_TASK_DEFN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_TASKDEFN_TAGTASKDEFN ON TAG_TASK_DEFN
  (
    TASK_DEFN_DB_ID ASC ,
    TASK_DEFN_ID ASC
  ) ;
CREATE INDEX IX_TAGTAG_TAGTASKDEFN ON TAG_TASK_DEFN
  (
    TAG_DB_ID ASC ,
    TAG_ID ASC
  ) ;
ALTER TABLE TAG_TASK_DEFN ADD CONSTRAINT PK_TAG_TASK_DEFN PRIMARY KEY ( TAG_DB_ID, TAG_ID, TASK_DEFN_DB_ID, TASK_DEFN_ID ) ;


CREATE TABLE TASK_AC_RULE
  (
    TASK_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    INTERVAL_QT FLOAT NOT NULL DEFERRABLE ,
    NOTIFY_QT FLOAT NOT NULL DEFERRABLE ,
    DEVIATION_QT FLOAT NOT NULL DEFERRABLE ,
    PREFIXED_QT FLOAT NOT NULL DEFERRABLE ,
    POSTFIXED_QT FLOAT NOT NULL DEFERRABLE ,
    INITIAL_QT FLOAT ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_AC_RULE ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_AC_RULE ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_AC_RULE ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_AC_RULE ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_AC_RULE ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_AC_RULE ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_AC_RULE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_AC_RULE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN TASK_AC_RULE.TASK_DB_ID
IS
  'This is a foreign key to TASK_SCHED_RULE; overrides the default scheduling rule for a given aircraft.' ;
  COMMENT ON COLUMN TASK_AC_RULE.TASK_ID
IS
  'This is a foreign key to TASK_SCHED_RULE; overrides the default scheduling rule for a given aircraft.' ;
  COMMENT ON COLUMN TASK_AC_RULE.DATA_TYPE_DB_ID
IS
  'This is a foreign key to TASK_SCHED_RULE; overrides the default scheduling rule for a given aircraft.' ;
  COMMENT ON COLUMN TASK_AC_RULE.DATA_TYPE_ID
IS
  'This is a foreign key to TASK_SCHED_RULE; overrides the default scheduling rule for a given aircraft.' ;
  COMMENT ON COLUMN TASK_AC_RULE.INV_NO_DB_ID
IS
  'This is a foreign key to INV_AC_REG.' ;
  COMMENT ON COLUMN TASK_AC_RULE.INV_NO_ID
IS
  'This is a foreign key to INV_AC_REG.' ;
  COMMENT ON COLUMN TASK_AC_RULE.INTERVAL_QT
IS
  'This is the scheduling interval.' ;
  COMMENT ON COLUMN TASK_AC_RULE.NOTIFY_QT
IS
  'The amount of lead time before the maintenance planner is notified that the block / requirement is coming due.' ;
  COMMENT ON COLUMN TASK_AC_RULE.DEVIATION_QT
IS
  'The amount by which the block / requirement can "slip" past its original deadline before being considered overdue.' ;
  COMMENT ON COLUMN TASK_AC_RULE.PREFIXED_QT
IS
  'Defines the start of the "window" within which the completion date can fall for the task definition to be scheduled to plan, ie. fixed scheduling.' ;
  COMMENT ON COLUMN TASK_AC_RULE.POSTFIXED_QT
IS
  'Defines the end of the "window" within which the completion date can fall for the task definition to be scheduled to plan, ie. fixed scheduling.' ;
  COMMENT ON COLUMN TASK_AC_RULE.INITIAL_QT
IS
  'This is the initial interval (only used for recurring blocks and requirements).' ;
  COMMENT ON COLUMN TASK_AC_RULE.CREATION_DT
IS
  'The database server''s timestamp captured at the tme the record was inserted.' ;
  COMMENT ON COLUMN TASK_AC_RULE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN TASK_AC_RULE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN TASK_AC_RULE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVACREG_TASKACRULE ON TASK_AC_RULE
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_TASKSCHEDRULE_TASKACRULE ON TASK_AC_RULE
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC ,
      DATA_TYPE_DB_ID ASC ,
      DATA_TYPE_ID ASC
    ) ;
ALTER TABLE TASK_AC_RULE ADD CONSTRAINT PK_TASK_AC_RULE PRIMARY KEY ( TASK_DB_ID, TASK_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID, INV_NO_DB_ID, INV_NO_ID ) ;


CREATE TABLE TASK_ADVISORY
  (
    TASK_DB_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID                  NUMBER (10) NOT NULL DEFERRABLE ,
    ROLE_ID                  NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ADVISORY_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ADVISORY_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ADVISORY_LDESC           VARCHAR2 (4000) ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_ADVISORY ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ADVISORY ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ADVISORY ADD CHECK ( TASK_ADVISORY_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ADVISORY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_ADVISORY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE TASK_ADVISORY
IS
  'This table stores the roles that are alerted when a requirement is executed' ;
  COMMENT ON COLUMN TASK_ADVISORY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN TASK_ADVISORY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN TASK_ADVISORY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN TASK_ADVISORY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN TASK_ADVISORY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_TASKTASK_TASKADVISORY ON TASK_ADVISORY
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
ALTER TABLE TASK_ADVISORY ADD CONSTRAINT PK_TASK_ADVISORY PRIMARY KEY ( TASK_DB_ID, TASK_ID, ROLE_ID, TASK_ADVISORY_TYPE_DB_ID, TASK_ADVISORY_TYPE_CD ) ;


CREATE TABLE TASK_BLOCK_REQ_MAP
  (
    BLOCK_TASK_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BLOCK_TASK_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REQ_TASK_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REQ_TASK_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    START_BLOCK_ORD     NUMBER NOT NULL DEFERRABLE ,
    INTERVAL_QT         NUMBER NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_BLOCK_REQ_MAP ADD CHECK ( BLOCK_TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_BLOCK_REQ_MAP ADD CHECK ( BLOCK_TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_BLOCK_REQ_MAP ADD CHECK ( REQ_TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_BLOCK_REQ_MAP ADD CHECK ( REQ_TASK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_BLOCK_REQ_MAP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_BLOCK_REQ_MAP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN TASK_BLOCK_REQ_MAP.BLOCK_TASK_DB_ID
IS
  'FK to task_task.  Links to the exact block revision assigned to the requirement task definition.' ;
  COMMENT ON COLUMN TASK_BLOCK_REQ_MAP.BLOCK_TASK_ID
IS
  'FK to task_task.  Links to the exact block revision assigned to the requirement task definition.' ;
  COMMENT ON COLUMN TASK_BLOCK_REQ_MAP.REQ_TASK_DEFN_DB_ID
IS
  'FK to task_defn.  Links to the requirement task definition to which the block revision belongs.' ;
  COMMENT ON COLUMN TASK_BLOCK_REQ_MAP.REQ_TASK_DEFN_ID
IS
  'FK to task_defn.  Links to the requirement task definition to which the block revision belongs.' ;
  COMMENT ON COLUMN TASK_BLOCK_REQ_MAP.START_BLOCK_ORD
IS
  'Identifies the starting block number.' ;
  COMMENT ON COLUMN TASK_BLOCK_REQ_MAP.INTERVAL_QT
IS
  'Identifies the periodicity of the requirement occurrence in the block chain.
E.g.  If the periodicity value is 2 in a block chain that contains 4 blocks, the requirement is assigned to blocks 1 and 3.  I.e. Every 2 blocks.' ;
  COMMENT ON COLUMN TASK_BLOCK_REQ_MAP.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN TASK_BLOCK_REQ_MAP.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN TASK_BLOCK_REQ_MAP.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN TASK_BLOCK_REQ_MAP.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN TASK_BLOCK_REQ_MAP.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_TASKTASK_TASKBLKREQMAP ON TASK_BLOCK_REQ_MAP
    (
      BLOCK_TASK_DB_ID ASC ,
      BLOCK_TASK_ID ASC
    ) ;
  CREATE INDEX IX_TASKDEFN_TASKBLKREQMAP ON TASK_BLOCK_REQ_MAP
    (
      REQ_TASK_DEFN_DB_ID ASC ,
      REQ_TASK_DEFN_ID ASC
    ) ;
ALTER TABLE TASK_BLOCK_REQ_MAP ADD CONSTRAINT PK_TASK_BLOCK_REQ_MAP PRIMARY KEY ( BLOCK_TASK_DB_ID, BLOCK_TASK_ID, REQ_TASK_DEFN_DB_ID, REQ_TASK_DEFN_ID ) ;


CREATE TABLE TASK_BOM_PART_LIST
  (
    TASK_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_PART_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_PART_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_BOM_PART_LIST ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_BOM_PART_LIST ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_BOM_PART_LIST ADD CHECK ( BOM_PART_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_BOM_PART_LIST ADD CHECK ( BOM_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_BOM_PART_LIST ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_BOM_PART_LIST ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE TASK_BOM_PART_LIST
IS
  'Task Affected Parts List: This is a list of components that will be affected by the maintenance activity. Although the task is logged against a particular log card item, several components may actually be affected by the work. This list is different than the "materiel required" list in that it deals with items that were affected without replacement. It is typically used during servicing-type corrective work.' ;
  COMMENT ON COLUMN TASK_BOM_PART_LIST.TASK_DB_ID
IS
  'FK to TASK_TASK. The task to which this affected inventory is assigned,' ;
  COMMENT ON COLUMN TASK_BOM_PART_LIST.TASK_ID
IS
  'FK to TASK_TASK. The task to which this affected inventory is assigned,' ;
  COMMENT ON COLUMN TASK_BOM_PART_LIST.BOM_PART_DB_ID
IS
  'FK to EQP_BOM_PART. The Bill of Materiels item that will be assigned to the task.' ;
  COMMENT ON COLUMN TASK_BOM_PART_LIST.BOM_PART_ID
IS
  'FK to EQP_BOM_PART. The Bill of Materiels item that will be assigned to the task.' ;
  COMMENT ON COLUMN TASK_BOM_PART_LIST.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN TASK_BOM_PART_LIST.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN TASK_BOM_PART_LIST.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN TASK_BOM_PART_LIST.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN TASK_BOM_PART_LIST.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPBOMPART_TASKBOMPARTLIST ON TASK_BOM_PART_LIST
    (
      BOM_PART_DB_ID ASC ,
      BOM_PART_ID ASC
    ) ;
  CREATE INDEX IX_TASKTASK_TASKBOMPARTLIST ON TASK_BOM_PART_LIST
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
ALTER TABLE TASK_BOM_PART_LIST ADD CONSTRAINT PK_TASK_BOM_PART_LIST PRIMARY KEY ( TASK_DB_ID, TASK_ID, BOM_PART_DB_ID, BOM_PART_ID ) ;


CREATE TABLE TASK_COND
  (
    TASK_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    AC_COND_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    AC_COND_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    COND_SET_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    COND_SET_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_COND ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_COND ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_COND ADD CHECK ( AC_COND_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_COND ADD CHECK ( COND_SET_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_COND ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_COND ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN TASK_COND.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN TASK_COND.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN TASK_COND.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN TASK_COND.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_TASKTASK_TASKCOND ON TASK_COND
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
  CREATE INDEX IX_ACCONDSETTING_TASKCOND ON TASK_COND
    (
      AC_COND_DB_ID ASC ,
      AC_COND_CD ASC ,
      COND_SET_DB_ID ASC ,
      COND_SET_CD ASC
    ) ;
ALTER TABLE TASK_COND ADD CONSTRAINT PK_TASK_COND PRIMARY KEY ( TASK_DB_ID, TASK_ID, AC_COND_DB_ID, AC_COND_CD, COND_SET_DB_ID, COND_SET_CD ) ;


CREATE TABLE TASK_DEADLINE_EXT
  (
    TASK_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    DEVIATION_QT FLOAT NOT NULL DEFERRABLE ,
    REF_NO_SDESC   VARCHAR2 (500) ,
    EXTEND_NOTE    VARCHAR2 (1000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_DEADLINE_EXT ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_DEADLINE_EXT ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_DEADLINE_EXT ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_DEADLINE_EXT ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_DEADLINE_EXT ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_DEADLINE_EXT ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_DEADLINE_EXT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_DEADLINE_EXT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN TASK_DEADLINE_EXT.DEVIATION_QT
IS
  'This is the deadline extension / deviation.' ;
  COMMENT ON COLUMN TASK_DEADLINE_EXT.REF_NO_SDESC
IS
  'This is the reference number for the extension.' ;
  COMMENT ON COLUMN TASK_DEADLINE_EXT.EXTEND_NOTE
IS
  'This is the extension notes.' ;
  COMMENT ON COLUMN TASK_DEADLINE_EXT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN TASK_DEADLINE_EXT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN TASK_DEADLINE_EXT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN TASK_DEADLINE_EXT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_MDATATYPE_TASKDEADLINEEXT ON TASK_DEADLINE_EXT
    (
      DATA_TYPE_DB_ID ASC ,
      DATA_TYPE_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDSTASK_TASKDEADEXT ON TASK_DEADLINE_EXT
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_TASKTASK_TASKDEADEXT ON TASK_DEADLINE_EXT
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
ALTER TABLE TASK_DEADLINE_EXT ADD CONSTRAINT PK_TASK_DEADLINE_EXT PRIMARY KEY ( TASK_DB_ID, TASK_ID, SCHED_DB_ID, SCHED_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID ) ;


CREATE TABLE TASK_DEFN
  (
    TASK_DEFN_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    LAST_REVISION_ORD        NUMBER (4) NOT NULL DEFERRABLE ,
    NEW_REVISION_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    PREVENT_MANUAL_INIT_BOOL NUMBER (1) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_DEFN ADD CHECK ( TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_DEFN ADD CHECK ( TASK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_DEFN ADD CHECK ( NEW_REVISION_BOOL        IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_DEFN ADD CHECK ( PREVENT_MANUAL_INIT_BOOL IN (0,1)) ;
ALTER TABLE TASK_DEFN ADD CHECK ( RSTAT_CD                 IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_DEFN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN TASK_DEFN.TASK_DEFN_DB_ID
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN TASK_DEFN.TASK_DEFN_ID
IS
  'A unique, user entered value that defines the PK' ;
  COMMENT ON COLUMN TASK_DEFN.LAST_REVISION_ORD
IS
  'Identifies the latest revision of this task definition.' ;
  COMMENT ON COLUMN TASK_DEFN.PREVENT_MANUAL_INIT_BOOL
IS
  'Used to determine if a task definition can be manually initialized.' ;
  COMMENT ON COLUMN TASK_DEFN.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.' ;
  COMMENT ON COLUMN TASK_DEFN.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN TASK_DEFN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN TASK_DEFN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN TASK_DEFN.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN TASK_DEFN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE TASK_DEFN ADD CONSTRAINT "pk_TASK_DEFN" PRIMARY KEY ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) ;
ALTER TABLE TASK_DEFN ADD CONSTRAINT IX_TASKDEFNALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE TASK_DEFN_TO_FP
  (
    TASK_DEFN_DB_ID NUMBER (10) NOT NULL ,
    TASK_DEFN_ID    NUMBER (10) NOT NULL ,
    EXPORT_BOOL     NUMBER (1) NOT NULL ,
    RSTAT_CD        NUMBER (3) DEFAULT 0 NOT NULL ,
    REVISION_NO     NUMBER (10) NOT NULL ,
    CTRL_DB_ID      NUMBER (10) NOT NULL ,
    CREATION_DT     DATE NOT NULL ,
    CREATION_DB_ID  NUMBER (10) NOT NULL ,
    REVISION_DT     DATE NOT NULL ,
    REVISION_DB_ID  NUMBER (10) NOT NULL ,
    REVISION_USER   VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE TASK_DEFN_TO_FP ADD CHECK ( EXPORT_BOOL IN (0, 1)) ;
ALTER TABLE TASK_DEFN_TO_FP ADD CHECK ( RSTAT_CD    IN (0, 1, 2, 3)) ;
ALTER TABLE TASK_DEFN_TO_FP ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE TASK_DEFN_TO_FP ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE TASK_DEFN_TO_FP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
COMMENT ON COLUMN TASK_DEFN_TO_FP.TASK_DEFN_DB_ID
IS
  'The task definition''s database id.' ;
  COMMENT ON COLUMN TASK_DEFN_TO_FP.TASK_DEFN_ID
IS
  'The task definition''s id.' ;
  COMMENT ON COLUMN TASK_DEFN_TO_FP.EXPORT_BOOL
IS
  'A boolean indicating whether or not the associated task definition shall be exported to Fleet Planner.' ;
  COMMENT ON COLUMN TASK_DEFN_TO_FP.RSTAT_CD
IS
  'Status of the record.' ;
  COMMENT ON COLUMN TASK_DEFN_TO_FP.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN TASK_DEFN_TO_FP.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN TASK_DEFN_TO_FP.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN TASK_DEFN_TO_FP.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN TASK_DEFN_TO_FP.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN TASK_DEFN_TO_FP.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN TASK_DEFN_TO_FP.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
CREATE UNIQUE INDEX IX_EXPORTBOOL_TASKDEFNTOFP ON TASK_DEFN_TO_FP ( TASK_DEFN_ID ASC , TASK_DEFN_DB_ID ASC , EXPORT_BOOL ASC ) ;
ALTER TABLE TASK_DEFN_TO_FP ADD CONSTRAINT PK_TASK_DEFN_TO_FP PRIMARY KEY ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) ;


CREATE TABLE TASK_FAIL_MODE
  (
    TASK_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_MODE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    FAIL_MODE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_FAIL_MODE ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_FAIL_MODE ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_FAIL_MODE ADD CHECK ( FAIL_MODE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_FAIL_MODE ADD CHECK ( FAIL_MODE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_FAIL_MODE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_FAIL_MODE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE TASK_FAIL_MODE
IS
  'Used to list the inspection tasks where this particular Fault Definition could be found. For example, if you had a fault definition for Hydraulic Leak, then you will probably find this problem while performing a Hydraulic Inspection.' ;
  COMMENT ON COLUMN TASK_FAIL_MODE.TASK_DB_ID
IS
  'FK TASK_TASK' ;
  COMMENT ON COLUMN TASK_FAIL_MODE.TASK_ID
IS
  'FK TASK_TASK' ;
  COMMENT ON COLUMN TASK_FAIL_MODE.FAIL_MODE_DB_ID
IS
  'FK FAIL_MODE' ;
  COMMENT ON COLUMN TASK_FAIL_MODE.FAIL_MODE_ID
IS
  'FK FAIL_MODE' ;
  COMMENT ON COLUMN TASK_FAIL_MODE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN TASK_FAIL_MODE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN TASK_FAIL_MODE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN TASK_FAIL_MODE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN TASK_FAIL_MODE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_FAILMOD_TASKFALMODE ON TASK_FAIL_MODE
    (
      FAIL_MODE_DB_ID ASC ,
      FAIL_MODE_ID ASC
    ) ;
  CREATE INDEX IX_TASKTASK_TSKFAILMODE ON TASK_FAIL_MODE
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
ALTER TABLE TASK_FAIL_MODE ADD CONSTRAINT "pk_TASK_FAIL_MODE" PRIMARY KEY ( TASK_DB_ID, TASK_ID, FAIL_MODE_DB_ID, FAIL_MODE_ID ) ;
ALTER TABLE TASK_FAIL_MODE ADD CONSTRAINT IX_TASKFAILMODEALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE TASK_FLEET_APPROVAL
  (
    TASK_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO     NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_FLEET_APPROVAL ADD CHECK ( TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_FLEET_APPROVAL ADD CHECK ( TASK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_FLEET_APPROVAL ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_FLEET_APPROVAL ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_FLEET_APPROVAL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_FLEET_APPROVAL ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_FLEET_APPROVAL ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_FLEET_APPROVAL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE TASK_FLEET_APPROVAL
IS
  'This table contains the task revision that was approved for the fleet.' ;
  COMMENT ON COLUMN TASK_FLEET_APPROVAL.TASK_DEFN_DB_ID
IS
  'The task definition that was approved for use in the fleet' ;
  COMMENT ON COLUMN TASK_FLEET_APPROVAL.TASK_DEFN_ID
IS
  'The task definition that was approved for use in the fleet' ;
  COMMENT ON COLUMN TASK_FLEET_APPROVAL.TASK_DB_ID
IS
  'The task revision that was approved for use in the fleet' ;
  COMMENT ON COLUMN TASK_FLEET_APPROVAL.TASK_ID
IS
  'The task revision that was approved for use in the fleet' ;
  COMMENT ON COLUMN TASK_FLEET_APPROVAL.RSTAT_CD
IS
  'Status of the record' ;
  COMMENT ON COLUMN TASK_FLEET_APPROVAL.REVISION_NO
IS
  'A number incremented each time the record is modified' ;
  COMMENT ON COLUMN TASK_FLEET_APPROVAL.CTRL_DB_ID
IS
  'The identifier of the database that owns the record' ;
  COMMENT ON COLUMN TASK_FLEET_APPROVAL.CREATION_DT
IS
  'The data and time at which the record was inserted' ;
  COMMENT ON COLUMN TASK_FLEET_APPROVAL.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record' ;
  COMMENT ON COLUMN TASK_FLEET_APPROVAL.REVISION_DT
IS
  'The data and time at which the record was last updated' ;
  COMMENT ON COLUMN TASK_FLEET_APPROVAL.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN TASK_FLEET_APPROVAL.REVISION_USER
IS
  'The name of the user that last updated the record' ;
  CREATE INDEX IX_FK_TSKTSK_TSKFLTAPPRVL ON TASK_FLEET_APPROVAL
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
ALTER TABLE TASK_FLEET_APPROVAL ADD CONSTRAINT PK_TASK_FLEET_APPROVAL PRIMARY KEY ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) ;


CREATE TABLE TASK_IMPACT
  (
    IMPACT_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    IMPACT_CD      VARCHAR2 (20) NOT NULL DEFERRABLE ,
    TASK_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    IMPACT_LDESC   VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_IMPACT ADD CHECK ( IMPACT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_IMPACT ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_IMPACT ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_IMPACT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_IMPACT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_TASKTASK_TASKIMPACT ON TASK_IMPACT
  (
    TASK_DB_ID ASC ,
    TASK_ID ASC
  ) ;
ALTER TABLE TASK_IMPACT ADD CONSTRAINT PK_TASK_IMPACT PRIMARY KEY ( IMPACT_DB_ID, IMPACT_CD, TASK_DB_ID, TASK_ID ) ;


CREATE TABLE TASK_INTERVAL
  (
    TASK_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    INTERVAL_QT FLOAT NOT NULL DEFERRABLE ,
    NOTIFY_QT FLOAT NOT NULL DEFERRABLE ,
    DEVIATION_QT FLOAT NOT NULL DEFERRABLE ,
    PREFIXED_QT FLOAT NOT NULL DEFERRABLE ,
    POSTFIXED_QT FLOAT NOT NULL DEFERRABLE ,
    INITIAL_QT FLOAT ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_INTERVAL ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_INTERVAL ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_INTERVAL ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_INTERVAL ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_INTERVAL ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_INTERVAL ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_INTERVAL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_INTERVAL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE TASK_INTERVAL
IS
  'Task Interval Definition: Defines the part number specific intervals for scheduling planned maintenance.' ;
  COMMENT ON COLUMN TASK_INTERVAL.TASK_DB_ID
IS
  'FK to TASK_SCHED_RULE. The task definition that this scheduling rule is defined for.' ;
  COMMENT ON COLUMN TASK_INTERVAL.TASK_ID
IS
  'FK to TASK_SCHED_RULE. The task definition that this scheduling rule is defined for.' ;
  COMMENT ON COLUMN TASK_INTERVAL.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN TASK_INTERVAL.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN TASK_INTERVAL.PART_NO_DB_ID
IS
  'FK to EQP_PART_NO. The part number that this part-specific scheduling rule is defined against.' ;
  COMMENT ON COLUMN TASK_INTERVAL.PART_NO_ID
IS
  'FK to EQP_PART_NO. The part number that this part-specific scheduling rule is defined against.' ;
  COMMENT ON COLUMN TASK_INTERVAL.INTERVAL_QT
IS
  'The size of the interval in data type units.' ;
  COMMENT ON COLUMN TASK_INTERVAL.NOTIFY_QT
IS
  'The amount of lead time before the maintenance planner is notified that this task definition is coming due. It is specified in data type units.' ;
  COMMENT ON COLUMN TASK_INTERVAL.DEVIATION_QT
IS
  'The amount by which the task definition can "slip" past its original deadline before being considered overdue.' ;
  COMMENT ON COLUMN TASK_INTERVAL.PREFIXED_QT
IS
  'Defines the start of the "window" within which the completion date can fall for the task definition to be scheduled to plan, ie. fixed scheduling.' ;
  COMMENT ON COLUMN TASK_INTERVAL.POSTFIXED_QT
IS
  'Defines the end of the "window" within which the completion date can fall for the task definition to be scheduled to plan, ie. fixed scheduling.' ;
  COMMENT ON COLUMN TASK_INTERVAL.INITIAL_QT
IS
  'INITIAL_QT will be used as the interval for the first instance of a task.' ;
  COMMENT ON COLUMN TASK_INTERVAL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN TASK_INTERVAL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN TASK_INTERVAL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN TASK_INTERVAL.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN TASK_INTERVAL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPPARTNO_TASKINTERVAL ON TASK_INTERVAL
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_TASKSCHEDRULE_TASKINTERVAL ON TASK_INTERVAL
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC ,
      DATA_TYPE_DB_ID ASC ,
      DATA_TYPE_ID ASC
    ) ;
ALTER TABLE TASK_INTERVAL ADD CONSTRAINT PK_TASK_INTERVAL PRIMARY KEY ( TASK_DB_ID, TASK_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID, PART_NO_DB_ID, PART_NO_ID ) ;


CREATE TABLE TASK_JIC_REQ_MAP
  (
    JIC_TASK_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    JIC_TASK_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REQ_TASK_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REQ_TASK_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    JIC_TASK_ORDER      INTEGER ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_JIC_REQ_MAP ADD CHECK ( JIC_TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_JIC_REQ_MAP ADD CHECK ( JIC_TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_JIC_REQ_MAP ADD CHECK ( REQ_TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_JIC_REQ_MAP ADD CHECK ( REQ_TASK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_JIC_REQ_MAP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_JIC_REQ_MAP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN TASK_JIC_REQ_MAP.JIC_TASK_DB_ID
IS
  'FK to task_task.  Links to the exact job instruction card revision assigned to the requirement task definition.' ;
  COMMENT ON COLUMN TASK_JIC_REQ_MAP.JIC_TASK_ID
IS
  'FK to task_task.  Links to the exact job instruction card revision assigned to the requirement task definition.' ;
  COMMENT ON COLUMN TASK_JIC_REQ_MAP.REQ_TASK_DEFN_DB_ID
IS
  'FK to task_defn.  Links to the requirement task definition to which the job instruction card belongs.' ;
  COMMENT ON COLUMN TASK_JIC_REQ_MAP.REQ_TASK_DEFN_ID
IS
  'FK to task_defn.  Links to the requirement task definition to which the job instruction card belongs.' ;
  COMMENT ON COLUMN TASK_JIC_REQ_MAP.JIC_TASK_ORDER
IS
  'Order of the job card definition within the block/requirement definition.' ;
  COMMENT ON COLUMN TASK_JIC_REQ_MAP.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN TASK_JIC_REQ_MAP.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN TASK_JIC_REQ_MAP.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN TASK_JIC_REQ_MAP.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN TASK_JIC_REQ_MAP.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_TASKTASK_TASKJICREQMAP ON TASK_JIC_REQ_MAP
    (
      JIC_TASK_DB_ID ASC ,
      JIC_TASK_ID ASC
    ) ;
  CREATE INDEX IX_TASKDEFN_TASKJICREQMAP ON TASK_JIC_REQ_MAP
    (
      REQ_TASK_DEFN_DB_ID ASC ,
      REQ_TASK_DEFN_ID ASC
    ) ;
ALTER TABLE TASK_JIC_REQ_MAP ADD CONSTRAINT PK_TASK_JIC_REQ_MAP PRIMARY KEY ( JIC_TASK_DB_ID, JIC_TASK_ID, REQ_TASK_DEFN_DB_ID, REQ_TASK_DEFN_ID ) ;


CREATE TABLE TASK_LABOUR_LIST
  (
    TASK_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    MAN_PWR_CT         NUMBER (10) NOT NULL DEFERRABLE ,
    WORK_PERF_BOOL     NUMBER (1) DEFAULT 1 ,
    WORK_PERF_HR       NUMBER (9,5) DEFAULT 0 ,
    CERT_BOOL          NUMBER (1) DEFAULT 0 ,
    CERT_HR            NUMBER (9,5) DEFAULT 0 ,
    INSP_BOOL          NUMBER (1) DEFAULT 0 ,
    INSP_HR            NUMBER (9,5) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_LABOUR_LIST ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_LABOUR_LIST ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_LABOUR_LIST ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_LABOUR_LIST ADD CHECK ( MAN_PWR_CT BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_LABOUR_LIST ADD CHECK ( WORK_PERF_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_LABOUR_LIST ADD CHECK ( CERT_BOOL      IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_LABOUR_LIST ADD CHECK ( INSP_BOOL      IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_LABOUR_LIST ADD CHECK ( RSTAT_CD       IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_LABOUR_LIST ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE TASK_LABOUR_LIST
IS
  'Task Labour Definition: Defines all of the manpower required to complete the specified task. Used for planning and forecasting.' ;
  COMMENT ON COLUMN TASK_LABOUR_LIST.TASK_DB_ID
IS
  'FK to TASK_TASK.' ;
  COMMENT ON COLUMN TASK_LABOUR_LIST.TASK_ID
IS
  'FK to TASK_TASK.' ;
  COMMENT ON COLUMN TASK_LABOUR_LIST.LABOUR_SKILL_DB_ID
IS
  'FK to REF_LABOUR_SKILL' ;
  COMMENT ON COLUMN TASK_LABOUR_LIST.LABOUR_SKILL_CD
IS
  'FK to REF_LABOUR_SKILL' ;
  COMMENT ON COLUMN TASK_LABOUR_LIST.MAN_PWR_CT
IS
  'The planned number of people the task should take. Used for forecasting.' ;
  COMMENT ON COLUMN TASK_LABOUR_LIST.WORK_PERF_BOOL
IS
  'This column indicates if the labor requirement requires work to be performed.' ;
  COMMENT ON COLUMN TASK_LABOUR_LIST.WORK_PERF_HR
IS
  'This column indicates the number of hours scheduled for work performed.' ;
  COMMENT ON COLUMN TASK_LABOUR_LIST.CERT_BOOL
IS
  'This column indicates if the labor requirement requires certification.' ;
  COMMENT ON COLUMN TASK_LABOUR_LIST.CERT_HR
IS
  'This column indicates the number of hours scheduled for certification.' ;
  COMMENT ON COLUMN TASK_LABOUR_LIST.INSP_BOOL
IS
  'This column indicates if the labor requirement requires independent inspection' ;
  COMMENT ON COLUMN TASK_LABOUR_LIST.INSP_HR
IS
  'This column indicates the number of hours scheduled for independent inspection.' ;
  COMMENT ON COLUMN TASK_LABOUR_LIST.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN TASK_LABOUR_LIST.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN TASK_LABOUR_LIST.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN TASK_LABOUR_LIST.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN TASK_LABOUR_LIST.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_TASKTASK_TASKLABOURLIST ON TASK_LABOUR_LIST
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
ALTER TABLE TASK_LABOUR_LIST ADD CONSTRAINT PK_TASK_LABOUR_LIST PRIMARY KEY ( TASK_DB_ID, TASK_ID, LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) ;


CREATE TABLE TASK_LIC
  (
    TASK_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_LIC_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    LIC_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LIC_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_LIC ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_LIC ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_LIC ADD CHECK ( TASK_LIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_LIC ADD CHECK ( LIC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_LIC ADD CHECK ( LIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_LIC ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_LIC ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN TASK_LIC.TASK_DB_ID
IS
  'Primary key for task_lic.  This table is used to store all the licenses that are required for a task to be performed.
FK to TASK_TASK.' ;
  COMMENT ON COLUMN TASK_LIC.TASK_ID
IS
  'Primary key for task_lic.  This table is used to store all the licenses that are required for a task to be performed.
FK to TASK_TASK.' ;
  COMMENT ON COLUMN TASK_LIC.TASK_LIC_ID
IS
  'Primary key for task_lic.  This table is used to store all the licenses that are required for a task to be performed.' ;
  COMMENT ON COLUMN TASK_LIC.LIC_DB_ID
IS
  'Foriegn key to LIC_DEFN.' ;
  COMMENT ON COLUMN TASK_LIC.LIC_ID
IS
  'Foriegn key to LIC_DEFN.' ;
  COMMENT ON COLUMN TASK_LIC.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN TASK_LIC.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN TASK_LIC.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN TASK_LIC.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN TASK_LIC.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_TASKTASK_TASKLIC ON TASK_LIC
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
  CREATE INDEX IX_LICDEFN_TASKLIC ON TASK_LIC
    ( LIC_DB_ID ASC , LIC_ID ASC
    ) ;
ALTER TABLE TASK_LIC ADD CONSTRAINT PK_TASK_LIC PRIMARY KEY ( TASK_DB_ID, TASK_ID, TASK_LIC_ID ) ;


CREATE TABLE TASK_ME_RULE
  (
    TASK_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    RULE_DATA_TYPE_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    RULE_DATA_TYPE_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ME_DATA_TYPE_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    ME_DATA_TYPE_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    INCREASING_VALUES_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ACTION_LDESC           VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    RSTAT_CD               NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DT            DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER          VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_ME_RULE ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ME_RULE ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ME_RULE ADD CHECK ( RULE_DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ME_RULE ADD CHECK ( RULE_DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ME_RULE ADD CHECK ( ME_DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ME_RULE ADD CHECK ( ME_DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ME_RULE ADD CHECK ( INCREASING_VALUES_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_ME_RULE ADD CHECK ( RSTAT_CD               IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_ME_RULE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_MDATATYPE_TASKMERULE ON TASK_ME_RULE
  (
    ME_DATA_TYPE_DB_ID ASC ,
    ME_DATA_TYPE_ID ASC
  ) ;
CREATE INDEX IX_TASKSCHEDRULE_TASKMERULE ON TASK_ME_RULE
  (
    TASK_DB_ID ASC ,
    TASK_ID ASC ,
    RULE_DATA_TYPE_DB_ID ASC ,
    RULE_DATA_TYPE_ID ASC
  ) ;
ALTER TABLE TASK_ME_RULE ADD CONSTRAINT PK_TASK_ME_RULE PRIMARY KEY ( TASK_DB_ID, TASK_ID, RULE_DATA_TYPE_DB_ID, RULE_DATA_TYPE_ID, ME_DATA_TYPE_DB_ID, ME_DATA_TYPE_ID ) ;


CREATE TABLE TASK_ME_RULE_INTERVAL
  (
    TASK_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    RULE_DATA_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RULE_DATA_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ME_DATA_TYPE_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    ME_DATA_TYPE_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    ME_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    ME_ORD               NUMBER (4) NOT NULL DEFERRABLE ,
    ME_QT FLOAT NOT NULL DEFERRABLE ,
    INTERVAL_QT FLOAT NOT NULL DEFERRABLE ,
    DEVIATION_QT FLOAT NOT NULL DEFERRABLE ,
    NOTIFICATION_QT FLOAT NOT NULL DEFERRABLE ,
    PREFIX_QT FLOAT NOT NULL DEFERRABLE ,
    POSTFIX_QT FLOAT NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_ME_RULE_INTERVAL ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ME_RULE_INTERVAL ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ME_RULE_INTERVAL ADD CHECK ( RULE_DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ME_RULE_INTERVAL ADD CHECK ( RULE_DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ME_RULE_INTERVAL ADD CHECK ( ME_DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ME_RULE_INTERVAL ADD CHECK ( ME_DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ME_RULE_INTERVAL ADD CHECK ( ME_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ME_RULE_INTERVAL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_ME_RULE_INTERVAL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_TASKMERULE_TASKMERULEINTRVL ON TASK_ME_RULE_INTERVAL
  (
    TASK_DB_ID ASC ,
    TASK_ID ASC ,
    RULE_DATA_TYPE_DB_ID ASC ,
    RULE_DATA_TYPE_ID ASC ,
    ME_DATA_TYPE_DB_ID ASC ,
    ME_DATA_TYPE_ID ASC
  ) ;
ALTER TABLE TASK_ME_RULE_INTERVAL ADD CONSTRAINT PK_TASK_ME_RULE_INTERVAL PRIMARY KEY ( TASK_DB_ID, TASK_ID, RULE_DATA_TYPE_DB_ID, RULE_DATA_TYPE_ID, ME_DATA_TYPE_DB_ID, ME_DATA_TYPE_ID, ME_ID ) ;


CREATE TABLE TASK_PANEL
  (
    TASK_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_PANEL_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    PANEL_DB_ID    NUMBER (10) ,
    PANEL_ID       NUMBER (10) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_PANEL ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PANEL ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PANEL ADD CHECK ( TASK_PANEL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PANEL ADD CHECK ( PANEL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PANEL ADD CHECK ( PANEL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PANEL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_PANEL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN TASK_PANEL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN TASK_PANEL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN TASK_PANEL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN TASK_PANEL.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN TASK_PANEL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_TSKTASK_TASKPANEL ON TASK_PANEL
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
  CREATE INDEX IX_EQPTASKPANEL_TASKPANEL ON TASK_PANEL
    (
      PANEL_DB_ID ASC ,
      PANEL_ID ASC
    ) ;
ALTER TABLE TASK_PANEL ADD CONSTRAINT "pk_TASK_PANEL" PRIMARY KEY ( TASK_DB_ID, TASK_ID, TASK_PANEL_ID ) ;


CREATE TABLE TASK_PARM_DATA
  (
    TASK_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_ORD        NUMBER (4) ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_PARM_DATA ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PARM_DATA ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PARM_DATA ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PARM_DATA ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PARM_DATA ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_PARM_DATA ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE TASK_PARM_DATA
IS
  'Allows the definition of the list of measurements that should be recorded for particular task definition.' ;
  COMMENT ON COLUMN TASK_PARM_DATA.TASK_DB_ID
IS
  'PK - FK TASK_TASK.' ;
  COMMENT ON COLUMN TASK_PARM_DATA.TASK_ID
IS
  'PK - FK TASK_TASK.' ;
  COMMENT ON COLUMN TASK_PARM_DATA.DATA_TYPE_DB_ID
IS
  'PK - FK MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN TASK_PARM_DATA.DATA_TYPE_ID
IS
  'PK - FK MIM_DATA_TYPE.' ;
  COMMENT ON COLUMN TASK_PARM_DATA.DATA_ORD
IS
  'Data order.' ;
  COMMENT ON COLUMN TASK_PARM_DATA.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN TASK_PARM_DATA.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN TASK_PARM_DATA.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN TASK_PARM_DATA.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN TASK_PARM_DATA.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_MDATATYPE_TASKPARMDATA ON TASK_PARM_DATA
    (
      DATA_TYPE_DB_ID ASC ,
      DATA_TYPE_ID ASC
    ) ;
  CREATE INDEX IX_TASKTASK_TASKPARMDATA ON TASK_PARM_DATA
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
ALTER TABLE TASK_PARM_DATA ADD CONSTRAINT "pk_TASK_PARM_DATA" PRIMARY KEY ( TASK_DB_ID, TASK_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID ) ;


CREATE TABLE TASK_PART_LIST
  (
    TASK_DB_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID                  NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_PART_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID             NUMBER (10) ,
    ASSMBL_CD                VARCHAR2 (8) ,
    ASSMBL_BOM_ID            NUMBER (10) ,
    ASSMBL_POS_ID            NUMBER (10) ,
    REMOVE_REASON_DB_ID      NUMBER (10) ,
    REMOVE_REASON_CD         VARCHAR2 (8) ,
    BOM_PART_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_PART_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    SPEC_PART_NO_DB_ID       NUMBER (10) ,
    SPEC_PART_NO_ID          NUMBER (10) ,
    PART_PROVIDER_TYPE_DB_ID NUMBER (10) ,
    PART_PROVIDER_TYPE_CD    VARCHAR2 (8) ,
    REQ_QT FLOAT NOT NULL DEFERRABLE ,
    REMOVE_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    INSTALL_BOOL       NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    REQ_PRIORITY_DB_ID NUMBER (10) ,
    REQ_PRIORITY_CD    VARCHAR2 (8) ,
    REQ_ACTION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REQ_ACTION_CD      VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_PART_LIST ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_LIST ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_LIST ADD CHECK ( TASK_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_LIST ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_LIST ADD CHECK ( ASSMBL_BOM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_LIST ADD CHECK ( ASSMBL_POS_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_LIST ADD CHECK ( REMOVE_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_LIST ADD CHECK ( BOM_PART_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_LIST ADD CHECK ( BOM_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_LIST ADD CHECK ( SPEC_PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_LIST ADD CHECK ( SPEC_PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_LIST ADD CHECK ( PART_PROVIDER_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_LIST ADD CHECK ( REMOVE_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_PART_LIST ADD CHECK ( INSTALL_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_PART_LIST ADD CHECK ( REQ_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_LIST ADD CHECK ( REQ_ACTION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_LIST ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_PART_LIST ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE TASK_PART_LIST
IS
  'Task Parts Requried List: Defines all of the material required to complete the specified maintenance task. Used for planning and forecasting (supply-chain demand).' ;
  COMMENT ON COLUMN TASK_PART_LIST.TASK_DB_ID
IS
  'FK to TASK_TASK. The task to which this materiel is assigned,' ;
  COMMENT ON COLUMN TASK_PART_LIST.TASK_ID
IS
  'FK to TASK_TASK. The task to which this materiel is assigned,' ;
  COMMENT ON COLUMN TASK_PART_LIST.TASK_PART_ID
IS
  'Identifier used to distinguish between different materiel items on the same task definition. It is unique in context of the task definition.' ;
  COMMENT ON COLUMN TASK_PART_LIST.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL_POS.  Specified position for listed part requirement.' ;
  COMMENT ON COLUMN TASK_PART_LIST.ASSMBL_CD
IS
  'FK to EQP_ASSMBL_POS.  Specified position for listed part requirement.' ;
  COMMENT ON COLUMN TASK_PART_LIST.ASSMBL_BOM_ID
IS
  'FK to EQP_ASSMBL_POS.  Specified position for listed part requirement.' ;
  COMMENT ON COLUMN TASK_PART_LIST.ASSMBL_POS_ID
IS
  'FK to EQP_ASSMBL_POS.  Specified position for listed part requirement.' ;
  COMMENT ON COLUMN TASK_PART_LIST.REMOVE_REASON_DB_ID
IS
  'FK to REF_REMOVE_REASON.' ;
  COMMENT ON COLUMN TASK_PART_LIST.REMOVE_REASON_CD
IS
  'FK to REF_REMOVE_REASON.' ;
  COMMENT ON COLUMN TASK_PART_LIST.BOM_PART_DB_ID
IS
  'FK to EQP_BOM_PART. The Bill of Materiels item that will be consumed during this task. You must either specify a bom part or a part number for this entity. By specifying a bom part instead of a part number, you are indicating a list of alternate part numbers.' ;
  COMMENT ON COLUMN TASK_PART_LIST.BOM_PART_ID
IS
  'FK to EQP_BOM_PART. The Bill of Materiels item that will be consumed during this task. You must either specify a bom part or a part number for this entity. By specifying a bom part instead of a part number, you are indicating a list of alternate part numbers.' ;
  COMMENT ON COLUMN TASK_PART_LIST.PART_PROVIDER_TYPE_DB_ID
IS
  'FK to REF_PART_PROVIDER_TYPE.  Specified part provider.' ;
  COMMENT ON COLUMN TASK_PART_LIST.PART_PROVIDER_TYPE_CD
IS
  'FK to REF_PART_PROVIDER_TYPE.  Specified part provider.' ;
  COMMENT ON COLUMN TASK_PART_LIST.REQ_QT
IS
  'The number of parts of this type required.' ;
  COMMENT ON COLUMN TASK_PART_LIST.REMOVE_BOOL
IS
  'This column is used to indicate whether the part requirement will record removed inventory items.  This flag should be set to false for install-only of for request only tasks.' ;
  COMMENT ON COLUMN TASK_PART_LIST.INSTALL_BOOL
IS
  'This column is used to indicate whether the part requirement will record installed inventory items.  This flag should be set to false for removal-only or for request-only tasks.' ;
  COMMENT ON COLUMN TASK_PART_LIST.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN TASK_PART_LIST.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN TASK_PART_LIST.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN TASK_PART_LIST.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN TASK_PART_LIST.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPASSPOS_TASKPRTLIST ON TASK_PART_LIST
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC ,
      ASSMBL_BOM_ID ASC ,
      ASSMBL_POS_ID ASC
    ) ;
  CREATE INDEX IX_EQPBOMPART_TASKPARTLIST ON TASK_PART_LIST
    (
      BOM_PART_DB_ID ASC ,
      BOM_PART_ID ASC
    ) ;
  CREATE INDEX IX_EQPPRTNO_TASKPARTLIST ON TASK_PART_LIST
    (
      SPEC_PART_NO_DB_ID ASC ,
      SPEC_PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_TASKTASK_TASKPARTLIST ON TASK_PART_LIST
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
ALTER TABLE TASK_PART_LIST ADD CONSTRAINT PK_TASK_PART_LIST PRIMARY KEY ( TASK_DB_ID, TASK_ID, TASK_PART_ID ) ;


CREATE TABLE TASK_PART_MAP
  (
    TASK_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_PART_MAP ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_MAP ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_MAP ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_MAP ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_MAP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_PART_MAP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE TASK_PART_MAP
IS
  'Task to Parts Mapping: Defines all of the parts associated to a task definition revision, for part number based task definitions.' ;
  COMMENT ON COLUMN TASK_PART_MAP.TASK_DB_ID
IS
  'FK to TASK_TASK to specify the parts for a specific task definition revision.' ;
  COMMENT ON COLUMN TASK_PART_MAP.TASK_ID
IS
  'FK to TASK_TASK to specify the parts for a specific task definition revision.' ;
  COMMENT ON COLUMN TASK_PART_MAP.PART_NO_DB_ID
IS
  'FK to EQP_PART_NO to specify one of the exact parts assigned to the task definition revision.' ;
  COMMENT ON COLUMN TASK_PART_MAP.PART_NO_ID
IS
  'FK to EQP_PART_NO to specify one of the exact parts assigned to the task definition revision.' ;
  COMMENT ON COLUMN TASK_PART_MAP.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN TASK_PART_MAP.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN TASK_PART_MAP.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN TASK_PART_MAP.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN TASK_PART_MAP.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_EQPPARTNO_TASKPARTMAP ON TASK_PART_MAP
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_TASKTASK_TASKPARTMAP ON TASK_PART_MAP
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
ALTER TABLE TASK_PART_MAP ADD CONSTRAINT PK_TASK_PART_MAP PRIMARY KEY ( TASK_DB_ID, TASK_ID, PART_NO_DB_ID, PART_NO_ID ) ;


CREATE TABLE TASK_PART_TRANSFORM
  (
    TASK_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    OLD_PART_NO_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    OLD_PART_NO_ID    NUMBER (10) CONSTRAINT NN_TSKPRTTRANSFORM_OLDPRTNOID NOT NULL DEFERRABLE ,
    NEW_PART_NO_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    NEW_PART_NO_ID    NUMBER (10) CONSTRAINT NN_TSKPRTTRANSFRM_NEWPARTNOID NOT NULL DEFERRABLE ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE CONSTRAINT NN_TASKPRTTRNSFRM_REVSNDt NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_PART_TRANSFORM ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_TRANSFORM ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_TRANSFORM ADD CHECK ( OLD_PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_TRANSFORM ADD CONSTRAINT CK_TSKPRTTRNSFRM_OLDPRTNO CHECK ( OLD_PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_TRANSFORM ADD CHECK ( NEW_PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_TRANSFORM ADD CONSTRAINT CK_TSKPRTTRNSFRM_NWPRTNOID CHECK ( NEW_PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PART_TRANSFORM ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_PART_TRANSFORM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE TASK_PART_TRANSFORM
IS
  'Part Transformation Rules: Defines the before/after part numbers resulting from the completion of the specified task. Used for MOD or EC''s to automatically define new part numbers and resulting scheduling adjustments.' ;
  COMMENT ON COLUMN TASK_PART_TRANSFORM.TASK_DB_ID
IS
  'FK to TASK_TASK.' ;
  COMMENT ON COLUMN TASK_PART_TRANSFORM.TASK_ID
IS
  'FK to TASK_TASK.' ;
  COMMENT ON COLUMN TASK_PART_TRANSFORM.OLD_PART_NO_DB_ID
IS
  'The part number prior to the completion of the task. FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN TASK_PART_TRANSFORM.OLD_PART_NO_ID
IS
  'The part number prior to the completion of the task. FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN TASK_PART_TRANSFORM.NEW_PART_NO_DB_ID
IS
  'The part number subsequent to the completion of the task. FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN TASK_PART_TRANSFORM.NEW_PART_NO_ID
IS
  'The part number subsequent to the completion of the task. FK to EQP_PART_NO.' ;
  COMMENT ON COLUMN TASK_PART_TRANSFORM.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN TASK_PART_TRANSFORM.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN TASK_PART_TRANSFORM.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN TASK_PART_TRANSFORM.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN TASK_PART_TRANSFORM.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPPRTNO_TASKPARTTRANSFORM ON TASK_PART_TRANSFORM
    (
      NEW_PART_NO_DB_ID ASC ,
      NEW_PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_EQPPARTNO_TASKPARTTRANSFORM ON TASK_PART_TRANSFORM
    (
      OLD_PART_NO_DB_ID ASC ,
      OLD_PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_TASKTASK_TASKPARTTRANSFORM ON TASK_PART_TRANSFORM
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
ALTER TABLE TASK_PART_TRANSFORM ADD CONSTRAINT PK_TASK_PART_TRANSFORM PRIMARY KEY ( TASK_DB_ID, TASK_ID, OLD_PART_NO_DB_ID, OLD_PART_NO_ID ) ;


CREATE TABLE TASK_PLANNING_TYPE_SKILL
  (
    TASK_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_SKILL_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    EFFORT_HR          NUMBER (6,2) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_PLANNING_TYPE_SKILL ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PLANNING_TYPE_SKILL ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PLANNING_TYPE_SKILL ADD CHECK ( LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_PLANNING_TYPE_SKILL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_PLANNING_TYPE_SKILL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_TASKTASK_TASKPLANNINGTYPESK ON TASK_PLANNING_TYPE_SKILL
  (
    TASK_DB_ID ASC ,
    TASK_ID ASC
  ) ;
ALTER TABLE TASK_PLANNING_TYPE_SKILL ADD CONSTRAINT PK_TASK_PLANNING_TYPE_SKILL PRIMARY KEY ( TASK_DB_ID, TASK_ID, LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) ;


CREATE TABLE TASK_REF_DOC
  (
    TASK_DB_ID                 NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID                    NUMBER (10) NOT NULL DEFERRABLE ,
    RECEIVE_BY_HR_DB_ID        NUMBER (10) ,
    RECEIVE_BY_HR_ID           NUMBER (10) ,
    RECEIVE_DT                 DATE ,
    MANUFACT_DB_ID             NUMBER (10) ,
    MANUFACT_CD                VARCHAR2 (16) ,
    REG_BODY_DB_ID             NUMBER (10) ,
    REG_BODY_CD                VARCHAR2 (8) ,
    CARRIER_DB_ID              NUMBER (10) ,
    CARRIER_ID                 NUMBER (10) ,
    TASK_DEF_ISSUE_BY_DB_ID    NUMBER (10) ,
    TASK_DEF_ISSUE_BY_CD       VARCHAR2 (8) ,
    ISSUE_DT                   DATE ,
    AMEND_REF_SDESC            VARCHAR2 (80) ,
    DISPOSITION_HR_DB_ID       NUMBER (10) ,
    DISPOSITION_HR_ID          NUMBER (10) ,
    TASK_DEF_DISPOSITION_DB_ID NUMBER (10) ,
    TASK_DEF_DISPOSITION_CD    VARCHAR2 (8) ,
    DISPOSITION_DT             DATE ,
    DISPOSITION_LDESC          VARCHAR2 (4000) ,
    RSTAT_CD                   NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT                DATE NOT NULL DEFERRABLE ,
    REVISION_DT                DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER              VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_REF_DOC ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_REF_DOC ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_REF_DOC ADD CHECK ( RECEIVE_BY_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_REF_DOC ADD CHECK ( RECEIVE_BY_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_REF_DOC ADD CHECK ( MANUFACT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_REF_DOC ADD CHECK ( REG_BODY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_REF_DOC ADD CHECK ( CARRIER_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_REF_DOC ADD CHECK ( CARRIER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_REF_DOC ADD CHECK ( TASK_DEF_ISSUE_BY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_REF_DOC ADD CHECK ( DISPOSITION_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_REF_DOC ADD CHECK ( DISPOSITION_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_REF_DOC ADD CHECK ( TASK_DEF_DISPOSITION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_REF_DOC ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_REF_DOC ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN TASK_REF_DOC.RECEIVE_BY_HR_DB_ID
IS
  'FK to hr who received the ref doc' ;
  COMMENT ON COLUMN TASK_REF_DOC.RECEIVE_BY_HR_ID
IS
  'FK to hr who received the ref doc' ;
  COMMENT ON COLUMN TASK_REF_DOC.RECEIVE_DT
IS
  'received date of a reference document' ;
  COMMENT ON COLUMN TASK_REF_DOC.MANUFACT_DB_ID
IS
  'FK to manufacturer associated with with issue of a ref document' ;
  COMMENT ON COLUMN TASK_REF_DOC.MANUFACT_CD
IS
  'FK to manufacturer associated with with issue of a ref document' ;
  COMMENT ON COLUMN TASK_REF_DOC.REG_BODY_DB_ID
IS
  'FK to regulatory body associated with with issue of a ref document' ;
  COMMENT ON COLUMN TASK_REF_DOC.REG_BODY_CD
IS
  'FK to regulatory body associated with with issue of a ref document' ;
  COMMENT ON COLUMN TASK_REF_DOC.CARRIER_DB_ID
IS
  'FK to carrier associated with with issue of a ref document' ;
  COMMENT ON COLUMN TASK_REF_DOC.CARRIER_ID
IS
  'FK to carrier associated with with issue of a ref document' ;
  COMMENT ON COLUMN TASK_REF_DOC.TASK_DEF_ISSUE_BY_DB_ID
IS
  'FK to issue by type of a reference document' ;
  COMMENT ON COLUMN TASK_REF_DOC.TASK_DEF_ISSUE_BY_CD
IS
  'FK to issue by type of a reference document' ;
  COMMENT ON COLUMN TASK_REF_DOC.ISSUE_DT
IS
  'this is an issue date of a reference document' ;
  COMMENT ON COLUMN TASK_REF_DOC.AMEND_REF_SDESC
IS
  'This is the amendment number of a reference document.' ;
  COMMENT ON COLUMN TASK_REF_DOC.DISPOSITION_HR_DB_ID
IS
  'FK to person who dispositioned the ref document' ;
  COMMENT ON COLUMN TASK_REF_DOC.DISPOSITION_HR_ID
IS
  'FK to person who dispositioned the ref document' ;
  COMMENT ON COLUMN TASK_REF_DOC.TASK_DEF_DISPOSITION_DB_ID
IS
  'FK to dispositioned type of the ref document when dispositioned.' ;
  COMMENT ON COLUMN TASK_REF_DOC.TASK_DEF_DISPOSITION_CD
IS
  'FK to dispositioned type of the ref document when dispositioned.' ;
  COMMENT ON COLUMN TASK_REF_DOC.DISPOSITION_DT
IS
  'This is the date of disposition of a ref document' ;
  COMMENT ON COLUMN TASK_REF_DOC.DISPOSITION_LDESC
IS
  'This is the disposition note associated with a dispositioned ref document' ;
  CREATE INDEX IX_EQPMANUFACT_TASKREFDOC ON TASK_REF_DOC
    (
      MANUFACT_DB_ID ASC ,
      MANUFACT_CD ASC
    ) ;
  CREATE INDEX IX_ORGCARRIER_TASKREFDOC ON TASK_REF_DOC
    (
      CARRIER_DB_ID ASC ,
      CARRIER_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_TASKREFDOC ON TASK_REF_DOC
    (
      RECEIVE_BY_HR_DB_ID ASC ,
      RECEIVE_BY_HR_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_TASKREFDOCDISPBY ON TASK_REF_DOC
    (
      DISPOSITION_HR_DB_ID ASC ,
      DISPOSITION_HR_ID ASC
    ) ;
ALTER TABLE TASK_REF_DOC ADD CONSTRAINT PK_TASK_REF_DOC PRIMARY KEY ( TASK_DB_ID, TASK_ID ) ;


CREATE TABLE TASK_REP_REF
  (
    TASK_ID                NUMBER (10) NOT NULL ,
    TASK_DB_ID             NUMBER (10) NOT NULL ,
    MOC_APPROVAL_BOOL      NUMBER (1) DEFAULT 0 NOT NULL ,
    DAMAGE_RECORD_BOOL     NUMBER (1) DEFAULT 1 NOT NULL ,
    DAMAGED_COMPONENT_BOOL NUMBER (1) DEFAULT 0 NOT NULL ,
    OPS_RESTRICTIONS_LDESC VARCHAR2 (4000) ,
    PERF_PENALTIES_LDESC   VARCHAR2 (4000) ,
    RSTAT_CD               NUMBER (3) NOT NULL ,
    REVISION_NO            NUMBER (10) NOT NULL ,
    CTRL_DB_ID             NUMBER (10) NOT NULL ,
    CREATION_DT            DATE NOT NULL ,
    REVISION_DT            DATE NOT NULL ,
    REVISION_DB_ID         NUMBER (10) NOT NULL ,
    REVISION_USER          VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE TASK_REP_REF ADD CHECK ( MOC_APPROVAL_BOOL      IN (0, 1)) ;
ALTER TABLE TASK_REP_REF ADD CHECK ( DAMAGE_RECORD_BOOL     IN (0, 1)) ;
ALTER TABLE TASK_REP_REF ADD CHECK ( DAMAGED_COMPONENT_BOOL IN (0, 1)) ;
ALTER TABLE TASK_REP_REF ADD CHECK ( RSTAT_CD               IN (0, 1, 2, 3)) ;
COMMENT ON COLUMN TASK_REP_REF.TASK_ID
IS
  'FK to task_task table.' ;
  COMMENT ON COLUMN TASK_REP_REF.TASK_DB_ID
IS
  'FK to task_task table.' ;
  COMMENT ON COLUMN TASK_REP_REF.MOC_APPROVAL_BOOL
IS
  'Boolean indicating if the requirement needs to request MOC authorization.' ;
  COMMENT ON COLUMN TASK_REP_REF.DAMAGE_RECORD_BOOL
IS
  'Boolean indicating if a damage record is required.' ;
  COMMENT ON COLUMN TASK_REP_REF.DAMAGED_COMPONENT_BOOL
IS
  'Boolean indicating if the damage record is needed for a component or an aircraft. It''s set to 1 for a component and 0 for an aircraft.' ;
  COMMENT ON COLUMN TASK_REP_REF.OPS_RESTRICTIONS_LDESC
IS
  'This column represents the description of operational restrictions on an aircraft if this repair reference has been applied.' ;
  COMMENT ON COLUMN TASK_REP_REF.PERF_PENALTIES_LDESC
IS
  'This column represents the description of performance penalties on an aircraft if this repair reference has been applied.' ;
  COMMENT ON COLUMN TASK_REP_REF.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN TASK_REP_REF.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN TASK_REP_REF.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN TASK_REP_REF.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN TASK_REP_REF.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN TASK_REP_REF.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed IFS Maintenix.' ;
  COMMENT ON COLUMN TASK_REP_REF.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into IFS Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE TASK_REP_REF ADD CONSTRAINT PK_TASK_REP_REF PRIMARY KEY ( TASK_ID, TASK_DB_ID ) ;


CREATE TABLE TASK_SCHED_RULE
  (
    TASK_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    DEF_INTERVAL_QT FLOAT NOT NULL DEFERRABLE ,
    DEF_NOTIFY_QT FLOAT NOT NULL DEFERRABLE ,
    DEF_DEVIATION_QT FLOAT NOT NULL DEFERRABLE ,
    DEF_PREFIXED_QT FLOAT NOT NULL DEFERRABLE ,
    DEF_POSTFIXED_QT FLOAT NOT NULL DEFERRABLE ,
    DEF_INITIAL_QT FLOAT ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_SCHED_RULE ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_SCHED_RULE ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_SCHED_RULE ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_SCHED_RULE ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_SCHED_RULE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_SCHED_RULE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE TASK_SCHED_RULE
IS
  'Task Scheduling Rule: Defines the scheduling intervals for a pre-defined, planned maintenance requirement.' ;
  COMMENT ON COLUMN TASK_SCHED_RULE.TASK_DB_ID
IS
  'FK to TASK_TASK. The task definition that this scheduling rule is defined for.' ;
  COMMENT ON COLUMN TASK_SCHED_RULE.TASK_ID
IS
  'FK to TASK_TASK. The task definition that this scheduling rule is defined for.' ;
  COMMENT ON COLUMN TASK_SCHED_RULE.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE. The usage parameter that this scheduling rule is based on' ;
  COMMENT ON COLUMN TASK_SCHED_RULE.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE. The usage parameter that this scheduling rule is based on' ;
  COMMENT ON COLUMN TASK_SCHED_RULE.DEF_INTERVAL_QT
IS
  'The size of the interval in data type units (default for all part numbers).' ;
  COMMENT ON COLUMN TASK_SCHED_RULE.DEF_NOTIFY_QT
IS
  'The amount of lead time before the maintenance planner is notified that this task definition is coming due. It is specified in data type units (default for all part numbers).' ;
  COMMENT ON COLUMN TASK_SCHED_RULE.DEF_DEVIATION_QT
IS
  'The amount by which the task definition can "slip" past its original deadline before being considered overdue (default for all part numbers).' ;
  COMMENT ON COLUMN TASK_SCHED_RULE.DEF_PREFIXED_QT
IS
  'Defines the start of the "window" within which the completion date can fall for the task definition to be scheduled to plan, ie. fixed scheduling (default for all part numbers).' ;
  COMMENT ON COLUMN TASK_SCHED_RULE.DEF_POSTFIXED_QT
IS
  'Defines the end of the "window" within which the completion date can fall for the task definition to be scheduled to plan, ie. fixed scheduling (default for all part numbers).' ;
  COMMENT ON COLUMN TASK_SCHED_RULE.DEF_INITIAL_QT
IS
  'You can specify an "Initial Interval" for every task definition''s scheduling rule. This will only be utilized for recurring tasks' ;
  COMMENT ON COLUMN TASK_SCHED_RULE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN TASK_SCHED_RULE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN TASK_SCHED_RULE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN TASK_SCHED_RULE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN TASK_SCHED_RULE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_MDATATYPE_TASKSCHEDRULE ON TASK_SCHED_RULE
    (
      DATA_TYPE_DB_ID ASC ,
      DATA_TYPE_ID ASC
    ) ;
  CREATE INDEX IX_TASKTASK_TASKSCHEDRULE ON TASK_SCHED_RULE
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
ALTER TABLE TASK_SCHED_RULE ADD CONSTRAINT PK_TASK_SCHED_RULE PRIMARY KEY ( TASK_DB_ID, TASK_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID ) ;


CREATE TABLE TASK_STEP
  (
    TASK_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    STEP_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    STEP_ORD   NUMBER (4) NOT NULL DEFERRABLE ,
    STEP_LDESC CLOB NOT NULL ,
    APPL_RANGE_LDESC VARCHAR2 (4000) ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_STEP ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_STEP ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_STEP ADD CHECK ( STEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_STEP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_STEP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_TASKTASK_TASKSTEP ON TASK_STEP
  (
    TASK_DB_ID ASC ,
    TASK_ID ASC
  ) ;
ALTER TABLE TASK_STEP ADD CONSTRAINT PK_TASK_STEP PRIMARY KEY ( TASK_DB_ID, TASK_ID, STEP_ID ) ;
ALTER TABLE TASK_STEP ADD CONSTRAINT UK_TASKSTEP_STEPORD UNIQUE ( TASK_DB_ID , TASK_ID , STEP_ORD ) DEFERRABLE INITIALLY DEFERRED ;


CREATE TABLE TASK_STEP_SKILL
  (
    TASK_DB_ID         NUMBER (10) NOT NULL ,
    TASK_ID            NUMBER (10) NOT NULL ,
    STEP_ID            NUMBER (10) NOT NULL ,
    LABOUR_SKILL_DB_ID NUMBER (10) NOT NULL ,
    LABOUR_SKILL_CD    VARCHAR2 (8) NOT NULL ,
    INSP_BOOL          NUMBER (1) NOT NULL ,
    STEP_SKILL_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    CREATION_DB_ID NUMBER (10) NOT NULL ,
    CTRL_DB_ID     NUMBER (10) NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_NO    NUMBER (10) NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE TASK_STEP_SKILL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE TASK_STEP_SKILL ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE TASK_STEP_SKILL ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE TASK_STEP_SKILL ADD CHECK ( REVISION_NO BETWEEN 0 AND 4294967295) ;
ALTER TABLE TASK_STEP_SKILL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
CREATE INDEX IX_TSKSTEPSKILL_TASKSTEP ON TASK_STEP_SKILL
  (
    TASK_DB_ID ASC ,
    TASK_ID ASC ,
    STEP_ID ASC
  ) ;
CREATE INDEX IX_TSKLBRLIST_TSKSTEPSKILL ON TASK_STEP_SKILL
  (
    TASK_DB_ID ASC ,
    TASK_ID ASC ,
    LABOUR_SKILL_DB_ID ASC ,
    LABOUR_SKILL_CD ASC
  ) ;
ALTER TABLE TASK_STEP_SKILL ADD CONSTRAINT PK_TASK_STEP_SKILL PRIMARY KEY ( TASK_DB_ID, TASK_ID, STEP_ID, LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) ;
ALTER TABLE TASK_STEP_SKILL ADD CONSTRAINT UK_TASKSTEPSKILL_STEPSKILLID UNIQUE ( STEP_SKILL_ID ) ;


CREATE TABLE TASK_SUB_TASK
  (
    TASK_DB_ID       NUMBER ,
    TASK_ID          NUMBER ,
    TASK_SUB_ID      NUMBER ,
    SUB_TASK_DB_ID   NUMBER ,
    SUB_TASK_ID      NUMBER ,
    SUB_TASK_ORD     NUMBER ,
    GROUP_CD         VARCHAR2 (8) ,
    AUTO_CREATE_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_SUB_TASK ADD CHECK ( AUTO_CREATE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_SUB_TASK ADD CHECK ( RSTAT_CD         IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_SUB_TASK ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;


CREATE TABLE TASK_TASK
  (
    TASK_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID                NUMBER (10) NOT NULL DEFERRABLE ,
    ACTV_HR_DB_ID          NUMBER (10) ,
    ACTV_HR_ID             NUMBER (10) ,
    TASK_DEFN_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEFN_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_CLASS_DB_ID       NUMBER (10) ,
    TASK_CLASS_CD          VARCHAR2 (16) ,
    TASK_PRIORITY_DB_ID    NUMBER (10) ,
    TASK_PRIORITY_CD       VARCHAR2 (8) ,
    ASSMBL_DB_ID           NUMBER (10) ,
    ASSMBL_CD              VARCHAR2 (8) ,
    ASSMBL_BOM_ID          NUMBER (10) ,
    REPL_ASSMBL_DB_ID      NUMBER (10) ,
    REPL_ASSMBL_CD         VARCHAR2 (8) ,
    REPL_ASSMBL_BOM_ID     NUMBER (10) ,
    TASK_SUBCLASS_DB_ID    NUMBER (10) ,
    TASK_SUBCLASS_CD       VARCHAR2 (8) ,
    TASK_ORIGINATOR_DB_ID  NUMBER (10) ,
    TASK_ORIGINATOR_CD     VARCHAR2 (8) ,
    TASK_DEF_STATUS_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEF_STATUS_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    BITMAP_DB_ID           NUMBER (10) ,
    BITMAP_TAG             NUMBER (10) ,
    TASK_CD                VARCHAR2 (200) NOT NULL DEFERRABLE ,
    TASK_NAME              VARCHAR2 (200) NOT NULL DEFERRABLE ,
    TASK_LDESC             VARCHAR2 (4000) ,
    INSTRUCTION_LDESC      VARCHAR2 (4000) ,
    ISSUE_ACCOUNT_DB_ID    NUMBER (10) ,
    ISSUE_ACCOUNT_ID       NUMBER (10) ,
    RECURRING_TASK_BOOL    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    USE_SCHED_FROM_BOOL    NUMBER (1) ,
    SCHED_FROM_LATEST_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    MANUAL_SCHEDULING_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    TASK_APPL_LDESC        VARCHAR2 (4000) ,
    TASK_APPL_SQL_LDESC    VARCHAR2 (4000) ,
    TASK_REF_SDESC         VARCHAR2 (80) ,
    EST_DURATION_QT FLOAT NOT NULL DEFERRABLE ,
    EFFECTIVE_DT  DATE ,
    EFFECTIVE_GDT DATE ,
    ROUTINE_BOOL  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    FORECAST_RANGE_QT FLOAT NOT NULL DEFERRABLE ,
    MIN_PLAN_YIELD_PCT FLOAT ,
    RESOURCE_SUM_BOOL       NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    REVISION_ORD            NUMBER (4) ,
    ACTV_DT                 DATE ,
    ACTV_LDESC              VARCHAR2 (4000) ,
    ACTV_REF_SDESC          VARCHAR2 (240) ,
    UNIQUE_BOOL             NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    WORKSCOPE_BOOL          NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    AUTO_COMPLETE_BOOL      NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    LAST_SCHED_DEAD_BOOL    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    PLANNING_TYPE_DB_ID     NUMBER (10) ,
    PLANNING_TYPE_ID        NUMBER (10) ,
    TASK_APPL_EFF_LDESC     VARCHAR2 (4000) ,
    ENGINEERING_LDESC       VARCHAR2 (4000) ,
    CANCEL_ON_AC_INST_BOOL  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CANCEL_ON_ANY_INST_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CREATE_ON_AC_INST_BOOL  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CREATE_ON_ANY_INST_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CANCEL_ON_AC_RMVL_BOOL  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CANCEL_ON_ANY_RMVL_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CREATE_ON_AC_RMVL_BOOL  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    CREATE_ON_ANY_RMVL_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    SOFT_DEADLINE_BOOL      NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    HARD_DEAD_BOOL          NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    EXT_KEY_SDESC           VARCHAR2 (80) ,
    TASK_REV_REASON_DB_ID   NUMBER (10) ,
    TASK_REV_REASON_CD      VARCHAR2 (8) ,
    REV_NOTE                VARCHAR2 (4000) ,
    REV_HR_DB_ID            NUMBER (10) ,
    REV_HR_ID               NUMBER (10) ,
    REV_DT                  DATE ,
    BLOCK_CHAIN_SDESC       VARCHAR2 (200) ,
    BLOCK_ORD               NUMBER (4) ,
    INITIAL_BLOCK_BOOL      NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ON_CONDITION_BOOL       NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    LOCKED_BOOL             NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    LOCKED_HR_DB_ID         NUMBER (10) ,
    LOCKED_HR_ID            NUMBER (10) ,
    LOCKED_DT               DATE ,
    ETOPS_BOOL              NUMBER (1) DEFAULT 0 ,
    RESCHED_FROM_DB_ID      NUMBER (10) ,
    RESCHED_FROM_CD         VARCHAR2 (8) ,
    ENG_CONTACT_HR_DB_ID    NUMBER (10) ,
    ENG_CONTACT_HR_ID       NUMBER (10) ,
    APPROVED_BOOL           NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    MIN_USAGE_RELEASE_PCT FLOAT DEFAULT 0 NOT NULL DEFERRABLE ,
    ORG_DB_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    ORG_ID                 NUMBER (10) NOT NULL DEFERRABLE ,
    ENFORCE_WORKSCOPE_BOOL NUMBER (1) DEFAULT 0 ,
    TASK_MUST_REMOVE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_MUST_REMOVE_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    TASK_SCHED_FROM_DB_ID NUMBER (10) ,
    TASK_SCHED_FROM_CD    VARCHAR2 (16) ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE ,
    SCHED_UNKNOWN_BOOL    NUMBER (1) DEFAULT 0
  ) ;
ALTER TABLE TASK_TASK ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( ACTV_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( ACTV_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( TASK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( TASK_CLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( TASK_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( ASSMBL_BOM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( REPL_ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( REPL_ASSMBL_BOM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( TASK_SUBCLASS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( TASK_ORIGINATOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( TASK_DEF_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( BITMAP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( BITMAP_TAG BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( ISSUE_ACCOUNT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( ISSUE_ACCOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( RECURRING_TASK_BOOL    IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( USE_SCHED_FROM_BOOL    IN (0, 1)) ;
ALTER TABLE TASK_TASK ADD CHECK ( SCHED_FROM_LATEST_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( MANUAL_SCHEDULING_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( ROUTINE_BOOL           IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( MIN_PLAN_YIELD_PCT BETWEEN 0 AND 1) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( RESOURCE_SUM_BOOL    IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( UNIQUE_BOOL          IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( WORKSCOPE_BOOL       IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( AUTO_COMPLETE_BOOL   IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( LAST_SCHED_DEAD_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( PLANNING_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( PLANNING_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( CANCEL_ON_AC_INST_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( CANCEL_ON_ANY_INST_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( CREATE_ON_AC_INST_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( CREATE_ON_ANY_INST_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( CANCEL_ON_AC_RMVL_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( CANCEL_ON_ANY_RMVL_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( CREATE_ON_AC_RMVL_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( CREATE_ON_ANY_RMVL_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( SOFT_DEADLINE_BOOL      IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( HARD_DEAD_BOOL          IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( TASK_REV_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( REV_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( REV_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( INITIAL_BLOCK_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( ON_CONDITION_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( LOCKED_BOOL        IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( LOCKED_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( LOCKED_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( ETOPS_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( ENG_CONTACT_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( ENG_CONTACT_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( APPROVED_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( ORG_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( ORG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( ENFORCE_WORKSCOPE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( TASK_MUST_REMOVE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( TASK_SCHED_FROM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK ADD CHECK ( SCHED_UNKNOWN_BOOL IN (0, 1)) DEFERRABLE ;
COMMENT ON TABLE TASK_TASK
IS
  'Task Definition: A Task Definition is a predefined maintenance task defined against an Assembly log card.  A Task Definition can be associated with a Failure Mode as a corrective action to take when the Failure Mode is detected. A task definition is the same as a maintenance requirement - it can be from many sources: Approved Maintenance Program, internal, FAA AD, OEM SB, etc...' ;
  COMMENT ON COLUMN TASK_TASK.TASK_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN TASK_TASK.TASK_ID
IS
  'Unique ID assigned from Sequence TASK_ID_SEQ' ;
  COMMENT ON COLUMN TASK_TASK.ACTV_HR_DB_ID
IS
  'FK to ORG_HR. The person who made the current revision active or obsolete.' ;
  COMMENT ON COLUMN TASK_TASK.ACTV_HR_ID
IS
  'FK to ORG_HR. The person who made the current revision active or obsolete.' ;
  COMMENT ON COLUMN TASK_TASK.TASK_DEFN_DB_ID
IS
  'FK to TASK_DEFN.' ;
  COMMENT ON COLUMN TASK_TASK.TASK_DEFN_ID
IS
  'FK to TASK_DEFN.' ;
  COMMENT ON COLUMN TASK_TASK.TASK_CLASS_DB_ID
IS
  'FK to REF_TASK_CLASS. Identifies the class of the task definition, which is used to activate various Maintenix functionality.' ;
  COMMENT ON COLUMN TASK_TASK.TASK_CLASS_CD
IS
  'FK to REF_TASK_CLASS. Identifies the class of the task definition, which is used to activate various Maintenix functionality.' ;
  COMMENT ON COLUMN TASK_TASK.TASK_PRIORITY_DB_ID
IS
  'FK to REF_TASK_PRIORITY. Identifies the priority of the task definition.' ;
  COMMENT ON COLUMN TASK_TASK.TASK_PRIORITY_CD
IS
  'FK to REF_TASK_PRIORITY. Identifies the priority of the task definition.' ;
  COMMENT ON COLUMN TASK_TASK.ASSMBL_DB_ID
IS
  'FK to EQP_ASSMBL_BOM' ;
  COMMENT ON COLUMN TASK_TASK.ASSMBL_CD
IS
  'FK to EQP_ASSMBL_BOM' ;
  COMMENT ON COLUMN TASK_TASK.ASSMBL_BOM_ID
IS
  'FK to EQP_ASSMBL_BOM' ;
  COMMENT ON COLUMN TASK_TASK.REPL_ASSMBL_DB_ID
IS
  'FK EQP_ASSMBL_BOM. Associates a ''Replacement'' task definition with tracked bom item.' ;
  COMMENT ON COLUMN TASK_TASK.REPL_ASSMBL_CD
IS
  'FK EQP_ASSMBL_BOM. Associates a ''Replacement'' task definition with tracked bom item.' ;
  COMMENT ON COLUMN TASK_TASK.REPL_ASSMBL_BOM_ID
IS
  'FK EQP_ASSMBL_BOM. Associates a ''Replacement'' task definition with tracked bom item.' ;
  COMMENT ON COLUMN TASK_TASK.TASK_SUBCLASS_DB_ID
IS
  'FK to REF_TASK_SUBCLASS. Identifies the subclass for this task definition, which is used to categorize task definitions and help with reporting.' ;
  COMMENT ON COLUMN TASK_TASK.TASK_SUBCLASS_CD
IS
  'FK to REF_TASK_SUBCLASS. Identifies the subclass for this task definition, which is used to categorize task definitions and help with reporting.' ;
  COMMENT ON COLUMN TASK_TASK.TASK_ORIGINATOR_DB_ID
IS
  'FK to REF_TASK_ORIGINATOR' ;
  COMMENT ON COLUMN TASK_TASK.TASK_ORIGINATOR_CD
IS
  'FK to REF_TASK_ORIGINATOR' ;
  COMMENT ON COLUMN TASK_TASK.TASK_DEF_STATUS_DB_ID
IS
  'FK to REF_TASK_DEF_STATUS' ;
  COMMENT ON COLUMN TASK_TASK.TASK_DEF_STATUS_CD
IS
  'FK to REF_TASK_DEF_STATUS' ;
  COMMENT ON COLUMN TASK_TASK.BITMAP_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN TASK_TASK.BITMAP_TAG
IS
  'Unique idenifier assigned from Sequence BITMAP_TAG_SEQ.' ;
  COMMENT ON COLUMN TASK_TASK.TASK_CD
IS
  'A user assigned code that helps identify the maintenance requirement.' ;
  COMMENT ON COLUMN TASK_TASK.TASK_NAME
IS
  'A name used to label the task.' ;
  COMMENT ON COLUMN TASK_TASK.TASK_LDESC
IS
  'A long description that defines the task.' ;
  COMMENT ON COLUMN TASK_TASK.INSTRUCTION_LDESC
IS
  'A long description (work instructions) of what the task entails.' ;
  COMMENT ON COLUMN TASK_TASK.ISSUE_ACCOUNT_DB_ID
IS
  'This is a foreign key to FNC_ACCOUNT. This is optional for all task definitions.' ;
  COMMENT ON COLUMN TASK_TASK.ISSUE_ACCOUNT_ID
IS
  'This is a foreign key to FNC_ACCOUNT. This is optional for all task definitions.' ;
  COMMENT ON COLUMN TASK_TASK.RECURRING_TASK_BOOL
IS
  'Indicates if the task should be done more than once.' ;
  COMMENT ON COLUMN TASK_TASK.USE_SCHED_FROM_BOOL
IS
  'Indicates whether a task initialized from this task definition is to calculate its deadlines using the Schedule From rule or the Reschedule From rule, but only when the task is created by a task with a different definition. If 1 use Schedule From rule, otherwise use Reschedule From rule.' ;
  COMMENT ON COLUMN TASK_TASK.SCHED_FROM_LATEST_BOOL
IS
  'Indicating if the system schedules the first Actual Task based on the latest of effective date or manufacture date.' ;
  COMMENT ON COLUMN TASK_TASK.MANUAL_SCHEDULING_BOOL
IS
  'Indicates that the scheduling interval should be set  by the user on the actual tasks.' ;
  COMMENT ON COLUMN TASK_TASK.TASK_APPL_LDESC
IS
  'A long description of the applicability (or effectivity) of the task.' ;
  COMMENT ON COLUMN TASK_TASK.TASK_APPL_SQL_LDESC
IS
  'The exact SQL statement that defines the applicability filter.' ;
  COMMENT ON COLUMN TASK_TASK.TASK_REF_SDESC
IS
  'A brief description that defines a reference key to access the task (may be a ''lose'' IETM'' link).' ;
  COMMENT ON COLUMN TASK_TASK.EST_DURATION_QT
IS
  'This is the estimated duration of the task definition (in hours)' ;
  COMMENT ON COLUMN TASK_TASK.EFFECTIVE_DT
IS
  'The date that this task definition was issued by the originating body, and therefore the date that it becomes effective (local time).' ;
  COMMENT ON COLUMN TASK_TASK.EFFECTIVE_GDT
IS
  'The date that this task definition was issued by the originating body, and therefore the date that it becomes effective (GMT time).' ;
  COMMENT ON COLUMN TASK_TASK.ROUTINE_BOOL
IS
  'Specifies whether this task is considered "routine" work or not. The routine flag is typically used for reporting purposes.' ;
  COMMENT ON COLUMN TASK_TASK.FORECAST_RANGE_QT
IS
  'This column is used to indicate how many days into the future a recurring task should be forecasted out.' ;
  COMMENT ON COLUMN TASK_TASK.MIN_PLAN_YIELD_PCT
IS
  'This percentage value applied to deadline interval with respect to the task due date indicates a starting point of an optimal planning window. This the threshold at which the task should be scheduled. ' ;
  COMMENT ON COLUMN TASK_TASK.RESOURCE_SUM_BOOL
IS
  'Specificies whether this Task summarizes the resource requirements of it''s sub-Tasks or it contains the resource requirements.' ;
  COMMENT ON COLUMN TASK_TASK.REVISION_ORD
IS
  'Revision number. This field is generated automatically upon creation of a new revision. This is next maximum value in context of the task definition.' ;
  COMMENT ON COLUMN TASK_TASK.ACTV_DT
IS
  'ACTIVATE_DT: The date/time that the task becomes active or obsolete. This field is automatically written when the task definition is made active or obsolete.
' ;
  COMMENT ON COLUMN TASK_TASK.ACTV_LDESC
IS
  'The description why a task definition revision was made ACTV.' ;
  COMMENT ON COLUMN TASK_TASK.ACTV_REF_SDESC
IS
  'The document reference on activation of a task revision.' ;
  COMMENT ON COLUMN TASK_TASK.UNIQUE_BOOL
IS
  'The UNIQUE_BOOL is used to indicate that an inventory cannot have more than one instance of a "active" task based on this task class. "Active" in this case means, not histroic and not FORECAST.' ;
  COMMENT ON COLUMN TASK_TASK.WORKSCOPE_BOOL
IS
  'The WORKSCOPE_BOOL is used to indicate that a task based on this task definition is part of Check/Work Order worscope.' ;
  COMMENT ON COLUMN TASK_TASK.AUTO_COMPLETE_BOOL
IS
  'Automatic creation boolean defaults on the value of specified for the task class, after that user will be able to overwrite this value.' ;
  COMMENT ON COLUMN TASK_TASK.LAST_SCHED_DEAD_BOOL
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN TASK_TASK.TASK_APPL_EFF_LDESC
IS
  'Defines the assembly-inventory this task definition can be created against.
' ;
  COMMENT ON COLUMN TASK_TASK.ENGINEERING_LDESC
IS
  'Notes recorded only for the benefit of engineering and should be editable upon the creation or editing of a task definition' ;
  COMMENT ON COLUMN TASK_TASK.CANCEL_ON_AC_INST_BOOL
IS
  'Boolean flag indicating that this task should be cancelled when inventory is installed onto an aircraft.' ;
  COMMENT ON COLUMN TASK_TASK.CANCEL_ON_ANY_INST_BOOL
IS
  'Boolean flag indicating that this task should be cancelled when inventory is installed into any component.' ;
  COMMENT ON COLUMN TASK_TASK.CREATE_ON_AC_INST_BOOL
IS
  'Boolean flag indicating that this task should be created when inventory is installed onto an aircraft.' ;
  COMMENT ON COLUMN TASK_TASK.CREATE_ON_ANY_INST_BOOL
IS
  'Boolean flag indicating that this task should be created when inventory is installed into any component.' ;
  COMMENT ON COLUMN TASK_TASK.CANCEL_ON_AC_RMVL_BOOL
IS
  'Boolean flag indicating that this task should be cancelled when inventory is removed from an aircraft.' ;
  COMMENT ON COLUMN TASK_TASK.CANCEL_ON_ANY_RMVL_BOOL
IS
  'Boolean flag indicating that this task should be cancelled when inventory is removed from any component.' ;
  COMMENT ON COLUMN TASK_TASK.CREATE_ON_AC_RMVL_BOOL
IS
  'Boolean flag indicating that this task should be created when inventory is removed from an aircraft.' ;
  COMMENT ON COLUMN TASK_TASK.CREATE_ON_ANY_RMVL_BOOL
IS
  'Boolean flag indicating that this task should be created when inventory is removed from any component.' ;
  COMMENT ON COLUMN TASK_TASK.SOFT_DEADLINE_BOOL
IS
  'This flag is used it indicate that all deadlines against the task will be considered soft.' ;
  COMMENT ON COLUMN TASK_TASK.HARD_DEAD_BOOL
IS
  'This flag is used to indicate that task scheduling is using CDY hard deadline.' ;
  COMMENT ON COLUMN TASK_TASK.EXT_KEY_SDESC
IS
  'A field used to store an external system''s PK value.' ;
  COMMENT ON COLUMN TASK_TASK.REV_NOTE
IS
  'This is the revision notes.' ;
  COMMENT ON COLUMN TASK_TASK.REV_HR_DB_ID
IS
  'This is a foreign key to the user who created the revision of the task definition.' ;
  COMMENT ON COLUMN TASK_TASK.REV_HR_ID
IS
  'This is a foreign key to the user who created the revision of the task definition.' ;
  COMMENT ON COLUMN TASK_TASK.REV_DT
IS
  'This is the date the task definition was put into revision.' ;
  COMMENT ON COLUMN TASK_TASK.BLOCK_CHAIN_SDESC
IS
  'This is the name of the block chain that a block is part of. All blocks in the chain share this name.' ;
  COMMENT ON COLUMN TASK_TASK.BLOCK_ORD
IS
  'This is the order of the block in a block chain.' ;
  COMMENT ON COLUMN TASK_TASK.INITIAL_BLOCK_BOOL
IS
  'This indicates that the block is the first block in a chain.' ;
  COMMENT ON COLUMN TASK_TASK.ON_CONDITION_BOOL
IS
  'Indicates if this task revision should be instantiated when the parent task revision is instantiated.' ;
  COMMENT ON COLUMN TASK_TASK.LOCKED_BOOL
IS
  'This boolean indicates if the task definition is locked.' ;
  COMMENT ON COLUMN TASK_TASK.LOCKED_HR_DB_ID
IS
  'This is the human resource that locked the task definition.' ;
  COMMENT ON COLUMN TASK_TASK.LOCKED_HR_ID
IS
  'This is the human resource that locked the task definition.' ;
  COMMENT ON COLUMN TASK_TASK.LOCKED_DT
IS
  'This is the date the task definition was locked.' ;
  COMMENT ON COLUMN TASK_TASK.ETOPS_BOOL
IS
  'True is the task is ETOPS significant.' ;
  COMMENT ON COLUMN TASK_TASK.RESCHED_FROM_CD
IS
  'This is a foreign key to the rescheduling rule for recurring actual tasks.' ;
  COMMENT ON COLUMN TASK_TASK.APPROVED_BOOL
IS
  'this boolean defines if this task definition has been approved.' ;
  COMMENT ON COLUMN TASK_TASK.MIN_USAGE_RELEASE_PCT
IS
  'This column is used to indicate the minumum percentage usage that is allowed for the release of inventory' ;
  COMMENT ON COLUMN TASK_TASK.ORG_DB_ID
IS
  'organization that task definition belongs to' ;
  COMMENT ON COLUMN TASK_TASK.ORG_ID
IS
  'organization that task definition belongs to' ;
  COMMENT ON COLUMN TASK_TASK.ENFORCE_WORKSCOPE_BOOL
IS
  'Determines if JIC ordering needs to be enforced for non-executable requirements.' ;
  COMMENT ON COLUMN TASK_TASK.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.' ;
  COMMENT ON COLUMN TASK_TASK.TASK_SCHED_FROM_DB_ID
IS
  'This specifies the DB Id.' ;
  COMMENT ON COLUMN TASK_TASK.TASK_SCHED_FROM_CD
IS
  'This specifies the task scheduling option.' ;
  COMMENT ON COLUMN TASK_TASK.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN TASK_TASK.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN TASK_TASK.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN TASK_TASK.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN TASK_TASK.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  COMMENT ON COLUMN TASK_TASK.SCHED_UNKNOWN_BOOL
IS
  'Used for reference documents only.  When TRUE indicates that scheduled from date for reference document has not been selected.' ;
  CREATE INDEX IX_EQPASSMBLBOM_TASKTASK ON TASK_TASK
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC ,
      ASSMBL_BOM_ID ASC
    ) ;
  CREATE INDEX IX_REPLEQPASSBOM_TASKTASK ON TASK_TASK
    (
      REPL_ASSMBL_DB_ID ASC ,
      REPL_ASSMBL_CD ASC ,
      REPL_ASSMBL_BOM_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_TASK_TASKACTV ON TASK_TASK
    (
      ACTV_HR_DB_ID ASC ,
      ACTV_HR_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_TASKREVHR ON TASK_TASK
    (
      REV_HR_DB_ID ASC ,
      REV_HR_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_TASKTASKLOCKED ON TASK_TASK
    (
      LOCKED_HR_DB_ID ASC ,
      LOCKED_HR_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_TASTTASK_ENGCNTC ON TASK_TASK
    (
      ENG_CONTACT_HR_DB_ID ASC ,
      ENG_CONTACT_HR_ID ASC
    ) ;
  CREATE INDEX IX_TASKDEFN_TASK_TASK ON TASK_TASK
    (
      TASK_DEFN_DB_ID ASC ,
      TASK_DEFN_ID ASC
    ) ;
  CREATE INDEX IX_FNCACCOUNT_TASKTASK ON TASK_TASK
    (
      ISSUE_ACCOUNT_DB_ID ASC ,
      ISSUE_ACCOUNT_ID ASC
    ) ;
  CREATE INDEX IX_ORGORG_TASKTASK ON TASK_TASK
    ( ORG_DB_ID ASC , ORG_ID ASC
    ) ;
  CREATE INDEX IX_EQPPLANNINGTYPE_TASKTASK ON TASK_TASK
    (
      PLANNING_TYPE_DB_ID ASC ,
      PLANNING_TYPE_ID ASC
    ) ;
ALTER TABLE TASK_TASK ADD CONSTRAINT PK_TASK_TASK PRIMARY KEY ( TASK_DB_ID, TASK_ID ) ;
ALTER TABLE TASK_TASK ADD CONSTRAINT IX_TASKTASKALTID_UNQ UNIQUE ( ALT_ID ) ;
ALTER TABLE TASK_TASK ADD CONSTRAINT uk_taskdefn_revisionord UNIQUE ( TASK_DEFN_DB_ID , TASK_DEFN_ID , REVISION_ORD ) ;


CREATE TABLE TASK_TASK_DEP
  (
    TASK_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEP_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEP_ACTION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DEP_ACTION_CD    VARCHAR2 (10) NOT NULL DEFERRABLE ,
    DEP_TASK_DEFN_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    DEP_TASK_DEFN_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_TASK_DEP ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_DEP ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_DEP ADD CHECK ( TASK_DEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_DEP ADD CHECK ( TASK_DEP_ACTION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_DEP ADD CHECK ( DEP_TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_DEP ADD CHECK ( DEP_TASK_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_DEP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_TASK_DEP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE TASK_TASK_DEP
IS
  'Task Dependencies: This associative entity defines the relationships between tasks. It enumerates the ''rules'' that trigger inter-task scheduling dependencies when scheduled tasks are compeleted.' ;
  COMMENT ON COLUMN TASK_TASK_DEP.TASK_DB_ID
IS
  'FK to TASK_TASK. Task that is being completed.' ;
  COMMENT ON COLUMN TASK_TASK_DEP.TASK_ID
IS
  'FK to TASK_TASK. Task that is being completed.' ;
  COMMENT ON COLUMN TASK_TASK_DEP.TASK_DEP_ID
IS
  'Identifier used to distinguish between different dependencies on the same task definition. It is unique in context of the task definition.' ;
  COMMENT ON COLUMN TASK_TASK_DEP.TASK_DEP_ACTION_DB_ID
IS
  'FK to REF_TASK_DEP_ACTION' ;
  COMMENT ON COLUMN TASK_TASK_DEP.TASK_DEP_ACTION_CD
IS
  'FK to REF_TASK_DEP_ACTION' ;
  COMMENT ON COLUMN TASK_TASK_DEP.DEP_TASK_DEFN_DB_ID
IS
  'This is a foreign key to the task definition (TASK_DEFN). The dependent task no longer specifies the exact revision. The exact revision will be controlled by the maintenance program.' ;
  COMMENT ON COLUMN TASK_TASK_DEP.DEP_TASK_DEFN_ID
IS
  'This is a foreign key to the task definition (TASK_DEFN). The dependent task no longer specifies the exact revision. The exact revision will be controlled by the maintenance program.' ;
  COMMENT ON COLUMN TASK_TASK_DEP.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN TASK_TASK_DEP.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN TASK_TASK_DEP.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN TASK_TASK_DEP.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN TASK_TASK_DEP.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_TASKTASK_TASKTASKDEP2 ON TASK_TASK_DEP
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
  CREATE INDEX IX_TASKDEFN_TASKTASKDEP ON TASK_TASK_DEP
    (
      DEP_TASK_DEFN_DB_ID ASC ,
      DEP_TASK_DEFN_ID ASC
    ) ;
ALTER TABLE TASK_TASK_DEP ADD CONSTRAINT PK_TASK_TASK_DEP PRIMARY KEY ( TASK_DB_ID, TASK_ID, TASK_DEP_ID ) ;


CREATE TABLE TASK_TASK_FLAGS
  (
    TASK_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    REVIEW_RECEIPT_BOOL   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    PREVENT_EXE_BOOL      NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    PREVENT_EXE_REVIEW_DT DATE ,
    NSV_BOOL              NUMBER (1) DEFAULT 0 ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_TASK_FLAGS ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_FLAGS ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_FLAGS ADD CHECK ( REVIEW_RECEIPT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK_FLAGS ADD CHECK ( PREVENT_EXE_BOOL    IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK_FLAGS ADD CHECK ( NSV_BOOL            IN (0, 1)) DEFERRABLE ;
ALTER TABLE TASK_TASK_FLAGS ADD CHECK ( RSTAT_CD            IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_TASK_FLAGS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE TASK_TASK_FLAGS
IS
  'The TASK_TASK_FLAGS table is used to store boolean flags that depict a particular kind of functionality that can be enabled or disabled for a TASK TASK.   This ensures that the TASK_TASK table doesn''t grow out of control and enables the ability to create indexes that speed up queries based on these flags.' ;
  COMMENT ON COLUMN TASK_TASK_FLAGS.REVIEW_RECEIPT_BOOL
IS
  'REVIEW_RECEIPT_BOOL is a boolean that is used in combination with TASK_TASK.ON_CONDITION_BOOL.  It is used to fullfill the following requirements:
The system must allow the user to indicate if an on condition task should be reviewed upon induction of a new component.' ;
  COMMENT ON COLUMN TASK_TASK_FLAGS.PREVENT_EXE_BOOL
IS
  'This tag determines if a task definition is allowed or prevented but more specifically this flag is used to ensure if all of its actual tasks are prevented or allowed' ;
  COMMENT ON COLUMN TASK_TASK_FLAGS.PREVENT_EXE_REVIEW_DT
IS
  'This date corresponds to the prevent_exe_bool is being changed' ;
  COMMENT ON COLUMN TASK_TASK_FLAGS.NSV_BOOL
IS
  'This is a boolean to indicate if the Next Shop Visit attribute is selected for the task definition' ;
ALTER TABLE TASK_TASK_FLAGS ADD CONSTRAINT PK_TASK_TASK_FLAGS PRIMARY KEY ( TASK_DB_ID, TASK_ID ) ;


CREATE TABLE TASK_TASK_IETM
  (
    TASK_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_IETM_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_DB_ID     NUMBER (10) ,
    IETM_ID        NUMBER (10) ,
    IETM_TOPIC_ID  NUMBER (10) ,
    IETM_ORD       NUMBER (4) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_TASK_IETM ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_IETM ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_IETM ADD CHECK ( TASK_IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_IETM ADD CHECK ( IETM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_IETM ADD CHECK ( IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_IETM ADD CHECK ( IETM_TOPIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_IETM ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_TASK_IETM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE TASK_TASK_IETM
IS
  'This table allows for mulitple IETM links to be associated with a particular task.' ;
  COMMENT ON COLUMN TASK_TASK_IETM.TASK_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN TASK_TASK_IETM.TASK_ID
IS
  'Unique ID assigned from Sequence TASK_ID_SEQ' ;
  COMMENT ON COLUMN TASK_TASK_IETM.TASK_IETM_ID
IS
  'Unique identifier of IETM link in reference to a task.' ;
  COMMENT ON COLUMN TASK_TASK_IETM.IETM_DB_ID
IS
  'FK to IETM_IETM' ;
  COMMENT ON COLUMN TASK_TASK_IETM.IETM_ID
IS
  'FK to IETM_IETM' ;
  COMMENT ON COLUMN TASK_TASK_IETM.IETM_TOPIC_ID
IS
  'Unique ID (from 1 to n) within the IETM.' ;
  COMMENT ON COLUMN TASK_TASK_IETM.IETM_ORD
IS
  'Order of IETM links in reference to a task.' ;
  COMMENT ON COLUMN TASK_TASK_IETM.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN TASK_TASK_IETM.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN TASK_TASK_IETM.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN TASK_TASK_IETM.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN TASK_TASK_IETM.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_IETMTOPIC_TASKTASKIETM ON TASK_TASK_IETM
    (
      IETM_DB_ID ASC ,
      IETM_ID ASC ,
      IETM_TOPIC_ID ASC
    ) ;
  CREATE INDEX IX_TASKTASK_TASKTASKIETM ON TASK_TASK_IETM
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
ALTER TABLE TASK_TASK_IETM ADD CONSTRAINT PK_TASK_TASK_IETM PRIMARY KEY ( TASK_DB_ID, TASK_ID, TASK_IETM_ID ) ;


CREATE TABLE TASK_TASK_LOG
  (
    TASK_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_LOG_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    LOG_ACTION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LOG_ACTION_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    HR_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    LOG_DT           DATE NOT NULL DEFERRABLE ,
    LOG_REASON_DB_ID NUMBER (10) ,
    LOG_REASON_CD    VARCHAR2 (16) ,
    USER_NOTE        VARCHAR2 (4000) ,
    SYSTEM_NOTE      VARCHAR2 (4000) ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_TASK_LOG ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_LOG ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_LOG ADD CHECK ( TASK_LOG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_LOG ADD CHECK ( LOG_ACTION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_LOG ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_LOG ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_LOG ADD CHECK ( LOG_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TASK_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_TASK_LOG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN TASK_TASK_LOG.LOG_DT
IS
  'this is the date the log was created.' ;
  COMMENT ON COLUMN TASK_TASK_LOG.USER_NOTE
IS
  'this is a note associated with the log entry from a users perspective' ;
  COMMENT ON COLUMN TASK_TASK_LOG.SYSTEM_NOTE
IS
  'this is the system level note. describing the systems action associated with the log entry' ;
  CREATE INDEX IX_ORGHR_TASKTASKLOG ON TASK_TASK_LOG
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
  CREATE INDEX IX_TASKTASK_TASKTASKLOG ON TASK_TASK_LOG
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
ALTER TABLE TASK_TASK_LOG ADD CONSTRAINT PK_TASK_TASK_LOG PRIMARY KEY ( TASK_DB_ID, TASK_ID, TASK_LOG_ID ) ;


CREATE TABLE TASK_TEMP_ISSUE_LOG
  (
    TASK_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    MAINT_PRGM_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    MAINT_PRGM_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    HR_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    TEMP_ISSUE_DT    DATE NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO      NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_TEMP_ISSUE_LOG ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TEMP_ISSUE_LOG ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TEMP_ISSUE_LOG ADD CHECK ( MAINT_PRGM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TEMP_ISSUE_LOG ADD CHECK ( MAINT_PRGM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TEMP_ISSUE_LOG ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TEMP_ISSUE_LOG ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TEMP_ISSUE_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_TEMP_ISSUE_LOG ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TEMP_ISSUE_LOG ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TEMP_ISSUE_LOG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE TASK_TEMP_ISSUE_LOG
IS
  'The TASK_TEMP_ISSUE_LOG table logs temporarily issued revisions of tasks.' ;
  COMMENT ON COLUMN TASK_TEMP_ISSUE_LOG.TASK_DB_ID
IS
  'The task revision that was temporarily issued' ;
  COMMENT ON COLUMN TASK_TEMP_ISSUE_LOG.TASK_ID
IS
  'The task revision that was temporarily issued' ;
  COMMENT ON COLUMN TASK_TEMP_ISSUE_LOG.MAINT_PRGM_DB_ID
IS
  'The maintenance program that the task was temporarily issued for' ;
  COMMENT ON COLUMN TASK_TEMP_ISSUE_LOG.MAINT_PRGM_ID
IS
  'The maintenance program that the task was temporarily issued for' ;
  COMMENT ON COLUMN TASK_TEMP_ISSUE_LOG.HR_DB_ID
IS
  'The user that temporarily issued the task' ;
  COMMENT ON COLUMN TASK_TEMP_ISSUE_LOG.HR_ID
IS
  'The user that temporarily issued the task' ;
  COMMENT ON COLUMN TASK_TEMP_ISSUE_LOG.TEMP_ISSUE_DT
IS
  'The date that the task has been temporarily issued for the maintenance program' ;
  COMMENT ON COLUMN TASK_TEMP_ISSUE_LOG.RSTAT_CD
IS
  'Status of the record ' ;
  COMMENT ON COLUMN TASK_TEMP_ISSUE_LOG.REVISION_NO
IS
  'A number incremented each time the record is modified ' ;
  COMMENT ON COLUMN TASK_TEMP_ISSUE_LOG.CTRL_DB_ID
IS
  'The identifier of the database that owns the record ' ;
  COMMENT ON COLUMN TASK_TEMP_ISSUE_LOG.CREATION_DT
IS
  'The data and time at which the record was inserted' ;
  COMMENT ON COLUMN TASK_TEMP_ISSUE_LOG.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record ' ;
  COMMENT ON COLUMN TASK_TEMP_ISSUE_LOG.REVISION_DT
IS
  'The data and time at which the record was last updated' ;
  COMMENT ON COLUMN TASK_TEMP_ISSUE_LOG.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN TASK_TEMP_ISSUE_LOG.REVISION_USER
IS
  'The name of the user that last updated the record' ;
  CREATE INDEX IX_ORGHR_TASKTEMPISSUELOG ON TASK_TEMP_ISSUE_LOG
    (
      HR_DB_ID ASC ,
      HR_ID ASC
    ) ;
  CREATE INDEX IX_TASKTASK_TASKTEMPISSUELOG ON TASK_TEMP_ISSUE_LOG
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
  CREATE INDEX IX_MAINTPRGM_TASKTEMPISSUELOG ON TASK_TEMP_ISSUE_LOG
    (
      MAINT_PRGM_DB_ID ASC ,
      MAINT_PRGM_ID ASC
    ) ;
ALTER TABLE TASK_TEMP_ISSUE_LOG ADD CONSTRAINT PK_TASK_TEMP_ISSUE_LOG PRIMARY KEY ( TASK_DB_ID, TASK_ID, MAINT_PRGM_DB_ID, MAINT_PRGM_ID ) ;


CREATE TABLE TASK_TOOL_LIST
  (
    TASK_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_TOOL_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_PART_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    BOM_PART_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_HR       NUMBER (6,2) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_TOOL_LIST ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TOOL_LIST ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TOOL_LIST ADD CHECK ( TASK_TOOL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TOOL_LIST ADD CHECK ( BOM_PART_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TOOL_LIST ADD CHECK ( BOM_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_TOOL_LIST ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_TOOL_LIST ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE TASK_TOOL_LIST
IS
  'Task Tools Requried List: Defines all of the tools required to complete the specified maintenance task. Used for resource allocation and levelling.' ;
  COMMENT ON COLUMN TASK_TOOL_LIST.TASK_DB_ID
IS
  'FK to TASK_TASK. The task to which this tool is assigned,' ;
  COMMENT ON COLUMN TASK_TOOL_LIST.TASK_ID
IS
  'FK to TASK_TASK. The task to which this tool is assigned,' ;
  COMMENT ON COLUMN TASK_TOOL_LIST.TASK_TOOL_ID
IS
  'Number assigned (1..n) in context of the task definition.' ;
  COMMENT ON COLUMN TASK_TOOL_LIST.BOM_PART_DB_ID
IS
  'FK to EQP_BOM_PART. Identifies the part group.' ;
  COMMENT ON COLUMN TASK_TOOL_LIST.BOM_PART_ID
IS
  'FK to EQP_BOM_PART. Identifies the part group.' ;
  COMMENT ON COLUMN TASK_TOOL_LIST.SCHED_HR
IS
  'The number of hours that this tool is scheduled to be used.' ;
  COMMENT ON COLUMN TASK_TOOL_LIST.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN TASK_TOOL_LIST.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN TASK_TOOL_LIST.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN TASK_TOOL_LIST.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN TASK_TOOL_LIST.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPBOMPART_TASKTOOLLIST ON TASK_TOOL_LIST
    (
      BOM_PART_DB_ID ASC ,
      BOM_PART_ID ASC
    ) ;
  CREATE INDEX IX_TASKTASK_TASKTOOLLIST ON TASK_TOOL_LIST
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
ALTER TABLE TASK_TOOL_LIST ADD CONSTRAINT PK_TASK_TOOL_LIST PRIMARY KEY ( TASK_DB_ID, TASK_ID, TASK_TOOL_ID ) ;


CREATE TABLE TASK_WARRANTY_SP
  (
    SCHED_DB_ID         NUMBER (10) ,
    SCHED_ID            NUMBER (10) ,
    WARRANTY_INIT_DB_ID NUMBER (10) ,
    WARRANTY_INIT_ID    NUMBER (10) ,
    WARRANTY_TYPE_DB_ID NUMBER (10) ,
    WARRANTY_TYPE_CD    VARCHAR2 (16)
  ) ;
ALTER TABLE TASK_WARRANTY_SP ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_WARRANTY_SP ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_WARRANTY_SP ADD CHECK ( WARRANTY_INIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_WARRANTY_SP ADD CHECK ( WARRANTY_INIT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_WARRANTY_SP ADD CHECK ( WARRANTY_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE TASK_WARRANTY_SP
IS
  'This table is a ''scratch pad'' table.  it''s similar to a temporary table, except that since it''s used over and over and over again durring the evaluation process we keep it as a perminant one to be able to optimize it with indexes etc...
Also note all data in this table is transient and no FK''s are applied and does not require audit trigger columns and audit triggers applied to it.' ;


CREATE TABLE TASK_WEIGHT_BALANCE
  (
    TASK_WEIGHT_BALANCE_DB_ID NUMBER (10) NOT NULL ,
    TASK_WEIGHT_BALANCE_ID    NUMBER (10) NOT NULL ,
    TASK_DB_ID                NUMBER (10) NOT NULL ,
    TASK_ID                   NUMBER (10) NOT NULL ,
    PART_NO_DB_ID             NUMBER (10) ,
    PART_NO_ID                NUMBER (10) ,
    WEIGHT                    NUMBER (15,5) ,
    MOMENT                    NUMBER (15,5) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE TASK_WEIGHT_BALANCE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE TASK_WEIGHT_BALANCE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
CREATE INDEX IX_TASKWEIGHTBAL_EQPPARTNO ON TASK_WEIGHT_BALANCE
  (
    PART_NO_DB_ID ASC ,
    PART_NO_ID ASC
  ) ;
CREATE INDEX IX_TASKWEIGHTBAL_TASKTASK ON TASK_WEIGHT_BALANCE
  (
    TASK_DB_ID ASC ,
    TASK_ID ASC
  ) ;
ALTER TABLE TASK_WEIGHT_BALANCE ADD CONSTRAINT PK_TASK_WEIGHT_BALANCE PRIMARY KEY ( TASK_WEIGHT_BALANCE_DB_ID, TASK_WEIGHT_BALANCE_ID ) ;
ALTER TABLE TASK_WEIGHT_BALANCE ADD CONSTRAINT IX_TASKWEIGHTBALANCE_ALTID UNIQUE ( ALT_ID ) ;


CREATE TABLE TASK_WF
  (
    WF_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    WF_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_WF ADD CHECK ( WF_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_WF ADD CHECK ( WF_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_WF ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_WF ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_WF ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_WF ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_TASKTASK_TASKWF ON TASK_WF
  ( TASK_DB_ID ASC , TASK_ID ASC
  ) ;
CREATE INDEX IX_WFWF_TASKWF ON TASK_WF
  ( WF_DB_ID ASC , WF_ID ASC
  ) ;
ALTER TABLE TASK_WF ADD CONSTRAINT PK_TASK_WF PRIMARY KEY ( WF_DB_ID, WF_ID, TASK_DB_ID, TASK_ID ) ;


CREATE TABLE TASK_WORK_TYPE
  (
    TASK_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    WORK_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WORK_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_WORK_TYPE ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_WORK_TYPE ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_WORK_TYPE ADD CHECK ( WORK_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_WORK_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_WORK_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN TASK_WORK_TYPE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN TASK_WORK_TYPE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN TASK_WORK_TYPE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN TASK_WORK_TYPE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_TASKTASK_TASKWORKTYPE ON TASK_WORK_TYPE
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
ALTER TABLE TASK_WORK_TYPE ADD CONSTRAINT PK_TASK_WORK_TYPE PRIMARY KEY ( TASK_DB_ID, TASK_ID, WORK_TYPE_DB_ID, WORK_TYPE_CD ) ;


CREATE TABLE TASK_ZONE
  (
    TASK_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ZONE_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    ZONE_ID        NUMBER (10) ,
    ZONE_DB_ID     NUMBER (10) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TASK_ZONE ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ZONE ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ZONE ADD CHECK ( TASK_ZONE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ZONE ADD CHECK ( ZONE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ZONE ADD CHECK ( ZONE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TASK_ZONE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TASK_ZONE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN TASK_ZONE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN TASK_ZONE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN TASK_ZONE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN TASK_ZONE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN TASK_ZONE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_TASKTASK_TASKZONE ON TASK_ZONE
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
  CREATE INDEX IX_EQPTASKZONE_TASKZONE ON TASK_ZONE
    (
      ZONE_DB_ID ASC ,
      ZONE_ID ASC
    ) ;
ALTER TABLE TASK_ZONE ADD CONSTRAINT "pk_TASK_ZONE" PRIMARY KEY ( TASK_DB_ID, TASK_ID, TASK_ZONE_ID ) ;


CREATE TABLE TAX
  (
    TAX_ID RAW (16) NOT NULL DEFERRABLE ,
    TAX_CODE VARCHAR2 (40) NOT NULL ,
    TAX_NAME VARCHAR2 (4000) ,
    TAX_RATE FLOAT ,
    ACCOUNT_ID       NUMBER (10) ,
    ACCOUNT_DB_ID    NUMBER (10) ,
    RECOVERABLE_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    COMPOUND_BOOL    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ARCHIVE_BOOL     NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    EXTERNAL_ID      VARCHAR2 (40) ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO      NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TAX ADD CHECK ( ACCOUNT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TAX ADD CHECK ( ACCOUNT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TAX ADD CHECK ( RECOVERABLE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE TAX ADD CHECK ( COMPOUND_BOOL    IN (0, 1)) DEFERRABLE ;
ALTER TABLE TAX ADD CHECK ( ARCHIVE_BOOL     IN (0, 1)) DEFERRABLE ;
ALTER TABLE TAX ADD CHECK ( RSTAT_CD         IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TAX ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TAX ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TAX ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE TAX
IS
  'This table contains the structure of the financial Tax entities, including the default Tax Rate. Taxes may be applied to Orders, Invoices, and RFQs.' ;
  COMMENT ON COLUMN TAX.REVISION_NO
IS
  ' A number incremented each time the record is modified ' ;
  COMMENT ON COLUMN TAX.CTRL_DB_ID
IS
  'The identifier of the database that owns the record' ;
  COMMENT ON COLUMN TAX.CREATION_DT
IS
  'The data and time at which the record was inserted' ;
  COMMENT ON COLUMN TAX.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record ' ;
  COMMENT ON COLUMN TAX.REVISION_DT
IS
  'The data and time at which the record was last updated' ;
  COMMENT ON COLUMN TAX.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record ' ;
  COMMENT ON COLUMN TAX.REVISION_USER
IS
  'The name of the user that last updated the record' ;
  CREATE INDEX IX_FK_MIMDB_TAXCTRLDBID ON TAX
    ( CTRL_DB_ID ASC
    ) ;
  CREATE INDEX IX_FK_MIMDB_TAXCREATIONBID ON TAX
    ( CREATION_DB_ID ASC
    ) ;
  CREATE INDEX IX_FK_FNCACCOUNT_TAX ON TAX
    (
      ACCOUNT_DB_ID ASC ,
      ACCOUNT_ID ASC
    ) ;
ALTER TABLE TAX ADD CONSTRAINT PK_TAX PRIMARY KEY ( TAX_ID ) ;
ALTER TABLE TAX ADD CONSTRAINT IX_TAXCODE_UNQ UNIQUE ( TAX_CODE ) ;


CREATE TABLE TAX_LOG
  (
    TAX_LOG_ORDER NUMBER NOT NULL DEFERRABLE ,
    TAX_ID RAW (16) NOT NULL DEFERRABLE ,
    TAX_LOG_MESSAGE VARCHAR2 (4000) ,
    TAX_LOG_DATE    DATE ,
    HR_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO     NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TAX_LOG ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TAX_LOG ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TAX_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TAX_LOG ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TAX_LOG ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TAX_LOG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE TAX_LOG
IS
  'Historic records of the changes to the TAX table.' ;
  COMMENT ON COLUMN TAX_LOG.RSTAT_CD
IS
  'Status of the record ' ;
  COMMENT ON COLUMN TAX_LOG.REVISION_NO
IS
  'A number incremented each time the record is modified' ;
  COMMENT ON COLUMN TAX_LOG.CTRL_DB_ID
IS
  'The identifier of the database that owns the record' ;
  COMMENT ON COLUMN TAX_LOG.CREATION_DT
IS
  'The data and time at which the record was inserted' ;
  COMMENT ON COLUMN TAX_LOG.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record' ;
  COMMENT ON COLUMN TAX_LOG.REVISION_DT
IS
  'The data and time at which the record was last updated' ;
  COMMENT ON COLUMN TAX_LOG.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN TAX_LOG.REVISION_USER
IS
  'The name of the user that last updated the record ' ;
  CREATE INDEX IX_FK_MIMDB_TAXLOGCTRLDBID ON TAX_LOG
    ( CTRL_DB_ID ASC
    ) ;
  CREATE INDEX IX_FK_MIMDB_TAXLOGCREATIONDBID ON TAX_LOG
    (
      CREATION_DB_ID ASC
    ) ;
  CREATE INDEX IX_FK_MIMDB_TAXLOGREVISIONDBID ON TAX_LOG
    (
      REVISION_DB_ID ASC
    ) ;
  CREATE INDEX IX_FK_ORGHR_TAXLOG ON TAX_LOG
    ( HR_DB_ID ASC , HR_ID ASC
    ) ;
  CREATE INDEX IX_TAX_TAXLOG ON TAX_LOG
    ( TAX_ID ASC
    ) ;
ALTER TABLE TAX_LOG ADD CONSTRAINT PK_TAX_LOG PRIMARY KEY ( TAX_LOG_ORDER, TAX_ID ) ;


CREATE TABLE TAX_VENDOR
  (
    TAX_ID RAW (16) NOT NULL DEFERRABLE ,
    VENDOR_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO    NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE TAX_VENDOR ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TAX_VENDOR ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TAX_VENDOR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE TAX_VENDOR ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TAX_VENDOR ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE TAX_VENDOR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE TAX_VENDOR
IS
  'This table specifies the relationship between Taxes and Vendors. These relationships are used to assist Order creation by automatically applying all defined Taxes based on the Order''s Vendor.' ;
  COMMENT ON COLUMN TAX_VENDOR.REVISION_NO
IS
  'A number incremented each time the record is modified' ;
  COMMENT ON COLUMN TAX_VENDOR.CTRL_DB_ID
IS
  'The identifier of the database that owns the record' ;
  COMMENT ON COLUMN TAX_VENDOR.CREATION_DT
IS
  'The data and time at which the record was inserted ' ;
  COMMENT ON COLUMN TAX_VENDOR.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record ' ;
  COMMENT ON COLUMN TAX_VENDOR.REVISION_DT
IS
  'The data and time at which the record was last updated' ;
  COMMENT ON COLUMN TAX_VENDOR.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN TAX_VENDOR.REVISION_USER
IS
  'The name of the user that last updated the record' ;
  CREATE INDEX IX_ORGVENDOR_TAXVENDOR ON TAX_VENDOR
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
  CREATE INDEX IX_TAX_TAXVENDOR ON TAX_VENDOR
    ( TAX_ID ASC
    ) ;
ALTER TABLE TAX_VENDOR ADD CONSTRAINT PK_TAX_VENDOR PRIMARY KEY ( TAX_ID, VENDOR_DB_ID, VENDOR_ID ) ;


CREATE TABLE USER_SHIFT_PATTERN
  (
    USER_SHIFT_PATTERN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    USER_SHIFT_PATTERN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    USER_SHIFT_PATTERN_CD    VARCHAR2 (80) NOT NULL ,
    USER_SHIFT_PATTERN_NAME  VARCHAR2 (240) NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE USER_SHIFT_PATTERN ADD CHECK ( USER_SHIFT_PATTERN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USER_SHIFT_PATTERN ADD CHECK ( USER_SHIFT_PATTERN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USER_SHIFT_PATTERN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE USER_SHIFT_PATTERN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE USER_SHIFT_PATTERN
IS
  'This entity represents ''User shift patterns'' or  ''Schedule Definitions'' which are repeating partterns of shifts. For example, a regular 9 to 5 work week schedule would have 5 day shifts and then 2 days off.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN.USER_SHIFT_PATTERN_DB_ID
IS
  'Primary key of the user shift pattern.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN.USER_SHIFT_PATTERN_ID
IS
  'Primary key of the user shift pattern.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN.USER_SHIFT_PATTERN_CD
IS
  'Unique code that represents a user shift pattern.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN.USER_SHIFT_PATTERN_NAME
IS
  'Descriptive title or name for the user shift pattern.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE USER_SHIFT_PATTERN ADD CONSTRAINT PK_USER_SHIFT_PATTERN PRIMARY KEY ( USER_SHIFT_PATTERN_DB_ID, USER_SHIFT_PATTERN_ID ) ;
ALTER TABLE USER_SHIFT_PATTERN ADD CONSTRAINT IX_USERSHIFTPATTRNCD_UNQ UNIQUE ( USER_SHIFT_PATTERN_CD ) ;
ALTER TABLE USER_SHIFT_PATTERN ADD CONSTRAINT IX_USERSHIFTPATTRNALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE USER_SHIFT_PATTERN_DAY
  (
    USER_SHIFT_PATTERN_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    USER_SHIFT_PATTERN_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    USER_SHIFT_PATTERN_DAY_ORD NUMBER (4) NOT NULL DEFERRABLE ,
    RSTAT_CD                   NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT                DATE NOT NULL DEFERRABLE ,
    REVISION_DT                DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER              VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE USER_SHIFT_PATTERN_DAY ADD CHECK ( USER_SHIFT_PATTERN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USER_SHIFT_PATTERN_DAY ADD CHECK ( USER_SHIFT_PATTERN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USER_SHIFT_PATTERN_DAY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE USER_SHIFT_PATTERN_DAY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE USER_SHIFT_PATTERN_DAY
IS
  'This table represents a day in a user shift pattern.  A user shift pattern can have n number of days.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN_DAY.USER_SHIFT_PATTERN_DB_ID
IS
  'FK to USER_SHIFT_PATTERN.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN_DAY.USER_SHIFT_PATTERN_ID
IS
  'FK to USER_SHIFT_PATTERN' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN_DAY.USER_SHIFT_PATTERN_DAY_ORD
IS
  'Primary key that indicates the day number within the user shift pattern.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN_DAY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN_DAY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN_DAY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN_DAY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN_DAY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_USPATTERN_USPATTERNDAY ON USER_SHIFT_PATTERN_DAY
    (
      USER_SHIFT_PATTERN_DB_ID ASC ,
      USER_SHIFT_PATTERN_ID ASC
    ) ;
ALTER TABLE USER_SHIFT_PATTERN_DAY ADD CONSTRAINT PK_USER_SHIFT_PATTERN_DAY PRIMARY KEY ( USER_SHIFT_PATTERN_DB_ID, USER_SHIFT_PATTERN_ID, USER_SHIFT_PATTERN_DAY_ORD ) ;


CREATE TABLE USER_SHIFT_PATTERN_DAY_SHIFT
  (
    USER_SHIFT_PATTERN_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    USER_SHIFT_PATTERN_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    USER_SHIFT_PATTERN_DAY_ORD NUMBER (4) NOT NULL DEFERRABLE ,
    SHIFT_DB_ID                NUMBER (10) ,
    SHIFT_ID                   NUMBER (10) ,
    RSTAT_CD                   NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT                DATE NOT NULL DEFERRABLE ,
    REVISION_DT                DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER              VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE USER_SHIFT_PATTERN_DAY_SHIFT ADD CHECK ( USER_SHIFT_PATTERN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USER_SHIFT_PATTERN_DAY_SHIFT ADD CHECK ( USER_SHIFT_PATTERN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USER_SHIFT_PATTERN_DAY_SHIFT ADD CHECK ( SHIFT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USER_SHIFT_PATTERN_DAY_SHIFT ADD CHECK ( SHIFT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USER_SHIFT_PATTERN_DAY_SHIFT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE USER_SHIFT_PATTERN_DAY_SHIFT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE USER_SHIFT_PATTERN_DAY_SHIFT
IS
  'This entity represents the shift for a day in the user shift pattern.  For example, an user shift pattern can have 7 days with different shift for different days.  A record in this table represents a specific shift for a specific day in a user shift pattern.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN_DAY_SHIFT.USER_SHIFT_PATTERN_DB_ID
IS
  'FK to USER_SHIFT_PATTERN_DAY.  Represents a specific day in a user shift pattern.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN_DAY_SHIFT.USER_SHIFT_PATTERN_ID
IS
  'FK to USER_SHIFT_PATTERN_DAY.  Represents a specific day in a user shift pattern.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN_DAY_SHIFT.USER_SHIFT_PATTERN_DAY_ORD
IS
  'FK to USER_SHIFT_PATTERN_DAY.  Represents a specific day in an user shift pattern.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN_DAY_SHIFT.SHIFT_DB_ID
IS
  'FK to SHIFT_SHIFT.  Represents a specific shift for the day represented by the primary key.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN_DAY_SHIFT.SHIFT_ID
IS
  'FK to SHIFT_SHIFT.  Represents a specific shift for the day represented by the primary key.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN_DAY_SHIFT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN_DAY_SHIFT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN_DAY_SHIFT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN_DAY_SHIFT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN USER_SHIFT_PATTERN_DAY_SHIFT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_SHIFTSHIFT_USPDAYSHIFT ON USER_SHIFT_PATTERN_DAY_SHIFT
    (
      SHIFT_DB_ID ASC ,
      SHIFT_ID ASC
    ) ;
ALTER TABLE USER_SHIFT_PATTERN_DAY_SHIFT ADD CONSTRAINT PK_USER_SHIFT_PATTERN_DAY_SHIF PRIMARY KEY ( USER_SHIFT_PATTERN_DB_ID, USER_SHIFT_PATTERN_ID, USER_SHIFT_PATTERN_DAY_ORD ) ;


CREATE TABLE USG_USAGE_DATA
  (
    USAGE_DATA_ID RAW (16) NOT NULL DEFERRABLE ,
    USAGE_RECORD_ID RAW (16) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_TYPE_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    DATA_ORD            NUMBER (4) ,
    ASSMBL_INV_NO_DB_ID NUMBER (10) ,
    ASSMBL_INV_NO_ID    NUMBER (10) ,
    ASSMBL_DB_ID        NUMBER (10) ,
    ASSMBL_CD           VARCHAR2 (8) ,
    ASSMBL_BOM_ID       NUMBER (10) ,
    ASSMBL_POS_ID       NUMBER (10) ,
    TSN_QT FLOAT NOT NULL DEFERRABLE ,
    TSO_QT FLOAT NOT NULL DEFERRABLE ,
    TSI_QT FLOAT NOT NULL DEFERRABLE ,
    TSN_DELTA_QT FLOAT NOT NULL DEFERRABLE ,
    TSO_DELTA_QT FLOAT NOT NULL DEFERRABLE ,
    TSI_DELTA_QT FLOAT NOT NULL DEFERRABLE ,
    NEGATED_BOOL   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    LEGACY_KEY     VARCHAR2 (54) ,
    CTRL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_NO    NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE USG_USAGE_DATA ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USG_USAGE_DATA ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USG_USAGE_DATA ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USG_USAGE_DATA ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USG_USAGE_DATA ADD CHECK ( ASSMBL_INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USG_USAGE_DATA ADD CHECK ( ASSMBL_INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USG_USAGE_DATA ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USG_USAGE_DATA ADD CHECK ( ASSMBL_BOM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USG_USAGE_DATA ADD CHECK ( ASSMBL_POS_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USG_USAGE_DATA ADD CHECK ( NEGATED_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE USG_USAGE_DATA ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USG_USAGE_DATA ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USG_USAGE_DATA ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE USG_USAGE_DATA ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE USG_USAGE_DATA
IS
  'This table stores the usage data associated with inventory items.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.USAGE_DATA_ID
IS
  'PK for USG_USAGE_DATA table.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.USAGE_RECORD_ID
IS
  'FK to USG_USAGE_RECORD.  Indicates usage record for which the usage data entity applies.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.INV_NO_DB_ID
IS
  'FK to INV_INV.  Indicates the inventory  for which the usage applies.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.INV_NO_ID
IS
  'FK to INV_INV.  Indicates the inventory  for which the usage applies.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.DATA_TYPE_DB_ID
IS
  'FK to MIM_DATA_TYPE.  Indicates the data type for which the usage applies.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.DATA_TYPE_ID
IS
  'FK to MIM_DATA_TYPE.  Indicates the data type for which the usage applies.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.DATA_ORD
IS
  'Order of this usage parameter.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.ASSMBL_INV_NO_DB_ID
IS
  'FK to inv_inv table.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.ASSMBL_INV_NO_ID
IS
  'FK to inv_inv table. ' ;
  COMMENT ON COLUMN USG_USAGE_DATA.TSN_QT
IS
  'The total usage since new on the item.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.TSO_QT
IS
  'The total usage since overhaul on the item.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.TSI_QT
IS
  'The total usage since install on the item.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.TSN_DELTA_QT
IS
  'Incremental time since new value registered.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.TSO_DELTA_QT
IS
  'Incremental time since overhaul value registered.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.TSI_DELTA_QT
IS
  'Incremental time since install value registered.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.NEGATED_BOOL
IS
  'Indicates if this usage value belongs to a negated.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.LEGACY_KEY
IS
  'Indicates the representation of the entity in the old data model.  Used only for reference purposes.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.RSTAT_CD
IS
  'The status of the record.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.CREATION_DT
IS
  'The data and time at which the record was inserted.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.REVISION_DT
IS
  'The data and time at which the record was updated.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN USG_USAGE_DATA.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
  CREATE INDEX IX_USGUSDATA_MIMDATATYPE_FK ON USG_USAGE_DATA
    (
      DATA_TYPE_DB_ID ASC ,
      DATA_TYPE_ID ASC
    ) ;
CREATE UNIQUE INDEX IX_USGUSAGEDATA_NK ON USG_USAGE_DATA
  (
    USAGE_RECORD_ID ASC , INV_NO_ID ASC , INV_NO_DB_ID ASC , DATA_TYPE_ID ASC , DATA_TYPE_DB_ID ASC
  )
  ;
  CREATE INDEX IX_EQPASSMBLPOS_USGUSAGEDATA ON USG_USAGE_DATA
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC ,
      ASSMBL_BOM_ID ASC ,
      ASSMBL_POS_ID ASC
    ) ;
  CREATE INDEX IX_ASSMBLINVINV_USGUSDATA ON USG_USAGE_DATA
    (
      ASSMBL_INV_NO_DB_ID ASC ,
      ASSMBL_INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_INVINV_USGUSDATA ON USG_USAGE_DATA
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_USGUSREC_USGUSDATA ON USG_USAGE_DATA
    ( USAGE_RECORD_ID ASC
    ) ;
  CREATE INDEX IX_USGUSDATA_INVDATA ON USG_USAGE_DATA
    (
      INV_NO_ID ASC ,
      INV_NO_DB_ID ASC ,
      USAGE_RECORD_ID ASC ,
      DATA_TYPE_ID ASC ,
      DATA_TYPE_DB_ID ASC ,
      TSN_DELTA_QT ASC
    ) ;
  CREATE INDEX IX_USGUSDATA_TSNDATA ON USG_USAGE_DATA
    (
      USAGE_RECORD_ID ASC ,
      DATA_TYPE_ID ASC ,
      DATA_TYPE_DB_ID ASC ,
      TSN_DELTA_QT ASC
    ) ;
ALTER TABLE USG_USAGE_DATA ADD CONSTRAINT PK_USG_USAGE_DATA PRIMARY KEY ( USAGE_DATA_ID ) ;


CREATE TABLE USG_USAGE_RECORD
  (
    USAGE_RECORD_ID RAW (16) NOT NULL DEFERRABLE ,
    USAGE_TYPE_CD   VARCHAR2 (12) NOT NULL DEFERRABLE ,
    USAGE_NAME      VARCHAR2 (500) NOT NULL DEFERRABLE ,
    USAGE_DESC      VARCHAR2 (4000) ,
    DOCUMENT_REF    VARCHAR2 (80) ,
    EXT_KEY         VARCHAR2 (80) ,
    INV_NO_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    USAGE_DT        DATE NOT NULL DEFERRABLE ,
    NEGATED_BOOL    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RECORD_DT       DATE NOT NULL DEFERRABLE ,
    RECORD_HR_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RECORD_HR_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    APPLIED_BOOL    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    LEGACY_KEY      VARCHAR2 (21) ,
    RECORDED_DT     DATE NOT NULL DEFERRABLE ,
    CTRL_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_NO     NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE USG_USAGE_RECORD ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USG_USAGE_RECORD ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USG_USAGE_RECORD ADD CHECK ( NEGATED_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE USG_USAGE_RECORD ADD CHECK ( RECORD_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USG_USAGE_RECORD ADD CHECK ( RECORD_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USG_USAGE_RECORD ADD CHECK ( APPLIED_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE USG_USAGE_RECORD ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USG_USAGE_RECORD ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE USG_USAGE_RECORD ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE USG_USAGE_RECORD ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE USG_USAGE_RECORD
IS
  'This table specifies the information to be stored as a usage record for each usage type. In other words, it defines the structure of the usage records.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.USAGE_RECORD_ID
IS
  'PK to USG_USAGE_RECORD table.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.USAGE_TYPE_CD
IS
  'FK to REF_USAGE_TYPE.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.USAGE_NAME
IS
  'Name of the usage record.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.USAGE_DESC
IS
  'Detailed description of the usage record.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.DOCUMENT_REF
IS
  'External document reference.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.EXT_KEY
IS
  'External identifier when the record is created by an external system.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.INV_NO_DB_ID
IS
  'FK to inv_inv.  Inventory for which the usage record is created.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.INV_NO_ID
IS
  'FK to inv_inv.  Inventory for which the usage record is created.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.USAGE_DT
IS
  'Date when the usage was accrued.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.NEGATED_BOOL
IS
  'Indicates if the usage record is negated.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.RECORD_DT
IS
  'Date when the usage was recorded.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.RECORD_HR_DB_ID
IS
  'FK to ORG_HR table.  Indicates the HR who initiated the usage record creation.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.RECORD_HR_ID
IS
  'FK to ORG_HR table.  Indicates the HR who initiated the usage record creation.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.APPLIED_BOOL
IS
  'Indicates if the usage accrued was applied inorder to update the inventory''s current usage.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.LEGACY_KEY
IS
  'Indicates the representation of the entity in the old data model.  Used only for reference purposes.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.RECORDED_DT
IS
  'This column contains the date that the usage record was recorded' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.RSTAT_CD
IS
  'The status of the record.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.CREATION_DT
IS
  'The data and time at which the record was inserted.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.REVISION_DT
IS
  'The data and time at which the record was updated.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN USG_USAGE_RECORD.REVISION_USER
IS
  'The name of the user that last updated the record.' ;
CREATE UNIQUE INDEX PK_USG_USAGE_RECORD ON USG_USAGE_RECORD
  (
    USAGE_RECORD_ID ASC
  )
  ;
  CREATE INDEX IX_USGUSREC_REFUSGTYPE_FK ON USG_USAGE_RECORD
    (
      USAGE_TYPE_CD ASC
    ) ;
  CREATE INDEX IX_USGUSAGERECORD ON USG_USAGE_RECORD
    (
      INV_NO_ID ASC ,
      INV_NO_DB_ID ASC ,
      USAGE_DT ASC
    ) ;
  CREATE INDEX IX_INVINV_USGUSREC ON USG_USAGE_RECORD
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_ORGHR_USGUSREC ON USG_USAGE_RECORD
    (
      RECORD_HR_DB_ID ASC ,
      RECORD_HR_ID ASC
    ) ;
  CREATE INDEX IX_USGUSREC_INVDATA ON USG_USAGE_RECORD
    (
      INV_NO_ID ASC ,
      INV_NO_DB_ID ASC ,
      USAGE_TYPE_CD ASC ,
      USAGE_DT ASC
    ) ;
  CREATE INDEX IX_USGUSREC_USGTYPE ON USG_USAGE_RECORD
    (
      USAGE_RECORD_ID ASC ,
      USAGE_TYPE_CD ASC ,
      USAGE_DT ASC
    ) ;
ALTER TABLE USG_USAGE_RECORD ADD CONSTRAINT PK_USG_USAGE_RECORD PRIMARY KEY ( USAGE_RECORD_ID ) ;


CREATE TABLE UTL_ACTION_CONFIG_PARM
  (
    PARM_NAME         VARCHAR2 (500) NOT NULL DEFERRABLE ,
    PARM_VALUE        VARCHAR2 (1000) ,
    ENCRYPT_BOOL      NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    PARM_DESC         VARCHAR2 (4000) ,
    DEFAULT_VALUE     VARCHAR2 (1000) ,
    ALLOW_VALUE_DESC  VARCHAR2 (1000) ,
    MAND_CONFIG_BOOL  NUMBER (1) DEFAULT 0 ,
    CATEGORY          VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    MODIFIED_IN       VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    REPL_APPROVED     NUMBER (1) DEFAULT 0 ,
    SESSION_AUTH_BOOL NUMBER (1) DEFAULT 0 ,
    UTL_ID            NUMBER (10)
  ) ;
ALTER TABLE UTL_ACTION_CONFIG_PARM ADD CHECK ( ENCRYPT_BOOL      IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_ACTION_CONFIG_PARM ADD CHECK ( MAND_CONFIG_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_ACTION_CONFIG_PARM ADD CHECK ( REPL_APPROVED     IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_ACTION_CONFIG_PARM ADD CHECK ( SESSION_AUTH_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_ACTION_CONFIG_PARM ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_ACTION_CONFIG_PARM
IS
  'This table allows storage of action configuration parameters.  These are similar to those stored in UTL_CONFIG_PARM, however, these describe gui workflows within Mx (parm_type=''SECURED_RESOURCE'' and config_type="USER'' and parm_name like ''ACTION_%'' or ''APP_%'').  Similar to UTL_CONFIG_PARM, some parameters may be configured for different users and roles through the referentially linked UTL_ACTION_USER_PARM and UTL_ACTION_ROLE_PARM tables.  This table contains a SESSION_AUTH_BOOL which, when set to true, enables the feature that requires a user to authenticate an action only once per session.' ;
  COMMENT ON COLUMN UTL_ACTION_CONFIG_PARM.PARM_NAME
IS
  'Action config parameter name.' ;
  COMMENT ON COLUMN UTL_ACTION_CONFIG_PARM.PARM_VALUE
IS
  'Action config parameter value.' ;
  COMMENT ON COLUMN UTL_ACTION_CONFIG_PARM.ENCRYPT_BOOL
IS
  'Specified whether the parameter value is stored in an encrypted format.  Encrypted values take the form "{3DES}kja//adfj" where the value to the right of the {3DES} tag is Base64 encoded.' ;
  COMMENT ON COLUMN UTL_ACTION_CONFIG_PARM.PARM_DESC
IS
  'Configuration parameter long description.' ;
  COMMENT ON COLUMN UTL_ACTION_CONFIG_PARM.DEFAULT_VALUE
IS
  'The default value for mandatory Parameters.  PARM_VALUE will be set to this value by default.  If no default exists "<none>" will appear in this field.' ;
  COMMENT ON COLUMN UTL_ACTION_CONFIG_PARM.ALLOW_VALUE_DESC
IS
  'A description of the allowable values (including format) that may be set in PARM_VALUE.' ;
  COMMENT ON COLUMN UTL_ACTION_CONFIG_PARM.MAND_CONFIG_BOOL
IS
  'If the Configuration Parameter must be defined in the system (I.e. a PARM_VALUE specified). Note that if a DEFAULT_VALUE exists, it will be set in the PARM_VALUE field.' ;
  COMMENT ON COLUMN UTL_ACTION_CONFIG_PARM.CATEGORY
IS
  'Free form field, that allows to categorize config parms. Used by Role Security pages.' ;
  COMMENT ON COLUMN UTL_ACTION_CONFIG_PARM.MODIFIED_IN
IS
  'Field indicating the external version number in which this parameter was introduced.' ;
  COMMENT ON COLUMN UTL_ACTION_CONFIG_PARM.SESSION_AUTH_BOOL
IS
  'If this flag is set to TRUE, the Authentication Frequency Reduction feature is enabled. For each user action that requires authentication, users have to authenticate themselves only for the first time that they perform the action within a Maintenix session. Subsequent attempts of the same action in the same session do not require authentication.' ;
  COMMENT ON COLUMN UTL_ACTION_CONFIG_PARM.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record.' ;
ALTER TABLE UTL_ACTION_CONFIG_PARM ADD CONSTRAINT PK_UTL_ACTION_CONFIG_PARM PRIMARY KEY ( PARM_NAME ) ;


CREATE TABLE UTL_ACTION_ROLE_PARM
  (
    ROLE_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    PARM_NAME         VARCHAR2 (500) NOT NULL DEFERRABLE ,
    PARM_VALUE        VARCHAR2 (1000) ,
    SESSION_AUTH_BOOL NUMBER (1) DEFAULT 0 ,
    UTL_ID            NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_ACTION_ROLE_PARM ADD CHECK ( SESSION_AUTH_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_ACTION_ROLE_PARM ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_ACTION_ROLE_PARM
IS
  'This table lists the role specific action configuration parameter values.  The action configuration parameter must be defined in the UTL_ACTION_CONFIG_PARM table first.' ;
  COMMENT ON COLUMN UTL_ACTION_ROLE_PARM.ROLE_ID
IS
  'Role id' ;
  COMMENT ON COLUMN UTL_ACTION_ROLE_PARM.PARM_NAME
IS
  'The name of the action configuration parameter.' ;
  COMMENT ON COLUMN UTL_ACTION_ROLE_PARM.PARM_VALUE
IS
  'Action configuration parameter value.' ;
  COMMENT ON COLUMN UTL_ACTION_ROLE_PARM.SESSION_AUTH_BOOL
IS
  'If this flag is set to TRUE, the Authentication Frequency Reduction feature is enabled for this role. For each user action that requires authentication, users in this role have to authenticate themselves only for the first time that they perform the action within a Maintenix session. Subsequent attempts of the same action in the same session do not require authentication.' ;
  COMMENT ON COLUMN UTL_ACTION_ROLE_PARM.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
ALTER TABLE UTL_ACTION_ROLE_PARM ADD CONSTRAINT PK_UTL_ACTION_ROLE_PARM PRIMARY KEY ( ROLE_ID, PARM_NAME ) ;


CREATE TABLE UTL_ACTION_USER_PARM
  (
    USER_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    PARM_NAME         VARCHAR2 (500) NOT NULL DEFERRABLE ,
    PARM_VALUE        VARCHAR2 (1000) ,
    SESSION_AUTH_BOOL NUMBER (1) DEFAULT 0 ,
    UTL_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD          NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DT       DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER     VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_ACTION_USER_PARM ADD CHECK ( SESSION_AUTH_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_ACTION_USER_PARM ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_ACTION_USER_PARM ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_ACTION_USER_PARM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_ACTION_USER_PARM
IS
  'This table lists the user specific action configuration parameter values.  The action configuration parameter must be defined in the UTL_ACTION_CONFIG_PARM table first.' ;
  COMMENT ON COLUMN UTL_ACTION_USER_PARM.USER_ID
IS
  'User id' ;
  COMMENT ON COLUMN UTL_ACTION_USER_PARM.PARM_NAME
IS
  'The name of the action configuration parameter.' ;
  COMMENT ON COLUMN UTL_ACTION_USER_PARM.PARM_VALUE
IS
  'The value of the action configuration parameter.' ;
  COMMENT ON COLUMN UTL_ACTION_USER_PARM.SESSION_AUTH_BOOL
IS
  'If this flag is set to TRUE, the Authentication Frequency Reduction feature is enabled for this user. For each user action that requires authentication, this user has to authenticate himself/herself only for the first time that he/she performs the action within a Maintenix session. Subsequent attempts of the same action in the same session do not require authentication.' ;
  COMMENT ON COLUMN UTL_ACTION_USER_PARM.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
  COMMENT ON COLUMN UTL_ACTION_USER_PARM.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN UTL_ACTION_USER_PARM.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN UTL_ACTION_USER_PARM.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN UTL_ACTION_USER_PARM.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE UTL_ACTION_USER_PARM ADD CONSTRAINT PK_UTL_ACTION_USER_PARM PRIMARY KEY ( USER_ID, PARM_NAME ) ;


CREATE TABLE UTL_ALERT
  (
    ALERT_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    ALERT_TYPE_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    PRIORITY        NUMBER (5) NOT NULL DEFERRABLE ,
    ALERT_TIMESTAMP TIMESTAMP NOT NULL DEFERRABLE ,
    QUEUE_ID        NUMBER (10) ,
    ALERT_STATUS_CD VARCHAR2 (8) NOT NULL DEFERRABLE ,
    PARM_HASH       VARCHAR2 (32) NOT NULL DEFERRABLE ,
    UTL_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_ALERT ADD CHECK ( ALERT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_ALERT ADD CHECK ( ALERT_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_ALERT ADD CHECK ( QUEUE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_ALERT ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_ALERT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_ALERT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_ALERT
IS
  'Defines any user alerts that have been generated by the application.' ;
  COMMENT ON COLUMN UTL_ALERT.ALERT_ID
IS
  'Unique alert identifier number generated from ALERT_ID_SEQ.' ;
  COMMENT ON COLUMN UTL_ALERT.ALERT_TYPE_ID
IS
  'Alert type.' ;
  COMMENT ON COLUMN UTL_ALERT.PRIORITY
IS
  'Alert priority level with higher numbers having a higher priority.' ;
  COMMENT ON COLUMN UTL_ALERT.ALERT_TIMESTAMP
IS
  'Timestamp when the alert was generated.' ;
  COMMENT ON COLUMN UTL_ALERT.QUEUE_ID
IS
  'The id of the inbound integration message that triggered the alert (if any).' ;
  COMMENT ON COLUMN UTL_ALERT.ALERT_STATUS_CD
IS
  'This is the current alert status. This is a foreign key to UTL_ALERT_STATUS.' ;
  COMMENT ON COLUMN UTL_ALERT.PARM_HASH
IS
  'An MD5 hash of an alert''s parameter values.' ;
  COMMENT ON COLUMN UTL_ALERT.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
  COMMENT ON COLUMN UTL_ALERT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN UTL_ALERT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN UTL_ALERT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN UTL_ALERT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_STATUSTYPEHASH_UTLALERT ON UTL_ALERT
    (
      ALERT_STATUS_CD ASC ,
      ALERT_TYPE_ID ASC ,
      PARM_HASH ASC
    ) ;
  CREATE INDEX IX_INBOUNDQUEUE_UTLALERT_FK ON UTL_ALERT
    ( QUEUE_ID ASC
    ) ;
ALTER TABLE UTL_ALERT ADD CONSTRAINT PK_UTL_ALERT PRIMARY KEY ( ALERT_ID ) ;


CREATE TABLE UTL_ALERT_LOG
  (
    ALERT_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    USER_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    ALERT_LOG_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    LOG_DT         DATE NOT NULL DEFERRABLE ,
    USER_NOTE      VARCHAR2 (4000) ,
    SYSTEM_NOTE    VARCHAR2 (4000) ,
    UTL_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_ALERT_LOG ADD CHECK ( ALERT_LOG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_ALERT_LOG ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_ALERT_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_ALERT_LOG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_ALERT_LOG
IS
  'This is a new table that logs notes for an alert.' ;
  COMMENT ON COLUMN UTL_ALERT_LOG.ALERT_ID
IS
  'This is a foreign key to UTL_ALERT. This is part of the primary key.' ;
  COMMENT ON COLUMN UTL_ALERT_LOG.USER_ID
IS
  'This is the user who initiated the added the note.' ;
  COMMENT ON COLUMN UTL_ALERT_LOG.ALERT_LOG_ID
IS
  'This is generated from a sequence. This is part of the primary key.' ;
  COMMENT ON COLUMN UTL_ALERT_LOG.LOG_DT
IS
  'This is the date the note was logged.' ;
  COMMENT ON COLUMN UTL_ALERT_LOG.USER_NOTE
IS
  ' This is the user entered note.' ;
  COMMENT ON COLUMN UTL_ALERT_LOG.SYSTEM_NOTE
IS
  'This is the system generated note.' ;
  COMMENT ON COLUMN UTL_ALERT_LOG.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record.' ;
  COMMENT ON COLUMN UTL_ALERT_LOG.RSTAT_CD
IS
  'Audit column.' ;
  COMMENT ON COLUMN UTL_ALERT_LOG.CREATION_DT
IS
  'Audit column.' ;
  COMMENT ON COLUMN UTL_ALERT_LOG.REVISION_DT
IS
  'Audit column.' ;
  COMMENT ON COLUMN UTL_ALERT_LOG.REVISION_DB_ID
IS
  'Audit column.' ;
  COMMENT ON COLUMN UTL_ALERT_LOG.REVISION_USER
IS
  'Audit column.' ;
ALTER TABLE UTL_ALERT_LOG ADD CONSTRAINT PK_UTL_ALERT_LOG PRIMARY KEY ( ALERT_ID, ALERT_LOG_ID ) ;


CREATE TABLE UTL_ALERT_PARM
  (
    ALERT_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    PARM_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    PARM_ORD         NUMBER (4) ,
    PARM_TYPE        VARCHAR2 (240) ,
    PARM_VALUE_SDESC VARCHAR2 (1000) ,
    PARM_VALUE       VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    UTL_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_ALERT_PARM ADD CHECK ( PARM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_ALERT_PARM ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_ALERT_PARM ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_ALERT_PARM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN UTL_ALERT_PARM.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN UTL_ALERT_PARM.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN UTL_ALERT_PARM.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN UTL_ALERT_PARM.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE UTL_ALERT_PARM ADD CONSTRAINT "pk_UTL_ALERT_PARM" PRIMARY KEY ( ALERT_ID, PARM_ID ) ;


CREATE TABLE UTL_ALERT_STATUS
  (
    ALERT_STATUS_CD VARCHAR2 (8) NOT NULL DEFERRABLE ,
    DESC_SDESC      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC      VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    UTL_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_ALERT_STATUS ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_ALERT_STATUS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_ALERT_STATUS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_ALERT_STATUS
IS
  'This is a new table that stores the alert statuses.' ;
  COMMENT ON COLUMN UTL_ALERT_STATUS.ALERT_STATUS_CD
IS
  'This is the alert status. This is the primary key.' ;
  COMMENT ON COLUMN UTL_ALERT_STATUS.DESC_SDESC
IS
  'This is the short description.' ;
  COMMENT ON COLUMN UTL_ALERT_STATUS.DESC_LDESC
IS
  'This is the long description.' ;
  COMMENT ON COLUMN UTL_ALERT_STATUS.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record.' ;
  COMMENT ON COLUMN UTL_ALERT_STATUS.RSTAT_CD
IS
  'Audit column.' ;
  COMMENT ON COLUMN UTL_ALERT_STATUS.CREATION_DT
IS
  'Audit column.' ;
  COMMENT ON COLUMN UTL_ALERT_STATUS.REVISION_DT
IS
  'Audit column.' ;
  COMMENT ON COLUMN UTL_ALERT_STATUS.REVISION_DB_ID
IS
  'Audit column.' ;
  COMMENT ON COLUMN UTL_ALERT_STATUS.REVISION_USER
IS
  'Audit column.' ;
ALTER TABLE UTL_ALERT_STATUS ADD CONSTRAINT PK_UTL_ALERT_STATUS PRIMARY KEY ( ALERT_STATUS_CD ) ;


CREATE TABLE UTL_ALERT_STATUS_LOG
  (
    ALERT_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    USER_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    ALERT_STATUS_CD VARCHAR2 (8) NOT NULL DEFERRABLE ,
    LOG_DT          DATE NOT NULL DEFERRABLE ,
    UTL_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_ALERT_STATUS_LOG ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_ALERT_STATUS_LOG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_ALERT_STATUS_LOG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_ALERT_STATUS_LOG
IS
  'This is a new table that logs the status changes for an alert.' ;
  COMMENT ON COLUMN UTL_ALERT_STATUS_LOG.ALERT_ID
IS
  'This is a foreign key to UTL_ALERT. This is part of the primary key.' ;
  COMMENT ON COLUMN UTL_ALERT_STATUS_LOG.USER_ID
IS
  'This is the user who initiated the status change.' ;
  COMMENT ON COLUMN UTL_ALERT_STATUS_LOG.ALERT_STATUS_CD
IS
  'This is a foreign key to UTL_ALERT_STATUS. This is part of the primary key.' ;
  COMMENT ON COLUMN UTL_ALERT_STATUS_LOG.LOG_DT
IS
  'This is the date of the status change.' ;
  COMMENT ON COLUMN UTL_ALERT_STATUS_LOG.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record.' ;
  COMMENT ON COLUMN UTL_ALERT_STATUS_LOG.RSTAT_CD
IS
  'Audit column.' ;
  COMMENT ON COLUMN UTL_ALERT_STATUS_LOG.CREATION_DT
IS
  'Audit column.' ;
  COMMENT ON COLUMN UTL_ALERT_STATUS_LOG.REVISION_DT
IS
  'Audit column.' ;
  COMMENT ON COLUMN UTL_ALERT_STATUS_LOG.REVISION_DB_ID
IS
  'Audit column.' ;
  COMMENT ON COLUMN UTL_ALERT_STATUS_LOG.REVISION_USER
IS
  'Audit column.' ;
ALTER TABLE UTL_ALERT_STATUS_LOG ADD CONSTRAINT PK_UTL_ALERT_STATUS_LOG PRIMARY KEY ( ALERT_ID, ALERT_STATUS_CD ) ;


CREATE TABLE UTL_ALERT_TYPE
  (
    ALERT_TYPE_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    ALERT_NAME          VARCHAR2 (200) NOT NULL DEFERRABLE ,
    ALERT_LDESC         VARCHAR2 (4000) ,
    NOTIFY_CD           VARCHAR2 (8) NOT NULL DEFERRABLE ,
    NOTIFY_CLASS        VARCHAR2 (500) ,
    CATEGORY            VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    MESSAGE             VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    KEY_BOOL            NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    PRIORITY            NUMBER (5) NOT NULL DEFERRABLE ,
    PRIORITY_CALC_CLASS VARCHAR2 (500) ,
    ACTIVE_BOOL         NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    UTL_ID              NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_ALERT_TYPE ADD CHECK ( ALERT_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_ALERT_TYPE ADD CHECK ( KEY_BOOL    IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_ALERT_TYPE ADD CHECK ( ACTIVE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_ALERT_TYPE ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN UTL_ALERT_TYPE.ALERT_TYPE_ID
IS
  'PK for the alert type.' ;
  COMMENT ON COLUMN UTL_ALERT_TYPE.ALERT_NAME
IS
  'Name of the alert type.' ;
  COMMENT ON COLUMN UTL_ALERT_TYPE.ALERT_LDESC
IS
  'Description of the alert type.' ;
  COMMENT ON COLUMN UTL_ALERT_TYPE.NOTIFY_CD
IS
  'Alert type notification code.' ;
  COMMENT ON COLUMN UTL_ALERT_TYPE.NOTIFY_CLASS
IS
  'Notification plugin class name.' ;
  COMMENT ON COLUMN UTL_ALERT_TYPE.CATEGORY
IS
  'Category of the alert type.' ;
  COMMENT ON COLUMN UTL_ALERT_TYPE.MESSAGE
IS
  'Alert type message skeleton.' ;
  COMMENT ON COLUMN UTL_ALERT_TYPE.KEY_BOOL
IS
  'Indicates if the message uses i18n.' ;
  COMMENT ON COLUMN UTL_ALERT_TYPE.PRIORITY
IS
  'Priority of the alert type.' ;
  COMMENT ON COLUMN UTL_ALERT_TYPE.PRIORITY_CALC_CLASS
IS
  'Priority calculator plugin class name.' ;
  COMMENT ON COLUMN UTL_ALERT_TYPE.ACTIVE_BOOL
IS
  'Indicates if the alert type if ON/OFF.' ;
ALTER TABLE UTL_ALERT_TYPE ADD CONSTRAINT PK_UTL_ALERT_TYPE PRIMARY KEY ( ALERT_TYPE_ID ) ;


CREATE TABLE UTL_ALERT_TYPE_ROLE
  (
    ALERT_TYPE_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ROLE_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    UTL_ID        NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_ALERT_TYPE_ROLE ADD CHECK ( ALERT_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_ALERT_TYPE_ROLE ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_ALERT_TYPE_ROLE ADD CONSTRAINT PK_UTL_ALERT_TYPE_ROLE PRIMARY KEY ( ALERT_TYPE_ID, ROLE_ID ) ;


CREATE TABLE UTL_API_DEFINITION
  (
    API_ID         NUMBER NOT NULL DEFERRABLE ,
    API_CD         VARCHAR2 (20) NOT NULL DEFERRABLE ,
    API_NAME       VARCHAR2 (200) NOT NULL DEFERRABLE ,
    API_LDESC      VARCHAR2 (4000) ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO    NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_API_DEFINITION ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_API_DEFINITION ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_API_DEFINITION ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_API_DEFINITION ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_API_DEFINITION
IS
  'This table defines an existing API.  The Maintenix API contains a set of distinct modules (e.g. Flight, ELA, etc) that have the ability to send specific notifications.  Each API that exposes outbound notifications requires an entry in this table.' ;
ALTER TABLE UTL_API_DEFINITION ADD CONSTRAINT PK_UTL_API_DEFINITION PRIMARY KEY ( API_ID ) ;


CREATE TABLE UTL_API_NOTIF_ASSIGN
  (
    API_VERSION_ID      NUMBER NOT NULL DEFERRABLE ,
    NOTIF_DEFINITION_ID NUMBER NOT NULL DEFERRABLE ,
    NOTIF_EVENT_TYPE_ID NUMBER NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO         NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_API_NOTIF_ASSIGN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_API_NOTIF_ASSIGN ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_API_NOTIF_ASSIGN ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_API_NOTIF_ASSIGN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_API_NOTIF_ASSIGN
IS
  'This table maps Notifications to an API.  Each API version has specific Notification versions assigned to it.
Example:
API v1
API v2
Notification 1 v1
Notification 1 v2
Notification 2 v1
This table would contain rows that assign the specific versions of the Notificiations to the API versions.
API v1 -> Notification 1 v1
API v2 -> Notification 1 v2, Notification 2 v1' ;
ALTER TABLE UTL_API_NOTIF_ASSIGN ADD CONSTRAINT PK_UTL_API_NOTIF_ASSIGN PRIMARY KEY ( API_VERSION_ID, NOTIF_DEFINITION_ID ) ;


CREATE TABLE UTL_API_VERSION
  (
    API_VERSION_ID   NUMBER NOT NULL DEFERRABLE ,
    API_ID           NUMBER NOT NULL DEFERRABLE ,
    API_VERSION_NAME VARCHAR2 (100) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO      NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_API_VERSION ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_API_VERSION ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_API_VERSION ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_API_VERSION ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_API_VERSION
IS
  'This table defines the supported versions of an API defined in UTL_API_DEFINITION.  Each supported version of an API requires a corresponding entry in this table.' ;
ALTER TABLE UTL_API_VERSION ADD CONSTRAINT PK_UTL_API_VERSION PRIMARY KEY ( API_VERSION_ID ) ;


CREATE TABLE UTL_API_VERSION_CONFIG
  (
    API_ID         NUMBER NOT NULL DEFERRABLE ,
    API_VERSION_ID NUMBER NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO    NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_API_VERSION_CONFIG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_API_VERSION_CONFIG ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_API_VERSION_CONFIG ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_API_VERSION_CONFIG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_API_VERSION_CONFIG
IS
  'This table defines the registration for which version of the API will be used.  For each API, only a single version can be active at a time.
For example, the following API versions exist:
Flight v1, Flight v2, Flight v3, ELA v1, ELA v2
This configuration table would be used to determine the active version of the API that is being used, for example Flight v2, and ELA v2' ;
ALTER TABLE UTL_API_VERSION_CONFIG ADD CONSTRAINT PK_UTL_API_VERSION_CONFIG PRIMARY KEY ( API_ID ) ;


CREATE TABLE UTL_CACHE
  (
    ROOT_NODE_NAME   VARCHAR2 (40) NOT NULL ,
    NODE_NAME        VARCHAR2 (40) ,
    LAST_MODIFIED_DT TIMESTAMP NOT NULL
  ) ;
COMMENT ON TABLE UTL_CACHE
IS
  'defines revision time against tables which are cached on the application server' ;
  COMMENT ON COLUMN UTL_CACHE.ROOT_NODE_NAME
IS
  'the root cache node name as defined in CacheFactory' ;
  COMMENT ON COLUMN UTL_CACHE.NODE_NAME
IS
  'the cache node name as defined in CacheFactory' ;
  COMMENT ON COLUMN UTL_CACHE.LAST_MODIFIED_DT
IS
  'the last modification date for the data' ;
CREATE UNIQUE INDEX IX_UTLCACHE_NODE ON UTL_CACHE
  (
    ROOT_NODE_NAME ASC , NODE_NAME ASC
  )
  ;


CREATE TABLE UTL_CONFIG_PARM
  (
    PARM_NAME        VARCHAR2 (500) NOT NULL DEFERRABLE ,
    PARM_TYPE        VARCHAR2 (40) NOT NULL DEFERRABLE ,
    PARM_VALUE       VARCHAR2 (1000) ,
    ENCRYPT_BOOL     NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    PARM_DESC        VARCHAR2 (4000) ,
    CONFIG_TYPE      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DEFAULT_VALUE    VARCHAR2 (1000) ,
    ALLOW_VALUE_DESC VARCHAR2 (1000) ,
    MAND_CONFIG_BOOL NUMBER (1) DEFAULT 0 ,
    CATEGORY         VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    MODIFIED_IN      VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    REPL_APPROVED    NUMBER (1) DEFAULT 0 ,
    UTL_ID           NUMBER (10)
  ) ;
ALTER TABLE UTL_CONFIG_PARM ADD CHECK ( ENCRYPT_BOOL     IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_CONFIG_PARM ADD CHECK ( MAND_CONFIG_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_CONFIG_PARM ADD CHECK ( REPL_APPROVED    IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_CONFIG_PARM ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_CONFIG_PARM
IS
  'This table allows storage of configuration parameters (name=value) in the database with sub-division by code and optional encrypted values. It can be used to configure the system for different users and roles through the referentially linked UTL_USER_PARM and UTL_ROLE_PARM tables.' ;
  COMMENT ON COLUMN UTL_CONFIG_PARM.PARM_NAME
IS
  'Configuration parameter name.' ;
  COMMENT ON COLUMN UTL_CONFIG_PARM.PARM_TYPE
IS
  'Configuration parameter type code used to sub-divide configuration parameter into functional groups.' ;
  COMMENT ON COLUMN UTL_CONFIG_PARM.PARM_VALUE
IS
  'Configuration parameter value.' ;
  COMMENT ON COLUMN UTL_CONFIG_PARM.ENCRYPT_BOOL
IS
  'Specified whether the parameter value is stored in an encrypted format.  Encrypted values take the form "{3DES}kja//adfj" where the value to the right of the {3DES} tag is Base64 encoded.' ;
  COMMENT ON COLUMN UTL_CONFIG_PARM.PARM_DESC
IS
  'Configuration parameter long description.' ;
  COMMENT ON COLUMN UTL_CONFIG_PARM.CONFIG_TYPE
IS
  'At what level the Parameter will be configured.  SYSTEM - system-level only, ROLE - system or Role-level, ROLE/USER - system, Role.
' ;
  COMMENT ON COLUMN UTL_CONFIG_PARM.DEFAULT_VALUE
IS
  'The default value for mandatory Parameters.  PARM_VALUE will be set to this value by default.  If no default exists "<none>" will appear in this field.' ;
  COMMENT ON COLUMN UTL_CONFIG_PARM.ALLOW_VALUE_DESC
IS
  'A description of the allowable values (including format) that may be set in PARM_VALUE.' ;
  COMMENT ON COLUMN UTL_CONFIG_PARM.MAND_CONFIG_BOOL
IS
  'If the Configuration Parameter must be defined in the system (I.e. a PARM_VALUE specified). Note that if a DEFAULT_VALUE exists, it will be set in the PARM_VALUE field.' ;
  COMMENT ON COLUMN UTL_CONFIG_PARM.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
ALTER TABLE UTL_CONFIG_PARM ADD CONSTRAINT PK_UTL_CONFIG_PARM PRIMARY KEY ( PARM_NAME, PARM_TYPE ) ;


CREATE TABLE UTL_CONTEXT_SEQUENCE
  (
    SEQUENCE_CD VARCHAR2 (20) NOT NULL DEFERRABLE ,
    CONTEXT_KEY VARCHAR2 (40) NOT NULL DEFERRABLE ,
    NEXT_VALUE  NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_CONTEXT_SEQUENCE ADD CHECK ( NEXT_VALUE BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_CONTEXT_SEQUENCE
IS
  'This table is used to store dynamically generated context-sensitive sequences for the application.
Maintenix will automatically populate this table so there is no need to migrate data.  This table should be empty when creating new databases.' ;
  COMMENT ON COLUMN UTL_CONTEXT_SEQUENCE.SEQUENCE_CD
IS
  'Sequence code identifier.' ;
  COMMENT ON COLUMN UTL_CONTEXT_SEQUENCE.CONTEXT_KEY
IS
  'Unique context for the sequence code.' ;
  COMMENT ON COLUMN UTL_CONTEXT_SEQUENCE.NEXT_VALUE
IS
  'The next value to be used in the sequence.' ;
ALTER TABLE UTL_CONTEXT_SEQUENCE ADD CONSTRAINT "pk_UTL_CONTEXT_SEQUENCE" PRIMARY KEY ( SEQUENCE_CD, CONTEXT_KEY ) ;


CREATE TABLE UTL_CURRENT_VERSION
  (
    COMPONENT_NAME     VARCHAR2 (40) NOT NULL DEFERRABLE ,
    VERSION            VARCHAR2 (20) DEFAULT '1.0.0.0' NOT NULL DEFERRABLE ,
    SERVICEPACK_VER    NUMBER (10) DEFAULT 0 NOT NULL DEFERRABLE ,
    UPDATE_VER         NUMBER (10) DEFAULT 0 NOT NULL DEFERRABLE ,
    SHORT_VERSION_NAME VARCHAR2 (40) ,
    FULL_VERSION_NAME  VARCHAR2 (40) NOT NULL DEFERRABLE ,
    BUILD_LABEL        VARCHAR2 (100 CHAR) ,
    BUILD_LOCATION     VARCHAR2 (80) ,
    BUILD_REVISION     VARCHAR2 (50 CHAR) ,
    INSTALL_DT         DATE ,
    INSTALL_SDESC      VARCHAR2 (80)
  ) ;
ALTER TABLE UTL_CURRENT_VERSION ADD CHECK ( (REPLACE(REPLACE(TRANSLATE(VERSION, '123456789', '000000000'), '00', '0'), '00', '0') = '0.0.0.0')) DEFERRABLE ;
ALTER TABLE UTL_CURRENT_VERSION ADD CHECK ( SERVICEPACK_VER BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_CURRENT_VERSION ADD CHECK ( UPDATE_VER BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN UTL_CURRENT_VERSION.COMPONENT_NAME
IS
  'The name of the component that was installed.' ;
  COMMENT ON COLUMN UTL_CURRENT_VERSION.VERSION
IS
  'The version for the component in the 0.0.0.0 format.' ;
  COMMENT ON COLUMN UTL_CURRENT_VERSION.SERVICEPACK_VER
IS
  'The service pack version for the component.  This should be set to 0 if no service pack is installed.' ;
  COMMENT ON COLUMN UTL_CURRENT_VERSION.UPDATE_VER
IS
  'The update version for the component.  This should be set to 0 if no update is installed.' ;
  COMMENT ON COLUMN UTL_CURRENT_VERSION.SHORT_VERSION_NAME
IS
  'The short version label is an alphanumeric name that combines the vesion code, service pack id, and update id.  The short label should exclude characters such as periods that cannot be used in folder names.' ;
  COMMENT ON COLUMN UTL_CURRENT_VERSION.FULL_VERSION_NAME
IS
  'The full version label is an alphanumeric name that combines the vesion code, service pack id, and update id.  The full label can include additional characters such as periods since it is not used for folder names.' ;
  COMMENT ON COLUMN UTL_CURRENT_VERSION.BUILD_LABEL
IS
  'The build label that was generated during the build of this component.' ;
  COMMENT ON COLUMN UTL_CURRENT_VERSION.BUILD_LOCATION
IS
  'The build location that was generated during the build of this component.' ;
  COMMENT ON COLUMN UTL_CURRENT_VERSION.BUILD_REVISION
IS
  'The build revision that was generated during the build of this component.' ;
  COMMENT ON COLUMN UTL_CURRENT_VERSION.INSTALL_DT
IS
  'The date and time when this component was installed.' ;
  COMMENT ON COLUMN UTL_CURRENT_VERSION.INSTALL_SDESC
IS
  'The descrition of the method in which this component was installed.' ;
ALTER TABLE UTL_CURRENT_VERSION ADD CONSTRAINT PK_UTL_CURRENT_VERSION PRIMARY KEY ( COMPONENT_NAME ) ;


CREATE TABLE UTL_ERROR_LOG
  (
    SOURCE_SDESC    VARCHAR2 (500) NOT NULL ,
    EXCEPTION_SDESC VARCHAR2 (500) NOT NULL ,
    ERROR_CD        VARCHAR2 (80) ,
    ERROR_SDESC     VARCHAR2 (1000) ,
    LOG_DT          DATE NOT NULL
  ) ;


CREATE TABLE UTL_FILE_IMPORT
  (
    FILE_IMPORT_ID         NUMBER (10) NOT NULL ,
    FILE_IMPORT_DB_ID      NUMBER (10) NOT NULL ,
    FILE_NAME              VARCHAR2 (255) ,
    FILE_ACTION_TYPE_CD    VARCHAR2 (30) NOT NULL ,
    FILE_ACTION_TYPE_DB_ID NUMBER (10) NOT NULL ,
    STATUS_CD              VARCHAR2 (20) NOT NULL ,
    STATUS_DB_ID           NUMBER (10) NOT NULL ,
    HR_DB_ID               NUMBER (10) NOT NULL ,
    HR_ID                  NUMBER (10) NOT NULL ,
    RSTAT_CD               NUMBER (3) NOT NULL ,
    REVISION_NO            NUMBER (10) NOT NULL ,
    CTRL_DB_ID             NUMBER (10) NOT NULL ,
    CREATION_DT            DATE NOT NULL ,
    REVISION_DT            DATE NOT NULL ,
    REVISION_DB_ID         NUMBER (10) NOT NULL ,
    REVISION_USER          VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE UTL_FILE_IMPORT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
COMMENT ON TABLE UTL_FILE_IMPORT
IS
  'This table contain the informaion about the imported file.' ;
  COMMENT ON COLUMN UTL_FILE_IMPORT.FILE_IMPORT_ID
IS
  'Unique id of the imported file' ;
  COMMENT ON COLUMN UTL_FILE_IMPORT.FILE_IMPORT_DB_ID
IS
  'Db id of the imported file ' ;
  COMMENT ON COLUMN UTL_FILE_IMPORT.FILE_NAME
IS
  'Name of the imported file' ;
  COMMENT ON COLUMN UTL_FILE_IMPORT.FILE_ACTION_TYPE_CD
IS
  'Designated action type for the file. This will uniquely identify the action to be performed on the file content.  Foreign key reference to REF_BULK_LOAD_FILE_ACTION' ;
  COMMENT ON COLUMN UTL_FILE_IMPORT.FILE_ACTION_TYPE_DB_ID
IS
  'The file action type db id. Foreign key reference to REF_BULK_LOAD_FILE_ACTION' ;
  COMMENT ON COLUMN UTL_FILE_IMPORT.STATUS_CD
IS
  'Current state of the file being imported. Valid States are NEW/PROCESSING/ERROR/FINISHED. Foreign key reference to REF_BULK_LOAD_STATUS' ;
  COMMENT ON COLUMN UTL_FILE_IMPORT.STATUS_DB_ID
IS
  'The file action type db id. Foreign key reference to REF_BULK_LOAD_STATUS' ;
  COMMENT ON COLUMN UTL_FILE_IMPORT.HR_DB_ID
IS
  'The hr db id reference of the user who uploaded the file' ;
  COMMENT ON COLUMN UTL_FILE_IMPORT.HR_ID
IS
  'The hr id reference of the user who uploaded the file' ;
  COMMENT ON COLUMN UTL_FILE_IMPORT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN UTL_FILE_IMPORT.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN UTL_FILE_IMPORT.CTRL_DB_ID
IS
  'The identifier of the database that owns the record. The meaning of this column may be specific to the entity.' ;
  COMMENT ON COLUMN UTL_FILE_IMPORT.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN UTL_FILE_IMPORT.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN UTL_FILE_IMPORT.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN UTL_FILE_IMPORT.REVISION_USER
IS
  'The name of the user that last updated the record' ;
ALTER TABLE UTL_FILE_IMPORT ADD CONSTRAINT PK_UTL_FILE_IMPORT PRIMARY KEY ( FILE_IMPORT_ID, FILE_IMPORT_DB_ID ) ;


CREATE TABLE UTL_HA_SINGLETON_SERVICE
  (
    PROCESS_NAME   VARCHAR2 (40) NOT NULL DEFERRABLE ,
    SERVER_ID      VARCHAR2 (100) ,
    TIMEOUT        NUMBER (5) NOT NULL DEFERRABLE ,
    HEARTBEAT_DATE TIMESTAMP ,
    UTL_ID         NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_HA_SINGLETON_SERVICE ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN UTL_HA_SINGLETON_SERVICE.PROCESS_NAME
IS
  'This is the name of the HA singleton service.' ;
  COMMENT ON COLUMN UTL_HA_SINGLETON_SERVICE.SERVER_ID
IS
  'This is the unique ID of the server that currently is running the HA Singleton Service.' ;
  COMMENT ON COLUMN UTL_HA_SINGLETON_SERVICE.TIMEOUT
IS
  'This is the amount of time (in seconds) that has to elapse since the last heartbeat date before the other servers consider the currently running service "dead" (possibly due to server crash).' ;
  COMMENT ON COLUMN UTL_HA_SINGLETON_SERVICE.HEARTBEAT_DATE
IS
  'This is the last time that the Singleton Service has communicated that it is alive and running.' ;
ALTER TABLE UTL_HA_SINGLETON_SERVICE ADD CONSTRAINT PK_UTL_HA_SINGLETON_SERVICE PRIMARY KEY ( PROCESS_NAME ) ;


CREATE TABLE UTL_JOB
  (
    JOB_CD              VARCHAR2 (100) NOT NULL DEFERRABLE ,
    JOB_NAME            VARCHAR2 (200) NOT NULL DEFERRABLE ,
    START_TIME          VARCHAR2 (8) ,
    START_DELAY         NUMBER (5) ,
    REPEAT_INTERVAL     NUMBER (10) ,
    ACTIVE_BOOL         NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    STATUS_CD           VARCHAR2 (10) DEFAULT 'IDLE' NOT NULL DEFERRABLE ,
    SCHEDULE_DATE       DATE ,
    LAST_START_DT       DATE ,
    LAST_SUCCESS_END_DT DATE ,
    LAST_ERROR_END_DT   DATE ,
    LAST_ERROR          VARCHAR2 (4000) ,
    UTL_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    JOB_TYPE            VARCHAR2 (40) DEFAULT 'MAINTENIX' NOT NULL DEFERRABLE ,
    PROGRAM_NAME        VARCHAR2 (200) ,
    PROGRAM_TYPE        VARCHAR2 (40) ,
    REPEAT_EXPRESSION   VARCHAR2 (200)
  ) ;
ALTER TABLE UTL_JOB ADD CHECK ( ACTIVE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_JOB ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_JOB ADD CHECK ( JOB_TYPE     IN ('MAINTENIX','ORACLE')) DEFERRABLE ;
ALTER TABLE UTL_JOB ADD CHECK ( PROGRAM_TYPE IN ('plsql_block','stored_procedure','executable')) DEFERRABLE ;
COMMENT ON TABLE UTL_JOB
IS
  'This table lists all of the application scheduled jobs that execute on the application server based on the specified scheduling parameters.' ;
  COMMENT ON COLUMN UTL_JOB.JOB_CD
IS
  'Job code name that is reference in source code usually in uppercase with underscores (e.g. MXCOMMON_CLEAN_REPORT_FILES).' ;
  COMMENT ON COLUMN UTL_JOB.JOB_NAME
IS
  'Short descriptive name for the job.' ;
  COMMENT ON COLUMN UTL_JOB.START_TIME
IS
  'Start time in the day for a job in either HH:MM or HH:MM:SS format.  Only specified for jobs that are to start at a specific time during the day and any repeat interval time thereafter.' ;
  COMMENT ON COLUMN UTL_JOB.START_DELAY
IS
  'Start delay in seconds for a repeat job to wait after the job controller is started before executing for the first time.' ;
  COMMENT ON COLUMN UTL_JOB.REPEAT_INTERVAL
IS
  'Repeat interval in seconds between job executions.' ;
  COMMENT ON COLUMN UTL_JOB.ACTIVE_BOOL
IS
  'Boolean indicating whether or not the job is currently active.' ;
  COMMENT ON COLUMN UTL_JOB.STATUS_CD
IS
  'This holds the status of the job.' ;
  COMMENT ON COLUMN UTL_JOB.SCHEDULE_DATE
IS
  'Timestamp indicating when the job scheduling parameters (START_TIME, REPEAT_INTERVAL, ACTIVE_BOOL) were last updated.  This value is populated by an update trigger and indicates to the job controller that a job needs to be re-scheduled.' ;
  COMMENT ON COLUMN UTL_JOB.LAST_START_DT
IS
  'Start time of the last run.' ;
  COMMENT ON COLUMN UTL_JOB.LAST_SUCCESS_END_DT
IS
  'End time of the last successful run.' ;
  COMMENT ON COLUMN UTL_JOB.LAST_ERROR_END_DT
IS
  'End time of the last failed run.' ;
  COMMENT ON COLUMN UTL_JOB.LAST_ERROR
IS
  'Most recent error.' ;
  COMMENT ON COLUMN UTL_JOB.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
  COMMENT ON COLUMN UTL_JOB.JOB_TYPE
IS
  'Type of the job. Oracle or Maintenix. Maintenix jobs use the existing job framework. Oracle jobs can be scheduled through the oracle job engine.' ;
  COMMENT ON COLUMN UTL_JOB.PROGRAM_NAME
IS
  'Holds the name of the program to be executed. This can be a plsql block, a procedure or an executable dependent on the selected program_type.' ;
  COMMENT ON COLUMN UTL_JOB.PROGRAM_TYPE
IS
  'The type of oracle job to be executed. This can either be plsql_block , stored_procedure or executable.' ;
  COMMENT ON COLUMN UTL_JOB.REPEAT_EXPRESSION
IS
  'A repeat expression can be used to use oracle scheduling expressions or if scheduling via a third party scheduling language e.g. CRON' ;
ALTER TABLE UTL_JOB ADD CONSTRAINT PK_UTL_JOB PRIMARY KEY ( JOB_CD ) ;


CREATE TABLE UTL_MENU_ARG
  (
    ARG_CD       VARCHAR2 (40) NOT NULL DEFERRABLE ,
    ENCRYPT_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ARG_DESC     VARCHAR2 (400) ,
    UTL_ID       NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_MENU_ARG ADD CHECK ( ENCRYPT_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_MENU_ARG ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN UTL_MENU_ARG.ARG_CD
IS
  'Argument code (ie. aTaskDbId).' ;
  COMMENT ON COLUMN UTL_MENU_ARG.ENCRYPT_BOOL
IS
  'Whether this argument should be encrypted.' ;
  COMMENT ON COLUMN UTL_MENU_ARG.ARG_DESC
IS
  'Argument long description.' ;
  COMMENT ON COLUMN UTL_MENU_ARG.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
ALTER TABLE UTL_MENU_ARG ADD CONSTRAINT PK_UTL_MENU_ARG PRIMARY KEY ( ARG_CD ) ;


CREATE TABLE UTL_MENU_GROUP
  (
    GROUP_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    GROUP_NAME     VARCHAR2 (40) NOT NULL DEFERRABLE ,
    GROUP_ORDER    NUMBER (5) NOT NULL DEFERRABLE ,
    ROLE_ID        NUMBER (10) ,
    ALL_USERS_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    UTL_ID         NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_MENU_GROUP ADD CHECK ( GROUP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_MENU_GROUP ADD CHECK ( GROUP_ORDER BETWEEN 0 AND 99999) DEFERRABLE ;
ALTER TABLE UTL_MENU_GROUP ADD CHECK ( ALL_USERS_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_MENU_GROUP ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_MENU_GROUP
IS
  'This table lists all of the available web application menu groups.  Menu groups are used as containers for menu items.' ;
  COMMENT ON COLUMN UTL_MENU_GROUP.GROUP_ID
IS
  'An internally generated ID used to uniquely identify the group.  Generated from GROUP_ID_SEQ.' ;
  COMMENT ON COLUMN UTL_MENU_GROUP.GROUP_NAME
IS
  'Used to organize links into categories. These groupings may be shown as header bands in the user interface.  The value is displayed to the  user in the web interface.' ;
  COMMENT ON COLUMN UTL_MENU_GROUP.GROUP_ORDER
IS
  'Ordering number indicating what order the menu groups will appear in the web application menu bar.' ;
  COMMENT ON COLUMN UTL_MENU_GROUP.ALL_USERS_BOOL
IS
  'If this boolean value is set to 1 then all Maintenix users can access the listed menu group.' ;
  COMMENT ON COLUMN UTL_MENU_GROUP.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
ALTER TABLE UTL_MENU_GROUP ADD CONSTRAINT PK_UTL_MENU_GROUP PRIMARY KEY ( GROUP_ID ) ;


CREATE TABLE UTL_MENU_GROUP_ITEM
  (
    GROUP_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    MENU_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    MENU_ORDER NUMBER (10) ,
    BREAK_BOOL NUMBER (1) DEFAULT 0 ,
    UTL_ID     NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_MENU_GROUP_ITEM ADD CHECK ( GROUP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_MENU_GROUP_ITEM ADD CHECK ( MENU_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_MENU_GROUP_ITEM ADD CHECK ( MENU_ORDER BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_MENU_GROUP_ITEM ADD CHECK ( BREAK_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_MENU_GROUP_ITEM ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_MENU_GROUP_ITEM
IS
  'This table is used to assign a list of menu items into a particular menu group.' ;
  COMMENT ON COLUMN UTL_MENU_GROUP_ITEM.GROUP_ID
IS
  'FK to UTL_MENU_GROUP.' ;
  COMMENT ON COLUMN UTL_MENU_GROUP_ITEM.MENU_ID
IS
  'FK to UTL_MENU_ITEM.' ;
  COMMENT ON COLUMN UTL_MENU_GROUP_ITEM.MENU_ORDER
IS
  'The order the menu items are meant to be in.' ;
  COMMENT ON COLUMN UTL_MENU_GROUP_ITEM.BREAK_BOOL
IS
  'If true, a break must separate this menu item from the next menu item (if any).' ;
  COMMENT ON COLUMN UTL_MENU_GROUP_ITEM.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
ALTER TABLE UTL_MENU_GROUP_ITEM ADD CONSTRAINT "pk_UTL_MENU_GROUP_ITEM" PRIMARY KEY ( GROUP_ID, MENU_ID ) ;


CREATE TABLE UTL_MENU_ITEM
  (
    MENU_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    TODO_LIST_ID    NUMBER (10) ,
    MENU_NAME       VARCHAR2 (40) NOT NULL DEFERRABLE ,
    MENU_LINK_URL   VARCHAR2 (500) NOT NULL DEFERRABLE ,
    NEW_WINDOW_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    MENU_LDESC      VARCHAR2 (4000) ,
    REPL_APPROVED   NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    UTL_ID          NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_MENU_ITEM ADD CHECK ( MENU_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_MENU_ITEM ADD CHECK ( TODO_LIST_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_MENU_ITEM ADD CHECK ( NEW_WINDOW_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_MENU_ITEM ADD CHECK ( REPL_APPROVED   IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_MENU_ITEM ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_MENU_ITEM
IS
  'This table lists all of the available web application menu items.  Each menu item is associated with a single menu group.' ;
  COMMENT ON COLUMN UTL_MENU_ITEM.MENU_ID
IS
  'An internally generated ID used to uniquely identify the menu.  Generated from MENU_ID_SEQ.' ;
  COMMENT ON COLUMN UTL_MENU_ITEM.TODO_LIST_ID
IS
  'FK to UTL_TODO_LIST.' ;
  COMMENT ON COLUMN UTL_MENU_ITEM.MENU_NAME
IS
  'A descriptive name given to the menu that is displayed to the user in the web interface.' ;
  COMMENT ON COLUMN UTL_MENU_ITEM.MENU_LINK_URL
IS
  'The relative menu link URL.' ;
  COMMENT ON COLUMN UTL_MENU_ITEM.NEW_WINDOW_BOOL
IS
  'Indicates whether the link URL should open a new browser window or use the same one.' ;
  COMMENT ON COLUMN UTL_MENU_ITEM.MENU_LDESC
IS
  'The long description for the menu item.' ;
  COMMENT ON COLUMN UTL_MENU_ITEM.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
ALTER TABLE UTL_MENU_ITEM ADD CONSTRAINT PK_UTL_MENU_ITEM PRIMARY KEY ( MENU_ID ) ;


CREATE TABLE UTL_MENU_ITEM_ARG
  (
    MENU_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ARG_CD  VARCHAR2 (40) NOT NULL DEFERRABLE ,
    UTL_ID  NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_MENU_ITEM_ARG ADD CHECK ( MENU_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_MENU_ITEM_ARG ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_MENU_ITEM_ARG ADD CONSTRAINT PK_UTL_MENU_ITEM_ARG PRIMARY KEY ( MENU_ID, ARG_CD ) ;


CREATE TABLE UTL_MESSAGE
  (
    MSG_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    MSG_TYPE_CD VARCHAR2 (8) ,
    MSG_TITLE   VARCHAR2 (80) ,
    MSG_LDESC   VARCHAR2 (2000) ,
    UTL_ID      NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_MESSAGE ADD CHECK ( MSG_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_MESSAGE ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_MESSAGE
IS
  'This table defines system messages that the application can display based on a given numeric ID.' ;
  COMMENT ON COLUMN UTL_MESSAGE.MSG_ID
IS
  'Message identifier primary key.' ;
  COMMENT ON COLUMN UTL_MESSAGE.MSG_TYPE_CD
IS
  'Message type code.' ;
  COMMENT ON COLUMN UTL_MESSAGE.MSG_TITLE
IS
  'Descriptive message title.' ;
  COMMENT ON COLUMN UTL_MESSAGE.MSG_LDESC
IS
  'Long message description.' ;
  COMMENT ON COLUMN UTL_MESSAGE.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
ALTER TABLE UTL_MESSAGE ADD CONSTRAINT PK_UTL_MESSAGE PRIMARY KEY ( MSG_ID ) ;


CREATE TABLE UTL_NOTIFICATION_CONFIG
  (
    NOTIF_TYPE_ID  NUMBER NOT NULL DEFERRABLE ,
    ACTIVE_BOOL    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO    NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_NOTIFICATION_CONFIG ADD CHECK ( ACTIVE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_NOTIFICATION_CONFIG ADD CHECK ( RSTAT_CD    IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_NOTIFICATION_CONFIG ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE INITIALLY DEFERRED ;
ALTER TABLE UTL_NOTIFICATION_CONFIG ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_NOTIFICATION_CONFIG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_NOTIFICATION_CONFIG
IS
  'The Notification config table allows for the subscription to specific notifications in the API.  If the Notification type is not active, the notification will not be used.  This configuration table allows for users to disable notifications that are not of interest.' ;
ALTER TABLE UTL_NOTIFICATION_CONFIG ADD CONSTRAINT PK_UTL_NOTIFICATION_CONFIG PRIMARY KEY ( NOTIF_TYPE_ID ) ;


CREATE TABLE UTL_NOTIF_DEFINITION
  (
    NOTIF_DEFINITION_ID     NUMBER NOT NULL DEFERRABLE ,
    NOTIF_TYPE_ID           NUMBER NOT NULL DEFERRABLE ,
    NOTIF_DEFINITION_NAME   VARCHAR2 (200) NOT NULL DEFERRABLE ,
    NOTIF_DEFINITION_LDESC  VARCHAR2 (4000) ,
    NOTIF_TRANSFORMER_CLASS VARCHAR2 (200) NOT NULL DEFERRABLE ,
    RSTAT_CD                NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO             NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT             DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER           VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_NOTIF_DEFINITION ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_NOTIF_DEFINITION ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_NOTIF_DEFINITION ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_NOTIF_DEFINITION ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_NOTIF_DEFINITION
IS
  'This table defines a Notification.  A Notification is a versioned representation of a Notification event (defined in UTL_NOTIF_EVENT_TYPE).  The Notification uses the defined transformer class to provide a versioned view of the notification event.' ;
ALTER TABLE UTL_NOTIF_DEFINITION ADD CONSTRAINT PK_UTL_NOTIF_DEFINITION PRIMARY KEY ( NOTIF_DEFINITION_ID ) ;


CREATE TABLE UTL_NOTIF_EVENT_TYPE
  (
    NOTIF_EVENT_TYPE_ID NUMBER NOT NULL DEFERRABLE ,
    NOTIF_EVENT_CD      VARCHAR2 (100) NOT NULL ,
    NOTIF_EVENT_NAME    VARCHAR2 (200) NOT NULL DEFERRABLE ,
    NOTIF_EVENT_LDESC   VARCHAR2 (4000) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO         NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_NOTIF_EVENT_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_NOTIF_EVENT_TYPE ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_NOTIF_EVENT_TYPE ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_NOTIF_EVENT_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_NOTIF_EVENT_TYPE
IS
  'This table describes a notification event.  A notification event is a representation of a business operation that has occurred within Maintenix.
Notification events represent a point in time snapshot (before and after) of data in Maintenix as an event has ocurred.' ;
ALTER TABLE UTL_NOTIF_EVENT_TYPE ADD CONSTRAINT PK_UTL_NOTIF_EVENT_TYPE PRIMARY KEY ( NOTIF_EVENT_TYPE_ID ) ;
ALTER TABLE UTL_NOTIF_EVENT_TYPE ADD CONSTRAINT IX_UTLNOTIFEVENTTYPEEVTCD_UNQ UNIQUE ( NOTIF_EVENT_CD ) ;


CREATE TABLE UTL_NOTIF_TYPE
  (
    NOTIF_TYPE_ID    NUMBER NOT NULL DEFERRABLE ,
    NOTIF_TYPE_CD    VARCHAR2 (100) NOT NULL ,
    NOTIF_TYPE_NAME  VARCHAR2 (200) NOT NULL DEFERRABLE ,
    NOTIF_TYPE_LDESC VARCHAR2 (4000) ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO      NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_NOTIF_TYPE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_NOTIF_TYPE ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_NOTIF_TYPE ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_NOTIF_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_NOTIF_TYPE
IS
  'The notification type defines a Notification.  For each Notification that exists in the system, there is required to be a row in this table.  The notification type defines the notification, and the Notification definition defines the supported versions of the notification.' ;
ALTER TABLE UTL_NOTIF_TYPE ADD CONSTRAINT PK_UTL_NOTIF_TYPE PRIMARY KEY ( NOTIF_TYPE_ID ) ;
ALTER TABLE UTL_NOTIF_TYPE ADD CONSTRAINT IX_UTLNOTIFTYPECD_UNQ UNIQUE ( NOTIF_TYPE_CD ) ;


CREATE TABLE UTL_OC_SVR_JOB_CFG
  (
    CONFIG_NAME    VARCHAR2 (500) NOT NULL DEFERRABLE ,
    CONFIG_VALUE   VARCHAR2 (1000) NOT NULL DEFERRABLE ,
    UTL_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_OC_SVR_JOB_CFG ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_OC_SVR_JOB_CFG ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_OC_SVR_JOB_CFG ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_OC_SVR_JOB_CFG ADD CONSTRAINT PK_UTL_OC_SVR_JOB_CFG PRIMARY KEY ( CONFIG_NAME ) ;


CREATE TABLE UTL_PB_APP
  (
    APP_CD   VARCHAR2 (8) NOT NULL DEFERRABLE ,
    APP_NAME VARCHAR2 (40) NOT NULL DEFERRABLE ,
    UTL_ID   NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PB_APP ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_PB_APP
IS
  'This table is used to list all of the PowerBuilder applications used by the product. Every PowerBuilder application will have a "code" defined for it. Some examples of application codes are:   Maintenix.Tracker = "TRK"   Maintenix.Baseliner = "BL".' ;
ALTER TABLE UTL_PB_APP ADD CONSTRAINT PK_UTL_PB_APP PRIMARY KEY ( APP_CD ) ;


CREATE TABLE UTL_PB_ASSIGN
  (
    APP_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ASSIGN_NAME  VARCHAR2 (40) NOT NULL DEFERRABLE ,
    ASSIGN_TITLE VARCHAR2 (40) NOT NULL DEFERRABLE ,
    ASSIGN_DW    VARCHAR2 (40) NOT NULL DEFERRABLE ,
    ASSIGN_COLS  VARCHAR2 (2000) NOT NULL DEFERRABLE ,
    SEARCH_COL   VARCHAR2 (500) NOT NULL DEFERRABLE ,
    UTL_ID       NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PB_ASSIGN ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_PB_ASSIGN
IS
  'This table is used to list all of the assignment windows for a particular PowerBuilder application. Assignment windows are launched from a particular window using the MxFC?s w_r_assignment window.' ;
ALTER TABLE UTL_PB_ASSIGN ADD CONSTRAINT PK_UTL_PB_ASSIGN PRIMARY KEY ( APP_CD, ASSIGN_NAME ) ;


CREATE TABLE UTL_PB_DOC_LIB
  (
    APP_CD        VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ITEM_TYPE_CD  VARCHAR2 (8) NOT NULL DEFERRABLE ,
    LIB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    LIB_FILE_NAME VARCHAR2 (40) NOT NULL DEFERRABLE ,
    FORM_BOOL     NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    UTL_ID        NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PB_DOC_LIB ADD CHECK ( LIB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PB_DOC_LIB ADD CHECK ( FORM_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_PB_DOC_LIB ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_PB_DOC_LIB
IS
  'This table is used to list all of the InfoMaker libraries that contain reports for a particular "report launching item" (defined in the UTL_PB_ITEM_DOC table). InfoMaker libraries are stored as .exe files.' ;
ALTER TABLE UTL_PB_DOC_LIB ADD CONSTRAINT PK_UTL_PB_DOC_LIB PRIMARY KEY ( APP_CD, ITEM_TYPE_CD, LIB_ID ) ;


CREATE TABLE UTL_PB_FILTER
  (
    APP_CD         VARCHAR2 (8) NOT NULL DEFERRABLE ,
    FILTER_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    FILTER_NAME    VARCHAR2 (40) NOT NULL DEFERRABLE ,
    FILTER_DW      VARCHAR2 (40) NOT NULL DEFERRABLE ,
    FILTER_CLAUSE  VARCHAR2 (2000) NOT NULL DEFERRABLE ,
    USER_ID        NUMBER (10) ,
    ALL_USERS_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    UTL_ID         NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PB_FILTER ADD CHECK ( FILTER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PB_FILTER ADD CHECK ( USER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PB_FILTER ADD CHECK ( ALL_USERS_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_PB_FILTER ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_PB_FILTER
IS
  'This table is used to list all of the datawindow filters for a particular PowerBuilder application. Datawindow filters are defined by the user, and are implemented using the MxFC?s n_cst_dwsrv_filter services.' ;
ALTER TABLE UTL_PB_FILTER ADD CONSTRAINT PK_UTL_PB_FILTER PRIMARY KEY ( APP_CD, FILTER_ID ) ;


CREATE TABLE UTL_PB_HELP
  (
    APP_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    HELP_CONTROL VARCHAR2 (500) NOT NULL DEFERRABLE ,
    HELP_TOPIC   VARCHAR2 (500) NOT NULL DEFERRABLE ,
    UTL_ID       NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PB_HELP ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_PB_HELP
IS
  'This table is used to tie context sensitive help to a PowerBuilder application. All help "launch points" are listed in this table along with the HTML references associated with these launch points. PowerBuilder help is launched using the F1 key. PowerBuilder help is implemented using the MxFC?s n_cst_help service.' ;
ALTER TABLE UTL_PB_HELP ADD CONSTRAINT PK_UTL_PB_HELP PRIMARY KEY ( APP_CD, HELP_CONTROL ) ;


CREATE TABLE UTL_PB_ITEM_DOC
  (
    APP_CD          VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ITEM_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ITEM_NAME       VARCHAR2 (40) NOT NULL DEFERRABLE ,
    VIEW_FORMS_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    UTL_ID          NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PB_ITEM_DOC ADD CHECK ( VIEW_FORMS_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_PB_ITEM_DOC ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_PB_ITEM_DOC
IS
  'This table is used to list all of the "report contexts" for a particular PowerBuilder application. This allows the user to launch reports in context of a selected datawindow row, etc. Examples of report-launching contexts are:   Inventory Reports = "INV"   Event Reports = "EVT"   Task Reports = "STASK" PowerBuilder reports are implemented using the MxFC?s w_r_report window.' ;
ALTER TABLE UTL_PB_ITEM_DOC ADD CONSTRAINT PK_UTL_PB_ITEM_DOC PRIMARY KEY ( APP_CD, ITEM_TYPE_CD ) ;


CREATE TABLE UTL_PB_MESSAGE
  (
    APP_CD           VARCHAR2 (8) NOT NULL DEFERRABLE ,
    MSGID            VARCHAR2 (40) NOT NULL DEFERRABLE ,
    MSG_TYPE_CD      VARCHAR2 (8) NOT NULL DEFERRABLE ,
    MSGTITLE         VARCHAR2 (500) NOT NULL DEFERRABLE ,
    MSGTEXT          VARCHAR2 (500) NOT NULL DEFERRABLE ,
    MSGICON          VARCHAR2 (40) NOT NULL DEFERRABLE ,
    MSGBUTTON        VARCHAR2 (40) NOT NULL DEFERRABLE ,
    MSGDEFAULTBUTTON NUMBER (10) NOT NULL DEFERRABLE ,
    MSGSEVERITY      NUMBER (10) NOT NULL DEFERRABLE ,
    MSGPRINT         VARCHAR2 (1) NOT NULL DEFERRABLE ,
    MSGUSERINPUT     VARCHAR2 (1) NOT NULL DEFERRABLE ,
    UTL_ID           NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PB_MESSAGE ADD CHECK ( MSGDEFAULTBUTTON BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PB_MESSAGE ADD CHECK ( MSGSEVERITY BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PB_MESSAGE ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_PB_MESSAGE
IS
  'This table is used to define all of the messages used by a particular PowerBuilder application. These messages define how the error window should appear and work (button styles, text, etc.). PowerBuilder messages are implemented using the MxFC?s n_cst_error service.' ;
ALTER TABLE UTL_PB_MESSAGE ADD CONSTRAINT PK_UTL_PB_MESSAGE PRIMARY KEY ( APP_CD, MSGID ) ;


CREATE TABLE UTL_PB_REF_TERM
  (
    APP_CD         VARCHAR2 (8) NOT NULL DEFERRABLE ,
    REF_TERM_NAME  VARCHAR2 (40) NOT NULL DEFERRABLE ,
    REF_TERM_TITLE VARCHAR2 (40) NOT NULL DEFERRABLE ,
    PK_COLS        VARCHAR2 (500) NOT NULL DEFERRABLE ,
    DETAIL_DW      VARCHAR2 (40) NOT NULL DEFERRABLE ,
    LIST_DW        VARCHAR2 (40) NOT NULL DEFERRABLE ,
    EDITABLE_BOOL  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    EDITABLE_COLS  VARCHAR2 (500) ,
    UTL_ID         NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PB_REF_TERM ADD CHECK ( EDITABLE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_PB_REF_TERM ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_PB_REF_TERM
IS
  'This table is used to define all of the reference terms used by a particular PowerBuilder application.' ;
ALTER TABLE UTL_PB_REF_TERM ADD CONSTRAINT PK_UTL_PB_REF_TERM PRIMARY KEY ( APP_CD, REF_TERM_NAME ) ;


CREATE TABLE UTL_PB_SEARCH
  (
    APP_CD            VARCHAR2 (8) NOT NULL DEFERRABLE ,
    SEARCH_NAME       VARCHAR2 (40) NOT NULL DEFERRABLE ,
    OUTPUT_DW         VARCHAR2 (40) NOT NULL DEFERRABLE ,
    SEARCH_VALUE_NAME VARCHAR2 (40) NOT NULL DEFERRABLE ,
    SEARCH_COL_NAME   VARCHAR2 (40) NOT NULL DEFERRABLE ,
    TARGET_WINDOW     VARCHAR2 (40) NOT NULL DEFERRABLE ,
    WINDOW_CONTEXT    VARCHAR2 (40) NOT NULL DEFERRABLE ,
    WINDOW_COLS       VARCHAR2 (500) NOT NULL DEFERRABLE ,
    TARGET_CONTROL    VARCHAR2 (40) NOT NULL DEFERRABLE ,
    CONTROL_COLS      VARCHAR2 (500) NOT NULL DEFERRABLE ,
    UTL_ID            NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PB_SEARCH ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_PB_SEARCH
IS
  'This table is used to define all of the search queries used by a particular PowerBuilder application.' ;
ALTER TABLE UTL_PB_SEARCH ADD CONSTRAINT PK_UTL_PB_SEARCH PRIMARY KEY ( APP_CD, SEARCH_NAME ) ;


CREATE TABLE UTL_PERM
  (
    CLASS_NAME VARCHAR2 (500) ,
    MATRIX_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    UTL_ID     NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PERM ADD CHECK ( MATRIX_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PERM ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;


CREATE TABLE UTL_PERM_ANSWER_TYPE
  (
    ANSWER_TYPE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ANSWER_TYPE_SDESC VARCHAR2 (80) ,
    ANSWER_TYPE_VALUE INTEGER NOT NULL DEFERRABLE ,
    UTL_ID            NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PERM_ANSWER_TYPE ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN UTL_PERM_ANSWER_TYPE.ANSWER_TYPE_CD
IS
  'code of answer, eg: {YES, NO, *}
also primary key' ;
  COMMENT ON COLUMN UTL_PERM_ANSWER_TYPE.ANSWER_TYPE_SDESC
IS
  'actual question that is being asked.  E.g. Is this user in my organization?' ;
  COMMENT ON COLUMN UTL_PERM_ANSWER_TYPE.ANSWER_TYPE_VALUE
IS
  'This is the value of the answer.  In this case, {0, 1}.' ;
ALTER TABLE UTL_PERM_ANSWER_TYPE ADD CONSTRAINT PK_UTL_PERM_ANSWER_TYPE PRIMARY KEY ( ANSWER_TYPE_CD ) ;


CREATE TABLE UTL_PERM_MATRIX
  (
    MATRIX_COLUMN_ID NUMBER (10) NOT NULL DEFERRABLE ,
    MATRIX_ROW_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ANSWER_TYPE_CD   VARCHAR2 (8) NOT NULL DEFERRABLE ,
    UTL_ID           NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PERM_MATRIX ADD CHECK ( MATRIX_COLUMN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PERM_MATRIX ADD CHECK ( MATRIX_ROW_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PERM_MATRIX ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_PERM_MATRIX
IS
  'The utl_perm_matrix tables brings together matrix columns and matrix cells and defines a answer for that given intersection.
Conceptual Example: 
Column 1, Row 1, Answer Type = ''YES'' | Column 2, Row 1, Answer Type = ''NO''
Column 1, Row 2, Answer Type = ''NO'' | Column 2, Row 2, Answer Type = ''?YES''
Matrix looks like:
|====|====|
| YES| NO |
| NO | YES|
|====|====|' ;
ALTER TABLE UTL_PERM_MATRIX ADD CONSTRAINT PK_UTL_PERM_MATRIX PRIMARY KEY ( MATRIX_COLUMN_ID, MATRIX_ROW_ID ) ;


CREATE TABLE UTL_PERM_MATRIX_COLUMN
  (
    MATRIX_COLUMN_ID NUMBER (10) NOT NULL DEFERRABLE ,
    MATRIX_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    QUESTION_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    COLUMN_ORD       NUMBER DEFAULT 0 ,
    UTL_ID           NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PERM_MATRIX_COLUMN ADD CHECK ( MATRIX_COLUMN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PERM_MATRIX_COLUMN ADD CHECK ( MATRIX_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PERM_MATRIX_COLUMN ADD CHECK ( QUESTION_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PERM_MATRIX_COLUMN ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_PERM_MATRIX_COLUMN
IS
  'the UTL_PERM_MATRIX_CELL table represents a linking between a question being asked in a matrix, and the associated answer.  A matrix is comprized of rows, that are then linked to cells.' ;
  COMMENT ON COLUMN UTL_PERM_MATRIX_COLUMN.MATRIX_COLUMN_ID
IS
  'Primary key of a matrix column.' ;
ALTER TABLE UTL_PERM_MATRIX_COLUMN ADD CONSTRAINT PK_UTL_PERM_MATRIX_COLUMN PRIMARY KEY ( MATRIX_COLUMN_ID ) ;


CREATE TABLE UTL_PERM_MATRIX_HEADER
  (
    MATRIX_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    ANSWER_FUNCTION_NAME VARCHAR2 (200) ,
    MATRIX_SDESC         VARCHAR2 (80) NOT NULL DEFERRABLE ,
    MATRIX_LDESC         VARCHAR2 (4000) ,
    UTL_ID               NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PERM_MATRIX_HEADER ADD CHECK ( MATRIX_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PERM_MATRIX_HEADER ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN UTL_PERM_MATRIX_HEADER.MATRIX_ID
IS
  'primary key of decision matrix.' ;
  COMMENT ON COLUMN UTL_PERM_MATRIX_HEADER.ANSWER_FUNCTION_NAME
IS
  'user defined function, this is not currently used, however, down the road, we might bea ble to dynamically call this method with the (entitykey, currentuserkey) parameters.' ;
  COMMENT ON COLUMN UTL_PERM_MATRIX_HEADER.MATRIX_SDESC
IS
  'this is the name of the matrix, used for querying quickly/reporting.' ;
  COMMENT ON COLUMN UTL_PERM_MATRIX_HEADER.MATRIX_LDESC
IS
  'long description of the matrix.' ;
ALTER TABLE UTL_PERM_MATRIX_HEADER ADD CONSTRAINT PK_UTL_PERM_MATRIX_HEADER PRIMARY KEY ( MATRIX_ID ) ;


CREATE TABLE UTL_PERM_MATRIX_ROW
  (
    MATRIX_ROW_ID NUMBER (10) NOT NULL DEFERRABLE ,
    MODE_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    MATRIX_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    ROW_ORD       NUMBER DEFAULT 0 NOT NULL DEFERRABLE ,
    UTL_ID        NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PERM_MATRIX_ROW ADD CHECK ( MATRIX_ROW_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PERM_MATRIX_ROW ADD CHECK ( MATRIX_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PERM_MATRIX_ROW ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_PERM_MATRIX_ROW
IS
  'The utl_perm_matrix_row, represent a row of a decision matrix, a row has a mode such as EDIT/NONE/READ.' ;
ALTER TABLE UTL_PERM_MATRIX_ROW ADD CONSTRAINT PK_UTL_PERM_MATRIX_ROW PRIMARY KEY ( MATRIX_ROW_ID ) ;


CREATE TABLE UTL_PERM_MODE
  (
    MODE_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    MODE_SDESC VARCHAR2 (80) ,
    UTL_ID     NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PERM_MODE ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_PERM_MODE
IS
  'Permission modes for a matrix row.  EDIT/READ/NONE' ;
ALTER TABLE UTL_PERM_MODE ADD CONSTRAINT PK_UTL_PERM_MODE PRIMARY KEY ( MODE_CD ) ;


CREATE TABLE UTL_PERM_QUESTION
  (
    QUESTION_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    QUESTION_SDESC VARCHAR2 (80) NOT NULL DEFERRABLE ,
    UTL_ID         NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PERM_QUESTION ADD CHECK ( QUESTION_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PERM_QUESTION ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_PERM_QUESTION
IS
  'This table represents a question that could be asked against a key.  An example would be: ''Does this user belong to my organization?''.  The question is theoretical, but the answer, which comes from a user defined function is compared against these questions to determine the proper permissions.' ;
ALTER TABLE UTL_PERM_QUESTION ADD CONSTRAINT PK_UTL_PERM_QUESTION PRIMARY KEY ( QUESTION_ID ) ;


CREATE TABLE UTL_PERM_SET
  (
    ID             VARCHAR2 (40) NOT NULL DEFERRABLE ,
    CATEGORY       VARCHAR2 (40) NOT NULL DEFERRABLE ,
    LABEL          VARCHAR2 (40) NOT NULL DEFERRABLE ,
    DESCRIPTION    VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO    NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PERM_SET ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_PERM_SET ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PERM_SET ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PERM_SET ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_PERM_SET
IS
  'The permission set table stores the built-in grouping of permissions to facilitate assigning permissions in a functional area to a role. This table stores the permission set entity' ;
  COMMENT ON COLUMN UTL_PERM_SET.ID
IS
  'The identifier for a permission set' ;
  COMMENT ON COLUMN UTL_PERM_SET.CATEGORY
IS
  'The category for the permission set' ;
  COMMENT ON COLUMN UTL_PERM_SET.LABEL
IS
  'The label for a permission set' ;
  COMMENT ON COLUMN UTL_PERM_SET.DESCRIPTION
IS
  'The description of a permission set' ;
  COMMENT ON COLUMN UTL_PERM_SET.RSTAT_CD
IS
  'Status of the record' ;
  COMMENT ON COLUMN UTL_PERM_SET.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN UTL_PERM_SET.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.
The meaning of this column may be specific to the entity' ;
  COMMENT ON COLUMN UTL_PERM_SET.CREATION_DT
IS
  'The date and time at which the record was inserted' ;
  COMMENT ON COLUMN UTL_PERM_SET.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.
For new tables with single-column keys, this column replaces the DB_ID column of the legacy multi-column primary keys' ;
  COMMENT ON COLUMN UTL_PERM_SET.REVISION_DT
IS
  'The date and time at which the record was last updated' ;
  COMMENT ON COLUMN UTL_PERM_SET.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN UTL_PERM_SET.REVISION_USER
IS
  'The name of the user that last updated the record' ;
ALTER TABLE UTL_PERM_SET ADD CONSTRAINT PK_UTL_PERM_SET PRIMARY KEY ( ID ) ;


CREATE TABLE UTL_PERM_SET_ACTION_PARM
  (
    PERM_SET_ID    VARCHAR2 (40) NOT NULL DEFERRABLE ,
    PARM_NAME      VARCHAR2 (500) NOT NULL DEFERRABLE ,
    PARM_VALUE     VARCHAR2 (1000) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO    NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PERM_SET_ACTION_PARM ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_PERM_SET_ACTION_PARM ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PERM_SET_ACTION_PARM ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PERM_SET_ACTION_PARM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_PERM_SET_ACTION_PARM
IS
  'This table maps permission sets to their corresponding action parameters.' ;
  COMMENT ON COLUMN UTL_PERM_SET_ACTION_PARM.PERM_SET_ID
IS
  'The permission set identifier' ;
  COMMENT ON COLUMN UTL_PERM_SET_ACTION_PARM.PARM_NAME
IS
  'The action parameter' ;
  COMMENT ON COLUMN UTL_PERM_SET_ACTION_PARM.PARM_VALUE
IS
  'The action parameter value' ;
  COMMENT ON COLUMN UTL_PERM_SET_ACTION_PARM.RSTAT_CD
IS
  'Status of the record' ;
  COMMENT ON COLUMN UTL_PERM_SET_ACTION_PARM.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN UTL_PERM_SET_ACTION_PARM.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.
The meaning of this column may be specific to the entity' ;
  COMMENT ON COLUMN UTL_PERM_SET_ACTION_PARM.CREATION_DT
IS
  'The date and time at which the record was inserted' ;
  COMMENT ON COLUMN UTL_PERM_SET_ACTION_PARM.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.
For new tables with single-column keys, this column replaces the DB_ID column of the legacy multi-column primary keys' ;
  COMMENT ON COLUMN UTL_PERM_SET_ACTION_PARM.REVISION_DT
IS
  'The date and time at which the record was last updated' ;
  COMMENT ON COLUMN UTL_PERM_SET_ACTION_PARM.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN UTL_PERM_SET_ACTION_PARM.REVISION_USER
IS
  'The name of the user that last updated the record' ;
ALTER TABLE UTL_PERM_SET_ACTION_PARM ADD CONSTRAINT PK_UTL_PERM_SET_ACTION_PARM PRIMARY KEY ( PERM_SET_ID, PARM_NAME ) ;


CREATE TABLE UTL_PLUGIN
  (
    PLUGIN_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    PLUGIN_CD       VARCHAR2 (100) NOT NULL DEFERRABLE ,
    PLUGIN_CLASS    VARCHAR2 (500) NOT NULL DEFERRABLE ,
    INTERFACE_CLASS VARCHAR2 (500) ,
    CATEGORY        VARCHAR2 (4000) ,
    UTL_ID          NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PLUGIN ADD CHECK ( PLUGIN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PLUGIN ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_PLUGIN
IS
  'This table is used for storing the custom plugins created for integration with external systems.' ;
  COMMENT ON COLUMN UTL_PLUGIN.PLUGIN_ID
IS
  'Unique idenifier assigned from Sequence PLUGIN_ID_SEQ.' ;
  COMMENT ON COLUMN UTL_PLUGIN.PLUGIN_CD
IS
  'Plugin code that is referenced in the source code, usually with capital letters with underscores.' ;
  COMMENT ON COLUMN UTL_PLUGIN.PLUGIN_CLASS
IS
  'Fully qualified class name for the plugin class.' ;
  COMMENT ON COLUMN UTL_PLUGIN.INTERFACE_CLASS
IS
  'Fully qualified class name for the plugin interface.  Ensure that the class specified by plugin_class implements this interface.' ;
  COMMENT ON COLUMN UTL_PLUGIN.CATEGORY
IS
  'Category used to group a set of plugin classes.' ;
  COMMENT ON COLUMN UTL_PLUGIN.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
ALTER TABLE UTL_PLUGIN ADD CONSTRAINT PK_UTL_PLUGIN PRIMARY KEY ( PLUGIN_ID ) ;


CREATE TABLE UTL_PURGE_GROUP
  (
    PURGE_GROUP_CD VARCHAR2 (16) NOT NULL DEFERRABLE ,
    GROUP_NAME     VARCHAR2 (40) NOT NULL DEFERRABLE ,
    GROUP_LDESC    VARCHAR2 (4000) ,
    UTL_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PURGE_GROUP ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PURGE_GROUP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_PURGE_GROUP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN UTL_PURGE_GROUP.PURGE_GROUP_CD
IS
  'The unique code identifying the group.' ;
  COMMENT ON COLUMN UTL_PURGE_GROUP.GROUP_NAME
IS
  'The name of the group.' ;
  COMMENT ON COLUMN UTL_PURGE_GROUP.GROUP_LDESC
IS
  'A description of the group.' ;
  COMMENT ON COLUMN UTL_PURGE_GROUP.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
  COMMENT ON COLUMN UTL_PURGE_GROUP.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN UTL_PURGE_GROUP.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN UTL_PURGE_GROUP.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN UTL_PURGE_GROUP.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN UTL_PURGE_GROUP.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE UTL_PURGE_GROUP ADD CONSTRAINT PK_UTL_PURGE_GROUP PRIMARY KEY ( PURGE_GROUP_CD ) ;


CREATE TABLE UTL_PURGE_POLICY
  (
    PURGE_POLICY_CD  VARCHAR2 (16) NOT NULL DEFERRABLE ,
    PURGE_GROUP_CD   VARCHAR2 (16) NOT NULL DEFERRABLE ,
    POLICY_NAME      VARCHAR2 (40) NOT NULL DEFERRABLE ,
    POLICY_LDESC     VARCHAR2 (4000) ,
    RETENTION_PERIOD NUMBER (5) NOT NULL DEFERRABLE ,
    ACTIVE_BOOL      NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    UTL_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PURGE_POLICY ADD CHECK ( ACTIVE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_PURGE_POLICY ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PURGE_POLICY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_PURGE_POLICY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN UTL_PURGE_POLICY.PURGE_POLICY_CD
IS
  'The unique code identifying the policy' ;
  COMMENT ON COLUMN UTL_PURGE_POLICY.PURGE_GROUP_CD
IS
  'Identifies the group to which this policy belongs' ;
  COMMENT ON COLUMN UTL_PURGE_POLICY.POLICY_NAME
IS
  'The name of the policy' ;
  COMMENT ON COLUMN UTL_PURGE_POLICY.POLICY_LDESC
IS
  'The description for the policy' ;
  COMMENT ON COLUMN UTL_PURGE_POLICY.RETENTION_PERIOD
IS
  'The period of time in days after which records can be purged; this value will be provided to the dynamic DELETE statements as a bind variable.
This value is configurable by system administrators.' ;
  COMMENT ON COLUMN UTL_PURGE_POLICY.ACTIVE_BOOL
IS
  'Indicates if the purging policy is enabled; when true, the background purging job will delete records according to the policy.
This value is configurable by system administrators.' ;
  COMMENT ON COLUMN UTL_PURGE_POLICY.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
  COMMENT ON COLUMN UTL_PURGE_POLICY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN UTL_PURGE_POLICY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN UTL_PURGE_POLICY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN UTL_PURGE_POLICY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN UTL_PURGE_POLICY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE UTL_PURGE_POLICY ADD CONSTRAINT PK_UTL_PURGE_POLICY PRIMARY KEY ( PURGE_POLICY_CD ) ;


CREATE TABLE UTL_PURGE_STRATEGY
  (
    PURGE_POLICY_CD VARCHAR2 (16) NOT NULL DEFERRABLE ,
    PURGE_TABLE_CD  VARCHAR2 (30) NOT NULL DEFERRABLE ,
    PURGE_ORD       NUMBER (5) NOT NULL DEFERRABLE ,
    PREDICATE_SQL   VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    ARCHIVE_TABLE   VARCHAR2 (30) ,
    UTL_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD        NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DT     DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER   VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PURGE_STRATEGY ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PURGE_STRATEGY ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_PURGE_STRATEGY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN UTL_PURGE_STRATEGY.PURGE_POLICY_CD
IS
  'Maps the strategy to its parent policy.' ;
  COMMENT ON COLUMN UTL_PURGE_STRATEGY.PURGE_TABLE_CD
IS
  'Identifies the table from which records will be deleted ' ;
  COMMENT ON COLUMN UTL_PURGE_STRATEGY.PURGE_ORD
IS
  'An integer representing the order in which the tables associated with a policy are purged.' ;
  COMMENT ON COLUMN UTL_PURGE_STRATEGY.PREDICATE_SQL
IS
  'The WHERE clause of the dynamically generated DELETE statement used to delete the records; this where clause must take one bind parameter whose value will be the retention period defined in the policy' ;
  COMMENT ON COLUMN UTL_PURGE_STRATEGY.ARCHIVE_TABLE
IS
  'The name of the table to which to copy the record prior to purging' ;
  COMMENT ON COLUMN UTL_PURGE_STRATEGY.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
  COMMENT ON COLUMN UTL_PURGE_STRATEGY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN UTL_PURGE_STRATEGY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN UTL_PURGE_STRATEGY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN UTL_PURGE_STRATEGY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN UTL_PURGE_STRATEGY.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE UTL_PURGE_STRATEGY ADD CONSTRAINT PK_UTL_PURGE_STRATEGY PRIMARY KEY ( PURGE_POLICY_CD, PURGE_TABLE_CD ) ;


CREATE TABLE UTL_PURGE_TABLE
  (
    PURGE_TABLE_CD VARCHAR2 (30) NOT NULL DEFERRABLE ,
    UTL_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_PURGE_TABLE ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_PURGE_TABLE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_PURGE_TABLE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN UTL_PURGE_TABLE.PURGE_TABLE_CD
IS
  'The unique code identifying a database table eligible for purging.' ;
  COMMENT ON COLUMN UTL_PURGE_TABLE.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record.' ;
  COMMENT ON COLUMN UTL_PURGE_TABLE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN UTL_PURGE_TABLE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN UTL_PURGE_TABLE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN UTL_PURGE_TABLE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN UTL_PURGE_TABLE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE UTL_PURGE_TABLE ADD CONSTRAINT PK_UTL_PURGE_TABLE PRIMARY KEY ( PURGE_TABLE_CD ) ;


CREATE TABLE UTL_QUICKTEXT
  (
    QUICKTEXT_ID    NUMBER (10) NOT NULL ,
    QUICKTEXT_DB_ID NUMBER (10) NOT NULL ,
    TYPE_CD         VARCHAR2 (16) NOT NULL ,
    VALUE_MDESC     VARCHAR2 (200 CHAR) NOT NULL ,
    RSTAT_CD        NUMBER (3) NOT NULL ,
    REVISION_NO     NUMBER (10) NOT NULL ,
    CTRL_DB_ID      NUMBER (10) NOT NULL ,
    CREATION_DT     DATE NOT NULL ,
    REVISION_DT     DATE NOT NULL ,
    REVISION_DB_ID  NUMBER (10) NOT NULL ,
    REVISION_USER   VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE UTL_QUICKTEXT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
COMMENT ON COLUMN UTL_QUICKTEXT.QUICKTEXT_ID
IS
  'Unique identifier serving as part of the primary key, and assigned from the sequence QUICKTEXT_ID_SEQ.' ;
  COMMENT ON COLUMN UTL_QUICKTEXT.QUICKTEXT_DB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN UTL_QUICKTEXT.TYPE_CD
IS
  'The type code referring to the type of Quick Text entry as specified in REF_QUICKTEXT_TYPE.' ;
  COMMENT ON COLUMN UTL_QUICKTEXT.VALUE_MDESC
IS
  'The Quick Text value entry.' ;
  COMMENT ON COLUMN UTL_QUICKTEXT.RSTAT_CD
IS
  'Status of the record.' ;
  COMMENT ON COLUMN UTL_QUICKTEXT.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN UTL_QUICKTEXT.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.' ;
  COMMENT ON COLUMN UTL_QUICKTEXT.CREATION_DT
IS
  'The date and time at which the record was inserted.' ;
  COMMENT ON COLUMN UTL_QUICKTEXT.REVISION_DT
IS
  'The date and time at which the record was last updated.' ;
  COMMENT ON COLUMN UTL_QUICKTEXT.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record.' ;
  COMMENT ON COLUMN UTL_QUICKTEXT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
CREATE UNIQUE INDEX IX_UTL_QUICKTEXT_NK ON UTL_QUICKTEXT
  (
    VALUE_MDESC ASC , TYPE_CD ASC
  )
  ;
  CREATE INDEX IX_UTL_QUICKTEXT_TYPE_FK ON UTL_QUICKTEXT
    ( TYPE_CD ASC
    ) ;
ALTER TABLE UTL_QUICKTEXT ADD CONSTRAINT PK_UTL_QUICKTEXT PRIMARY KEY ( QUICKTEXT_ID, QUICKTEXT_DB_ID ) ;


CREATE TABLE UTL_REPORT_TYPE
  (
    REPORT_NAME        VARCHAR2 (500) NOT NULL DEFERRABLE ,
    REPORT_ENGINE_TYPE VARCHAR2 (40) NOT NULL DEFERRABLE ,
    REPORT_PATH        VARCHAR2 (1000) ,
    REPORT_DESC        VARCHAR2 (4000) ,
    ACTIVE_BOOL        NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    SYSTEM_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO        NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_REPORT_TYPE ADD CHECK ( ACTIVE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_REPORT_TYPE ADD CHECK ( SYSTEM_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_REPORT_TYPE ADD CHECK ( RSTAT_CD    IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_REPORT_TYPE ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_REPORT_TYPE ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_REPORT_TYPE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_REPORT_TYPE ADD CONSTRAINT PK_UTL_REPORT_TYPE PRIMARY KEY ( REPORT_NAME ) ;


CREATE TABLE UTL_ROLE
  (
    ROLE_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    ROLE_CD   VARCHAR2 (8) NOT NULL ,
    ROLE_NAME VARCHAR2 (40) NOT NULL DEFERRABLE ,
    UTL_ID    NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_ROLE ADD CHECK ( ROLE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_ROLE ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_ROLE
IS
  'This table lists all of the user roles defined within Maintenix. Roles are used to group users by functional area such that allowable actions and configuration can be defined for multiple similar users.' ;
  COMMENT ON COLUMN UTL_ROLE.ROLE_ID
IS
  'An internally generated ID used to uniquely identify the role. Generated from ROLE_ID_SEQ.' ;
  COMMENT ON COLUMN UTL_ROLE.ROLE_CD
IS
  'A short code used to identify the role in business logic.' ;
  COMMENT ON COLUMN UTL_ROLE.ROLE_NAME
IS
  'A descriptive name given to the role. Typically used for display purposes.' ;
  COMMENT ON COLUMN UTL_ROLE.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
ALTER TABLE UTL_ROLE ADD CONSTRAINT PK_UTL_ROLE PRIMARY KEY ( ROLE_ID ) ;
ALTER TABLE UTL_ROLE ADD CONSTRAINT IX_UTLROLEROLECD_UNQ UNIQUE ( ROLE_CD ) ;


CREATE TABLE UTL_ROLE_PARM
  (
    ROLE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    PARM_NAME  VARCHAR2 (500) NOT NULL DEFERRABLE ,
    PARM_TYPE  VARCHAR2 (40) NOT NULL DEFERRABLE ,
    PARM_VALUE VARCHAR2 (1000) ,
    UTL_ID     NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_ROLE_PARM ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_ROLE_PARM
IS
  'This table lists the role specific configuration parameter values.  The configuration parameter must be defined in the UTL_CONFIG_PARM table first.' ;
  COMMENT ON COLUMN UTL_ROLE_PARM.PARM_NAME
IS
  'The name of the configuration parameter.' ;
  COMMENT ON COLUMN UTL_ROLE_PARM.PARM_TYPE
IS
  'Configuration paramater type.' ;
  COMMENT ON COLUMN UTL_ROLE_PARM.PARM_VALUE
IS
  'Configuration parameter value.' ;
  COMMENT ON COLUMN UTL_ROLE_PARM.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
ALTER TABLE UTL_ROLE_PARM ADD CONSTRAINT PK_UTL_ROLE_PARM PRIMARY KEY ( ROLE_ID, PARM_NAME, PARM_TYPE ) ;


CREATE TABLE UTL_ROLE_PERM_SET
  (
    ROLE_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    PERM_SET_ID    VARCHAR2 (40) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    REVISION_NO    NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    CREATION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_ROLE_PERM_SET ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_ROLE_PERM_SET ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_ROLE_PERM_SET ADD CHECK ( CREATION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_ROLE_PERM_SET ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_ROLE_PERM_SET
IS
  'This table maps roles to their corresponding permission sets.' ;
  COMMENT ON COLUMN UTL_ROLE_PERM_SET.ROLE_ID
IS
  'The role identifier' ;
  COMMENT ON COLUMN UTL_ROLE_PERM_SET.PERM_SET_ID
IS
  'The permission set identifier' ;
  COMMENT ON COLUMN UTL_ROLE_PERM_SET.RSTAT_CD
IS
  'Status of the record' ;
  COMMENT ON COLUMN UTL_ROLE_PERM_SET.REVISION_NO
IS
  'A number incremented each time the record is modified.' ;
  COMMENT ON COLUMN UTL_ROLE_PERM_SET.CTRL_DB_ID
IS
  'The identifier of the database that owns the record.
The meaning of this column may be specific to the entity' ;
  COMMENT ON COLUMN UTL_ROLE_PERM_SET.CREATION_DT
IS
  'The date and time at which the record was inserted' ;
  COMMENT ON COLUMN UTL_ROLE_PERM_SET.CREATION_DB_ID
IS
  'The identifier of the database that inserted the record.
For new tables with single-column keys, this column replaces the DB_ID column of the legacy multi-column primary keys' ;
  COMMENT ON COLUMN UTL_ROLE_PERM_SET.REVISION_DT
IS
  'The date and time at which the record was last updated' ;
  COMMENT ON COLUMN UTL_ROLE_PERM_SET.REVISION_DB_ID
IS
  'The identifier of the database that last updated the record' ;
  COMMENT ON COLUMN UTL_ROLE_PERM_SET.REVISION_USER
IS
  'The name of the user that last updated the record' ;
ALTER TABLE UTL_ROLE_PERM_SET ADD CONSTRAINT PK_UTL_ROLE_PERM_SET PRIMARY KEY ( ROLE_ID, PERM_SET_ID ) ;


CREATE TABLE UTL_RULE
  (
    RULE_ID          VARCHAR2 (20) NOT NULL DEFERRABLE ,
    RULE_NAME        VARCHAR2 (500) ,
    RULE_SEVERITY_CD VARCHAR2 (20) ,
    RULE_LDESC       VARCHAR2 (2000) ,
    RULE_SQL         VARCHAR2 (4000) ,
    RULE_TYPE_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    UTL_ID           NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_RULE ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_RULE
IS
  'This table defines Baseline syntax checking rule queries for verifying equipment baseline syntax correctness.' ;
  COMMENT ON COLUMN UTL_RULE.RULE_ID
IS
  'Rule identifier primary key id.' ;
  COMMENT ON COLUMN UTL_RULE.RULE_NAME
IS
  'Descriptive name for the rule.' ;
  COMMENT ON COLUMN UTL_RULE.RULE_SEVERITY_CD
IS
  'Rule severity code.' ;
  COMMENT ON COLUMN UTL_RULE.RULE_LDESC
IS
  'Long description of the rule.' ;
  COMMENT ON COLUMN UTL_RULE.RULE_SQL
IS
  'SQL statement use to check the rule.' ;
  COMMENT ON COLUMN UTL_RULE.RULE_TYPE_CD
IS
  'Rule type code.' ;
ALTER TABLE UTL_RULE ADD CONSTRAINT PK_UTL_RULE PRIMARY KEY ( RULE_ID ) ;


CREATE TABLE UTL_SEQUENCE
  (
    SEQUENCE_CD VARCHAR2 (40) NOT NULL DEFERRABLE ,
    NEXT_VALUE  NUMBER (10) ,
    TABLE_NAME  VARCHAR2 (80) ,
    COLUMN_NAME VARCHAR2 (80) ,
    ORACLE_SEQ  NUMBER (1) DEFAULT 0 ,
    UTL_ID      NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_SEQUENCE ADD CHECK ( NEXT_VALUE BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_SEQUENCE ADD CHECK ( ORACLE_SEQ IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_SEQUENCE ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_SEQUENCE
IS
  'This table is used to store sequence number values for the application.  An application should select for update to get the next value then update the next incremented value.' ;
  COMMENT ON COLUMN UTL_SEQUENCE.SEQUENCE_CD
IS
  'Unique sequence code identifier.' ;
  COMMENT ON COLUMN UTL_SEQUENCE.NEXT_VALUE
IS
  'Next numeric value for this sequence.' ;
  COMMENT ON COLUMN UTL_SEQUENCE.TABLE_NAME
IS
  'Name of the table for which the sequence is associated.' ;
  COMMENT ON COLUMN UTL_SEQUENCE.COLUMN_NAME
IS
  'Name of the column for which the sequence is associated.' ;
  COMMENT ON COLUMN UTL_SEQUENCE.ORACLE_SEQ
IS
  'Indicates whether a sequence is an oracle sequence.
' ;
  COMMENT ON COLUMN UTL_SEQUENCE.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
ALTER TABLE UTL_SEQUENCE ADD CONSTRAINT PK_UTL_SEQUENCE PRIMARY KEY ( SEQUENCE_CD ) ;


CREATE TABLE UTL_TEMP_ASSIGN_ROLE_MAP
  (
    ROLE_ID            NUMBER (10) NOT NULL ,
    ASSIGNABLE_ROLE_ID NUMBER (10) NOT NULL ,
    UTL_ID             NUMBER (10) NOT NULL ,
    RSTAT_CD           NUMBER (3) NOT NULL ,
    CREATION_DT        DATE NOT NULL ,
    REVISION_DT        DATE NOT NULL ,
    REVISION_DB_ID     NUMBER (10) NOT NULL ,
    REVISION_USER      VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE UTL_TEMP_ASSIGN_ROLE_MAP ADD CHECK ( ROLE_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE UTL_TEMP_ASSIGN_ROLE_MAP ADD CHECK ( ASSIGNABLE_ROLE_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE UTL_TEMP_ASSIGN_ROLE_MAP ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE UTL_TEMP_ASSIGN_ROLE_MAP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE UTL_TEMP_ASSIGN_ROLE_MAP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE UTL_TEMP_ASSIGN_ROLE_MAP ADD CONSTRAINT PK_UTLTEMPASSIGNROLEMAP PRIMARY KEY ( ROLE_ID, ASSIGNABLE_ROLE_ID ) ;


CREATE TABLE UTL_TIMEZONE
  (
    TIMEZONE_CD  VARCHAR2 (50) NOT NULL DEFERRABLE ,
    DESC_SDESC   VARCHAR2 (80) NOT NULL DEFERRABLE ,
    DESC_LDESC   VARCHAR2 (4000) NOT NULL DEFERRABLE ,
    USER_CD      VARCHAR2 (50) ,
    DEFAULT_BOOL NUMBER (1) NOT NULL DEFERRABLE ,
    VISIBLE_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    UTL_ID       NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_TIMEZONE ADD CHECK ( VISIBLE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_TIMEZONE ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_TIMEZONE
IS
  'Time zone data for locations.  The list of time zones is a near-complete copy of the Olsen ZoneInfo database - a few are omitted because they are not currently supported by Java''s TimeZone class.
Unsupported zones are:
America/Argentina/San_Luis
America/St_Barthelemy
America/Santarem
Asia/Kolkata
America/Marigot
America/Indiana/Tell_City
Asia/Ho_Chi_Minh' ;
  COMMENT ON COLUMN UTL_TIMEZONE.TIMEZONE_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN UTL_TIMEZONE.DESC_SDESC
IS
  'A short description of the time zone.' ;
  COMMENT ON COLUMN UTL_TIMEZONE.DESC_LDESC
IS
  'A long description of the time zone.' ;
  COMMENT ON COLUMN UTL_TIMEZONE.USER_CD
IS
  'Contains the value that is displayed to the user in Maintenix GUIs.  Allows users to customize how thier time zones are displayed.' ;
  COMMENT ON COLUMN UTL_TIMEZONE.DEFAULT_BOOL
IS
  'Indicates the default time zone.  This also indicates the server time zone.  Exactly one time zone must be set as the default.' ;
  COMMENT ON COLUMN UTL_TIMEZONE.VISIBLE_BOOL
IS
  'Defines read access for the record.' ;
  COMMENT ON COLUMN UTL_TIMEZONE.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
ALTER TABLE UTL_TIMEZONE ADD CONSTRAINT PK_UTL_TIMEZONE PRIMARY KEY ( TIMEZONE_CD ) ;


CREATE TABLE UTL_TODO_BUTTON
  (
    TODO_BUTTON_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    BUTTON_NAME        VARCHAR2 (40) ,
    ICON               VARCHAR2 (500) ,
    ACTION             VARCHAR2 (500) ,
    TOOLTIP            VARCHAR2 (200) ,
    PARM_NAME          VARCHAR2 (500) ,
    TODO_BUTTON_LDESC  VARCHAR2 (4000) ,
    QUERY_PATH         VARCHAR2 (4000) ,
    POCKET_BUTTON_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    UTL_ID             NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_TODO_BUTTON ADD CHECK ( TODO_BUTTON_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_TODO_BUTTON ADD CHECK ( POCKET_BUTTON_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_TODO_BUTTON ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_TODO_BUTTON
IS
  'List of available buttons that you can use on your To Do Lists. It will include every single button that does not require any context. You cannot extend this list.' ;
  COMMENT ON COLUMN UTL_TODO_BUTTON.TODO_BUTTON_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.' ;
  COMMENT ON COLUMN UTL_TODO_BUTTON.BUTTON_NAME
IS
  'The name of the button.' ;
  COMMENT ON COLUMN UTL_TODO_BUTTON.ICON
IS
  'The name of the icon.' ;
  COMMENT ON COLUMN UTL_TODO_BUTTON.ACTION
IS
  'The action the button performs' ;
  COMMENT ON COLUMN UTL_TODO_BUTTON.TOOLTIP
IS
  'The tooltip that pops up when a mouse ''hovers'' over a button.' ;
  COMMENT ON COLUMN UTL_TODO_BUTTON.PARM_NAME
IS
  'FK UTL_ACTION_CONFIG_PARM.' ;
  COMMENT ON COLUMN UTL_TODO_BUTTON.TODO_BUTTON_LDESC
IS
  'The long description of the buttons action.' ;
  COMMENT ON COLUMN UTL_TODO_BUTTON.QUERY_PATH
IS
  'Query that can indicate a number of items that apply to the button/action.' ;
  COMMENT ON COLUMN UTL_TODO_BUTTON.POCKET_BUTTON_BOOL
IS
  'An indicator if the button is to be shown on Pocket (=1) or Regular (=0) To Do List ' ;
  COMMENT ON COLUMN UTL_TODO_BUTTON.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
ALTER TABLE UTL_TODO_BUTTON ADD CONSTRAINT "pk_UTL_TODO_BUTTON" PRIMARY KEY ( TODO_BUTTON_ID ) ;


CREATE TABLE UTL_TODO_LIST
  (
    TODO_LIST_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ROLE_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    TITLE_NAME      VARCHAR2 (40) ,
    CONTEXT_NAME    VARCHAR2 (40) ,
    TODO_LIST_LDESC VARCHAR2 (4000) ,
    TODO_LIST_ORDER NUMBER (10) ,
    UTL_ID          NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_TODO_LIST ADD CHECK ( TODO_LIST_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_TODO_LIST ADD CHECK ( TODO_LIST_ORDER BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_TODO_LIST ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_TODO_LIST
IS
  'This table is created from the Role Details web page. Whenever you create a new To Do List, Maintenix will also create a menu item for that To Do List.' ;
  COMMENT ON COLUMN UTL_TODO_LIST.TODO_LIST_ID
IS
  'FK to UTL_TODO_LIST.' ;
  COMMENT ON COLUMN UTL_TODO_LIST.TITLE_NAME
IS
  'Title Name.' ;
  COMMENT ON COLUMN UTL_TODO_LIST.CONTEXT_NAME
IS
  'Context Name.' ;
  COMMENT ON COLUMN UTL_TODO_LIST.TODO_LIST_LDESC
IS
  'Long description.' ;
  COMMENT ON COLUMN UTL_TODO_LIST.TODO_LIST_ORDER
IS
  'TODO list order.' ;
  COMMENT ON COLUMN UTL_TODO_LIST.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
ALTER TABLE UTL_TODO_LIST ADD CONSTRAINT "pk_UTL_TODO_LIST" PRIMARY KEY ( TODO_LIST_ID ) ;


CREATE TABLE UTL_TODO_LIST_BUTTON
  (
    TODO_BUTTON_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TODO_LIST_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    BUTTON_ORDER   NUMBER (10) ,
    UTL_ID         NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_TODO_LIST_BUTTON ADD CHECK ( TODO_BUTTON_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_TODO_LIST_BUTTON ADD CHECK ( TODO_LIST_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_TODO_LIST_BUTTON ADD CHECK ( BUTTON_ORDER BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_TODO_LIST_BUTTON ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN UTL_TODO_LIST_BUTTON.TODO_BUTTON_ID
IS
  'FK to UTL_TODO_BUTTON.' ;
  COMMENT ON COLUMN UTL_TODO_LIST_BUTTON.TODO_LIST_ID
IS
  'FK to UTL_TODO_LIST.' ;
  COMMENT ON COLUMN UTL_TODO_LIST_BUTTON.BUTTON_ORDER
IS
  'the order the tabpages should appear in the to do list.' ;
  COMMENT ON COLUMN UTL_TODO_LIST_BUTTON.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
ALTER TABLE UTL_TODO_LIST_BUTTON ADD CONSTRAINT "pk_UTL_TODO_LIST_BUTTON" PRIMARY KEY ( TODO_BUTTON_ID, TODO_LIST_ID ) ;


CREATE TABLE UTL_TODO_LIST_TAB
  (
    TODO_TAB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    TODO_LIST_ID NUMBER (10) NOT NULL DEFERRABLE ,
    TAB_ORDER    NUMBER (10) ,
    UTL_ID       NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_TODO_LIST_TAB ADD CHECK ( TODO_TAB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_TODO_LIST_TAB ADD CHECK ( TODO_LIST_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_TODO_LIST_TAB ADD CHECK ( TAB_ORDER BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_TODO_LIST_TAB ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_TODO_LIST_TAB
IS
  'Once you have created the To Do List, you must assign one or more tabpages. This table allows you to decide which tabpages should appear on the To Do List, and in what order.' ;
  COMMENT ON COLUMN UTL_TODO_LIST_TAB.TODO_TAB_ID
IS
  'FK to UTL_TODO_LIST.' ;
  COMMENT ON COLUMN UTL_TODO_LIST_TAB.TODO_LIST_ID
IS
  'FK to UTL_TODO_TAB.' ;
  COMMENT ON COLUMN UTL_TODO_LIST_TAB.TAB_ORDER
IS
  'the order the tabpages should appear in the to do list.' ;
  COMMENT ON COLUMN UTL_TODO_LIST_TAB.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
ALTER TABLE UTL_TODO_LIST_TAB ADD CONSTRAINT "pk_UTL_TODO_LIST_TAB" PRIMARY KEY ( TODO_TAB_ID, TODO_LIST_ID ) ;


CREATE TABLE UTL_TODO_TAB
  (
    TODO_TAB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    TODO_TAB_CD      VARCHAR2 (80) NOT NULL DEFERRABLE ,
    TODO_TAB_NAME    VARCHAR2 (40) ,
    PATH             VARCHAR2 (500) ,
    TODO_TAB_LDESC   VARCHAR2 (4000) ,
    UTL_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REFRESH_INTERVAL NUMBER (4) DEFAULT 0 NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_TODO_TAB ADD CHECK ( TODO_TAB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_TODO_TAB ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_TODO_TAB
IS
  'List of available tabpages that you can use on your To Do Lists. This list will include every tabpage that is available to every role.' ;
  COMMENT ON COLUMN UTL_TODO_TAB.TODO_TAB_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key' ;
  COMMENT ON COLUMN UTL_TODO_TAB.TODO_TAB_CD
IS
  'A unique, user entered value that defines the PK.' ;
  COMMENT ON COLUMN UTL_TODO_TAB.TODO_TAB_NAME
IS
  'The tab page name.' ;
  COMMENT ON COLUMN UTL_TODO_TAB.PATH
IS
  'The path for the tab page.' ;
  COMMENT ON COLUMN UTL_TODO_TAB.TODO_TAB_LDESC
IS
  'The long description for the tab page.' ;
  COMMENT ON COLUMN UTL_TODO_TAB.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
  COMMENT ON COLUMN UTL_TODO_TAB.REFRESH_INTERVAL
IS
  'Time interval (in seconds) between data refreshes for data populated by this query.' ;
ALTER TABLE UTL_TODO_TAB ADD CONSTRAINT "pk_UTL_TODO_TAB" PRIMARY KEY ( TODO_TAB_ID ) ;


CREATE TABLE UTL_TRIGGER
  (
    TRIGGER_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    TRIGGER_CD   VARCHAR2 (100) NOT NULL DEFERRABLE ,
    EXEC_ORDER   NUMBER (5) NOT NULL DEFERRABLE ,
    TYPE_CD      VARCHAR2 (20) NOT NULL DEFERRABLE ,
    TRIGGER_NAME VARCHAR2 (200) NOT NULL DEFERRABLE ,
    CLASS_NAME   VARCHAR2 (500) NOT NULL DEFERRABLE ,
    ACTIVE_BOOL  NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    UTL_ID       NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_TRIGGER ADD CHECK ( TRIGGER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_TRIGGER ADD CHECK ( EXEC_ORDER BETWEEN 0 AND 99999) DEFERRABLE ;
ALTER TABLE UTL_TRIGGER ADD CHECK ( ACTIVE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_TRIGGER ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_TRIGGER
IS
  'This table defines Java classes that provide trigger functionality for areas of the application where interface "hooks" have been provided.' ;
  COMMENT ON COLUMN UTL_TRIGGER.TRIGGER_CD
IS
  'Trigger code that is referenced in the source code, usually with capital letters with underscores (e.g. MXCORE_BEFORE_CREATE_TASK).' ;
  COMMENT ON COLUMN UTL_TRIGGER.EXEC_ORDER
IS
  'Trigger ordering number to indicate what order to execute triggers when more than one is defined for the same interface.' ;
  COMMENT ON COLUMN UTL_TRIGGER.TYPE_CD
IS
  'Trigger type code.' ;
  COMMENT ON COLUMN UTL_TRIGGER.TRIGGER_NAME
IS
  'Short trigger name description.' ;
  COMMENT ON COLUMN UTL_TRIGGER.CLASS_NAME
IS
  'Fully qualified class name for the trigger class.' ;
  COMMENT ON COLUMN UTL_TRIGGER.ACTIVE_BOOL
IS
  'Boolean indicating whether or not the trigger is currently active.  Inactive triggers will not run.' ;
  COMMENT ON COLUMN UTL_TRIGGER.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
ALTER TABLE UTL_TRIGGER ADD CONSTRAINT PK_UTL_TRIGGER PRIMARY KEY ( TRIGGER_ID ) ;


CREATE TABLE UTL_USER
  (
    USER_ID                    NUMBER (10) NOT NULL DEFERRABLE ,
    USERNAME                   VARCHAR2 (40) NOT NULL DEFERRABLE ,
    PASSWORD                   VARCHAR2 (100) ,
    FIRST_NAME                 VARCHAR2 (100) NOT NULL DEFERRABLE ,
    MIDDLE_NAME                VARCHAR2 (100) ,
    LAST_NAME                  VARCHAR2 (100) NOT NULL DEFERRABLE ,
    ALERT_EMAIL_ADDR           VARCHAR2 (1000) ,
    EMAIL_ADDR                 VARCHAR2 (100) ,
    LOCKED_BOOL                NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    FORCE_PASSWORD_CHANGE_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    UTL_ID                     NUMBER (10) NOT NULL DEFERRABLE ,
    CTRL_DB_ID                 NUMBER (10) NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_USER ADD CHECK ( USER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_USER ADD CHECK ( LOCKED_BOOL                IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_USER ADD CHECK ( FORCE_PASSWORD_CHANGE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_USER ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_USER ADD CHECK ( CTRL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_USER ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_USER ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_USER
IS
  'This table is used to list all of the users that can login and use the application.  Generic user information such as names and e-mail addresses are listed in this table.' ;
  COMMENT ON COLUMN UTL_USER.USER_ID
IS
  'An internally generated ID used to uniquely identify the user.  Generated from USER_ID_SEQ.' ;
  COMMENT ON COLUMN UTL_USER.USERNAME
IS
  'The user?s unique login name.' ;
  COMMENT ON COLUMN UTL_USER.PASSWORD
IS
  'The user''s encrypted or plaintext password.' ;
  COMMENT ON COLUMN UTL_USER.FIRST_NAME
IS
  'The user''s first name.' ;
  COMMENT ON COLUMN UTL_USER.MIDDLE_NAME
IS
  'The user''s middle name.' ;
  COMMENT ON COLUMN UTL_USER.LAST_NAME
IS
  'The user''s last name.' ;
  COMMENT ON COLUMN UTL_USER.ALERT_EMAIL_ADDR
IS
  'A comma separate list of alert e-mail addresses for sending alert e-mails to the user.' ;
  COMMENT ON COLUMN UTL_USER.EMAIL_ADDR
IS
  'The user''s normal e-mail address.' ;
  COMMENT ON COLUMN UTL_USER.LOCKED_BOOL
IS
  'Boolean indicating whether or not the user account is locked.  Locked user accounts cannot log into the system.' ;
  COMMENT ON COLUMN UTL_USER.FORCE_PASSWORD_CHANGE_BOOL
IS
  'Boolean indicating that the user must change their password upon logging in.' ;
  COMMENT ON COLUMN UTL_USER.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
  COMMENT ON COLUMN UTL_USER.ALT_ID
IS
  'The alternate key is useful for identifying a specific row in the database when dealing with integrations and Maintenix front ends.  The alternate key can is unique to each entity and acts as a surrogate key.
The alternate key is intended to be system generated.' ;
  COMMENT ON COLUMN UTL_USER.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN UTL_USER.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN UTL_USER.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN UTL_USER.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
CREATE UNIQUE INDEX IX_UQ_USERNAME ON UTL_USER
  (
    USERNAME ASC
  )
  ;
ALTER TABLE UTL_USER ADD CONSTRAINT PK_UTL_USER PRIMARY KEY ( USER_ID ) ;
ALTER TABLE UTL_USER ADD CONSTRAINT UK_UTLUSER_ALTID UNIQUE ( ALT_ID ) ;


CREATE TABLE UTL_USER_ALERT
  (
    ALERT_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    USER_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    NOTIFIED_DATE  TIMESTAMP ,
    ASSIGNED_BOOL  NUMBER (1) DEFAULT 0 ,
    UTL_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_USER_ALERT ADD CHECK ( ALERT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_USER_ALERT ADD CHECK ( USER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_USER_ALERT ADD CHECK ( ASSIGNED_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_USER_ALERT ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_USER_ALERT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_USER_ALERT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_USER_ALERT
IS
  'Mapping table between users and alerts.' ;
  COMMENT ON COLUMN UTL_USER_ALERT.ALERT_ID
IS
  'Alert that is assigned to a a user.' ;
  COMMENT ON COLUMN UTL_USER_ALERT.USER_ID
IS
  'User to which the alert has been assigned.' ;
  COMMENT ON COLUMN UTL_USER_ALERT.NOTIFIED_DATE
IS
  'Timestamp when the user was notified about the alert.' ;
  COMMENT ON COLUMN UTL_USER_ALERT.ASSIGNED_BOOL
IS
  'This boolean indicates that the user is currently assigned to the alert.' ;
  COMMENT ON COLUMN UTL_USER_ALERT.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
  COMMENT ON COLUMN UTL_USER_ALERT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN UTL_USER_ALERT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN UTL_USER_ALERT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN UTL_USER_ALERT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE UTL_USER_ALERT ADD CONSTRAINT PK_UTL_USER_ALERT PRIMARY KEY ( ALERT_ID, USER_ID ) ;


CREATE TABLE UTL_USER_PARM
  (
    USER_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    PARM_NAME      VARCHAR2 (500) NOT NULL DEFERRABLE ,
    PARM_TYPE      VARCHAR2 (40) NOT NULL DEFERRABLE ,
    PARM_VALUE     VARCHAR2 (1000) ,
    UTL_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_USER_PARM ADD CHECK ( USER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_USER_PARM ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_USER_PARM ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_USER_PARM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_USER_PARM
IS
  'This table lists the user specific configuration parameter values.  The configuration parameter must be defined in the UTL_CONFIG_PARM table first.' ;
  COMMENT ON COLUMN UTL_USER_PARM.USER_ID
IS
  'An internally generated ID used to uniquely identify the user. Generated from USER_ID_SEQ.' ;
  COMMENT ON COLUMN UTL_USER_PARM.PARM_NAME
IS
  'The name of the configuration parameter.' ;
  COMMENT ON COLUMN UTL_USER_PARM.PARM_TYPE
IS
  'Configuration parameter type.' ;
  COMMENT ON COLUMN UTL_USER_PARM.PARM_VALUE
IS
  'The value of the configuration parameter.' ;
  COMMENT ON COLUMN UTL_USER_PARM.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
  COMMENT ON COLUMN UTL_USER_PARM.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN UTL_USER_PARM.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN UTL_USER_PARM.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN UTL_USER_PARM.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_UTLCONFIGPARM_UTLUSERPARM ON UTL_USER_PARM
    (
      PARM_NAME ASC ,
      PARM_TYPE ASC
    ) ;
  CREATE INDEX IX_UTLUSER_UTLUSERPARM ON UTL_USER_PARM
    ( USER_ID ASC
    ) ;
ALTER TABLE UTL_USER_PARM ADD CONSTRAINT PK_UTL_USER_PARM PRIMARY KEY ( USER_ID, PARM_NAME, PARM_TYPE ) ;


CREATE TABLE UTL_USER_PASSWORD
  (
    USER_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    PASSWORD       VARCHAR2 (100) NOT NULL DEFERRABLE ,
    CHANGED_DT     DATE NOT NULL DEFERRABLE ,
    UTL_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_USER_PASSWORD ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_USER_PASSWORD ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_USER_PASSWORD
IS
  'This table lists the users historic list of passwords.' ;
  COMMENT ON COLUMN UTL_USER_PASSWORD.USER_ID
IS
  'An internally generated ID used to uniquely identify the user. Generated from USER_ID_SEQ.' ;
  COMMENT ON COLUMN UTL_USER_PASSWORD.PASSWORD
IS
  'The user''s encrypted password.' ;
  COMMENT ON COLUMN UTL_USER_PASSWORD.CHANGED_DT
IS
  'The date that the password was changed.' ;
  COMMENT ON COLUMN UTL_USER_PASSWORD.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
  COMMENT ON COLUMN UTL_USER_PASSWORD.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN UTL_USER_PASSWORD.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN UTL_USER_PASSWORD.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN UTL_USER_PASSWORD.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_FK_UTLUSER_UTLUSERPASSWORD ON UTL_USER_PASSWORD
    (
      USER_ID ASC
    ) ;


CREATE TABLE UTL_USER_ROLE
  (
    USER_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    ROLE_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    ROLE_ORDER     INTEGER ,
    TEMP_BOOL      NUMBER (1) DEFAULT 0 NOT NULL ,
    UTL_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_USER_ROLE ADD CHECK ( USER_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_USER_ROLE ADD CHECK ( TEMP_BOOL IN (0, 1)) ;
ALTER TABLE UTL_USER_ROLE ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_USER_ROLE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE UTL_USER_ROLE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE UTL_USER_ROLE
IS
  'This table lists the user to role assignments.  Each user can belong to any number of roles and will inherit permissions and configurations based on those roles.' ;
  COMMENT ON COLUMN UTL_USER_ROLE.USER_ID
IS
  'The user that has been assigned to the role.' ;
  COMMENT ON COLUMN UTL_USER_ROLE.ROLE_ID
IS
  'FK to UTL_ROLE.' ;
  COMMENT ON COLUMN UTL_USER_ROLE.ROLE_ORDER
IS
  'The order in which the roles appear to a user.
' ;
  COMMENT ON COLUMN UTL_USER_ROLE.UTL_ID
IS
  'Identifies the creation database (MIM_LOCAL_DB) of the record. ' ;
  COMMENT ON COLUMN UTL_USER_ROLE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN UTL_USER_ROLE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN UTL_USER_ROLE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN UTL_USER_ROLE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE UTL_USER_ROLE ADD CONSTRAINT PK_UTL_USER_ROLE PRIMARY KEY ( USER_ID, ROLE_ID ) ;


CREATE TABLE UTL_USER_TEMP_ROLE
  (
    USER_TEMP_ROLE_ID RAW (16) NOT NULL ,
    USER_ID        NUMBER (10) NOT NULL ,
    ROLE_ID        NUMBER (10) NOT NULL ,
    START_DT       DATE NOT NULL ,
    END_DT         DATE NOT NULL ,
    ASSIGNED_BY    NUMBER (10) NOT NULL ,
    ASSIGNED_DT    DATE NOT NULL ,
    UNASSIGNED_BY  NUMBER (10) ,
    UNASSIGNED_DT  DATE ,
    UTL_ID         NUMBER (10) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL ,
    CREATION_DT    DATE NOT NULL ,
    REVISION_DT    DATE NOT NULL ,
    REVISION_DB_ID NUMBER (10) NOT NULL ,
    REVISION_USER  VARCHAR2 (30) NOT NULL
  ) ;
ALTER TABLE UTL_USER_TEMP_ROLE ADD CHECK ( USER_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE UTL_USER_TEMP_ROLE ADD CHECK ( ROLE_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE UTL_USER_TEMP_ROLE ADD CHECK ( ASSIGNED_BY BETWEEN 0 AND 4294967295) ;
ALTER TABLE UTL_USER_TEMP_ROLE ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE UTL_USER_TEMP_ROLE ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) ;
ALTER TABLE UTL_USER_TEMP_ROLE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) ;
ALTER TABLE UTL_USER_TEMP_ROLE ADD CONSTRAINT PK_UTLUSERTEMPROLE PRIMARY KEY ( USER_TEMP_ROLE_ID ) ;


CREATE TABLE UTL_VERSION
  (
    MODULE_NAME      VARCHAR2 (30) NOT NULL DEFERRABLE ,
    VERSION_NO_SDESC VARCHAR2 (80) NOT NULL DEFERRABLE ,
    INSTALL_DT       DATE ,
    INSTALL_SDESC    VARCHAR2 (80)
  ) ;
ALTER TABLE UTL_VERSION ADD CONSTRAINT PK_UTL_VERSION PRIMARY KEY ( MODULE_NAME, VERSION_NO_SDESC ) ;


CREATE TABLE UTL_WORK_ITEM
  (
    ID             NUMBER (10) NOT NULL DEFERRABLE ,
    TYPE           VARCHAR2 (40) NOT NULL DEFERRABLE ,
    KEY            VARCHAR2 (40) ,
    DATA           VARCHAR2 (2000) ,
    SERVER_ID      VARCHAR2 (20) ,
    SCHEDULED_DATE TIMESTAMP ,
    START_DATE     TIMESTAMP ,
    END_DATE       TIMESTAMP ,
    ERROR_MSG CLOB ,
    RETRY_CT NUMBER (10) DEFAULT 0 NOT NULL DEFERRABLE ,
    UTL_ID   NUMBER (10) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE UTL_WORK_ITEM ADD CHECK ( ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_WORK_ITEM ADD CHECK ( RETRY_CT BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_WORK_ITEM ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN UTL_WORK_ITEM.ID
IS
  'This is the ID of the work item as generated by UTL_WORK_ITEM_ID.' ;
  COMMENT ON COLUMN UTL_WORK_ITEM.TYPE
IS
  'This is the type of the work item.' ;
  COMMENT ON COLUMN UTL_WORK_ITEM.KEY
IS
  'This represents an optional MxKey referenced by the work item.' ;
  COMMENT ON COLUMN UTL_WORK_ITEM.DATA
IS
  'This stores any optional data that is required to be passed to the worker.' ;
  COMMENT ON COLUMN UTL_WORK_ITEM.SERVER_ID
IS
  'This is the ID of the Maintenix server that is processing the work item.' ;
  COMMENT ON COLUMN UTL_WORK_ITEM.SCHEDULED_DATE
IS
  'This is the date that the work item was scheduled by the work dispatcher.' ;
  COMMENT ON COLUMN UTL_WORK_ITEM.START_DATE
IS
  'This is the date that the worker started processing this work item.' ;
  COMMENT ON COLUMN UTL_WORK_ITEM.END_DATE
IS
  'This is the date that the work item completed processing, regardless of whether there was an error or not.' ;
  COMMENT ON COLUMN UTL_WORK_ITEM.ERROR_MSG
IS
  'If an error occurred during the processing of the work item, this stores the error message.' ;
  COMMENT ON COLUMN UTL_WORK_ITEM.RETRY_CT
IS
  'This column contains the number of times that a work item has been retried. Every time an error occurs while trying the work item, this value will increase. Once it exceeds the maximum retry count (as determined by UTL_WORK_ITEM_TYPE.max_retry_ct), it will no longer execute until it is reset.
' ;
  COMMENT ON COLUMN UTL_WORK_ITEM.UTL_ID
IS
  'Identifies the creation database (MIM_DB) of the record. ' ;
  CREATE INDEX IX_UTL_WORK_ITEM_KEY ON UTL_WORK_ITEM
    ( KEY ASC
    ) ;
  CREATE INDEX IX_UTL_WORK_ITEM_SCHEDULED_DAT ON UTL_WORK_ITEM
    (
      SCHEDULED_DATE ASC
    ) ;
  CREATE INDEX IX_UTL_WORK_ITEM_SERVER_ID ON UTL_WORK_ITEM
    ( SERVER_ID ASC
    ) ;
  CREATE INDEX IX_UTL_WORK_ITEM_TYPE_SERVER_D ON UTL_WORK_ITEM
    (
      TYPE ASC ,
      SERVER_ID ASC ,
      SCHEDULED_DATE ASC
    ) ;
ALTER TABLE UTL_WORK_ITEM ADD CONSTRAINT PK_UTL_WORK_ITEM PRIMARY KEY ( ID ) ;


CREATE TABLE UTL_WORK_ITEM_TYPE
  (
    NAME                       VARCHAR2 (40) NOT NULL DEFERRABLE ,
    WORKER_CLASS               VARCHAR2 (100) ,
    WORK_MANAGER               VARCHAR2 (80) ,
    ENABLED                    NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    MAX_RETRY_CT               NUMBER (10) DEFAULT 0 NOT NULL DEFERRABLE ,
    RETRY_INTERVAL             NUMBER (10) DEFAULT 30 NOT NULL DEFERRABLE ,
    SCHEDULED_BUFFER           NUMBER (4) DEFAULT 500 NOT NULL DEFERRABLE ,
    UTL_ID                     NUMBER (10) NOT NULL DEFERRABLE ,
    BATCH_EXECUTION_TIME_LIMIT NUMBER (4) DEFAULT 0 NOT NULL
  ) ;
ALTER TABLE UTL_WORK_ITEM_TYPE ADD CHECK ( ENABLED IN (0, 1)) DEFERRABLE ;
ALTER TABLE UTL_WORK_ITEM_TYPE ADD CHECK ( MAX_RETRY_CT BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE UTL_WORK_ITEM_TYPE ADD CHECK ( UTL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN UTL_WORK_ITEM_TYPE.NAME
IS
  'This is the name of the work item type.' ;
  COMMENT ON COLUMN UTL_WORK_ITEM_TYPE.WORKER_CLASS
IS
  'This is the fully-qualified Java class name of the Worker implementation.' ;
  COMMENT ON COLUMN UTL_WORK_ITEM_TYPE.WORK_MANAGER
IS
  'This is the resource reference name of the work manager to be used for this work item type.' ;
  COMMENT ON COLUMN UTL_WORK_ITEM_TYPE.ENABLED
IS
  'True if work items of this type should be executed; False if work items of this type have been disabled from running.' ;
  COMMENT ON COLUMN UTL_WORK_ITEM_TYPE.MAX_RETRY_CT
IS
  'This column contains the maximum number of times that a work item of this type can be retried. After a work item has failed this amount of times, the work item will stop trying. Manual reset is possible via the Reset functionality on the Work Item Console.
' ;
  COMMENT ON COLUMN UTL_WORK_ITEM_TYPE.RETRY_INTERVAL
IS
  'This column contains the number of seconds that a work item will be rescheduled in the future if the work item could not be completed at the scheduled time.' ;
  COMMENT ON COLUMN UTL_WORK_ITEM_TYPE.SCHEDULED_BUFFER
IS
  'Specifies the maximum number of work items that can be scheduled to a given server at any time.  Scheduled work items refers to items scheduled to server that have not yet been started.' ;
  COMMENT ON COLUMN UTL_WORK_ITEM_TYPE.UTL_ID
IS
  'Identifies the creation database (MIM_DB) of the record. ' ;
  COMMENT ON COLUMN UTL_WORK_ITEM_TYPE.BATCH_EXECUTION_TIME_LIMIT
IS
  'Enables batch execution optimization if set to a value greater than zero. Defines the maximum scheduled time block to fit in related work items in a batch scheduling operation' ;
ALTER TABLE UTL_WORK_ITEM_TYPE ADD CONSTRAINT PK_UTL_WORK_ITEM_TYPE PRIMARY KEY ( NAME ) ;


CREATE TABLE WARRANTY_ATTACH
  (
    WARRANTY_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    BLOB_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    ATTACH_TYPE_CD      VARCHAR2 (8) ,
    ATTACH_TYPE_DB_ID   NUMBER (10) ,
    ATTACH_SDESC        VARCHAR2 (80) NOT NULL DEFERRABLE ,
    ATTACH_LDESC        VARCHAR2 (4000) ,
    ATTACH_NOTE         VARCHAR2 (4000) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_ATTACH ADD CHECK ( WARRANTY_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_ATTACH ADD CHECK ( WARRANTY_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_ATTACH ADD CHECK ( BLOB_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_ATTACH ADD CHECK ( BLOB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_ATTACH ADD CHECK ( ATTACH_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_ATTACH ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_ATTACH ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN WARRANTY_ATTACH.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN WARRANTY_ATTACH.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_ATTACH.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN WARRANTY_ATTACH.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN WARRANTY_ATTACH.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_WARRANTYDEFN_WARRANTYATTACH ON WARRANTY_ATTACH
    (
      WARRANTY_DEFN_DB_ID ASC ,
      WARRANTY_DEFN_ID ASC
    ) ;
  CREATE INDEX IX_FK_CORBLOBINFO_WRRNTYATTACH ON WARRANTY_ATTACH
    (
      BLOB_DB_ID ASC ,
      BLOB_ID ASC
    ) ;
ALTER TABLE WARRANTY_ATTACH ADD CONSTRAINT PK_WARRANTY_ATTACH PRIMARY KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID, BLOB_DB_ID, BLOB_ID ) ;


CREATE TABLE WARRANTY_DEFN
  (
    WARRANTY_DEFN_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_DEFN_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_DB_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID                  NUMBER (10) NOT NULL DEFERRABLE ,
    NON_REP_PARTS_STATE_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    NON_REP_PARTS_STATE_CD     VARCHAR2 (8) NOT NULL DEFERRABLE ,
    CONFIG_SLOT_STATE_DB_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    CONFIG_SLOT_STATE_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    REP_PARTS_STATE_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REP_PARTS_STATE_CD         VARCHAR2 (8) NOT NULL DEFERRABLE ,
    WARRANTY_TYPE_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_TYPE_CD           VARCHAR2 (16) NOT NULL DEFERRABLE ,
    STATUS_DB_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    STATUS_CD                  VARCHAR2 (8) NOT NULL DEFERRABLE ,
    WARRANTY_SUB_TYPE_DB_ID    NUMBER (10) ,
    WARRANTY_SUB_TYPE_CD       VARCHAR2 (16) ,
    DATA_TYPE_DB_ID            NUMBER (10) ,
    DATA_TYPE_ID               NUMBER (10) ,
    WARRANTY_SDESC             VARCHAR2 (80) NOT NULL DEFERRABLE ,
    EXPIRE_GDT                 DATE ,
    EXPIRES_FIRST_BOOL         NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    ROUTINE_TASKS_BOOL         NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    LABOUR_BOOL                NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    OEM_PARTS_ONLY_BOOL        NUMBER (1) DEFAULT 0 ,
    UNIT_PRICE_THRESHOLD_QT    NUMBER (15,5) ,
    TURN_IN_PRICE_THRESHOLD_QT NUMBER (15,5) ,
    SUMMARY_SDESC              VARCHAR2 (4000) ,
    DURATION_QT FLOAT ,
    HOURS_QT FLOAT ,
    CYCLES_QT FLOAT ,
    PRIORITY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    PRIORITY_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_DEFN ADD CHECK ( WARRANTY_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN ADD CHECK ( WARRANTY_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN ADD CHECK ( NON_REP_PARTS_STATE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN ADD CHECK ( CONFIG_SLOT_STATE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN ADD CHECK ( REP_PARTS_STATE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN ADD CHECK ( WARRANTY_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN ADD CHECK ( STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN ADD CHECK ( WARRANTY_SUB_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN ADD CHECK ( DATA_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN ADD CHECK ( DATA_TYPE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN ADD CHECK ( EXPIRES_FIRST_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN ADD CHECK ( ROUTINE_TASKS_BOOL  IN (0, 1)) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN ADD CHECK ( LABOUR_BOOL         IN (0, 1)) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN ADD CHECK ( OEM_PARTS_ONLY_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN ADD CHECK ( PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN WARRANTY_DEFN.WARRANTY_DEFN_DB_ID
IS
  'PRIMARY KEY OF WARRANTY DEFN' ;
  COMMENT ON COLUMN WARRANTY_DEFN.WARRANTY_DEFN_ID
IS
  'PRIMARY KEY OF WARRANTY DEFN TABLE' ;
  COMMENT ON COLUMN WARRANTY_DEFN.WARRANTY_SDESC
IS
  'SHORT DESCRIPTION OF WARRANTY
' ;
  COMMENT ON COLUMN WARRANTY_DEFN.EXPIRES_FIRST_BOOL
IS
  'DEFINES IF THE WARRANTY EXPIRES APON FIRST EXPIRY CONDITION OR LAST.' ;
  COMMENT ON COLUMN WARRANTY_DEFN.ROUTINE_TASKS_BOOL
IS
  'DEFINES IF WARRANTY WILL INCLUDE ROUTINE LABOUR COVERAGE' ;
  COMMENT ON COLUMN WARRANTY_DEFN.LABOUR_BOOL
IS
  'DEFINES IF LABOUR IS INCLUDED IN WARRANTY' ;
  COMMENT ON COLUMN WARRANTY_DEFN.OEM_PARTS_ONLY_BOOL
IS
  'DEFINES IF WARRANTY ONLY APPLIES FOR EOM PARTS.' ;
  COMMENT ON COLUMN WARRANTY_DEFN.UNIT_PRICE_THRESHOLD_QT
IS
  'AVERAGE UNIT PRICE THRESHOLD FOR WARRANTY EVALUATION' ;
  COMMENT ON COLUMN WARRANTY_DEFN.TURN_IN_PRICE_THRESHOLD_QT
IS
  'TURN IN THRESHOLD FOR  WARRANTY' ;
  COMMENT ON COLUMN WARRANTY_DEFN.SUMMARY_SDESC
IS
  'SHORT DESCIRPTION THAT DEFINES A SUMMARY OF A WARRANTY
' ;
  COMMENT ON COLUMN WARRANTY_DEFN.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN WARRANTY_DEFN.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_DEFN.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN WARRANTY_DEFN.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN WARRANTY_DEFN.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_MDATATYPE_WARRANTYDEFN ON WARRANTY_DEFN
    (
      DATA_TYPE_DB_ID ASC ,
      DATA_TYPE_ID ASC
    ) ;
  CREATE INDEX IX_ORGVENDOR_WARRANTYDEFN ON WARRANTY_DEFN
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
ALTER TABLE WARRANTY_DEFN ADD CONSTRAINT PK_WARRANTY_DEFN PRIMARY KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) ;
ALTER TABLE WARRANTY_DEFN ADD CONSTRAINT IX_WARRANTYDEFNALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE WARRANTY_DEFN_ASSEMBLY
  (
    WARRANTY_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD           VARCHAR2 (8) NOT NULL DEFERRABLE ,
    TRANSFER_BOOL       NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_DEFN_ASSEMBLY ADD CHECK ( WARRANTY_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_ASSEMBLY ADD CHECK ( WARRANTY_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_ASSEMBLY ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_ASSEMBLY ADD CHECK ( TRANSFER_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_ASSEMBLY ADD CHECK ( RSTAT_CD      IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_ASSEMBLY ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN WARRANTY_DEFN_ASSEMBLY.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN WARRANTY_DEFN_ASSEMBLY.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_DEFN_ASSEMBLY.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN WARRANTY_DEFN_ASSEMBLY.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN WARRANTY_DEFN_ASSEMBLY.REVISION_USER
IS
  ' 
The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPASSMBL_WARRANTYDEFNASSMB ON WARRANTY_DEFN_ASSEMBLY
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC
    ) ;
  CREATE INDEX IX_WARRANTYDEFN_WARRANTYDEFNAS ON WARRANTY_DEFN_ASSEMBLY
    (
      WARRANTY_DEFN_DB_ID ASC ,
      WARRANTY_DEFN_ID ASC
    ) ;
ALTER TABLE WARRANTY_DEFN_ASSEMBLY ADD CONSTRAINT PK_WARRANTY_DEFN_ASSEMBLY PRIMARY KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID, ASSMBL_DB_ID, ASSMBL_CD ) ;


CREATE TABLE WARRANTY_DEFN_COMPONENT
  (
    WARRANTY_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    RECEIVE_COND_DB_ID  NUMBER (10) ,
    RECEIVE_COND_CD     VARCHAR2 (8) ,
    BASE_PART_NO        VARCHAR2 (40) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_DEFN_COMPONENT ADD CHECK ( WARRANTY_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_COMPONENT ADD CHECK ( WARRANTY_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_COMPONENT ADD CHECK ( RECEIVE_COND_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_COMPONENT ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_COMPONENT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN WARRANTY_DEFN_COMPONENT.BASE_PART_NO
IS
  'THIS IS A DEFAULT MATCH STRING THAT WILL BE USED TO DETERMINE IF THE PART NO''S TRYING TO BE INCLUDED WITH THIS WARRANTY ARE ACCEPTABLE.' ;
  COMMENT ON COLUMN WARRANTY_DEFN_COMPONENT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN WARRANTY_DEFN_COMPONENT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_DEFN_COMPONENT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN WARRANTY_DEFN_COMPONENT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN WARRANTY_DEFN_COMPONENT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE WARRANTY_DEFN_COMPONENT ADD CONSTRAINT PK_WARRANTY_DEFN_COMPONENT PRIMARY KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) ;


CREATE TABLE WARRANTY_DEFN_LOC_LIST
  (
    WARRANTY_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    LOC_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_DEFN_LOC_LIST ADD CHECK ( WARRANTY_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_LOC_LIST ADD CHECK ( WARRANTY_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_LOC_LIST ADD CHECK ( LOC_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_LOC_LIST ADD CHECK ( LOC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_LOC_LIST ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_LOC_LIST ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN WARRANTY_DEFN_LOC_LIST.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN WARRANTY_DEFN_LOC_LIST.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_DEFN_LOC_LIST.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN WARRANTY_DEFN_LOC_LIST.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN WARRANTY_DEFN_LOC_LIST.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVLOC_WARRANTYLOCLIST ON WARRANTY_DEFN_LOC_LIST
    (
      LOC_DB_ID ASC ,
      LOC_ID ASC
    ) ;
  CREATE INDEX IX_WARRANTY_WARRANTYLOCLIST ON WARRANTY_DEFN_LOC_LIST
    (
      WARRANTY_DEFN_DB_ID ASC ,
      WARRANTY_DEFN_ID ASC
    ) ;
ALTER TABLE WARRANTY_DEFN_LOC_LIST ADD CONSTRAINT PK_WARRANTY_DEFN_LOC_LIST PRIMARY KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID, LOC_DB_ID, LOC_ID ) ;


CREATE TABLE WARRANTY_DEFN_PART_LIST
  (
    WARRANTY_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_DEFN_PART_LIST ADD CHECK ( WARRANTY_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_PART_LIST ADD CHECK ( WARRANTY_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_PART_LIST ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_PART_LIST ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_PART_LIST ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_PART_LIST ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN WARRANTY_DEFN_PART_LIST.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN WARRANTY_DEFN_PART_LIST.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_DEFN_PART_LIST.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN WARRANTY_DEFN_PART_LIST.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN WARRANTY_DEFN_PART_LIST.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPPARTNO_WARRANTYDEFNPARTL ON WARRANTY_DEFN_PART_LIST
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_WARRANTYDEFN_WARRANTYDEFNPA ON WARRANTY_DEFN_PART_LIST
    (
      WARRANTY_DEFN_DB_ID ASC ,
      WARRANTY_DEFN_ID ASC
    ) ;
ALTER TABLE WARRANTY_DEFN_PART_LIST ADD CONSTRAINT PK_WARRANTY_DEFN_PART_LIST PRIMARY KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID, PART_NO_DB_ID, PART_NO_ID ) ;


CREATE TABLE WARRANTY_DEFN_TASK
  (
    WARRANTY_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    TASK_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_DEFN_TASK ADD CHECK ( WARRANTY_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_TASK ADD CHECK ( WARRANTY_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_TASK ADD CHECK ( TASK_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_TASK ADD CHECK ( TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_TASK ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_TASK ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN WARRANTY_DEFN_TASK.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN WARRANTY_DEFN_TASK.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_DEFN_TASK.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN WARRANTY_DEFN_TASK.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN WARRANTY_DEFN_TASK.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_TASKTASK_WARRANTYDEFNTASK ON WARRANTY_DEFN_TASK
    (
      TASK_DB_ID ASC ,
      TASK_ID ASC
    ) ;
  CREATE INDEX IX_WARRANTYDEFN_WARRANTYDEFNTA ON WARRANTY_DEFN_TASK
    (
      WARRANTY_DEFN_DB_ID ASC ,
      WARRANTY_DEFN_ID ASC
    ) ;
ALTER TABLE WARRANTY_DEFN_TASK ADD CONSTRAINT PK_WARRANTY_DEFN_TASK PRIMARY KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID, TASK_DB_ID, TASK_ID ) ;


CREATE TABLE WARRANTY_DEFN_VENDOR_LIST
  (
    WARRANTY_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    VENDOR_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_DEFN_VENDOR_LIST ADD CHECK ( WARRANTY_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_VENDOR_LIST ADD CHECK ( WARRANTY_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_VENDOR_LIST ADD CHECK ( VENDOR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_VENDOR_LIST ADD CHECK ( VENDOR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_VENDOR_LIST ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_DEFN_VENDOR_LIST ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN WARRANTY_DEFN_VENDOR_LIST.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_DEFN_VENDOR_LIST.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN WARRANTY_DEFN_VENDOR_LIST.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN WARRANTY_DEFN_VENDOR_LIST.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGVENDOR_WARRANTYDEFNVENDO ON WARRANTY_DEFN_VENDOR_LIST
    (
      VENDOR_DB_ID ASC ,
      VENDOR_ID ASC
    ) ;
  CREATE INDEX IX_WARRANTYDEFN_WARRANTYDEFNVE ON WARRANTY_DEFN_VENDOR_LIST
    (
      WARRANTY_DEFN_DB_ID ASC ,
      WARRANTY_DEFN_ID ASC
    ) ;
ALTER TABLE WARRANTY_DEFN_VENDOR_LIST ADD CONSTRAINT PK_WARRANTY_DEFN_VENDOR_LIST PRIMARY KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID, VENDOR_DB_ID, VENDOR_ID ) ;


CREATE TABLE WARRANTY_EVAL
  (
    WARRANTY_EVAL_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    STATUS_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    STATUS_CD           VARCHAR2 (16) NOT NULL DEFERRABLE ,
    WARRANTY_INIT_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_INIT_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    WP_SCHED_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    WP_SCHED_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    REJECT_HR_DB_ID     NUMBER (10) ,
    REJECT_HR_ID        NUMBER (10) ,
    REJECT_GDT          DATE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_EVAL ADD CHECK ( WARRANTY_EVAL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL ADD CHECK ( WARRANTY_EVAL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL ADD CHECK ( STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL ADD CHECK ( WARRANTY_INIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL ADD CHECK ( WARRANTY_INIT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL ADD CHECK ( WP_SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL ADD CHECK ( WP_SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL ADD CHECK ( REJECT_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL ADD CHECK ( REJECT_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE WARRANTY_EVAL
IS
  'This table represents a successful evaluation of an initialized warranty against a workpackage/scheduled task.  Here there is a link to the successfully matching parts/labour and the warranty that it was from.' ;
  COMMENT ON COLUMN WARRANTY_EVAL.WARRANTY_EVAL_DB_ID
IS
  'Primary key of a warranty that has been successfully evaluated.' ;
  COMMENT ON COLUMN WARRANTY_EVAL.WARRANTY_EVAL_ID
IS
  'Primary key of a warranty that has been successfully evaluated.' ;
  COMMENT ON COLUMN WARRANTY_EVAL.STATUS_DB_ID
IS
  'status of the warranty evalutation.' ;
  COMMENT ON COLUMN WARRANTY_EVAL.STATUS_CD
IS
  'status of the warranty evalutation.' ;
  COMMENT ON COLUMN WARRANTY_EVAL.WARRANTY_INIT_DB_ID
IS
  'link back to original initalized warranty that this evaluation matched.' ;
  COMMENT ON COLUMN WARRANTY_EVAL.WARRANTY_INIT_ID
IS
  'link back to original initalized warranty that this evaluation matched.' ;
  COMMENT ON COLUMN WARRANTY_EVAL.WP_SCHED_DB_ID
IS
  'originiating workpackage that this warranty evalutation is applicable too.' ;
  COMMENT ON COLUMN WARRANTY_EVAL.WP_SCHED_ID
IS
  'originiating workpackage that this warranty evalutation is applicable too.' ;
  COMMENT ON COLUMN WARRANTY_EVAL.REJECT_HR_DB_ID
IS
  'link to hr resource who has rejected this evaluation.' ;
  COMMENT ON COLUMN WARRANTY_EVAL.REJECT_HR_ID
IS
  'link to hr resource who has rejected this evaluation.' ;
  COMMENT ON COLUMN WARRANTY_EVAL.REJECT_GDT
IS
  'date of rejection of evaluation.' ;
  COMMENT ON COLUMN WARRANTY_EVAL.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_ORGHR_WARRANTYEVAL ON WARRANTY_EVAL
    (
      REJECT_HR_DB_ID ASC ,
      REJECT_HR_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDSTASK_WARRANTYEVAL ON WARRANTY_EVAL
    (
      WP_SCHED_DB_ID ASC ,
      WP_SCHED_ID ASC
    ) ;
  CREATE INDEX IX_WARRANTYINIT_WARRANTYEVAL ON WARRANTY_EVAL
    (
      WARRANTY_INIT_DB_ID ASC ,
      WARRANTY_INIT_ID ASC
    ) ;
ALTER TABLE WARRANTY_EVAL ADD CONSTRAINT PK_WARRANTY_EVAL PRIMARY KEY ( WARRANTY_EVAL_DB_ID, WARRANTY_EVAL_ID ) ;


CREATE TABLE WARRANTY_EVAL_ALERT_QUEUE
  (
    WARRANTY_EVAL_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    EXECUTE_BOOL        NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_EVAL_ALERT_QUEUE ADD CHECK ( WARRANTY_EVAL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_ALERT_QUEUE ADD CHECK ( WARRANTY_EVAL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_ALERT_QUEUE ADD CHECK ( EXECUTE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_ALERT_QUEUE ADD CHECK ( RSTAT_CD     IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_ALERT_QUEUE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE WARRANTY_EVAL_ALERT_QUEUE
IS
  'This is another asynchronous table that drives a job that creates alerts within maintenix.  These alerts will notify warranty agents that some warranties have been evaluted but some conditions of the warranty were not.' ;
  COMMENT ON COLUMN WARRANTY_EVAL_ALERT_QUEUE.EXECUTE_BOOL
IS
  'This value defines if this queue item has been processed.' ;
  COMMENT ON COLUMN WARRANTY_EVAL_ALERT_QUEUE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL_ALERT_QUEUE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL_ALERT_QUEUE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL_ALERT_QUEUE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL_ALERT_QUEUE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
ALTER TABLE WARRANTY_EVAL_ALERT_QUEUE ADD CONSTRAINT PK_WARRANTY_EVAL_ALERT_QUEUE PRIMARY KEY ( WARRANTY_EVAL_DB_ID, WARRANTY_EVAL_ID ) ;


CREATE TABLE WARRANTY_EVAL_LABOUR
  (
    WARRANTY_EVAL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_TASK_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_LABOUR_ID NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    LABOUR_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD                NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER           VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_EVAL_LABOUR ADD CHECK ( WARRANTY_EVAL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_LABOUR ADD CHECK ( WARRANTY_EVAL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_LABOUR ADD CHECK ( WARRANTY_EVAL_TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_LABOUR ADD CHECK ( WARRANTY_EVAL_LABOUR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_LABOUR ADD CHECK ( LABOUR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_LABOUR ADD CHECK ( LABOUR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_LABOUR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_LABOUR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE WARRANTY_EVAL_LABOUR
IS
  'All labour that evaluated to be covered by a warranty' ;
  COMMENT ON COLUMN WARRANTY_EVAL_LABOUR.LABOUR_DB_ID
IS
  'FK to SCHED_LABOUR' ;
  COMMENT ON COLUMN WARRANTY_EVAL_LABOUR.LABOUR_ID
IS
  'FK to SCHED_LABOUR' ;
  COMMENT ON COLUMN WARRANTY_EVAL_LABOUR.RSTAT_CD
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL_LABOUR.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL_LABOUR.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL_LABOUR.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL_LABOUR.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_WAREVALTSK_WAREVALAB ON WARRANTY_EVAL_LABOUR
    (
      WARRANTY_EVAL_DB_ID ASC ,
      WARRANTY_EVAL_ID ASC ,
      WARRANTY_EVAL_TASK_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDLBR_WARRANTYEVALLBR ON WARRANTY_EVAL_LABOUR
    (
      LABOUR_DB_ID ASC ,
      LABOUR_ID ASC
    ) ;
ALTER TABLE WARRANTY_EVAL_LABOUR ADD CONSTRAINT PK_WARRANTY_EVAL_LABOUR PRIMARY KEY ( WARRANTY_EVAL_DB_ID, WARRANTY_EVAL_ID, WARRANTY_EVAL_TASK_ID, WARRANTY_EVAL_LABOUR_ID ) ;


CREATE TABLE WARRANTY_EVAL_PART
  (
    WARRANTY_EVAL_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_TASK_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_PART_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    WORKSCOPE_SCHED_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    WORKSCOPE_SCHED_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    WORKSCOPE_SCHED_PART_ID NUMBER (10) NOT NULL DEFERRABLE ,
    RTRN_REQ_BOOL           NUMBER (1) DEFAULT 1 NOT NULL DEFERRABLE ,
    RSTAT_CD                NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER           VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_EVAL_PART ADD CHECK ( WARRANTY_EVAL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_PART ADD CHECK ( WARRANTY_EVAL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_PART ADD CHECK ( WARRANTY_EVAL_TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_PART ADD CHECK ( WARRANTY_EVAL_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_PART ADD CHECK ( WORKSCOPE_SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_PART ADD CHECK ( WORKSCOPE_SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_PART ADD CHECK ( WORKSCOPE_SCHED_PART_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_PART ADD CHECK ( RTRN_REQ_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_PART ADD CHECK ( RSTAT_CD      IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_PART ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE WARRANTY_EVAL_PART
IS
  'All parts that should be covered under a warranty' ;
  COMMENT ON COLUMN WARRANTY_EVAL_PART.WARRANTY_EVAL_PART_ID
IS
  'new primary key of table. ' ;
  COMMENT ON COLUMN WARRANTY_EVAL_PART.WORKSCOPE_SCHED_DB_ID
IS
  'link to originating workpackage that issues this evaluation.' ;
  COMMENT ON COLUMN WARRANTY_EVAL_PART.WORKSCOPE_SCHED_ID
IS
  'link to originating workpackage that issues this evaluation.' ;
  COMMENT ON COLUMN WARRANTY_EVAL_PART.WORKSCOPE_SCHED_PART_ID
IS
  'link to originating workpackage that issues this evaluation.' ;
  COMMENT ON COLUMN WARRANTY_EVAL_PART.RTRN_REQ_BOOL
IS
  'defines if the evaluted parts from this warranty need to be returned as a part of this warranty to be claimed.  AKA KEEP THE PART, DON''T THROW OUT!' ;
  COMMENT ON COLUMN WARRANTY_EVAL_PART.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL_PART.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL_PART.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL_PART.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL_PART.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_SCHEDPART_WARRANTYEVALPART ON WARRANTY_EVAL_PART
    (
      WORKSCOPE_SCHED_DB_ID ASC ,
      WORKSCOPE_SCHED_ID ASC ,
      WORKSCOPE_SCHED_PART_ID ASC
    ) ;
  CREATE INDEX IX_WARRANTYEVALTASK_WRNTEVALPA ON WARRANTY_EVAL_PART
    (
      WARRANTY_EVAL_DB_ID ASC ,
      WARRANTY_EVAL_ID ASC ,
      WARRANTY_EVAL_TASK_ID ASC
    ) ;
ALTER TABLE WARRANTY_EVAL_PART ADD CONSTRAINT PK_WARRANTY_EVAL_PART PRIMARY KEY ( WARRANTY_EVAL_DB_ID, WARRANTY_EVAL_ID, WARRANTY_EVAL_TASK_ID, WARRANTY_EVAL_PART_ID ) ;


CREATE TABLE WARRANTY_EVAL_QUEUE
  (
    EVAL_QUEUE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    EVAL_QUEUE_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    EXECUTE_BOOL     NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD         NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DT      DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER    VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_EVAL_QUEUE ADD CHECK ( EVAL_QUEUE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_QUEUE ADD CHECK ( EVAL_QUEUE_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_QUEUE ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_QUEUE ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_QUEUE ADD CHECK ( EXECUTE_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_QUEUE ADD CHECK ( RSTAT_CD     IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_QUEUE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE WARRANTY_EVAL_QUEUE
IS
  'This table is a queue for all workpackages and tasks that need to be checked to see if any intialized warranties have been created for the parts/labour inside them.  This is an offline, asyncronous process that drives the creation of warranty_eval entries.' ;
  COMMENT ON COLUMN WARRANTY_EVAL_QUEUE.EVAL_QUEUE_DB_ID
IS
  'primary key of a warranty that needs to be evaluated.  This is a queue.' ;
  COMMENT ON COLUMN WARRANTY_EVAL_QUEUE.EVAL_QUEUE_ID
IS
  'primary key of a warranty that needs to be evaluated.  This is a queue.' ;
  COMMENT ON COLUMN WARRANTY_EVAL_QUEUE.EXECUTE_BOOL
IS
  'this value defines if the evaluation for the given task/workpackage has been processed.' ;
  COMMENT ON COLUMN WARRANTY_EVAL_QUEUE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL_QUEUE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL_QUEUE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL_QUEUE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL_QUEUE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_SCHEDSTASK_WARRANTYEVALQUEU ON WARRANTY_EVAL_QUEUE
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
ALTER TABLE WARRANTY_EVAL_QUEUE ADD CONSTRAINT PK_WARRANTY_EVAL_QUEUE PRIMARY KEY ( EVAL_QUEUE_DB_ID, EVAL_QUEUE_ID ) ;


CREATE TABLE WARRANTY_EVAL_TASK
  (
    WARRANTY_EVAL_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_EVAL_TASK_ID NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD              NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DT           DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER         VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_EVAL_TASK ADD CHECK ( WARRANTY_EVAL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_TASK ADD CHECK ( WARRANTY_EVAL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_TASK ADD CHECK ( WARRANTY_EVAL_TASK_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_TASK ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_TASK ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_TASK ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_EVAL_TASK ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE WARRANTY_EVAL_TASK
IS
  'All originating tasks that parts and labour come from that evaluated to be covered under a warranty.
Special case - ADHOCK AND CORR TASKS.  These tasks/workpackages will be the same id.' ;
  COMMENT ON COLUMN WARRANTY_EVAL_TASK.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL_TASK.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL_TASK.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL_TASK.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN WARRANTY_EVAL_TASK.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_SCHEDSTASK_WARRANTYEVALTASK ON WARRANTY_EVAL_TASK
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_WARRANTYEVAL_TASKS ON WARRANTY_EVAL_TASK
    (
      WARRANTY_EVAL_DB_ID ASC ,
      WARRANTY_EVAL_ID ASC
    ) ;
ALTER TABLE WARRANTY_EVAL_TASK ADD CONSTRAINT PK_WARRANTY_EVAL_TASK PRIMARY KEY ( WARRANTY_EVAL_DB_ID, WARRANTY_EVAL_ID, WARRANTY_EVAL_TASK_ID ) ;


CREATE TABLE WARRANTY_IETM
  (
    WARRANTY_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_IETM_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_TOPIC_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    IETM_ORD            NUMBER ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_IETM ADD CHECK ( WARRANTY_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_IETM ADD CHECK ( WARRANTY_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_IETM ADD CHECK ( WARRANTY_IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_IETM ADD CHECK ( IETM_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_IETM ADD CHECK ( IETM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_IETM ADD CHECK ( IETM_TOPIC_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_IETM ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_IETM ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN WARRANTY_IETM.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN WARRANTY_IETM.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_IETM.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN WARRANTY_IETM.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN WARRANTY_IETM.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_IETMTOPIC_WARRANTYIETM ON WARRANTY_IETM
    (
      IETM_DB_ID ASC ,
      IETM_ID ASC ,
      IETM_TOPIC_ID ASC
    ) ;
  CREATE INDEX IX_WARRANTYDEFN_WARRANTYIETM ON WARRANTY_IETM
    (
      WARRANTY_DEFN_DB_ID ASC ,
      WARRANTY_DEFN_ID ASC
    ) ;
ALTER TABLE WARRANTY_IETM ADD CONSTRAINT PK_WARRANTY_IETM PRIMARY KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID, WARRANTY_IETM_ID ) ;


CREATE TABLE WARRANTY_INIT
  (
    WARRANTY_INIT_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_INIT_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_DEFN_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_DEFN_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_PRIORITY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_PRIORITY_CD    VARCHAR2 (8) NOT NULL DEFERRABLE ,
    EXPIRES_FIRST_BOOL      NUMBER (1) DEFAULT 0 ,
    START_GDT               DATE ,
    END_GDT                 DATE ,
    START_TSN_HOURS_QT FLOAT ,
    END_TSN_HOURS_QT FLOAT ,
    START_TSN_CYCLES_QT FLOAT ,
    END_TSN_CYCLES_QT FLOAT ,
    EXPIRED_BOOL NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_INIT ADD CHECK ( WARRANTY_INIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_INIT ADD CHECK ( WARRANTY_INIT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_INIT ADD CHECK ( WARRANTY_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_INIT ADD CHECK ( WARRANTY_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_INIT ADD CHECK ( WARRANTY_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_INIT ADD CHECK ( EXPIRES_FIRST_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE WARRANTY_INIT ADD CHECK ( EXPIRED_BOOL       IN (0, 1)) DEFERRABLE ;
ALTER TABLE WARRANTY_INIT ADD CHECK ( RSTAT_CD           IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_INIT ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN WARRANTY_INIT.WARRANTY_INIT_DB_ID
IS
  'PRIMARY KEY OF AN INITIALIZED WARRANTY' ;
  COMMENT ON COLUMN WARRANTY_INIT.WARRANTY_INIT_ID
IS
  'THE PRIMARY KEY OF AN INITIALIZED WARRANTY
' ;
  COMMENT ON COLUMN WARRANTY_INIT.WARRANTY_DEFN_DB_ID
IS
  'FK TO WARRANTY CONTRACT' ;
  COMMENT ON COLUMN WARRANTY_INIT.WARRANTY_DEFN_ID
IS
  'FK TO WARRANTY CONTRACT' ;
  COMMENT ON COLUMN WARRANTY_INIT.WARRANTY_PRIORITY_DB_ID
IS
  'FK TO WARRANTY PRIORITY' ;
  COMMENT ON COLUMN WARRANTY_INIT.WARRANTY_PRIORITY_CD
IS
  'FK TO WARRANTY PRIORITY' ;
  COMMENT ON COLUMN WARRANTY_INIT.EXPIRES_FIRST_BOOL
IS
  'DEFINES IF THE WARRANTY WILL EXPIRE AT THE FIRST ENCOUNTED END VALUE OR AT THE LAST ENCOUNTERED END VALUE - CYCLES/HOURS OR DATE.' ;
  COMMENT ON COLUMN WARRANTY_INIT.START_GDT
IS
  'START TIME OF WARRANTY' ;
  COMMENT ON COLUMN WARRANTY_INIT.END_GDT
IS
  'END DATE OF WARRANTY, WHEN THIS WARRANTY WILL EXPIRE' ;
  COMMENT ON COLUMN WARRANTY_INIT.START_TSN_HOURS_QT
IS
  'DEFINES THE START TIME SINCE NEW ON THIS WARRANTY' ;
  COMMENT ON COLUMN WARRANTY_INIT.END_TSN_HOURS_QT
IS
  'DEFINES THE TIME THIS WARRANTY EXPIRES BASED ON TIME SINCE NEW' ;
  COMMENT ON COLUMN WARRANTY_INIT.START_TSN_CYCLES_QT
IS
  'START OF TIME SINCE NEW IN CYCLES FOR WARRANTY' ;
  COMMENT ON COLUMN WARRANTY_INIT.END_TSN_CYCLES_QT
IS
  'DEFINES THE ENT TIME SINCE NEW THAT THIS WARRANTY WILL EXPIRE CALCULATED IN CYCLES.' ;
  COMMENT ON COLUMN WARRANTY_INIT.EXPIRED_BOOL
IS
  'SET IF THIS WARRANTY HAS EXPIRED.  SET BY THE WARRANTY EXPIRY JOB.' ;
  COMMENT ON COLUMN WARRANTY_INIT.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN WARRANTY_INIT.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_INIT.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN WARRANTY_INIT.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN WARRANTY_INIT.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_WARRANTYDEFN_WARRANTY_INIT ON WARRANTY_INIT
    (
      WARRANTY_DEFN_DB_ID ASC ,
      WARRANTY_DEFN_ID ASC
    ) ;
ALTER TABLE WARRANTY_INIT ADD CONSTRAINT PK_WARRANTY_INIT PRIMARY KEY ( WARRANTY_INIT_DB_ID, WARRANTY_INIT_ID ) ;
ALTER TABLE WARRANTY_INIT ADD CONSTRAINT IX_WARRANTYINITALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE WARRANTY_INIT_INV
  (
    WARRANTY_INIT_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_INIT_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    INV_NO_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    MASTER_BOOL         NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_INIT_INV ADD CHECK ( WARRANTY_INIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_INIT_INV ADD CHECK ( WARRANTY_INIT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_INIT_INV ADD CHECK ( INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_INIT_INV ADD CHECK ( INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_INIT_INV ADD CHECK ( MASTER_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE WARRANTY_INIT_INV ADD CHECK ( RSTAT_CD    IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_INIT_INV ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN WARRANTY_INIT_INV.MASTER_BOOL
IS
  'This boolean will inform maintenix that this peice of inventory is the top level peice of inventory for a warranty.  set to false if the peice of inventory has been removed/replaced from original assembly' ;
  COMMENT ON COLUMN WARRANTY_INIT_INV.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN WARRANTY_INIT_INV.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_INIT_INV.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN WARRANTY_INIT_INV.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN WARRANTY_INIT_INV.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVINV_WARRANTYINIT_INV ON WARRANTY_INIT_INV
    (
      INV_NO_DB_ID ASC ,
      INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_WARRNTYINIT_WRNTYINITINV ON WARRANTY_INIT_INV
    (
      WARRANTY_INIT_DB_ID ASC ,
      WARRANTY_INIT_ID ASC
    ) ;
ALTER TABLE WARRANTY_INIT_INV ADD CONSTRAINT PK_WARRANTY_INIT_INV PRIMARY KEY ( WARRANTY_INIT_DB_ID, WARRANTY_INIT_ID, INV_NO_DB_ID, INV_NO_ID ) ;


CREATE TABLE WARRANTY_INIT_TASK
  (
    WARRANTY_INIT_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_INIT_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    MASTER_BOOL         NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_INIT_TASK ADD CHECK ( WARRANTY_INIT_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_INIT_TASK ADD CHECK ( WARRANTY_INIT_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_INIT_TASK ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_INIT_TASK ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_INIT_TASK ADD CHECK ( MASTER_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE WARRANTY_INIT_TASK ADD CHECK ( RSTAT_CD    IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_INIT_TASK ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN WARRANTY_INIT_TASK.MASTER_BOOL
IS
  'This boolean will inform maintenix that this record is the master warranty record.' ;
  COMMENT ON COLUMN WARRANTY_INIT_TASK.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN WARRANTY_INIT_TASK.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_INIT_TASK.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN WARRANTY_INIT_TASK.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN WARRANTY_INIT_TASK.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.
' ;
  CREATE INDEX IX_SCHEDSTASK_WARRANTYINITTASK ON WARRANTY_INIT_TASK
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_WARRANTYINIT_WRNTINITTASK ON WARRANTY_INIT_TASK
    (
      WARRANTY_INIT_DB_ID ASC ,
      WARRANTY_INIT_ID ASC
    ) ;
ALTER TABLE WARRANTY_INIT_TASK ADD CONSTRAINT PK_WARRANTY_INIT_TASK PRIMARY KEY ( WARRANTY_INIT_DB_ID, WARRANTY_INIT_ID, SCHED_DB_ID, SCHED_ID ) ;


CREATE TABLE WARRANTY_TERMS_CONFIG_SLOTS
  (
    WARRANTY_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_CD           VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ASSMBL_BOM_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_TERMS_CONFIG_SLOTS ADD CHECK ( WARRANTY_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_TERMS_CONFIG_SLOTS ADD CHECK ( WARRANTY_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_TERMS_CONFIG_SLOTS ADD CHECK ( ASSMBL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_TERMS_CONFIG_SLOTS ADD CHECK ( ASSMBL_BOM_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_TERMS_CONFIG_SLOTS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_TERMS_CONFIG_SLOTS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN WARRANTY_TERMS_CONFIG_SLOTS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN WARRANTY_TERMS_CONFIG_SLOTS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_TERMS_CONFIG_SLOTS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN WARRANTY_TERMS_CONFIG_SLOTS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN WARRANTY_TERMS_CONFIG_SLOTS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPASSMBLBOM_WARRANTYTERMSC ON WARRANTY_TERMS_CONFIG_SLOTS
    (
      ASSMBL_DB_ID ASC ,
      ASSMBL_CD ASC ,
      ASSMBL_BOM_ID ASC
    ) ;
  CREATE INDEX IX_WARRANTY_TERMSCONFIGSLOTS ON WARRANTY_TERMS_CONFIG_SLOTS
    (
      WARRANTY_DEFN_DB_ID ASC ,
      WARRANTY_DEFN_ID ASC
    ) ;
ALTER TABLE WARRANTY_TERMS_CONFIG_SLOTS ADD CONSTRAINT PK_WARRANTY_TERMS_CONFIG_SLOTS PRIMARY KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID, ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) ;


CREATE TABLE WARRANTY_TERMS_NON_REP_PARTS
  (
    WARRANTY_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_TERMS_NON_REP_PARTS ADD CHECK ( WARRANTY_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_TERMS_NON_REP_PARTS ADD CHECK ( WARRANTY_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_TERMS_NON_REP_PARTS ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_TERMS_NON_REP_PARTS ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_TERMS_NON_REP_PARTS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_TERMS_NON_REP_PARTS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN WARRANTY_TERMS_NON_REP_PARTS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN WARRANTY_TERMS_NON_REP_PARTS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_TERMS_NON_REP_PARTS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN WARRANTY_TERMS_NON_REP_PARTS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.
' ;
  COMMENT ON COLUMN WARRANTY_TERMS_NON_REP_PARTS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPPARTNO_WARRANTYTERMSNONR ON WARRANTY_TERMS_NON_REP_PARTS
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_WARRANTY_WRRNTTERMSNONREPPA ON WARRANTY_TERMS_NON_REP_PARTS
    (
      WARRANTY_DEFN_DB_ID ASC ,
      WARRANTY_DEFN_ID ASC
    ) ;
ALTER TABLE WARRANTY_TERMS_NON_REP_PARTS ADD CONSTRAINT PK_WARRANTY_TERMS_NON_REP_PART PRIMARY KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID, PART_NO_DB_ID, PART_NO_ID ) ;


CREATE TABLE WARRANTY_TERMS_REP_PARTS
  (
    WARRANTY_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WARRANTY_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    PART_NO_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WARRANTY_TERMS_REP_PARTS ADD CHECK ( WARRANTY_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_TERMS_REP_PARTS ADD CHECK ( WARRANTY_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_TERMS_REP_PARTS ADD CHECK ( PART_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_TERMS_REP_PARTS ADD CHECK ( PART_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WARRANTY_TERMS_REP_PARTS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WARRANTY_TERMS_REP_PARTS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON COLUMN WARRANTY_TERMS_REP_PARTS.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN WARRANTY_TERMS_REP_PARTS.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.
' ;
  COMMENT ON COLUMN WARRANTY_TERMS_REP_PARTS.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.
' ;
  COMMENT ON COLUMN WARRANTY_TERMS_REP_PARTS.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN WARRANTY_TERMS_REP_PARTS.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_EQPPARTNO_WARRANTYTERMSREPP ON WARRANTY_TERMS_REP_PARTS
    (
      PART_NO_DB_ID ASC ,
      PART_NO_ID ASC
    ) ;
  CREATE INDEX IX_WARRANT_TERMSREPPARTS ON WARRANTY_TERMS_REP_PARTS
    (
      WARRANTY_DEFN_DB_ID ASC ,
      WARRANTY_DEFN_ID ASC
    ) ;
ALTER TABLE WARRANTY_TERMS_REP_PARTS ADD CONSTRAINT PK_WARRANTY_TERMS_REP_PARTS PRIMARY KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID, PART_NO_DB_ID, PART_NO_ID ) ;


CREATE TABLE WF_DEFN
  (
    WF_DEFN_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    WF_DEFN_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    WF_DEFN_TYPE_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WF_DEFN_TYPE_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    WF_DEFN_CD         VARCHAR2 (16) NOT NULL DEFERRABLE ,
    WF_SDESC           VARCHAR2 (80) NOT NULL DEFERRABLE ,
    WF_LDESC           VARCHAR2 (4000) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WF_DEFN ADD CHECK ( WF_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN ADD CHECK ( WF_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN ADD CHECK ( WF_DEFN_TYPE_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WF_DEFN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE WF_DEFN
IS
  'this table defines a workflow template.  These templates are used to instantiate a workflow against a section of maintenix.' ;
ALTER TABLE WF_DEFN ADD CONSTRAINT PK_WF_DEFN PRIMARY KEY ( WF_DEFN_DB_ID, WF_DEFN_ID ) ;
ALTER TABLE WF_DEFN ADD CONSTRAINT IX_WFDEFNALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE WF_DEFN_FLOW
  (
    NEXT_WF_DEFN_STEP_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    NEXT_WF_DEFN_STEP_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    WF_DEFN_STEP_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    WF_DEFN_STEP_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD                NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DT             DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER           VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WF_DEFN_FLOW ADD CHECK ( NEXT_WF_DEFN_STEP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_FLOW ADD CHECK ( NEXT_WF_DEFN_STEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_FLOW ADD CHECK ( WF_DEFN_STEP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_FLOW ADD CHECK ( WF_DEFN_STEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_FLOW ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WF_DEFN_FLOW ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE WF_DEFN_FLOW
IS
  'Defines the order in which the ''levels'' aka ''steps'' in a workflow will be executed.' ;
  CREATE INDEX IX_WFDEFNSTEP_FLOW ON WF_DEFN_FLOW
    (
      NEXT_WF_DEFN_STEP_DB_ID ASC ,
      NEXT_WF_DEFN_STEP_ID ASC
    ) ;
  CREATE INDEX IX_WFDEFNSTEP_NEXTFLOW ON WF_DEFN_FLOW
    (
      WF_DEFN_STEP_DB_ID ASC ,
      WF_DEFN_STEP_ID ASC
    ) ;
ALTER TABLE WF_DEFN_FLOW ADD CONSTRAINT PK_WF_DEFN_FLOW PRIMARY KEY ( NEXT_WF_DEFN_STEP_DB_ID, NEXT_WF_DEFN_STEP_ID, WF_DEFN_STEP_DB_ID, WF_DEFN_STEP_ID ) ;


CREATE TABLE WF_DEFN_LEVEL_HR
  (
    WF_LEVEL_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WF_LEVEL_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    HR_DB_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    HR_ID               NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WF_DEFN_LEVEL_HR ADD CHECK ( WF_LEVEL_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_LEVEL_HR ADD CHECK ( WF_LEVEL_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_LEVEL_HR ADD CHECK ( HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_LEVEL_HR ADD CHECK ( HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_LEVEL_HR ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WF_DEFN_LEVEL_HR ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_ORGHR_WFLEVELHR ON WF_DEFN_LEVEL_HR
  (
    HR_DB_ID ASC ,
    HR_ID ASC
  ) ;
CREATE INDEX IX_WFDEFNLEVEL_WFDEFNLEVELHR ON WF_DEFN_LEVEL_HR
  (
    WF_LEVEL_DEFN_DB_ID ASC ,
    WF_LEVEL_DEFN_ID ASC
  ) ;
ALTER TABLE WF_DEFN_LEVEL_HR ADD CONSTRAINT PK_WF_DEFN_LEVEL_HR PRIMARY KEY ( WF_LEVEL_DEFN_DB_ID, WF_LEVEL_DEFN_ID, HR_DB_ID, HR_ID ) ;


CREATE TABLE WF_DEFN_STEP
  (
    WF_DEFN_STEP_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WF_DEFN_STEP_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    DESC_SDESC         VARCHAR2 (80) ,
    DESC_LDESC         VARCHAR2 (4000) ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WF_DEFN_STEP ADD CHECK ( WF_DEFN_STEP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_STEP ADD CHECK ( WF_DEFN_STEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_STEP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WF_DEFN_STEP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_STEP ADD CONSTRAINT PK_WF_DEFN_STEP PRIMARY KEY ( WF_DEFN_STEP_DB_ID, WF_DEFN_STEP_ID ) ;


CREATE TABLE WF_DEFN_STEPS
  (
    WF_DEFN_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    WF_DEFN_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    WF_DEFN_STEP_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WF_DEFN_STEP_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WF_DEFN_STEPS ADD CHECK ( WF_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_STEPS ADD CHECK ( WF_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_STEPS ADD CHECK ( WF_DEFN_STEP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_STEPS ADD CHECK ( WF_DEFN_STEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_STEPS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WF_DEFN_STEPS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_WFDEFN_STEPS ON WF_DEFN_STEPS
  (
    WF_DEFN_DB_ID ASC ,
    WF_DEFN_ID ASC
  ) ;
CREATE INDEX IX_WFDEFNSTEP_WFDEFN ON WF_DEFN_STEPS
  (
    WF_DEFN_STEP_DB_ID ASC ,
    WF_DEFN_STEP_ID ASC
  ) ;
ALTER TABLE WF_DEFN_STEPS ADD CONSTRAINT PK_WF_DEFN_STEPS PRIMARY KEY ( WF_DEFN_DB_ID, WF_DEFN_ID, WF_DEFN_STEP_DB_ID, WF_DEFN_STEP_ID ) ;


CREATE TABLE WF_DEFN_STEP_GROUP
  (
    WF_DEFN_STEP_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    WF_DEFN_STEP_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    CHILD_WF_DEFN_STEP_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    CHILD_WF_DEFN_STEP_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD                 NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DT              DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER            VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WF_DEFN_STEP_GROUP ADD CHECK ( WF_DEFN_STEP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_STEP_GROUP ADD CHECK ( WF_DEFN_STEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_STEP_GROUP ADD CHECK ( CHILD_WF_DEFN_STEP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_STEP_GROUP ADD CHECK ( CHILD_WF_DEFN_STEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_STEP_GROUP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WF_DEFN_STEP_GROUP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_WFDEFNSTEP_GROUPS ON WF_DEFN_STEP_GROUP
  (
    WF_DEFN_STEP_DB_ID ASC ,
    WF_DEFN_STEP_ID ASC
  ) ;
CREATE INDEX IX_WFDEFNSTEP_CHILDREN ON WF_DEFN_STEP_GROUP
  (
    CHILD_WF_DEFN_STEP_DB_ID ASC ,
    CHILD_WF_DEFN_STEP_ID ASC
  ) ;
ALTER TABLE WF_DEFN_STEP_GROUP ADD CONSTRAINT PK_WF_DEFN_STEP_GROUP PRIMARY KEY ( WF_DEFN_STEP_DB_ID, WF_DEFN_STEP_ID, CHILD_WF_DEFN_STEP_DB_ID, CHILD_WF_DEFN_STEP_ID ) ;


CREATE TABLE WF_DEFN_STEP_LEVELS
  (
    WF_DEFN_STEP_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    WF_DEFN_STEP_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    WF_LEVEL_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WF_LEVEL_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WF_DEFN_STEP_LEVELS ADD CHECK ( WF_DEFN_STEP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_STEP_LEVELS ADD CHECK ( WF_DEFN_STEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_STEP_LEVELS ADD CHECK ( WF_LEVEL_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_STEP_LEVELS ADD CHECK ( WF_LEVEL_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_DEFN_STEP_LEVELS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WF_DEFN_STEP_LEVELS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE WF_DEFN_STEP_LEVELS
IS
  'This table will define a link between a workflow template STEP and a workflow template level definition.' ;
  CREATE INDEX IX_WFLEVELDEFN_STEPS ON WF_DEFN_STEP_LEVELS
    (
      WF_LEVEL_DEFN_DB_ID ASC ,
      WF_LEVEL_DEFN_ID ASC
    ) ;
  CREATE INDEX IX_WFDEFNSTEP_LEVELS ON WF_DEFN_STEP_LEVELS
    (
      WF_DEFN_STEP_DB_ID ASC ,
      WF_DEFN_STEP_ID ASC
    ) ;
ALTER TABLE WF_DEFN_STEP_LEVELS ADD CONSTRAINT PK_WF_DEFN_STEP_LEVELS PRIMARY KEY ( WF_DEFN_STEP_DB_ID, WF_DEFN_STEP_ID, WF_LEVEL_DEFN_DB_ID, WF_LEVEL_DEFN_ID ) ;


CREATE TABLE WF_LEVEL
  (
    WF_LEVEL_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    WF_LEVEL_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    LEVEL_HR_DB_ID      NUMBER (10) ,
    LEVEL_HR_ID         NUMBER (10) ,
    WF_LEVEL_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WF_LEVEL_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    LEVEL_DT            DATE ,
    LEVEL_NOTE          VARCHAR2 (4000) ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WF_LEVEL ADD CHECK ( WF_LEVEL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_LEVEL ADD CHECK ( WF_LEVEL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_LEVEL ADD CHECK ( LEVEL_HR_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_LEVEL ADD CHECK ( LEVEL_HR_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_LEVEL ADD CHECK ( WF_LEVEL_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_LEVEL ADD CHECK ( WF_LEVEL_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_LEVEL ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WF_LEVEL ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_ORGHR_WFLEVEL ON WF_LEVEL
  (
    LEVEL_HR_DB_ID ASC ,
    LEVEL_HR_ID ASC
  ) ;
CREATE INDEX IX_WFLEVELDEFN_WFLEVEL ON WF_LEVEL
  (
    WF_LEVEL_DEFN_DB_ID ASC ,
    WF_LEVEL_DEFN_ID ASC
  ) ;
ALTER TABLE WF_LEVEL ADD CONSTRAINT PK_WF_LEVEL PRIMARY KEY ( WF_LEVEL_DB_ID, WF_LEVEL_ID ) ;
ALTER TABLE WF_LEVEL ADD CONSTRAINT IX_WFLEVELALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE WF_LEVEL_DEFN
  (
    WF_LEVEL_DEFN_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WF_LEVEL_DEFN_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    WF_LEVEL_DEFN_CD    VARCHAR2 (16) NOT NULL ,
    WF_LEVEL_DEFN_SDESC VARCHAR2 (80) NOT NULL DEFERRABLE ,
    WF_LEVEL_DEFN_LDESC VARCHAR2 (4000) ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WF_LEVEL_DEFN ADD CHECK ( WF_LEVEL_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_LEVEL_DEFN ADD CHECK ( WF_LEVEL_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_LEVEL_DEFN ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WF_LEVEL_DEFN ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_LEVEL_DEFN ADD CONSTRAINT PK_WF_LEVEL_DEFN PRIMARY KEY ( WF_LEVEL_DEFN_DB_ID, WF_LEVEL_DEFN_ID ) ;
ALTER TABLE WF_LEVEL_DEFN ADD CONSTRAINT IX_WFLEVELDEFNCD_UNQ UNIQUE ( WF_LEVEL_DEFN_CD ) ;


CREATE TABLE WF_STEP
  (
    WF_STEP_DB_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    WF_STEP_ID           NUMBER (10) NOT NULL DEFERRABLE ,
    WF_STEP_STATUS_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WF_STEP_STATUS_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    WF_DEFN_STEP_DB_ID   NUMBER (10) ,
    WF_DEFN_STEP_ID      NUMBER (10) ,
    WF_STEP_REASON_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WF_STEP_REASON_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    RSTAT_CD             NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DT          DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER        VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WF_STEP ADD CHECK ( WF_STEP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEP ADD CHECK ( WF_STEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEP ADD CHECK ( WF_STEP_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEP ADD CHECK ( WF_DEFN_STEP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEP ADD CHECK ( WF_DEFN_STEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEP ADD CHECK ( WF_STEP_REASON_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WF_STEP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEP ADD CONSTRAINT PK_WF_STEP PRIMARY KEY ( WF_STEP_DB_ID, WF_STEP_ID ) ;


CREATE TABLE WF_STEPS
  (
    WF_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    WF_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    WF_STEP_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    WF_STEP_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WF_STEPS ADD CHECK ( WF_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEPS ADD CHECK ( WF_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEPS ADD CHECK ( WF_STEP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEPS ADD CHECK ( WF_STEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEPS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WF_STEPS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_WFWF_WFSTEPS ON WF_STEPS
  ( WF_DB_ID ASC , WF_ID ASC
  ) ;
CREATE INDEX IX_WFSTEP_WF ON WF_STEPS
  ( WF_STEP_DB_ID ASC , WF_STEP_ID ASC
  ) ;
ALTER TABLE WF_STEPS ADD CONSTRAINT PK_WF_STEPS PRIMARY KEY ( WF_DB_ID, WF_ID, WF_STEP_DB_ID, WF_STEP_ID ) ;


CREATE TABLE WF_STEP_FLOW
  (
    WF_STEP_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    WF_STEP_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    NEXT_WF_STEP_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    NEXT_WF_STEP_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD           NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DT        DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER      VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WF_STEP_FLOW ADD CHECK ( WF_STEP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEP_FLOW ADD CHECK ( WF_STEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEP_FLOW ADD CHECK ( NEXT_WF_STEP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEP_FLOW ADD CHECK ( NEXT_WF_STEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEP_FLOW ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WF_STEP_FLOW ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_STEP_FLOW ON WF_STEP_FLOW
  (
    WF_STEP_DB_ID ASC ,
    WF_STEP_ID ASC
  ) ;
CREATE INDEX IX_STEP_NEXTSTEP ON WF_STEP_FLOW
  (
    NEXT_WF_STEP_DB_ID ASC ,
    NEXT_WF_STEP_ID ASC
  ) ;
ALTER TABLE WF_STEP_FLOW ADD CONSTRAINT PK_WF_STEP_FLOW PRIMARY KEY ( WF_STEP_DB_ID, WF_STEP_ID, NEXT_WF_STEP_DB_ID, NEXT_WF_STEP_ID ) ;


CREATE TABLE WF_STEP_GROUP
  (
    WF_STEP_DB_ID       NUMBER (10) NOT NULL DEFERRABLE ,
    WF_STEP_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    CHILD_WF_STEP_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    CHILD_WF_STEP_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WF_STEP_GROUP ADD CHECK ( WF_STEP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEP_GROUP ADD CHECK ( WF_STEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEP_GROUP ADD CHECK ( CHILD_WF_STEP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEP_GROUP ADD CHECK ( CHILD_WF_STEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEP_GROUP ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WF_STEP_GROUP ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_WFSTEP_GROUPPARENT ON WF_STEP_GROUP
  (
    WF_STEP_DB_ID ASC ,
    WF_STEP_ID ASC
  ) ;
CREATE INDEX IX_STEP_GROUPCHILDREN ON WF_STEP_GROUP
  (
    CHILD_WF_STEP_DB_ID ASC ,
    CHILD_WF_STEP_ID ASC
  ) ;
ALTER TABLE WF_STEP_GROUP ADD CONSTRAINT PK_WF_STEP_GROUP PRIMARY KEY ( WF_STEP_DB_ID, WF_STEP_ID, CHILD_WF_STEP_DB_ID, CHILD_WF_STEP_ID ) ;


CREATE TABLE WF_STEP_LEVELS
  (
    WF_STEP_DB_ID  NUMBER (10) NOT NULL DEFERRABLE ,
    WF_STEP_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    WF_LEVEL_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WF_LEVEL_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WF_STEP_LEVELS ADD CHECK ( WF_STEP_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEP_LEVELS ADD CHECK ( WF_STEP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEP_LEVELS ADD CHECK ( WF_LEVEL_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEP_LEVELS ADD CHECK ( WF_LEVEL_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_STEP_LEVELS ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WF_STEP_LEVELS ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_WFLEVEL_STEPS ON WF_STEP_LEVELS
  (
    WF_LEVEL_DB_ID ASC ,
    WF_LEVEL_ID ASC
  ) ;
CREATE INDEX IX_WFSTEP_LEVELS ON WF_STEP_LEVELS
  (
    WF_STEP_DB_ID ASC ,
    WF_STEP_ID ASC
  ) ;
ALTER TABLE WF_STEP_LEVELS ADD CONSTRAINT PK_WF_STEP_LEVELS PRIMARY KEY ( WF_STEP_DB_ID, WF_STEP_ID, WF_LEVEL_DB_ID, WF_LEVEL_ID ) ;


CREATE TABLE WF_WF
  (
    WF_DB_ID          NUMBER (10) NOT NULL DEFERRABLE ,
    WF_ID             NUMBER (10) NOT NULL DEFERRABLE ,
    WF_STATUS_DB_ID   NUMBER (10) NOT NULL DEFERRABLE ,
    WF_STATUS_CD      VARCHAR2 (16) NOT NULL DEFERRABLE ,
    WF_PRIORITY_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    WF_PRIORITY_CD    VARCHAR2 (16) NOT NULL DEFERRABLE ,
    WF_DEFN_DB_ID     NUMBER (10) NOT NULL DEFERRABLE ,
    WF_DEFN_ID        NUMBER (10) NOT NULL DEFERRABLE ,
    WF_DUE_DATE       DATE NOT NULL DEFERRABLE ,
    ALT_ID RAW (16) NOT NULL ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE WF_WF ADD CHECK ( WF_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_WF ADD CHECK ( WF_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_WF ADD CHECK ( WF_STATUS_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_WF ADD CHECK ( WF_PRIORITY_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_WF ADD CHECK ( WF_DEFN_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_WF ADD CHECK ( WF_DEFN_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE WF_WF ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE WF_WF ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
CREATE INDEX IX_WFDEFN_WFWF ON WF_WF
  ( WF_DEFN_DB_ID ASC , WF_DEFN_ID ASC
  ) ;
ALTER TABLE WF_WF ADD CONSTRAINT PK_WF_WF PRIMARY KEY ( WF_DB_ID, WF_ID ) ;
ALTER TABLE WF_WF ADD CONSTRAINT IX_WFWFALTID_UNQ UNIQUE ( ALT_ID ) ;


CREATE TABLE WPL_WORK_PACKAGE_SETUP
  (
    ID RAW (16) NOT NULL ,
    WP_NAME     VARCHAR2 (80) ,
    TAIL_NO     VARCHAR2 (20) ,
    LOCATION_CD VARCHAR2 (2000) ,
    STATUS_CD   VARCHAR2 (8) NOT NULL ,
    ACCOUNT_ID RAW (16) ,
    SCHED_START_DATE DATE ,
    SCHED_END_DATE   DATE ,
    WORK_PACKAGE_ID RAW (16) ,
    BLOB_ID RAW (16) ,
    FILE_NAME         VARCHAR2 (255) ,
    FILE_UPLOAD_DATE  DATE ,
    RECORDS_PROCESSED INTEGER ,
    LAST_EDIT_DATE    DATE NOT NULL
  ) ;
CREATE INDEX IX_FK_WORK_PACKAGE_SETUP_BLOB ON WPL_WORK_PACKAGE_SETUP
  (
    BLOB_ID ASC
  ) ;
ALTER TABLE WPL_WORK_PACKAGE_SETUP ADD CONSTRAINT "PK_WORK_PACKAGE_SETUP" PRIMARY KEY ( ID ) ;


CREATE TABLE WPL_WORK_PACKAGE_SETUP_BLOB
  (
    ID RAW (16) NOT NULL ,
    BLOB BLOB NOT NULL
  ) ;
ALTER TABLE WPL_WORK_PACKAGE_SETUP_BLOB ADD CONSTRAINT "PK_WORK_PACKAGE_SETUP_BLOB" PRIMARY KEY ( ID ) ;


CREATE TABLE ZIP_QUEUE
  (
    ZIP_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    ACTV_BOOL      NUMBER (1) DEFAULT 0 NOT NULL DEFERRABLE ,
    RSTAT_CD       NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DT    DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER  VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ZIP_QUEUE ADD CHECK ( ZIP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ZIP_QUEUE ADD CHECK ( ACTV_BOOL IN (0, 1)) DEFERRABLE ;
ALTER TABLE ZIP_QUEUE ADD CHECK ( RSTAT_CD  IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ZIP_QUEUE ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ZIP_QUEUE
IS
  'Table used to track sets of Blocks and Requirements that need to be reorganized.' ;
  COMMENT ON COLUMN ZIP_QUEUE.ZIP_ID
IS
  'Unique ID assigned from the sequence ZIP_QUEUE_SEQ' ;
  COMMENT ON COLUMN ZIP_QUEUE.ACTV_BOOL
IS
  'Indicates if the set of tasks for zipping are ready to be processed.' ;
  COMMENT ON COLUMN ZIP_QUEUE.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.
' ;
  COMMENT ON COLUMN ZIP_QUEUE.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ZIP_QUEUE.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ZIP_QUEUE.REVISION_DB_ID
IS
  'The database identifer (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ZIP_QUEUE.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
ALTER TABLE ZIP_QUEUE ADD CONSTRAINT PK_ZIP_QUEUE PRIMARY KEY ( ZIP_ID ) ;


CREATE TABLE ZIP_TASK
  (
    ZIP_ID              NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_DB_ID         NUMBER (10) NOT NULL DEFERRABLE ,
    SCHED_ID            NUMBER (10) NOT NULL DEFERRABLE ,
    CLASS_MODE_CD       VARCHAR2 (8) NOT NULL DEFERRABLE ,
    ASSMBL_INV_NO_DB_ID NUMBER (10) NOT NULL DEFERRABLE ,
    ASSMBL_INV_NO_ID    NUMBER (10) NOT NULL DEFERRABLE ,
    RSTAT_CD            NUMBER (3) NOT NULL DEFERRABLE ,
    CREATION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DT         DATE NOT NULL DEFERRABLE ,
    REVISION_DB_ID      NUMBER (10) NOT NULL DEFERRABLE ,
    REVISION_USER       VARCHAR2 (30) NOT NULL DEFERRABLE
  ) ;
ALTER TABLE ZIP_TASK ADD CHECK ( ZIP_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ZIP_TASK ADD CHECK ( SCHED_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ZIP_TASK ADD CHECK ( SCHED_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ZIP_TASK ADD CHECK ( ASSMBL_INV_NO_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ZIP_TASK ADD CHECK ( ASSMBL_INV_NO_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
ALTER TABLE ZIP_TASK ADD CHECK ( RSTAT_CD IN (0, 1, 2, 3)) DEFERRABLE ;
ALTER TABLE ZIP_TASK ADD CHECK ( REVISION_DB_ID BETWEEN 0 AND 4294967295) DEFERRABLE ;
COMMENT ON TABLE ZIP_TASK
IS
  'Details of the sets of Blocks and Requirements that need to be reorganized.' ;
  COMMENT ON COLUMN ZIP_TASK.ZIP_ID
IS
  'FK to ZIP_QUEUE' ;
  COMMENT ON COLUMN ZIP_TASK.SCHED_DB_ID
IS
  'FK to SCHED_STASK' ;
  COMMENT ON COLUMN ZIP_TASK.SCHED_ID
IS
  'FK to SCHED_STASK' ;
  COMMENT ON COLUMN ZIP_TASK.CLASS_MODE_CD
IS
  'Identifies task classes as blocks or requirements.' ;
  COMMENT ON COLUMN ZIP_TASK.ASSMBL_INV_NO_DB_ID
IS
  'FK to INV_INV. The root assembly inventory to which the actual task belongs.' ;
  COMMENT ON COLUMN ZIP_TASK.ASSMBL_INV_NO_ID
IS
  'FK to INV_INV. The root assembly inventory to which the actual task belongs.' ;
  COMMENT ON COLUMN ZIP_TASK.RSTAT_CD
IS
  'A physical attribute that defines the read/write access of the record.' ;
  COMMENT ON COLUMN ZIP_TASK.CREATION_DT
IS
  'The database server''s timestamp captured at the time the record was inserted.' ;
  COMMENT ON COLUMN ZIP_TASK.REVISION_DT
IS
  'The database server''s timestamp captured at the time the record was last updated.' ;
  COMMENT ON COLUMN ZIP_TASK.REVISION_DB_ID
IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.' ;
  COMMENT ON COLUMN ZIP_TASK.REVISION_USER
IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.' ;
  CREATE INDEX IX_INVINV_ZIPTASK ON ZIP_TASK
    (
      ASSMBL_INV_NO_DB_ID ASC ,
      ASSMBL_INV_NO_ID ASC
    ) ;
  CREATE INDEX IX_SCHEDSTASK_ZIPTASK ON ZIP_TASK
    (
      SCHED_DB_ID ASC ,
      SCHED_ID ASC
    ) ;
  CREATE INDEX IX_ZIPQUEUE_ZIPTASK ON ZIP_TASK
    ( ZIP_ID ASC
    ) ;
ALTER TABLE ZIP_TASK ADD CONSTRAINT PK_ZIP_TASK PRIMARY KEY ( ZIP_ID, SCHED_DB_ID, SCHED_ID ) ;


ALTER TABLE TASK_COND ADD CONSTRAINT FK_ACCONDSETTING_TASKCOND FOREIGN KEY ( AC_COND_DB_ID, AC_COND_CD, COND_SET_DB_ID, COND_SET_CD ) REFERENCES AC_COND_SETTING ( AC_COND_DB_ID, AC_COND_CD, COND_SET_DB_ID, COND_SET_CD ) DEFERRABLE ;

ALTER TABLE PPC_MILESTONE_COND ADD CONSTRAINT FK_ACCONDSET_PPCMILESTCOND FOREIGN KEY ( AC_COND_DB_ID, AC_COND_CD, COND_SET_DB_ID, COND_SET_CD ) REFERENCES AC_COND_SETTING ( AC_COND_DB_ID, AC_COND_CD, COND_SET_DB_ID, COND_SET_CD ) DEFERRABLE ;

ALTER TABLE ACFT_GROUP_ASSIGNMENT ADD CONSTRAINT FK_ACFTGROUP_ACFTGROUPASS FOREIGN KEY ( GROUP_ID ) REFERENCES ACFT_GROUP ( ID ) NOT DEFERRABLE ;

ALTER TABLE LRP_EVENT ADD CONSTRAINT FK_ACTLRPLOC_LRPEVENT FOREIGN KEY ( LRP_DB_ID, LRP_ID, ACTUAL_LOC_DB_ID, ACTUAL_LOC_ID ) REFERENCES LRP_LOC ( LRP_DB_ID, LRP_ID, LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE LRP_PLAN_CONFIG ADD CONSTRAINT FK_ADHOCSEV_LRPPLANCONFIG FOREIGN KEY ( ADHOC_SEV_DB_ID, ADHOC_SEV_CD ) REFERENCES REF_LRP_CONFIG_SEV ( LRP_CONFIG_SEV_DB_ID, LRP_CONFIG_SEV_CD ) DEFERRABLE ;

ALTER TABLE AEROBUY_INVOICE_CHARGES ADD CONSTRAINT FK_AEB_INV_CHARGE_AEB_INV_INFO FOREIGN KEY ( PO_INVOICE_ALT_ID ) REFERENCES AEROBUY_INVOICE_INFO ( PO_INVOICE_ALT_ID ) NOT DEFERRABLE ;

ALTER TABLE AEROBUY_INVOICE_TAXES ADD CONSTRAINT FK_AEB_INV_TAXES_AEB_INV_INFO FOREIGN KEY ( PO_INVOICE_ALT_ID ) REFERENCES AEROBUY_INVOICE_INFO ( PO_INVOICE_ALT_ID ) NOT DEFERRABLE ;

ALTER TABLE MIM_PART_NUMDATA ADD CONSTRAINT FK_AGDATATYPE_MIMPARTNUMDATA FOREIGN KEY ( AGGREGATED_DATA_TYPE_DB_ID, AGGREGATED_DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) NOT DEFERRABLE ;

ALTER TABLE UTL_ALERT ADD CONSTRAINT FK_ALERT_TYPE_ALERT FOREIGN KEY ( ALERT_TYPE_ID ) REFERENCES UTL_ALERT_TYPE ( ALERT_TYPE_ID ) DEFERRABLE ;

ALTER TABLE UTL_ALERT_TYPE_ROLE ADD CONSTRAINT FK_ALRTTYPE_ALRTTYPEROLE FOREIGN KEY ( ALERT_TYPE_ID ) REFERENCES UTL_ALERT_TYPE ( ALERT_TYPE_ID ) DEFERRABLE ;

ALTER TABLE INV_AC_FLIGHT_PLAN ADD CONSTRAINT FK_ARRFLLEG_INVACFLPLAN FOREIGN KEY ( ARR_LEG_ID ) REFERENCES FL_LEG ( LEG_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG ADD CONSTRAINT FK_ARRINVLOC_FLLEG FOREIGN KEY ( ARRIVAL_LOC_DB_ID, ARRIVAL_LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_ASSIGNORGHR_REQPART FOREIGN KEY ( ASSIGN_HR_DB_ID, ASSIGN_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE USG_USAGE_DATA ADD CONSTRAINT FK_ASSMBLINVINV_USGUSDATA FOREIGN KEY ( ASSMBL_INV_NO_DB_ID, ASSMBL_INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE BLT_REF_ERROR ADD CONSTRAINT FK_BLTREFERRORTYPE_BLTREFERROR FOREIGN KEY ( REF_ERROR_TYPE_CD ) REFERENCES BLT_REF_ERROR_TYPE ( REF_ERROR_TYPE_CD ) DEFERRABLE ;

ALTER TABLE BLT_WF_ERROR_LOG ADD CONSTRAINT FK_BLTREFERROR_BLTWFERRORLOG FOREIGN KEY ( REF_ERROR_CD ) REFERENCES BLT_REF_ERROR ( REF_ERROR_CD ) DEFERRABLE ;

ALTER TABLE BLT_WF_CYCLE_LOG ADD CONSTRAINT FK_BLTREFWFCYCLESTATUS_LOG FOREIGN KEY ( REF_WF_CYCLE_STATUS_CD ) REFERENCES BLT_REF_WF_CYCLE_STATUS ( REF_WF_CYCLE_STATUS_CD ) DEFERRABLE ;

ALTER TABLE BLT_WF_REC_LOG ADD CONSTRAINT FK_BLTREFWFLOGSTATUS_BLTWFRECL FOREIGN KEY ( REF_WF_LOG_STATUS_CD ) REFERENCES BLT_REF_WF_LOG_STATUS ( REF_WF_LOG_STATUS_CD ) DEFERRABLE ;

ALTER TABLE BLT_WF_REC_LOG ADD CONSTRAINT FK_BLTREFWFLOGTYPE_BLTWFRECLOG FOREIGN KEY ( REF_WF_LOG_TYPE_CD, REF_WF_LOG_SUB_TYPE_CD ) REFERENCES BLT_REF_WF_LOG_TYPE ( REF_WF_LOG_TYPE_CD, REF_WF_LOG_SUB_TYPE_CD ) DEFERRABLE ;

ALTER TABLE BLT_WF_REC_LOG ADD CONSTRAINT FK_BLTWFCYCLELOG_BLTWFRECLOG FOREIGN KEY ( WF_CYCLE_LOG_ID ) REFERENCES BLT_WF_CYCLE_LOG ( WF_CYCLE_LOG_ID ) DEFERRABLE ;

ALTER TABLE BLT_WF_ERROR_LOG ADD CONSTRAINT FK_BLTWFRECLOG_BLTWFERRORLOG FOREIGN KEY ( WF_REC_LOG_ID, WF_CYCLE_LOG_ID ) REFERENCES BLT_WF_REC_LOG ( WF_REC_LOG_ID, WF_CYCLE_LOG_ID ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_BROKORGVENDACC_POHEADER FOREIGN KEY ( BROKER_ACCOUNT_DB_ID, BROKER_ACCOUNT_ID, BROKER_ACCOUNT_CD ) REFERENCES ORG_VENDOR_ACCOUNT ( VENDOR_DB_ID, VENDOR_ID, ACCOUNT_CD ) DEFERRABLE ;

ALTER TABLE BULK_LOAD_ELEMENT ADD CONSTRAINT FK_BULKACT_BULKLDELMNT FOREIGN KEY ( FILE_ACTION_TYPE_CD, FILE_ACTION_TYPE_DB_ID ) REFERENCES REF_BULK_LOAD_FILE_ACTION ( FILE_ACTION_TYPE_CD, FILE_ACTION_TYPE_DB_ID ) NOT DEFERRABLE ;

ALTER TABLE UTL_FILE_IMPORT ADD CONSTRAINT FK_BULKACT_UTLFILEIMPORT FOREIGN KEY ( FILE_ACTION_TYPE_CD, FILE_ACTION_TYPE_DB_ID ) REFERENCES REF_BULK_LOAD_FILE_ACTION ( FILE_ACTION_TYPE_CD, FILE_ACTION_TYPE_DB_ID ) NOT DEFERRABLE ;

ALTER TABLE UTL_FILE_IMPORT ADD CONSTRAINT FK_BULKSTATUS_UTLFILEIMPORT FOREIGN KEY ( STATUS_CD, STATUS_DB_ID ) REFERENCES REF_BULK_LOAD_STATUS ( STATUS_CD, STATUS_DB_ID ) NOT DEFERRABLE ;

ALTER TABLE BULK_LOAD_ELEMENT ADD CONSTRAINT FK_BULKSTTUS_BULKLDELMNT FOREIGN KEY ( STATUS_CD, STATUS_DB_ID ) REFERENCES REF_BULK_LOAD_STATUS ( STATUS_CD, STATUS_DB_ID ) NOT DEFERRABLE ;

ALTER TABLE LRP_LOC_CAPACITY ADD CONSTRAINT FK_CAPACITYPATTERN_LRPLOCCAPAC FOREIGN KEY ( CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID ) REFERENCES CAPACITY_PATTERN ( CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID ) DEFERRABLE ;

ALTER TABLE PPC_LOC_CAPACITY ADD CONSTRAINT FK_CAPPATTERN_PPCLOCCAP FOREIGN KEY ( CAP_PATTERN_DB_ID, CAP_PATTERN_ID ) REFERENCES CAPACITY_PATTERN ( CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_CBORGORG_POHEADER FOREIGN KEY ( CREATED_BY_ORG_DB_ID, CREATED_BY_ORG_ID ) REFERENCES ORG_ORG ( ORG_DB_ID, ORG_ID ) DEFERRABLE ;

ALTER TABLE CHARGE_LOG ADD CONSTRAINT FK_CHARGE_CHARGELOG FOREIGN KEY ( CHARGE_ID ) REFERENCES CHARGE ( CHARGE_ID ) DEFERRABLE ;

ALTER TABLE CHARGE_VENDOR ADD CONSTRAINT FK_CHARGE_CHARGEVENDOR FOREIGN KEY ( CHARGE_ID ) REFERENCES CHARGE ( CHARGE_ID ) DEFERRABLE ;

ALTER TABLE PO_INVOICE_LINE_CHARGE ADD CONSTRAINT FK_CHARGE_POINVOICELINECHARGE FOREIGN KEY ( CHARGE_ID ) REFERENCES CHARGE ( CHARGE_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE_CHARGE ADD CONSTRAINT FK_CHARGE_POLINECHARGE FOREIGN KEY ( CHARGE_ID ) REFERENCES CHARGE ( CHARGE_ID ) DEFERRABLE ;

ALTER TABLE RFQ_LINE_VENDOR_CHARGE ADD CONSTRAINT FK_CHARGE_RFQLINEVENDORCHARGE FOREIGN KEY ( CHARGE_ID ) REFERENCES CHARGE ( CHARGE_ID ) DEFERRABLE ;

ALTER TABLE CLAIM_PART_LINE ADD CONSTRAINT FK_CLAIM_CLAIMPARTLINE FOREIGN KEY ( CLAIM_DB_ID, CLAIM_ID ) REFERENCES CLAIM ( CLAIM_DB_ID, CLAIM_ID ) DEFERRABLE ;

ALTER TABLE CLAIM_LABOUR_LINE ADD CONSTRAINT FK_CLAIM_CLMLABLINE FOREIGN KEY ( CLAIM_DB_ID, CLAIM_ID ) REFERENCES CLAIM ( CLAIM_DB_ID, CLAIM_ID ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF_CONFLICT_DEF ADD CONSTRAINT FK_CONF_FAILDEFERREF FOREIGN KEY ( CONFLICT_FAIL_DEFER_REF_ID ) REFERENCES FAIL_DEFER_REF ( ALT_ID ) NOT DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF_CONFLICT_DEF ADD CONSTRAINT FK_CONF_FAILDEFERREF_ORIGIN FOREIGN KEY ( FAIL_DEFER_REF_ID ) REFERENCES FAIL_DEFER_REF ( ALT_ID ) NOT DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF_CONFLICT_DEF ADD CONSTRAINT FK_CONF_MIMRSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE ESIG_DOC ADD CONSTRAINT FK_CORBLOBINFO_ESIGDOC FOREIGN KEY ( BLOB_DB_ID, BLOB_ID ) REFERENCES COR_BLOB_INFO ( BLOB_DB_ID, BLOB_ID ) DEFERRABLE ;

ALTER TABLE ESIG_DOC_SIGN ADD CONSTRAINT FK_CORBLOBINFO_ESIGDOCSIGN FOREIGN KEY ( BLOB_DB_ID, BLOB_ID ) REFERENCES COR_BLOB_INFO ( BLOB_DB_ID, BLOB_ID ) DEFERRABLE ;

ALTER TABLE EVT_ATTACH ADD CONSTRAINT FK_CORBLOBINFO_EVTATTACH FOREIGN KEY ( BLOB_DB_ID, BLOB_ID ) REFERENCES COR_BLOB_INFO ( BLOB_DB_ID, BLOB_ID ) DEFERRABLE ;

ALTER TABLE INV_ATTACH ADD CONSTRAINT FK_CORBLOBINFO_INVATTACH FOREIGN KEY ( BLOB_DB_ID, BLOB_ID ) REFERENCES COR_BLOB_INFO ( BLOB_DB_ID, BLOB_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_ATTACH ADD CONSTRAINT FK_CORBLOBINFO_WRRNTYATTACH FOREIGN KEY ( BLOB_DB_ID, BLOB_ID ) REFERENCES COR_BLOB_INFO ( BLOB_DB_ID, BLOB_ID ) DEFERRABLE ;

ALTER TABLE COR_BLOB_PRINT ADD CONSTRAINT FK_CORBLOBPRINT_MIMDB FOREIGN KEY ( DOC_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE ORG_LOGO ADD CONSTRAINT FK_CORPERMBLOB_ORGLOGO FOREIGN KEY ( BLOB_DB_ID, BLOB_ID ) REFERENCES COR_PERM_BLOB ( BLOB_DB_ID, BLOB_ID ) DEFERRABLE ;

ALTER TABLE CAPACITY_PATTERN_DAY_SKILL ADD CONSTRAINT FK_CPDAYSHIFT_CPDAYSKILL FOREIGN KEY ( CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID, CAPACITY_PATTERN_DAY_ORD, SHIFT_DB_ID, SHIFT_ID ) REFERENCES CAPACITY_PATTERN_DAY_SHIFT ( CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID, CAPACITY_PATTERN_DAY_ORD, SHIFT_DB_ID, SHIFT_ID ) DEFERRABLE ;

ALTER TABLE CAPACITY_PATTERN_DAY_SHIFT ADD CONSTRAINT FK_CPDAY_CPDAYSHIFT FOREIGN KEY ( CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID, CAPACITY_PATTERN_DAY_ORD ) REFERENCES CAPACITY_PATTERN_DAY ( CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID, CAPACITY_PATTERN_DAY_ORD ) DEFERRABLE ;

ALTER TABLE CAPACITY_PATTERN_DAY ADD CONSTRAINT FK_CP_CPDAY FOREIGN KEY ( CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID ) REFERENCES CAPACITY_PATTERN ( CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID ) DEFERRABLE ;

ALTER TABLE CAPACITY_PATTERN_SKILL ADD CONSTRAINT FK_CP_CPSKILL FOREIGN KEY ( CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID ) REFERENCES CAPACITY_PATTERN ( CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID ) DEFERRABLE ;

ALTER TABLE LRP_PLAN ADD CONSTRAINT FK_CREATEHR_LRPPLAN FOREIGN KEY ( UPDATED_HR_DB_ID, UPDATED_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CONSTRAINT FK_CRMIMDB_MNTPRGMCRTMPTSK FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ORG_LABOUR_SKILL_MAP ADD CONSTRAINT FK_CRMIMDB_ORGLBRSKILLMAP FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE TASK_TEMP_ISSUE_LOG ADD CONSTRAINT FK_CRMIMDB_TASKTEMPISSUELOG FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE TASK_FLEET_APPROVAL ADD CONSTRAINT FK_CRMIMDB_TSKFLTAPPRVL FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CONSTRAINT FK_CTMIMDB_MNTPRGMCRTMPTSK FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ORG_LABOUR_SKILL_MAP ADD CONSTRAINT FK_CTMIMDB_ORGLBRSKILLMAP FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE TASK_TEMP_ISSUE_LOG ADD CONSTRAINT FK_CTMIMDB_TASKTEMPISSUELOG FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE TASK_FLEET_APPROVAL ADD CONSTRAINT FK_CTMIMDB_TSKFLTAPPRVL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_CURRENT_REF_ENG_EQPPRTNO FOREIGN KEY ( CURRENT_ENG_UNIT_DB_ID, CURRENT_ENG_UNIT_CD ) REFERENCES REF_ENG_UNIT ( ENG_UNIT_DB_ID, ENG_UNIT_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_DATA_TYPE ADD CONSTRAINT FK_DATATYPE_EQPASSMBLDATATYPE FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE REF_FAIL_DEFER_REF_STATUS ADD CONSTRAINT FK_DEFERREFSTATUS_MIMRSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE REF_FAIL_DEFER_REF_STATUS ADD CONSTRAINT FK_DEFERREFSTATUS_REFBITMAP FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) NOT DEFERRABLE ;

ALTER TABLE INV_AC_FLIGHT_PLAN ADD CONSTRAINT FK_DEPFLLEG_INVACFLPLAN FOREIGN KEY ( DEP_LEG_ID ) REFERENCES FL_LEG ( LEG_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG ADD CONSTRAINT FK_DEPINVLOC_FLLEG FOREIGN KEY ( DEPARTURE_LOC_DB_ID, DEPARTURE_LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT ADD CONSTRAINT FK_DIMENSIONSREFENGUNIT_SHIPSH FOREIGN KEY ( DIMENSION_ENG_UNIT_DB_ID, DIMENSION_ENG_UNIT_CD ) REFERENCES REF_ENG_UNIT ( ENG_UNIT_DB_ID, ENG_UNIT_CD ) DEFERRABLE ;

ALTER TABLE FCT_INV_OIL ADD CONSTRAINT FK_DIMINV_FCTINVOIL FOREIGN KEY ( DIM_INV_ID ) REFERENCES DIM_INV ( DIM_INV_ID ) DEFERRABLE ;

ALTER TABLE FCT_INV_OIL ADD CONSTRAINT FK_DIMOILSTATUS_FCTINVOIL FOREIGN KEY ( DIM_OIL_STATUS_ID ) REFERENCES DIM_OIL_STATUS ( DIM_OIL_STATUS_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_DIMSN_REF_ENG_EQPPRTNO FOREIGN KEY ( DIMENSION_ENG_UNIT_DB_ID, DIMENSION_ENG_UNIT_CD ) REFERENCES REF_ENG_UNIT ( ENG_UNIT_DB_ID, ENG_UNIT_CD ) DEFERRABLE ;

ALTER TABLE FCT_INV_OIL ADD CONSTRAINT FK_DIMTIME_FCTINVOIL FOREIGN KEY ( DIM_TIME_ID ) REFERENCES DIM_TIME ( DIM_TIME_ID ) DEFERRABLE ;

ALTER TABLE STOCK_DIST_REQ ADD CONSTRAINT FK_DISTREQSTATUS_STKDISTREQ FOREIGN KEY ( STATUS_CD, STATUS_DB_ID ) REFERENCES REF_STOCK_DIST_REQ_STATUS ( STATUS_CD, STATUS_DB_ID ) NOT DEFERRABLE ;

ALTER TABLE STOCK_DIST_REQ_LOG ADD CONSTRAINT FK_DISTREQSTS_STKDISTREQLOG FOREIGN KEY ( STATUS_CD, STATUS_DB_ID ) REFERENCES REF_STOCK_DIST_REQ_STATUS ( STATUS_CD, STATUS_DB_ID ) NOT DEFERRABLE ;

ALTER TABLE LRP_PLAN_CONFIG ADD CONSTRAINT FK_DURGRTMAXSEV_LRPPLANCONFIG FOREIGN KEY ( DURGRTMAX_SEV_DB_ID, DURGRTMAX_SEV_CD ) REFERENCES REF_LRP_CONFIG_SEV ( LRP_CONFIG_SEV_DB_ID, LRP_CONFIG_SEV_CD ) DEFERRABLE ;

ALTER TABLE LRP_PLAN_CONFIG ADD CONSTRAINT FK_DURLESSMINSEV_LRPPLANCONFIG FOREIGN KEY ( DURLESSMIN_SEV_DB_ID, DURLESSMIN_SEV_CD ) REFERENCES REF_LRP_CONFIG_SEV ( LRP_CONFIG_SEV_DB_ID, LRP_CONFIG_SEV_CD ) DEFERRABLE ;

ALTER TABLE EQP_ADVSRY_ATTACH ADD CONSTRAINT FK_EQPADVSRY_EQPADVSRYATTACH FOREIGN KEY ( ADVSRY_DB_ID, ADVSRY_ID ) REFERENCES EQP_ADVSRY ( ADVSRY_DB_ID, ADVSRY_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_ADVSRY ADD CONSTRAINT FK_EQPADVSRY_EQPPARTADVSRY FOREIGN KEY ( ADVSRY_DB_ID, ADVSRY_ID ) REFERENCES EQP_ADVSRY ( ADVSRY_DB_ID, ADVSRY_ID ) DEFERRABLE ;

ALTER TABLE INV_ADVSRY ADD CONSTRAINT FK_EQPADVSRY_INVADVSRY FOREIGN KEY ( ADVSRY_DB_ID, ADVSRY_ID ) REFERENCES EQP_ADVSRY ( ADVSRY_DB_ID, ADVSRY_ID ) DEFERRABLE ;

ALTER TABLE PPC_HR_LIC ADD CONSTRAINT FK_EQPASMBL_PPCHRLIC FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE EQP_OIL_THRESHOLD_ASSMBL ADD CONSTRAINT FK_EQPASSBOMOIL_EQPOILTHASSM FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL_BOM_OIL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE EQP_OIL_THRESHOLD_CARRIER ADD CONSTRAINT FK_EQPASSBOMOIL_EQPOILTHCARR FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL_BOM_OIL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE EQP_OIL_THRESHOLD_INV ADD CONSTRAINT FK_EQPASSBOMOIL_EQPOILTHINV FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL_BOM_OIL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE EQP_OIL_THRESHOLD_PART ADD CONSTRAINT FK_EQPASSBOMOIL_EQPOILTHPART FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL_BOM_OIL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF ADD CONSTRAINT FK_EQPASSMBLBOM FOREIGN KEY ( ASSMBL_BOM_ID ) REFERENCES EQP_ASSMBL_BOM ( ALT_ID ) NOT DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM_SENS ADD CONSTRAINT FK_EQPASSMBLBOM_ASSMBLBOMSENS FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) REFERENCES EQP_ASSMBL_BOM ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) NOT DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM_LOG ADD CONSTRAINT FK_EQPASSMBLBOM_EQPASSMBLBMLG FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) REFERENCES EQP_ASSMBL_BOM ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM ADD CONSTRAINT FK_EQPASSMBLBOM_EQPASSMBLBOM FOREIGN KEY ( NH_ASSMBL_DB_ID, NH_ASSMBL_CD, NH_ASSMBL_BOM_ID ) REFERENCES EQP_ASSMBL_BOM ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_POS ADD CONSTRAINT FK_EQPASSMBLBOM_EQPASSMBLPOS FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) REFERENCES EQP_ASSMBL_BOM ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM_THRESHOLD ADD CONSTRAINT FK_EQPASSMBLBOM_EQPASSMBTH FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) REFERENCES EQP_ASSMBL_BOM ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) DEFERRABLE ;

ALTER TABLE EQP_BOM_PART ADD CONSTRAINT FK_EQPASSMBLBOM_EQPBOMPART FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) REFERENCES EQP_ASSMBL_BOM ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) DEFERRABLE ;

ALTER TABLE FAIL_MODE ADD CONSTRAINT FK_EQPASSMBLBOM_FAILMODE FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) REFERENCES EQP_ASSMBL_BOM ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) DEFERRABLE ;

ALTER TABLE MIM_PART_CHRDATA ADD CONSTRAINT FK_EQPASSMBLBOM_MIMPARTCHRDATA FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) REFERENCES EQP_ASSMBL_BOM ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) DEFERRABLE ;

ALTER TABLE MIM_PART_NUMDATA ADD CONSTRAINT FK_EQPASSMBLBOM_MIMPARTNUMDATA FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) REFERENCES EQP_ASSMBL_BOM ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) DEFERRABLE ;

ALTER TABLE SD_FAULT ADD CONSTRAINT FK_EQPASSMBLBOM_SDFAULT FOREIGN KEY ( RESOLUTION_ASSMBL_DB_ID, RESOLUTION_ASSMBL_CD, RESOLUTION_ASSMBL_BOM_ID ) REFERENCES EQP_ASSMBL_BOM ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) NOT DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_EQPASSMBLBOM_TASKTASK FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) REFERENCES EQP_ASSMBL_BOM ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_TERMS_CONFIG_SLOTS ADD CONSTRAINT FK_EQPASSMBLBOM_WARRANTYTERMSC FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) REFERENCES EQP_ASSMBL_BOM ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_POS ADD CONSTRAINT FK_EQPASSMBLPOS_EQPASSMBLPOS FOREIGN KEY ( NH_ASSMBL_DB_ID, NH_ASSMBL_CD, NH_ASSMBL_BOM_ID, NH_ASSMBL_POS_ID ) REFERENCES EQP_ASSMBL_POS ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID, ASSMBL_POS_ID ) DEFERRABLE ;

ALTER TABLE EVT_INV ADD CONSTRAINT FK_EQPASSMBLPOS_EVTINV FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID, ASSMBL_POS_ID ) REFERENCES EQP_ASSMBL_POS ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID, ASSMBL_POS_ID ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_INV ADD CONSTRAINT FK_EQPASSMBLPOS_EVTINVCNDCHG FOREIGN KEY ( assmbl_db_id, assmbl_cd, assmbl_bom_id, assmbl_pos_id ) REFERENCES EQP_ASSMBL_POS ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID, ASSMBL_POS_ID ) DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_EQPASSMBLPOS_INVINV FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID, ASSMBL_POS_ID ) REFERENCES EQP_ASSMBL_POS ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID, ASSMBL_POS_ID ) DEFERRABLE ;

ALTER TABLE SCHED_PART ADD CONSTRAINT FK_EQPASSMBLPOS_SCHEDPART FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID, ASSMBL_POS_ID ) REFERENCES EQP_ASSMBL_POS ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID, ASSMBL_POS_ID ) DEFERRABLE ;

ALTER TABLE USG_USAGE_DATA ADD CONSTRAINT FK_EQPASSMBLPOS_USGUSAGEDATA FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID, ASSMBL_POS_ID ) REFERENCES EQP_ASSMBL_POS ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID, ASSMBL_POS_ID ) DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_EQPASSMBLSUBTYPE_INVINV FOREIGN KEY ( ASSMBL_SUBTYPE_DB_ID, ASSMBL_SUBTYPE_ID ) REFERENCES EQP_ASSMBL_SUBTYPE ( ASSMBL_SUBTYPE_DB_ID, ASSMBL_SUBTYPE_ID ) DEFERRABLE ;

ALTER TABLE LRP_INV_INV ADD CONSTRAINT FK_EQPASSMBLSUBTYPE_LRPINVINV FOREIGN KEY ( ASSMBL_SUBTYPE_DB_ID, ASSMBL_SUBTYPE_ID ) REFERENCES EQP_ASSMBL_SUBTYPE ( ASSMBL_SUBTYPE_DB_ID, ASSMBL_SUBTYPE_ID ) DEFERRABLE ;

ALTER TABLE ASSMBL_CAP_LEVELS ADD CONSTRAINT FK_EQPASSMBL_ASSMBLCAPLEVELS FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_SENS ADD CONSTRAINT FK_EQPASSMBL_ASSMBLSENS FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) NOT DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_SUBTYPE ADD CONSTRAINT FK_EQPASSMBL_ASSSUBTYPE FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM ADD CONSTRAINT FK_EQPASSMBL_EQPASSMBLBOM FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM_OIL ADD CONSTRAINT FK_EQPASSMBL_EQPASSMBLBOMOIL FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_DATA_TYPE ADD CONSTRAINT FK_EQPASSMBL_EQPASSMBLDATATYPE FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE EQP_DATA_SOURCE ADD CONSTRAINT FK_EQPASSMBL_EQPDATASOURCE FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE EQP_FINDING ADD CONSTRAINT FK_EQPASSMBL_EQPFINDING FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE EQP_FLIGHT_SPEC ADD CONSTRAINT FK_EQPASSMBL_EQPFLIGHTSPEC FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE EQP_PLANNING_TYPE ADD CONSTRAINT FK_EQPASSMBL_EQPPLANNINGTYPE FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE EQP_TASK_PANEL ADD CONSTRAINT FK_EQPASSMBL_EQPTASKPANEL FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE EQP_TASK_ZONE ADD CONSTRAINT FK_EQPASSMBL_EQPTASKZONE FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE ER_HEADER ADD CONSTRAINT FK_EQPASSMBL_ERHEADER FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF ADD CONSTRAINT FK_EQPASSMBL_FAILDEFERREF FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE FAIL_EFFECT ADD CONSTRAINT FK_EQPASSMBL_FAILEFFECT FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE FL_LEG ADD CONSTRAINT FK_EQPASSMBL_FLLEG FOREIGN KEY ( PLAN_ASSMBL_DB_ID, PLAN_ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE IETM_ASSMBL ADD CONSTRAINT FK_EQPASSMBL_IETMASSMBL FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_EQPASSMBL_INVINV FOREIGN KEY ( ORIG_ASSMBL_DB_ID, ORIG_ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC_CAPABILITY ADD CONSTRAINT FK_EQPASSMBL_INVLOCCAPABILITY FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE LIC_DEFN ADD CONSTRAINT FK_EQPASSMBL_LICDEFN FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE LPA_FLEET ADD CONSTRAINT FK_EQPASSMBL_LPAFLEET FOREIGN KEY ( FLEET_DB_ID, FLEET_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE LRP_INV_INV ADD CONSTRAINT FK_EQPASSMBL_LRPINVINV FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE LRP_LOC_CAPABILITY ADD CONSTRAINT FK_EQPASSMBL_LRPLOCCAP FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_DEFN ADD CONSTRAINT FK_EQPASSMBL_MAINTPRGMDEFN FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE MIM_CALC ADD CONSTRAINT FK_EQPASSMBL_MIMCALC FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CONSTRAINT FK_EQPASSMBL_TASKLABOURSUMMARY FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN_ASSEMBLY ADD CONSTRAINT FK_EQPASSMBL_WARRANTYDEFNASSMB FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE TASK_PART_LIST ADD CONSTRAINT FK_EQPASSPOS_TASKPRTLIST FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID, ASSMBL_POS_ID ) REFERENCES EQP_ASSMBL_POS ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID, ASSMBL_POS_ID ) DEFERRABLE ;

ALTER TABLE ER_HEADER ADD CONSTRAINT FK_EQPASSSUBTYPE_ERHEAD FOREIGN KEY ( ASSMBL_SUBTYPE_DB_ID, ASSMBL_SUBTYPE_ID ) REFERENCES EQP_ASSMBL_SUBTYPE ( ASSMBL_SUBTYPE_DB_ID, ASSMBL_SUBTYPE_ID ) DEFERRABLE ;

ALTER TABLE AUTO_RSRV_QUEUE ADD CONSTRAINT FK_EQPBOMPART_AUTORSRVQUEUE FOREIGN KEY ( BOM_PART_DB_ID, BOM_PART_ID ) REFERENCES EQP_BOM_PART ( BOM_PART_DB_ID, BOM_PART_ID ) DEFERRABLE ;

ALTER TABLE EQP_BOM_PART_SENS ADD CONSTRAINT FK_EQPBOMPART_BOMPARTSENS FOREIGN KEY ( BOM_PART_DB_ID, BOM_PART_ID ) REFERENCES EQP_BOM_PART ( BOM_PART_DB_ID, BOM_PART_ID ) NOT DEFERRABLE ;

ALTER TABLE EQP_BOM_PART_LOG ADD CONSTRAINT FK_EQPBOMPART_EQPBOMPARTLOG FOREIGN KEY ( BOM_PART_DB_ID, BOM_PART_ID ) REFERENCES EQP_BOM_PART ( BOM_PART_DB_ID, BOM_PART_ID ) DEFERRABLE ;

ALTER TABLE EVT_FINDING ADD CONSTRAINT FK_EQPBOMPART_EQPFINDING FOREIGN KEY ( BOM_PART_DB_ID, BOM_PART_ID ) REFERENCES EQP_BOM_PART ( BOM_PART_DB_ID, BOM_PART_ID ) DEFERRABLE ;

ALTER TABLE EQP_INSTALL_KIT_MAP ADD CONSTRAINT FK_EQPBOMPART_EQPINSTKITMAP FOREIGN KEY ( BOM_PART_DB_ID, BOM_PART_ID ) REFERENCES EQP_BOM_PART ( BOM_PART_DB_ID, BOM_PART_ID ) DEFERRABLE ;

ALTER TABLE EQP_KIT_PART_GROUPS ADD CONSTRAINT FK_EQPBOMPART_EQPKITPARTGROUPS FOREIGN KEY ( BOM_PART_DB_ID, BOM_PART_ID ) REFERENCES EQP_BOM_PART ( BOM_PART_DB_ID, BOM_PART_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_BASELINE ADD CONSTRAINT FK_EQPBOMPART_EQPPARTBASELINE FOREIGN KEY ( BOM_PART_DB_ID, BOM_PART_ID ) REFERENCES EQP_BOM_PART ( BOM_PART_DB_ID, BOM_PART_ID ) DEFERRABLE ;

ALTER TABLE EVT_INV ADD CONSTRAINT FK_EQPBOMPART_EVTINV FOREIGN KEY ( BOM_PART_DB_ID, BOM_PART_ID ) REFERENCES EQP_BOM_PART ( BOM_PART_DB_ID, BOM_PART_ID ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_INV ADD CONSTRAINT FK_EQPBOMPART_EVTINVCNDCHG FOREIGN KEY ( bom_part_db_id, bom_part_id ) REFERENCES EQP_BOM_PART ( BOM_PART_DB_ID, BOM_PART_ID ) DEFERRABLE ;

ALTER TABLE EVT_TOOL ADD CONSTRAINT FK_EQPBOMPART_EVTTOOL FOREIGN KEY ( BOM_PART_DB_ID, BOM_PART_ID ) REFERENCES EQP_BOM_PART ( BOM_PART_DB_ID, BOM_PART_ID ) DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_EQPBOMPART_INVINV FOREIGN KEY ( BOM_PART_DB_ID, BOM_PART_ID ) REFERENCES EQP_BOM_PART ( BOM_PART_DB_ID, BOM_PART_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_EQPBOMPART_REQPART FOREIGN KEY ( REQ_BOM_PART_DB_ID, REQ_BOM_PART_ID ) REFERENCES EQP_BOM_PART ( BOM_PART_DB_ID, BOM_PART_ID ) DEFERRABLE ;

ALTER TABLE SCHED_PART ADD CONSTRAINT FK_EQPBOMPART_SCHEDPART FOREIGN KEY ( SCHED_BOM_PART_DB_ID, SCHED_BOM_PART_ID ) REFERENCES EQP_BOM_PART ( BOM_PART_DB_ID, BOM_PART_ID ) DEFERRABLE ;

ALTER TABLE TASK_BOM_PART_LIST ADD CONSTRAINT FK_EQPBOMPART_TASKBOMPARTLIST FOREIGN KEY ( BOM_PART_DB_ID, BOM_PART_ID ) REFERENCES EQP_BOM_PART ( BOM_PART_DB_ID, BOM_PART_ID ) DEFERRABLE ;

ALTER TABLE TASK_PART_LIST ADD CONSTRAINT FK_EQPBOMPART_TASKPARTLIST FOREIGN KEY ( BOM_PART_DB_ID, BOM_PART_ID ) REFERENCES EQP_BOM_PART ( BOM_PART_DB_ID, BOM_PART_ID ) DEFERRABLE ;

ALTER TABLE TASK_TOOL_LIST ADD CONSTRAINT FK_EQPBOMPART_TASKTOOLLIST FOREIGN KEY ( BOM_PART_DB_ID, BOM_PART_ID ) REFERENCES EQP_BOM_PART ( BOM_PART_DB_ID, BOM_PART_ID ) DEFERRABLE ;

ALTER TABLE EQP_DATA_SOURCE_SPEC ADD CONSTRAINT FK_EQPDATASOURCE_EQPDATASOURCE FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD, DATA_SOURCE_DB_ID, DATA_SOURCE_CD ) REFERENCES EQP_DATA_SOURCE ( ASSMBL_DB_ID, ASSMBL_CD, DATA_SOURCE_DB_ID, DATA_SOURCE_CD ) DEFERRABLE ;

ALTER TABLE EVT_FINDING ADD CONSTRAINT FK_EQPFINDING_EVTFINDING FOREIGN KEY ( FINDING_DB_ID, FINDING_ID ) REFERENCES EQP_FINDING ( FINDING_DB_ID, FINDING_ID ) DEFERRABLE ;

ALTER TABLE EQP_INSTALL_KIT_PART_MAP ADD CONSTRAINT FK_EQPINSTKITMAP_EQPINSTKITPAR FOREIGN KEY ( EQP_INSTALL_KIT_MAP_DB_ID, EQP_INSTALL_KIT_MAP_ID ) REFERENCES EQP_INSTALL_KIT_MAP ( EQP_INSTALL_KIT_MAP_DB_ID, EQP_INSTALL_KIT_MAP_ID ) DEFERRABLE ;

ALTER TABLE EQP_KIT_PART_MAP ADD CONSTRAINT FK_EQPKITPARTGROUPS_EQPKITPART FOREIGN KEY ( EQP_KIT_PART_GROUP_DB_ID, EQP_KIT_PART_GROUP_ID ) REFERENCES EQP_KIT_PART_GROUPS ( EQP_KIT_PART_GROUP_DB_ID, EQP_KIT_PART_GROUP_ID ) DEFERRABLE ;

ALTER TABLE INV_KIT_MAP ADD CONSTRAINT FK_EQPKITPARTGROUPS_INVKITMAP FOREIGN KEY ( EQP_KIT_PART_GROUP_DB_ID, EQP_KIT_PART_GROUP_ID ) REFERENCES EQP_KIT_PART_GROUPS ( EQP_KIT_PART_GROUP_DB_ID, EQP_KIT_PART_GROUP_ID ) DEFERRABLE ;

ALTER TABLE EQP_KIT_PART_GROUP_MAP ADD CONSTRAINT FK_EQPKITPARTGROUPS_KITPARTGRO FOREIGN KEY ( EQP_KIT_PART_GROUP_DB_ID, EQP_KIT_PART_GROUP_ID ) REFERENCES EQP_KIT_PART_GROUPS ( EQP_KIT_PART_GROUP_DB_ID, EQP_KIT_PART_GROUP_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_EQPMANUFACT_EQPPARTNO FOREIGN KEY ( MANUFACT_DB_ID, MANUFACT_CD ) REFERENCES EQP_MANUFACT ( MANUFACT_DB_ID, MANUFACT_CD ) DEFERRABLE ;

ALTER TABLE TASK_REF_DOC ADD CONSTRAINT FK_EQPMANUFACT_TASKREFDOC FOREIGN KEY ( MANUFACT_DB_ID, MANUFACT_CD ) REFERENCES EQP_MANUFACT ( MANUFACT_DB_ID, MANUFACT_CD ) DEFERRABLE ;

ALTER TABLE MIM_PART_INPUT ADD CONSTRAINT FK_EQPPARTBASELINE_MIMPARTINPU FOREIGN KEY ( BOM_PART_DB_ID, BOM_PART_ID, PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_BASELINE ( BOM_PART_DB_ID, BOM_PART_ID, PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE CLAIM_PART_LINE ADD CONSTRAINT FK_EQPPARTNO_CLAIMPARTLINE FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO_LOG ADD CONSTRAINT FK_EQPPARTNO_EQPARTNOLOG FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_INSTALL_KIT_MAP ADD CONSTRAINT FK_EQPPARTNO_EQPINSTKITMAP FOREIGN KEY ( KIT_PART_NO_DB_ID, KIT_PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_INSTALL_KIT_PART_MAP ADD CONSTRAINT FK_EQPPARTNO_EQPINSTKITPARTMAP FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_KIT_PART_GROUP_MAP ADD CONSTRAINT FK_EQPPARTNO_EQPKITPARTGROUPMA FOREIGN KEY ( KIT_PART_NO_DB_ID, KIT_PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_KIT_PART_MAP ADD CONSTRAINT FK_EQPPARTNO_EQPKITPARTMAP FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_ADVSRY ADD CONSTRAINT FK_EQPPARTNO_EQPPARTADVSRY FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_BASELINE ADD CONSTRAINT FK_EQPPARTNO_EQPPARTBASELINE FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR_ADVSRY ADD CONSTRAINT FK_EQPPARTNO_EQPPTVENADV FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EVT_INV ADD CONSTRAINT FK_EQPPARTNO_EVTINV FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_INV ADD CONSTRAINT FK_EQPPARTNO_EVTINVCNDCHG FOREIGN KEY ( part_no_db_id, part_no_id ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EVT_PART_NO ADD CONSTRAINT FK_EQPPARTNO_EVTPARTNO FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EVT_TOOL ADD CONSTRAINT FK_EQPPARTNO_EVTTOOL FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE FNC_XACTION_LOG ADD CONSTRAINT FK_EQPPARTNO_FNCXACTIONLOG FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_EQPPARTNO_INVINV FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_BIN_LOG ADD CONSTRAINT FK_EQPPARTNO_INVLOCBINLOG FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_LOC_PART_COUNT ADD CONSTRAINT FK_EQPPARTNO_INVLOCPARTCT FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE MIM_PART_NUMDATA ADD CONSTRAINT FK_EQPPARTNO_MIMPARTNUMDATA FOREIGN KEY ( ASSMBL_PART_NO_DB_ID, ASSMBL_PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) NOT DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR_EXCHG ADD CONSTRAINT FK_EQPPARTNO_PARTVENDORXCHG FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE PO_INVOICE_LINE ADD CONSTRAINT FK_EQPPARTNO_POINVOICELINE FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE_KIT_LINE ADD CONSTRAINT FK_EQPPARTNO_POLINEKITLINE FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_EQPPARTNO_REQPART_PO FOREIGN KEY ( PO_PART_NO_DB_ID, PO_PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_EQPPARTNO_REQPART_SPEC FOREIGN KEY ( REQ_SPEC_PART_NO_DB_ID, REQ_SPEC_PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE RFQ_LINE_VENDOR ADD CONSTRAINT FK_EQPPARTNO_RFQLINEVENDOR FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE SCHED_STASK ADD CONSTRAINT FK_EQPPARTNO_SCHEDSTASK FOREIGN KEY ( ORIG_PART_NO_DB_ID, ORIG_PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT_LINE ADD CONSTRAINT FK_EQPPARTNO_SHIPSHIPMENTLINE FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE TASK_INTERVAL ADD CONSTRAINT FK_EQPPARTNO_TASKINTERVAL FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE TASK_PART_MAP ADD CONSTRAINT FK_EQPPARTNO_TASKPARTMAP FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE TASK_PART_TRANSFORM ADD CONSTRAINT FK_EQPPARTNO_TASKPARTTRANSFORM FOREIGN KEY ( OLD_PART_NO_DB_ID, OLD_PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN_PART_LIST ADD CONSTRAINT FK_EQPPARTNO_WARRANTYDEFNPARTL FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_TERMS_NON_REP_PARTS ADD CONSTRAINT FK_EQPPARTNO_WARRANTYTERMSNONR FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_TERMS_REP_PARTS ADD CONSTRAINT FK_EQPPARTNO_WARRANTYTERMSREPP FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_PLANNING_TYPE_SKILL ADD CONSTRAINT FK_EQPPLANNINGTYPE_LABOURSKILL FOREIGN KEY ( PLANNING_TYPE_DB_ID, PLANNING_TYPE_ID ) REFERENCES EQP_PLANNING_TYPE ( PLANNING_TYPE_DB_ID, PLANNING_TYPE_ID ) DEFERRABLE ;

ALTER TABLE PPC_TASK ADD CONSTRAINT FK_EQPPLANNINGTYPE_PPCTASK FOREIGN KEY ( PLANNING_TYPE_DB_ID, PLANNING_TYPE_ID ) REFERENCES EQP_PLANNING_TYPE ( PLANNING_TYPE_DB_ID, PLANNING_TYPE_ID ) DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_EQPPLANNINGTYPE_TASKTASK FOREIGN KEY ( PLANNING_TYPE_DB_ID, PLANNING_TYPE_ID ) REFERENCES EQP_PLANNING_TYPE ( PLANNING_TYPE_DB_ID, PLANNING_TYPE_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_COMPAT_DEF ADD CONSTRAINT FK_EQPPRTBASELINE_EQPPARTCOMPA FOREIGN KEY ( NH_BOM_PART_DB_ID, NH_BOM_PART_ID, NH_PART_NO_DB_ID, NH_PART_NO_ID ) REFERENCES EQP_PART_BASELINE ( BOM_PART_DB_ID, BOM_PART_ID, PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_OIL_THRESHOLD_PART ADD CONSTRAINT FK_EQPPRTNO_EQPOILTHRESHPART FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CONSTRAINT FK_EQPPRTNO_EQPPARTROTABLE FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR ADD CONSTRAINT FK_EQPPRTNO_EQPPRTVENDR FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_REPAIR ADD CONSTRAINT FK_EQPPRTNO_INVLCREPAIR FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE ADD CONSTRAINT FK_EQPPRTNO_POLINE FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE RFQ_LINE ADD CONSTRAINT FK_EQPPRTNO_RFQLINE FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE TASK_PART_LIST ADD CONSTRAINT FK_EQPPRTNO_TASKPARTLIST FOREIGN KEY ( SPEC_PART_NO_DB_ID, SPEC_PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE TASK_PART_TRANSFORM ADD CONSTRAINT FK_EQPPRTNO_TASKPARTTRANSFORM FOREIGN KEY ( NEW_PART_NO_DB_ID, NEW_PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE SCHED_PART ADD CONSTRAINT FK_EQPPRTN_SCHEDPART FOREIGN KEY ( SPEC_PART_NO_DB_ID, SPEC_PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR_PRICE ADD CONSTRAINT FK_EQPPRTVD_EQPRTVENDPRICE FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID, PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_VENDOR ( VENDOR_DB_ID, VENDOR_ID, PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE RFQ_LINE_VENDOR ADD CONSTRAINT FK_EQPPRTVNDRPRICE_RFQLINEVNDR FOREIGN KEY ( PART_VENDOR_PRICE_DB_ID, PART_VENDOR_PRICE_ID ) REFERENCES EQP_PART_VENDOR_PRICE ( PART_VENDOR_PRICE_DB_ID, PART_VENDOR_PRICE_ID ) DEFERRABLE ;

ALTER TABLE RFQ_LINE_VENDOR ADD CONSTRAINT FK_EQPPRTVNDR_RFQLINEVENDOR FOREIGN KEY ( PURCH_VENDOR_DB_ID, PURCH_VENDOR_ID, PURCH_PART_NO_DB_ID, PURCH_PART_NO_ID ) REFERENCES EQP_PART_VENDOR ( VENDOR_DB_ID, VENDOR_ID, PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_COMPAT_TASK ADD CONSTRAINT FK_EQPRTBASLIN_EQPRTCMPATTSK FOREIGN KEY ( BOM_PART_DB_ID, BOM_PART_ID, PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_BASELINE ( BOM_PART_DB_ID, BOM_PART_ID, PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_COMPAT_DEF ADD CONSTRAINT FK_EQPRTBSLINE_EQPPARTCOMPATDE FOREIGN KEY ( BOM_PART_DB_ID, BOM_PART_ID, PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_BASELINE ( BOM_PART_DB_ID, BOM_PART_ID, PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE AUTO_RSRV_QUEUE ADD CONSTRAINT FK_EQPRTNO_AUTORSRVQUEUE FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE SCHED_INST_PART ADD CONSTRAINT FK_EQPRTNO_SCHDINSTPRT FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_EQPSTCKNO_REQPART FOREIGN KEY ( REQ_STOCK_NO_DB_ID, REQ_STOCK_NO_ID ) REFERENCES EQP_STOCK_NO ( STOCK_NO_DB_ID, STOCK_NO_ID ) DEFERRABLE ;

ALTER TABLE STOCK_DIST_REQ ADD CONSTRAINT FK_EQPSTKNO_STKDISTREQ FOREIGN KEY ( STOCK_NO_DB_ID, STOCK_NO_ID ) REFERENCES EQP_STOCK_NO ( STOCK_NO_DB_ID, STOCK_NO_ID ) NOT DEFERRABLE ;

ALTER TABLE TASK_PANEL ADD CONSTRAINT FK_EQPTASKPANEL_TASKPANEL FOREIGN KEY ( PANEL_DB_ID, PANEL_ID ) REFERENCES EQP_TASK_PANEL ( PANEL_DB_ID, PANEL_ID ) DEFERRABLE ;

ALTER TABLE EQP_TASK_ZONE ADD CONSTRAINT FK_EQPTASKZONE_NHEQPTSKZNE FOREIGN KEY ( NH_ZONE_DB_ID, NH_ZONE_ID ) REFERENCES EQP_TASK_ZONE ( ZONE_DB_ID, ZONE_ID ) DEFERRABLE ;

ALTER TABLE PPC_WORK_AREA_ZONE ADD CONSTRAINT FK_EQPTASKZONE_PPCWORKAREAZONE FOREIGN KEY ( ZONE_DB_ID, ZONE_ID ) REFERENCES EQP_TASK_ZONE ( ZONE_DB_ID, ZONE_ID ) DEFERRABLE ;

ALTER TABLE TASK_ZONE ADD CONSTRAINT FK_EQPTASKZONE_TASKZONE FOREIGN KEY ( ZONE_DB_ID, ZONE_ID ) REFERENCES EQP_TASK_ZONE ( ZONE_DB_ID, ZONE_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR_REP ADD CONSTRAINT FK_EQPTNO_EQPPTVENDOR FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE SCHED_PANEL ADD CONSTRAINT FK_EQPTSKPANEL_SCHED_PANEL FOREIGN KEY ( PANEL_DB_ID, PANEL_ID ) REFERENCES EQP_TASK_PANEL ( PANEL_DB_ID, PANEL_ID ) DEFERRABLE ;

ALTER TABLE SCHED_ZONE ADD CONSTRAINT FK_EQPTSKZN_SCHEDZONE FOREIGN KEY ( ZONE_DB_ID, ZONE_ID ) REFERENCES EQP_TASK_ZONE ( ZONE_DB_ID, ZONE_ID ) DEFERRABLE ;

ALTER TABLE EQP_TASK_PANEL ADD CONSTRAINT FK_EQPTSKZONE_EQPTSKPANEL FOREIGN KEY ( ZONE_DB_ID, ZONE_ID ) REFERENCES EQP_TASK_ZONE ( ZONE_DB_ID, ZONE_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR_ADVSRY ADD CONSTRAINT FK_EQP_ADVSRY_EQPPTVENADV FOREIGN KEY ( ADVSRY_DB_ID, ADVSRY_ID ) REFERENCES EQP_ADVSRY ( ADVSRY_DB_ID, ADVSRY_ID ) DEFERRABLE ;

ALTER TABLE SB_ASSMBL ADD CONSTRAINT FK_EQP_ASSMBL FOREIGN KEY ( ASSMBL_DB_ID, ASSMBL_CD ) REFERENCES EQP_ASSMBL ( ASSMBL_DB_ID, ASSMBL_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_ALT_UNIT ADD CONSTRAINT FK_EQP_PART_NO_EQPPARTALTUNIT FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_IETM ADD CONSTRAINT FK_EQP_PART_NO_EQPPARTIETM FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_ATTACHMENT ADD CONSTRAINT FK_EQP_PART_NO_EQPPRTATTACH FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_BIN ADD CONSTRAINT FK_EQP_PART_NO_INVLOCBIN FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_EQP_STOCK_NO_EQPPARTNO FOREIGN KEY ( STOCK_NO_DB_ID, STOCK_NO_ID ) REFERENCES EQP_STOCK_NO ( STOCK_NO_DB_ID, STOCK_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_STOCK ADD CONSTRAINT FK_EQP_STOCK_NO_INVLOCSTOCK FOREIGN KEY ( STOCK_NO_DB_ID, STOCK_NO_ID ) REFERENCES EQP_STOCK_NO ( STOCK_NO_DB_ID, STOCK_NO_ID ) DEFERRABLE ;

ALTER TABLE ER_DATE_RANGE ADD CONSTRAINT FK_ERHEADER_ERDATERANGE FOREIGN KEY ( RULE_DB_ID, RULE_ID ) REFERENCES ER_HEADER ( RULE_DB_ID, RULE_ID ) DEFERRABLE ;

ALTER TABLE ER_WEEKLY_RANGE ADD CONSTRAINT FK_ERHEADER_ERWEEKLYRANGE FOREIGN KEY ( RULE_DB_ID, RULE_ID ) REFERENCES ER_HEADER ( RULE_DB_ID, RULE_ID ) DEFERRABLE ;

ALTER TABLE ER_WORK_TYPE ADD CONSTRAINT FK_ERHEADER_ERWORKTYPE FOREIGN KEY ( RULE_DB_ID, RULE_ID ) REFERENCES ER_HEADER ( RULE_DB_ID, RULE_ID ) DEFERRABLE ;

ALTER TABLE LRP_EXTRACTION_RULE ADD CONSTRAINT FK_ERHEADER_LRPEXRULE FOREIGN KEY ( RULE_DB_ID, RULE_ID ) REFERENCES ER_HEADER ( RULE_DB_ID, RULE_ID ) DEFERRABLE ;

ALTER TABLE ESIG_DOC_SIGN ADD CONSTRAINT FK_ESIGDOC_ESIGDOCSIGN FOREIGN KEY ( DOC_DB_ID, DOC_ID ) REFERENCES ESIG_DOC ( DOC_DB_ID, DOC_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_ESIG ADD CONSTRAINT FK_ESIGDOC_SCHEDLBRESIG FOREIGN KEY ( DOC_DB_ID, DOC_ID ) REFERENCES ESIG_DOC ( DOC_DB_ID, DOC_ID ) DEFERRABLE ;

ALTER TABLE SCHED_WP_SIGN_ESIG ADD CONSTRAINT FK_ESIGDOC_SCHEDWPSIGNESIG FOREIGN KEY ( DOC_DB_ID, DOC_ID ) REFERENCES ESIG_DOC ( DOC_DB_ID, DOC_ID ) DEFERRABLE ;

ALTER TABLE EVT_ATTACH ADD CONSTRAINT FK_EVTATTACH_EVTEVNT FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_BAND ADD CONSTRAINT FK_EVTBANDGROUP_EVTBAND FOREIGN KEY ( BAND_GROUP_DB_ID, BAND_GROUP_ID ) REFERENCES EVT_BAND_GROUP ( BAND_GROUP_DB_ID, BAND_GROUP_ID ) DEFERRABLE ;

ALTER TABLE EVT_BAND_FIELD ADD CONSTRAINT FK_EVTBAND_EVTBANDFIELD FOREIGN KEY ( BAND_GROUP_DB_ID, BAND_GROUP_ID, BAND_ID ) REFERENCES EVT_BAND ( BAND_GROUP_DB_ID, BAND_GROUP_ID, BAND_ID ) DEFERRABLE ;

ALTER TABLE EVT_BAND_ROLE ADD CONSTRAINT FK_EVTBAND_EVTBANDROLE FOREIGN KEY ( BAND_GROUP_DB_ID, BAND_GROUP_ID, BAND_ID ) REFERENCES EVT_BAND ( BAND_GROUP_DB_ID, BAND_GROUP_ID, BAND_ID ) DEFERRABLE ;

ALTER TABLE INV_XFER ADD CONSTRAINT FK_EVTEVENTINIT_INVXFER FOREIGN KEY ( INIT_EVENT_DB_ID, INIT_EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CONSTRAINT FK_EVTEVENT_EQPPARTROTABLE FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_DEPT ADD CONSTRAINT FK_EVTEVENT_EVTDEPT FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_EVENT ADD CONSTRAINT FK_EVTEVENT_EVTEVENT FOREIGN KEY ( NH_EVENT_DB_ID, NH_EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_EVENT_REL ADD CONSTRAINT FK_EVTEVENT_EVTEVENTREL FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_EVENT_REL ADD CONSTRAINT FK_EVTEVENT_EVTEVENTREL2 FOREIGN KEY ( REL_EVENT_DB_ID, REL_EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_EVENT ADD CONSTRAINT FK_EVTEVENT_EVTEVTH FOREIGN KEY ( H_EVENT_DB_ID, H_EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_FAIL_EFFECT ADD CONSTRAINT FK_EVTEVENT_EVTFAILEFFECT FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_FINDING ADD CONSTRAINT FK_EVTEVENT_EVTFINDING FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_IETM ADD CONSTRAINT FK_EVTEVENT_EVTIETM FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_INV ADD CONSTRAINT FK_EVTEVENT_EVTINV FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_INV ADD CONSTRAINT FK_EVTEVENT_EVTINVCNDCHG FOREIGN KEY ( event_db_id, event_id ) REFERENCES INV_CND_CHG_EVENT ( event_db_id, event_id ) DEFERRABLE ;

ALTER TABLE EVT_LIC_DEFN ADD CONSTRAINT FK_EVTEVENT_EVTLICDEFN FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_LOC ADD CONSTRAINT FK_EVTEVENT_EVTLOC FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_ORG_HR ADD CONSTRAINT FK_EVTEVENT_EVTORGHR FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_ORG_VENDOR_PO_TYPE ADD CONSTRAINT FK_EVTEVENT_EVTORGVENPOTYPE FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_ORG_VENDOR_SERVICE_TYPE ADD CONSTRAINT FK_EVTEVENT_EVTORGVENSRVTYPE FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_PART_NO ADD CONSTRAINT FK_EVTEVENT_EVTPARTNO FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_STAGE ADD CONSTRAINT FK_EVTEVENT_EVTSTAGE FOREIGN KEY ( STAGE_EVENT_DB_ID, STAGE_EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_STAGE ADD CONSTRAINT FK_EVTEVENT_EVTSTAGE2 FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_TOOL ADD CONSTRAINT FK_EVTEVENT_EVTTOOL FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_VENDOR ADD CONSTRAINT FK_EVTEVENT_EVTVENDOR FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE FNC_XACTION_LOG ADD CONSTRAINT FK_EVTEVENT_FNCXACTIONLOG FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE INV_XFER ADD CONSTRAINT FK_EVTEVENT_INVXFER FOREIGN KEY ( XFER_DB_ID, XFER_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_EVTEVENT_POHEADER FOREIGN KEY ( PO_DB_ID, PO_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE PO_INVOICE ADD CONSTRAINT FK_EVTEVENT_POINVOICE FOREIGN KEY ( PO_INVOICE_DB_ID, PO_INVOICE_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE QUAR_QUAR ADD CONSTRAINT FK_EVTEVENT_QUARQUAR FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_EVTEVENT_REQPART FOREIGN KEY ( REQ_PART_DB_ID, REQ_PART_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE RFQ_HEADER ADD CONSTRAINT FK_EVTEVENT_RFQHEADER FOREIGN KEY ( RFQ_DB_ID, RFQ_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE SCHED_STASK ADD CONSTRAINT FK_EVTEVENT_SCHEDSTASK FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE SD_FAULT ADD CONSTRAINT FK_EVTEVENT_SDFAULT FOREIGN KEY ( FAULT_DB_ID, FAULT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT ADD CONSTRAINT FK_EVTEVENT_SHIPSHIPMENT FOREIGN KEY ( SHIPMENT_DB_ID, SHIPMENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_SCHED_DEAD ADD CONSTRAINT FK_EVTEVNT_EVTSHEDDEAD FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE EVT_INV_USAGE ADD CONSTRAINT FK_EVTINV_EVTINVUSAGE FOREIGN KEY ( EVENT_DB_ID, EVENT_ID, EVENT_INV_ID ) REFERENCES EVT_INV ( EVENT_DB_ID, EVENT_ID, EVENT_INV_ID ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_INV_USAGE ADD CONSTRAINT FK_EVTINV_INVCNDCHGUSAGE FOREIGN KEY ( event_db_id, event_id, event_inv_id ) REFERENCES INV_CND_CHG_INV ( event_db_id, event_id, event_inv_id ) DEFERRABLE ;

ALTER TABLE INV_PARM_DATA ADD CONSTRAINT FK_EVTINV_INVPARMDATA FOREIGN KEY ( EVENT_DB_ID, EVENT_ID, EVENT_INV_ID ) REFERENCES EVT_INV ( EVENT_DB_ID, EVENT_ID, EVENT_INV_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_TOOL ADD CONSTRAINT FK_EVTTOOL_SCHEDLBRTOOL FOREIGN KEY ( EVENT_DB_ID, EVENT_ID, TOOL_ID ) REFERENCES EVT_TOOL ( EVENT_DB_ID, EVENT_ID, TOOL_ID ) DEFERRABLE ;

ALTER TABLE LRP_PLAN_CONFIG ADD CONSTRAINT FK_EXTDEADSEV_LRPPLANCONFIG FOREIGN KEY ( EXTDEAD_SEV_DB_ID, EXTDEAD_SEV_CD ) REFERENCES REF_LRP_CONFIG_SEV ( LRP_CONFIG_SEV_DB_ID, LRP_CONFIG_SEV_CD ) DEFERRABLE ;

ALTER TABLE LRP_PLAN_CONFIG ADD CONSTRAINT FK_EXTRACTEXCSEV_LRPPLANCONF FOREIGN KEY ( EXTRACTEXC_SEV_DB_ID, EXTRACTEXC_SEV_CD ) REFERENCES REF_LRP_CONFIG_SEV ( LRP_CONFIG_SEV_DB_ID, LRP_CONFIG_SEV_CD ) DEFERRABLE ;

ALTER TABLE SCHED_PART ADD CONSTRAINT FK_EXTREFITEM_SCHEDPART FOREIGN KEY ( EXT_REF_ITEM_ID, EXT_REF_ITEM_DB_ID ) REFERENCES EXT_REF_ITEM ( EXT_REF_ITEM_ID, EXT_REF_ITEM_DB_ID ) NOT DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF_DEAD ADD CONSTRAINT FK_FAILDEFERREF_DEFERREFDEAD FOREIGN KEY ( FAIL_DEFER_REF_ID ) REFERENCES FAIL_DEFER_REF ( ALT_ID ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF_DEGRAD_CAP ADD CONSTRAINT FK_FAILDEFERREF_DEGRADCAP FOREIGN KEY ( FAIL_DEFER_REF_ID ) REFERENCES FAIL_DEFER_REF ( ALT_ID ) ON
DELETE CASCADE NOT DEFERRABLE ;

ALTER TABLE FAIL_DEFER_CARRIER ADD CONSTRAINT FK_FAILDEFREF_FAILDEFCARRIER FOREIGN KEY ( FAIL_DEFER_REF_DB_ID, FAIL_DEFER_REF_ID ) REFERENCES FAIL_DEFER_REF ( FAIL_DEFER_REF_DB_ID, FAIL_DEFER_REF_ID ) DEFERRABLE ;

ALTER TABLE EVT_FAIL_EFFECT ADD CONSTRAINT FK_FAILEFFECT_EVTFAILEFFECT FOREIGN KEY ( FAIL_EFFECT_DB_ID, FAIL_EFFECT_ID ) REFERENCES FAIL_EFFECT ( FAIL_EFFECT_DB_ID, FAIL_EFFECT_ID ) DEFERRABLE ;

ALTER TABLE FAIL_MODE_EFFECT ADD CONSTRAINT FK_FAILEFFECT_FAILMODEEFFECT FOREIGN KEY ( FAIL_EFFECT_DB_ID, FAIL_EFFECT_ID ) REFERENCES FAIL_EFFECT ( FAIL_EFFECT_DB_ID, FAIL_EFFECT_ID ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF_ROLE ADD CONSTRAINT FK_FAILERFERREF_FAILDEFREFRL FOREIGN KEY ( FAIL_DEFER_REF_DB_ID, FAIL_DEFER_REF_ID ) REFERENCES FAIL_DEFER_REF ( FAIL_DEFER_REF_DB_ID, FAIL_DEFER_REF_ID ) DEFERRABLE ;

ALTER TABLE FAIL_MODE_EFFECT ADD CONSTRAINT FK_FAILMODE_FAILMODEEFFECT FOREIGN KEY ( FAIL_MODE_DB_ID, FAIL_MODE_ID ) REFERENCES FAIL_MODE ( FAIL_MODE_DB_ID, FAIL_MODE_ID ) DEFERRABLE ;

ALTER TABLE FAIL_MODE_FACTOR ADD CONSTRAINT FK_FAILMODE_FAILMODEFACTOR FOREIGN KEY ( FAIL_MODE_DB_ID, FAIL_MODE_ID ) REFERENCES FAIL_MODE ( FAIL_MODE_DB_ID, FAIL_MODE_ID ) DEFERRABLE ;

ALTER TABLE FAIL_MODE_IETM ADD CONSTRAINT FK_FAILMODE_FAILMODEIETM FOREIGN KEY ( FAIL_MODE_DB_ID, FAIL_MODE_ID ) REFERENCES FAIL_MODE ( FAIL_MODE_DB_ID, FAIL_MODE_ID ) DEFERRABLE ;

ALTER TABLE FAIL_MODE_SUPPRESS ADD CONSTRAINT FK_FAILMODE_FAILMODESUPPRESS FOREIGN KEY ( SUPPRESS_FAIL_MODE_DB_ID, SUPPRESS_FAIL_MODE_ID ) REFERENCES FAIL_MODE ( FAIL_MODE_DB_ID, FAIL_MODE_ID ) DEFERRABLE ;

ALTER TABLE FAIL_MODE_SUPPRESS ADD CONSTRAINT FK_FAILMODE_FAILMODESUPPRESS2 FOREIGN KEY ( FAIL_MODE_DB_ID, FAIL_MODE_ID ) REFERENCES FAIL_MODE ( FAIL_MODE_DB_ID, FAIL_MODE_ID ) DEFERRABLE ;

ALTER TABLE SD_FAULT ADD CONSTRAINT FK_FAILMODE_SDFAULT FOREIGN KEY ( FAIL_MODE_DB_ID, FAIL_MODE_ID ) REFERENCES FAIL_MODE ( FAIL_MODE_DB_ID, FAIL_MODE_ID ) DEFERRABLE ;

ALTER TABLE TASK_FAIL_MODE ADD CONSTRAINT FK_FAILMOD_TASKFALMODE FOREIGN KEY ( FAIL_MODE_DB_ID, FAIL_MODE_ID ) REFERENCES FAIL_MODE ( FAIL_MODE_DB_ID, FAIL_MODE_ID ) DEFERRABLE ;

ALTER TABLE SD_FAULT_REFERENCE_REQUEST ADD CONSTRAINT FK_FAULTREQUEST_APP_ORGHR FOREIGN KEY ( APPROVER_HR_DB_ID, APPROVER_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) NOT DEFERRABLE ;

ALTER TABLE SD_FAULT_REFERENCE_REQUEST ADD CONSTRAINT FK_FAULTREQUEST_MIMDB FOREIGN KEY ( FAULT_REF_REQ_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE SD_FAULT_REFERENCE_REQUEST ADD CONSTRAINT FK_FAULTREQUEST_MIMRSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE SD_FAULT_REFERENCE_REQUEST ADD CONSTRAINT FK_FAULTREQUEST_ORGHR FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) NOT DEFERRABLE ;

ALTER TABLE SD_FAULT_REFERENCE_REQUEST ADD CONSTRAINT FK_FAULTREQUEST_REFREQ_STATUS FOREIGN KEY ( REQUEST_STATUS_CD ) REFERENCES REF_REFERENCE_REQUEST_STATUS ( REFERENCE_REQUEST_STATUS_CD ) NOT DEFERRABLE ;

ALTER TABLE SD_FAULT_REFERENCE_REQUEST ADD CONSTRAINT FK_FAULTREQUEST_SDFAULTREF FOREIGN KEY ( FAULT_REF_REQ_DB_ID, FAULT_REF_REQ_ID ) REFERENCES SD_FAULT_REFERENCE ( FAULT_REF_DB_ID, FAULT_REF_ID ) NOT DEFERRABLE ;

ALTER TABLE FC_RANGE ADD CONSTRAINT FK_FCMODEL_FCRANGE FOREIGN KEY ( MODEL_DB_ID, MODEL_ID ) REFERENCES FC_MODEL ( MODEL_DB_ID, MODEL_ID ) DEFERRABLE ;

ALTER TABLE INV_AC_REG ADD CONSTRAINT FK_FCMODEL_INVACREG FOREIGN KEY ( FORECAST_MODEL_DB_ID, FORECAST_MODEL_ID ) REFERENCES FC_MODEL ( MODEL_DB_ID, MODEL_ID ) DEFERRABLE ;

ALTER TABLE LRP_INV_INV ADD CONSTRAINT FK_FCMODEL_LRPINVINV FOREIGN KEY ( FORECAST_MODEL_DB_ID, FORECAST_MODEL_ID ) REFERENCES FC_MODEL ( MODEL_DB_ID, MODEL_ID ) DEFERRABLE ;

ALTER TABLE FC_RATE ADD CONSTRAINT FK_FCRANGE_FCRATE FOREIGN KEY ( MODEL_DB_ID, MODEL_ID, RANGE_ID ) REFERENCES FC_RANGE ( MODEL_DB_ID, MODEL_ID, RANGE_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG_FAIL_EFFECT ADD CONSTRAINT FK_FLEFFECT_FLLEGFLEFF FOREIGN KEY ( FAIL_EFFECT_DB_ID, FAIL_EFFECT_ID ) REFERENCES FAIL_EFFECT ( FAIL_EFFECT_DB_ID, FAIL_EFFECT_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG_DISRUPT_TYPE ADD CONSTRAINT FK_FLLEGDIS_FLLEGDISTYP FOREIGN KEY ( LEG_DISRUPT_ID ) REFERENCES FL_LEG_DISRUPT ( LEG_DISRUPT_ID ) DEFERRABLE ;

ALTER TABLE EVT_FAIL_EFFECT ADD CONSTRAINT FK_FLLEG_EVTFAILEFF FOREIGN KEY ( LEG_ID ) REFERENCES FL_LEG ( LEG_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG_DISRUPT ADD CONSTRAINT FK_FLLEG_FLLEGDISRUPT FOREIGN KEY ( LEG_ID ) REFERENCES FL_LEG ( LEG_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG_FAIL_EFFECT ADD CONSTRAINT FK_FLLEG_FLLEGFAILEFF FOREIGN KEY ( LEG_ID ) REFERENCES FL_LEG ( LEG_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG_MEASUREMENT ADD CONSTRAINT FK_FLLEG_FLLEGMEAS FOREIGN KEY ( LEG_ID ) REFERENCES FL_LEG ( LEG_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG_NOTE ADD CONSTRAINT FK_FLLEG_FLLEGNOTE FOREIGN KEY ( LEG_ID ) REFERENCES FL_LEG ( LEG_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG_STATUS_LOG ADD CONSTRAINT FK_FLLEG_FLLEGSTATLOG FOREIGN KEY ( LEG_ID ) REFERENCES FL_LEG ( LEG_ID ) DEFERRABLE ;

ALTER TABLE SD_FAULT ADD CONSTRAINT FK_FLLEG_SDFAULT FOREIGN KEY ( LEG_ID ) REFERENCES FL_LEG ( LEG_ID ) DEFERRABLE ;

ALTER TABLE FL_REQUIREMENT ADD CONSTRAINT FK_FL_REQ_FL_LEG FOREIGN KEY ( FL_LEG_ID ) REFERENCES FL_LEG ( LEG_ID ) NOT DEFERRABLE ;

ALTER TABLE FL_REQUIREMENT ADD CONSTRAINT FK_FL_REQ_MIM_DB FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE FL_REQUIREMENT ADD CONSTRAINT FK_FL_REQ_MIM_DB_CR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE FL_REQUIREMENT ADD CONSTRAINT FK_FL_REQ_MIM_DB_CT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE FL_REQUIREMENT ADD CONSTRAINT FK_FL_REQ_MIM_RSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE FL_REQUIREMENT ADD CONSTRAINT FK_FL_REQ_REF_ACFT_CAP_LEVEL FOREIGN KEY ( LEVEL_DB_ID, LEVEL_CD, CAP_DB_ID, CAP_CD ) REFERENCES REF_ACFT_CAP_LEVEL ( ACFT_CAP_LEVEL_DB_ID, ACFT_CAP_LEVEL_CD, ACFT_CAP_DB_ID, ACFT_CAP_CD ) NOT DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_FNCACCNT_EQPPRTNO FOREIGN KEY ( ASSET_ACCOUNT_DB_ID, ASSET_ACCOUNT_ID ) REFERENCES FNC_ACCOUNT ( ACCOUNT_DB_ID, ACCOUNT_ID ) DEFERRABLE ;

ALTER TABLE EVT_EVENT ADD CONSTRAINT FK_FNCACCNT_EVTEVENT FOREIGN KEY ( ACCOUNT_DB_ID, ACCOUNT_ID ) REFERENCES FNC_ACCOUNT ( ACCOUNT_DB_ID, ACCOUNT_ID ) DEFERRABLE ;

ALTER TABLE FNC_ACCOUNT ADD CONSTRAINT FK_FNCACCNT_FNCACCNT FOREIGN KEY ( NH_ACCOUNT_DB_ID, NH_ACCOUNT_ID ) REFERENCES FNC_ACCOUNT ( ACCOUNT_DB_ID, ACCOUNT_ID ) DEFERRABLE ;

ALTER TABLE FNC_XACTION_ACCOUNT ADD CONSTRAINT FK_FNCACCNT_FNCXACTNACNT FOREIGN KEY ( ACCOUNT_DB_ID, ACCOUNT_ID ) REFERENCES FNC_ACCOUNT ( ACCOUNT_DB_ID, ACCOUNT_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_FNCACCNT_REQPART FOREIGN KEY ( ISSUE_ACCOUNT_DB_ID, ISSUE_ACCOUNT_ID ) REFERENCES FNC_ACCOUNT ( ACCOUNT_DB_ID, ACCOUNT_ID ) DEFERRABLE ;

ALTER TABLE CHARGE ADD CONSTRAINT FK_FNCACCOUNT_CHARGE FOREIGN KEY ( ACCOUNT_DB_ID, ACCOUNT_ID ) REFERENCES FNC_ACCOUNT ( ACCOUNT_DB_ID, ACCOUNT_ID ) DEFERRABLE ;

ALTER TABLE INV_AC_REG ADD CONSTRAINT FK_FNCACCOUNT_INVACREG FOREIGN KEY ( ISSUE_ACCOUNT_DB_ID, ISSUE_ACCOUNT_ID ) REFERENCES FNC_ACCOUNT ( ACCOUNT_DB_ID, ACCOUNT_ID ) DEFERRABLE ;

ALTER TABLE PO_INVOICE_LINE ADD CONSTRAINT FK_FNCACCOUNT_POINVOICELINE FOREIGN KEY ( ACCOUNT_DB_ID, ACCOUNT_ID ) REFERENCES FNC_ACCOUNT ( ACCOUNT_DB_ID, ACCOUNT_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE ADD CONSTRAINT FK_FNCACCOUNT_POLINE FOREIGN KEY ( ACCOUNT_DB_ID, ACCOUNT_ID ) REFERENCES FNC_ACCOUNT ( ACCOUNT_DB_ID, ACCOUNT_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE_ACCOUNT ADD CONSTRAINT FK_FNCACCOUNT_POLINEACCOUNT FOREIGN KEY ( ACCOUNT_DB_ID, ACCOUNT_ID ) REFERENCES FNC_ACCOUNT ( ACCOUNT_DB_ID, ACCOUNT_ID ) DEFERRABLE ;

ALTER TABLE RFQ_LINE ADD CONSTRAINT FK_FNCACCOUNT_RFQLINE FOREIGN KEY ( ACCOUNT_DB_ID, ACCOUNT_ID ) REFERENCES FNC_ACCOUNT ( ACCOUNT_DB_ID, ACCOUNT_ID ) DEFERRABLE ;

ALTER TABLE SCHED_STASK ADD CONSTRAINT FK_FNCACCOUNT_SCHEDSTASK FOREIGN KEY ( ISSUE_ACCOUNT_DB_ID, ISSUE_ACCOUNT_ID ) REFERENCES FNC_ACCOUNT ( ACCOUNT_DB_ID, ACCOUNT_ID ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT ADD CONSTRAINT FK_FNCACCOUNT_SHIPSHIPMENT FOREIGN KEY ( RETURN_ACCOUNT_DB_ID, RETURN_ACCOUNT_ID ) REFERENCES FNC_ACCOUNT ( ACCOUNT_DB_ID, ACCOUNT_ID ) DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_FNCACCOUNT_TASKTASK FOREIGN KEY ( ISSUE_ACCOUNT_DB_ID, ISSUE_ACCOUNT_ID ) REFERENCES FNC_ACCOUNT ( ACCOUNT_DB_ID, ACCOUNT_ID ) DEFERRABLE ;

ALTER TABLE TAX ADD CONSTRAINT FK_FNCACCOUNT_TAX FOREIGN KEY ( ACCOUNT_DB_ID, ACCOUNT_ID ) REFERENCES FNC_ACCOUNT ( ACCOUNT_DB_ID, ACCOUNT_ID ) DEFERRABLE ;

ALTER TABLE FNC_ACCOUNT ADD CONSTRAINT FK_FNCTCODE_FNCACCOUNT FOREIGN KEY ( TCODE_DB_ID, TCODE_ID ) REFERENCES FNC_TCODE ( TCODE_DB_ID, TCODE_ID ) DEFERRABLE ;

ALTER TABLE FNC_XACTION_ACCOUNT ADD CONSTRAINT FK_FNCXACTNLG_FNCXACTNACNT FOREIGN KEY ( XACTION_DB_ID, XACTION_ID ) REFERENCES FNC_XACTION_LOG ( XACTION_DB_ID, XACTION_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_FREQ_REF_ENG_EQPPARTNO FOREIGN KEY ( FREQ_ENG_UNIT_DB_ID, FREQ_ENG_UNIT_CD ) REFERENCES REF_ENG_UNIT ( ENG_UNIT_DB_ID, ENG_UNIT_CD ) DEFERRABLE ;

ALTER TABLE PPC_DEPENDENCY ADD CONSTRAINT FK_FROMACTIVITY_DEPENDENCY FOREIGN KEY ( FROM_ACTIVITY_ID ) REFERENCES PPC_ACTIVITY ( ACTIVITY_ID ) DEFERRABLE ;

ALTER TABLE GRP_DEFN_LIC ADD CONSTRAINT FK_GRPDEFN_GRPDEFNLIC FOREIGN KEY ( GRP_DEFN_DB_ID, GRP_DEFN_ID ) REFERENCES GRP_DEFN ( GRP_DEFN_DB_ID, GRP_DEFN_ID ) DEFERRABLE ;

ALTER TABLE LIC_DEFN_PREREQ ADD CONSTRAINT FK_GRPDEFN_LICDEFNPREREQ FOREIGN KEY ( GRP_DEFN_DB_ID, GRP_DEFN_ID ) REFERENCES GRP_DEFN ( GRP_DEFN_DB_ID, GRP_DEFN_ID ) DEFERRABLE ;

ALTER TABLE GRP_DEFN ADD CONSTRAINT FK_GRPDEFN_REFGRPTYPE FOREIGN KEY ( GRP_TYPE_DB_ID, GRP_TYPE_CD ) REFERENCES REF_GRP_TYPE ( GRP_TYPE_DB_ID, GRP_TYPE_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC ADD CONSTRAINT FK_HUBINVLOC_INV_LOC FOREIGN KEY ( HUB_LOC_DB_ID, HUB_LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE IETM_ASSMBL ADD CONSTRAINT FK_IETMIETM_IETMASSMBL FOREIGN KEY ( IETM_DB_ID, IETM_ID ) REFERENCES IETM_IETM ( IETM_DB_ID, IETM_ID ) DEFERRABLE ;

ALTER TABLE IETM_TOPIC ADD CONSTRAINT FK_IETMIETM_IETMTOPIC FOREIGN KEY ( IETM_DB_ID, IETM_ID ) REFERENCES IETM_IETM ( IETM_DB_ID, IETM_ID ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_IETM ADD CONSTRAINT FK_IETMTOPC_ORGVNDRIETM FOREIGN KEY ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) REFERENCES IETM_TOPIC ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL ADD CONSTRAINT FK_IETMTOPIC_EQPASSMBL FOREIGN KEY ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) REFERENCES IETM_TOPIC ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM ADD CONSTRAINT FK_IETMTOPIC_EQPASSMBLBOM FOREIGN KEY ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) REFERENCES IETM_TOPIC ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) DEFERRABLE ;

ALTER TABLE EQP_BOM_PART ADD CONSTRAINT FK_IETMTOPIC_EQPBOMPART FOREIGN KEY ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) REFERENCES IETM_TOPIC ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_IETMTOPIC_EQPPARTNO FOREIGN KEY ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) REFERENCES IETM_TOPIC ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) DEFERRABLE ;

ALTER TABLE EVT_ATTACH ADD CONSTRAINT FK_IETMTOPIC_EVTATTACH FOREIGN KEY ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) REFERENCES IETM_TOPIC ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) DEFERRABLE ;

ALTER TABLE EVT_IETM ADD CONSTRAINT FK_IETMTOPIC_EVTIETM FOREIGN KEY ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) REFERENCES IETM_TOPIC ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) DEFERRABLE ;

ALTER TABLE FAIL_MODE_IETM ADD CONSTRAINT FK_IETMTOPIC_FAILMODEIETM FOREIGN KEY ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) REFERENCES IETM_TOPIC ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) DEFERRABLE ;

ALTER TABLE IETM_TOPIC_CARRIER ADD CONSTRAINT FK_IETMTOPIC_IETMTOPICCARRIER FOREIGN KEY ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) REFERENCES IETM_TOPIC ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) DEFERRABLE ;

ALTER TABLE TASK_TASK_IETM ADD CONSTRAINT FK_IETMTOPIC_TASKTASKIETM FOREIGN KEY ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) REFERENCES IETM_TOPIC ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_IETM ADD CONSTRAINT FK_IETMTOPIC_WARRANTYIETM FOREIGN KEY ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) REFERENCES IETM_TOPIC ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_IETM ADD CONSTRAINT FK_IETM_TOPIC_EQPPARTIETM FOREIGN KEY ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) REFERENCES IETM_TOPIC ( IETM_DB_ID, IETM_ID, IETM_TOPIC_ID ) DEFERRABLE ;

ALTER TABLE UTL_ALERT ADD CONSTRAINT FK_INBOUNDQUEUE_UTLALERT FOREIGN KEY ( QUEUE_ID ) REFERENCES INT_INBOUND_QUEUE_LOG ( QUEUE_ID ) DEFERRABLE ;

ALTER TABLE EVT_INV ADD CONSTRAINT FK_ININV_EVTINV FOREIGN KEY ( ASSMBL_INV_NO_DB_ID, ASSMBL_INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_INV ADD CONSTRAINT FK_ININV_EVTINVCNDCHG FOREIGN KEY ( assmbl_inv_no_db_id, assmbl_inv_no_id ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_ININV_INVINVNH FOREIGN KEY ( NH_INV_NO_DB_ID, NH_INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INT_ERROR_LOG ADD CONSTRAINT FK_INTINBOUNDQLOG_INTERRORLOG FOREIGN KEY ( QUEUE_ID ) REFERENCES INT_INBOUND_QUEUE_LOG ( QUEUE_ID ) DEFERRABLE ;

ALTER TABLE INT_EVENT_CONFIG ADD CONSTRAINT FK_INT_EVENT_CONFIG_MIM_DB FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INT_EVENT_CONFIG ADD CONSTRAINT FK_INT_EVENT_CONFIG_MIM_DB_CR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INT_EVENT_CONFIG ADD CONSTRAINT FK_INT_EVENT_CONFIG_MIM_DB_REV FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INT_EVENT_CONFIG ADD CONSTRAINT FK_INT_EVENT_CONFIG_MIM_RSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE ACFT_GROUP_ASSIGNMENT ADD CONSTRAINT FK_INVACREG_ACFTGROUPASS FOREIGN KEY ( ACFT_NO_DB_ID, ACFT_NO_ID ) REFERENCES INV_AC_REG ( INV_NO_DB_ID, INV_NO_ID ) NOT DEFERRABLE ;

ALTER TABLE FL_LEG ADD CONSTRAINT FK_INVACREG_FLLEG FOREIGN KEY ( AIRCRAFT_DB_ID, AIRCRAFT_ID ) REFERENCES INV_AC_REG ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_AC_REG_TO_FP ADD CONSTRAINT FK_INVACREG_INVACREGTOFP FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_AC_REG ( INV_NO_DB_ID, INV_NO_ID ) NOT DEFERRABLE ;

ALTER TABLE LPA_RUN_INV ADD CONSTRAINT FK_INVACREG_LPARUNINV FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_AC_REG ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_INVACREG_REQPART FOREIGN KEY ( REQ_AC_INV_NO_DB_ID, REQ_AC_INV_NO_ID ) REFERENCES INV_AC_REG ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE TASK_AC_RULE ADD CONSTRAINT FK_INVACREG_TASKACRULE FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_AC_REG ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CONSTRAINT FK_INVCNDCHGEVENT_EQPPARTROTAB FOREIGN KEY ( AC_EVENT_DB_ID, AC_EVENT_ID ) REFERENCES INV_CND_CHG_EVENT ( event_db_id, event_id ) DEFERRABLE ;

ALTER TABLE FNC_XACTION_LOG ADD CONSTRAINT FK_INVCNDCHGEVENT_FNCXACTIONLG FOREIGN KEY ( AC_EVENT_DB_ID, AC_EVENT_ID ) REFERENCES INV_CND_CHG_EVENT ( event_db_id, event_id ) DEFERRABLE ;

ALTER TABLE QUAR_QUAR ADD CONSTRAINT FK_INVCNDCHGEVENT_QUARQUAR FOREIGN KEY ( AC_EVENT_DB_ID, AC_EVENT_ID ) REFERENCES INV_CND_CHG_EVENT ( event_db_id, event_id ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT FK_INVCNDCHGEVT_INVCNDCHGEVT FOREIGN KEY ( h_event_db_id, h_event_id ) REFERENCES INV_CND_CHG_EVENT ( event_db_id, event_id ) NOT DEFERRABLE ;

ALTER TABLE INV_INSTALL ADD CONSTRAINT FK_INVINSTALL_EVTEVENT FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_INSTALL ADD CONSTRAINT FK_INVINSTALL_INVINV_v1 FOREIGN KEY ( ASSMBL_INV_NO_DB_ID, ASSMBL_INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_INSTALL ADD CONSTRAINT FK_INVINSTALL_INVINV_v2 FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_INSTALL ADD CONSTRAINT FK_INVINSTALL_INVINV_v3 FOREIGN KEY ( NH_INV_NO_DB_ID, NH_INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_INSTALL ADD CONSTRAINT FK_INVINSTALL_INVINV_v4 FOREIGN KEY ( H_INV_NO_DB_ID, H_INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_INSTALL ADD CONSTRAINT FK_INVINSTALL_MIMRSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE ACFT_CAP_LEVELS ADD CONSTRAINT FK_INVINV_ACFTCAPL FOREIGN KEY ( acft_no_db_id, acft_no_id ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE CLAIM ADD CONSTRAINT FK_INVINV_CLAIM FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE CLAIM_PART_LINE ADD CONSTRAINT FK_INVINV_CLAIMPARTLINE FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_OIL_THRESHOLD_INV ADD CONSTRAINT FK_INVINV_EQPOILTHRESHINV FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CONSTRAINT FK_INVINV_EQPPRTROTABLE FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE EVT_INV ADD CONSTRAINT FK_INVINV_EVTINV FOREIGN KEY ( H_INV_NO_DB_ID, H_INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_INV ADD CONSTRAINT FK_INVINV_EVTINVCNDCHG FOREIGN KEY ( h_inv_no_db_id, h_inv_no_id ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE EVT_TOOL ADD CONSTRAINT FK_INVINV_EVTTOOL FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG_MEASUREMENT ADD CONSTRAINT FK_INVINV_FLLEGMEAS FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE FNC_XACTION_LOG ADD CONSTRAINT FK_INVINV_FNCXACTIONLOG FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_AC_REG ADD CONSTRAINT FK_INVINV_INVACREG FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_ADVSRY ADD CONSTRAINT FK_INVINV_INVADVSRY FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_ATTACH ADD CONSTRAINT FK_INVINV_INVATTACH FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_CSGN_XCHG ADD CONSTRAINT FK_INVINV_INVCSGNXCHG FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_CURR_USAGE ADD CONSTRAINT FK_INVINV_INVCURRUSAGE FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_DAMAGE ADD CONSTRAINT FK_INVINV_INVDAMAGE FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_IETM ADD CONSTRAINT FK_INVINV_INVIETM FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_INVINV_INVINVASS FOREIGN KEY ( ASSMBL_INV_NO_DB_ID, ASSMBL_INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_INVINV_INVINVH FOREIGN KEY ( H_INV_NO_DB_ID, H_INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_INV_OEM_ASSMBL ADD CONSTRAINT FK_INVINV_INVINVOEMASSMB_ITEM FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_KIT ADD CONSTRAINT FK_INVINV_INVKIT FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_KIT_MAP ADD CONSTRAINT FK_INVINV_INVKITMAP FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_OIL_STATUS_LOG ADD CONSTRAINT FK_INVINV_INVOILSTATUSLOG FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_PARM_DATA ADD CONSTRAINT FK_INVINV_INVPARMDATA FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_POS_DESC_QUEUE ADD CONSTRAINT FK_INVINV_INVPOSDESCQUEUE FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_RELIABILITY_NOTE ADD CONSTRAINT FK_INVINV_INVRELNOTE FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_SYNC_QUEUE ADD CONSTRAINT FK_INVINV_INVSYNCQUEUE FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE KIT_SYNC_QUEUE ADD CONSTRAINT FK_INVINV_KITSYNCQUEUE FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE LRP_INV_ADHOC_PLAN ADD CONSTRAINT FK_INVINV_LRPINVADHOCPLAN FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE LRP_INV_INV ADD CONSTRAINT FK_INVINV_LRPINVINV FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE LRP_INV_TASK_PLAN ADD CONSTRAINT FK_INVINV_LRPINVTASKPLAN FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE_KIT_LINE ADD CONSTRAINT FK_INVINV_POLINEKITLINE FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE_RETURN_MAP ADD CONSTRAINT FK_INVINV_POLRTRN FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE QUAR_QUAR ADD CONSTRAINT FK_INVINV_QUARQUAR FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_INVINV_REQPART FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE SCHED_INST_PART ADD CONSTRAINT FK_INVINV_SCDINSTPRT FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE SCHED_RMVD_PART ADD CONSTRAINT FK_INVINV_SCHDRMVDPRT FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE SCHED_KIT_MAP ADD CONSTRAINT FK_INVINV_SCHEDKITMAP FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT_LINE ADD CONSTRAINT FK_INVINV_SHIPSHIPMENTLINE FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CONSTRAINT FK_INVINV_TASKLABOURSUMMARY FOREIGN KEY ( ASSMBL_INV_NO_DB_ID, ASSMBL_INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE USG_USAGE_DATA ADD CONSTRAINT FK_INVINV_USGUSDATA FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE USG_USAGE_RECORD ADD CONSTRAINT FK_INVINV_USGUSREC FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_INIT_INV ADD CONSTRAINT FK_INVINV_WARRANTYINIT_INV FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE ZIP_TASK ADD CONSTRAINT FK_INVINV_ZIPTASK FOREIGN KEY ( ASSMBL_INV_NO_DB_ID, ASSMBL_INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE EVT_INV ADD CONSTRAINT FK_INVIN_EVTINV FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_INV ADD CONSTRAINT FK_INVIN_EVTINVCNDCHG FOREIGN KEY ( inv_no_db_id, inv_no_id ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_XFER ADD CONSTRAINT FK_INVIN_INVXFER FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_KIT_MAP ADD CONSTRAINT FK_INVKIT_INVKITMAP FOREIGN KEY ( KIT_INV_NO_DB_ID, KIT_INV_NO_ID ) REFERENCES INV_KIT ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_XFER ADD CONSTRAINT FK_INVKIT_INVXFER FOREIGN KEY ( KIT_INV_NO_DB_ID, KIT_INV_NO_ID ) REFERENCES INV_KIT ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE_KIT_LINE ADD CONSTRAINT FK_INVKIT_POLINEKITLINE FOREIGN KEY ( INV_KIT_DB_ID, INV_KIT_ID ) REFERENCES INV_KIT ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE SCHED_KIT_MAP ADD CONSTRAINT FK_INVKIT_SCHEDKITMAP FOREIGN KEY ( KIT_INV_NO_DB_ID, KIT_INV_NO_ID ) REFERENCES INV_KIT ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_SHIFT_PLAN ADD CONSTRAINT FK_INVLOC2_ORGHRSHIFTPLAN FOREIGN KEY ( CREW_LOC_DB_ID, CREW_LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_INV_RECOUNT ADD CONSTRAINT FK_INVLOCPARTCT_INVLOCINVRECT FOREIGN KEY ( LOC_DB_ID, LOC_ID, PART_NO_DB_ID, PART_NO_ID, PART_COUNT_ID ) REFERENCES INV_LOC_PART_COUNT ( LOC_DB_ID, LOC_ID, PART_NO_DB_ID, PART_NO_ID, PART_COUNT_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_INVLOCPO_REQPART FOREIGN KEY ( PO_DEST_LOC_DB_ID, PO_DEST_LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_INVLOCPRINTED_REQPART FOREIGN KEY ( PRINTED_SUPPLY_LOC_DB_ID, PRINTED_SUPPLY_LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_PRINTER_JOB ADD CONSTRAINT FK_INVLOCPRNTR_INVLOCPRNTRJOB FOREIGN KEY ( LOC_DB_ID, LOC_ID, LOC_PRINTER_ID ) REFERENCES INV_LOC_PRINTER ( LOC_DB_ID, LOC_ID, LOC_PRINTER_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_INVLOCREQ_REQPART FOREIGN KEY ( REQ_LOC_DB_ID, REQ_LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE STOCK_DIST_REQ ADD CONSTRAINT FK_INVLOCREQ_STKDISTREQ FOREIGN KEY ( NEEDED_LOC_DB_ID, NEEDED_LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) NOT DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_INVLOCRESHIP_POHEADER FOREIGN KEY ( RE_SHIP_TO_DB_ID, RE_SHIP_TO_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE STOCK_DIST_REQ ADD CONSTRAINT FK_INVLOCSUP_STKDISTREQ FOREIGN KEY ( SUPPLIER_LOC_DB_ID, SUPPLIER_LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) NOT DEFERRABLE ;

ALTER TABLE AUTO_RSRV_QUEUE ADD CONSTRAINT FK_INVLOC_AUTORSRVQUEUE FOREIGN KEY ( SUP_LOC_DB_ID, SUP_LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE ER_HEADER ADD CONSTRAINT FK_INVLOC_ERHEADER FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE EVT_LOC ADD CONSTRAINT FK_INVLOC_EVTLOC FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE INV_AC_FLIGHT_PLAN ADD CONSTRAINT FK_INVLOC_INVACFLIGHTPLAN FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_INVLOC_INVINV FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_REPAIR ADD CONSTRAINT FK_INVLOC_INVLCREPAIR FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC ADD CONSTRAINT FK_INVLOC_INVLOC FOREIGN KEY ( NH_LOC_DB_ID, NH_LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_BIN_LOG ADD CONSTRAINT FK_INVLOC_INVLOCBINLOG FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_LOC_CAPABILITY ADD CONSTRAINT FK_INVLOC_INVLOCCAPABILITY FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_CONTACT ADD CONSTRAINT FK_INVLOC_INVLOCCONTACT FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_DEPT ADD CONSTRAINT FK_INVLOC_INVLOCDEPT FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_LABOUR_CAPACITY ADD CONSTRAINT FK_INVLOC_INVLOCLABRCAPACITY FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_ORG ADD CONSTRAINT FK_INVLOC_INVLOCORG FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_PART_COUNT ADD CONSTRAINT FK_INVLOC_INVLOCPARTCT FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_PREF_MAP ADD CONSTRAINT FK_INVLOC_INVLOCPREFMAP_LOC FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_LOC_PREF_MAP ADD CONSTRAINT FK_INVLOC_INVLOCPREFMAP_PRE FOREIGN KEY ( PREF_LOC_DB_ID, PREF_LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_LOC_PRINTER ADD CONSTRAINT FK_INVLOC_INVLOCPRINTER FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_TO_FP ADD CONSTRAINT FK_INVLOC_INVLOCTOFP FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_LOC_WT_CAPABILITY ADD CONSTRAINT FK_INVLOC_INVLOCWTCAPABILITY FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_ZONE ADD CONSTRAINT FK_INVLOC_INVLOCZONE FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE LPA_STASK_MAINT_OP ADD CONSTRAINT FK_INVLOC_LPASTASKMAINTOP FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE LRP_LOC ADD CONSTRAINT FK_INVLOC_LRPLOC FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE LRP_LOC_ADHOC_PLAN ADD CONSTRAINT FK_INVLOC_LRPLOCADHOCPLAN FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_SCHEDULE ADD CONSTRAINT FK_INVLOC_ORGHRSCHEDULE FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_SHIFT ADD CONSTRAINT FK_INVLOC_ORGHRSHIFT FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_SHIFT_PLAN ADD CONSTRAINT FK_INVLOC_ORGHRSHIFTPLAN FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_SUPPLY ADD CONSTRAINT FK_INVLOC_ORGHRSUPPLY FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE ORG_ORG_LOC ADD CONSTRAINT FK_INVLOC_ORGORGLOC FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_AIRPORT ADD CONSTRAINT FK_INVLOC_ORGVENDAIR FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR ADD CONSTRAINT FK_INVLOC_ORGVENDOR FOREIGN KEY ( VENDOR_LOC_DB_ID, VENDOR_LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR_EXCHG_LOC ADD CONSTRAINT FK_INVLOC_PARTVENDORXCHGLOC FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_INVLOC_POHEADER FOREIGN KEY ( SHIP_TO_LOC_DB_ID, SHIP_TO_LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE PPC_LOC ADD CONSTRAINT FK_INVLOC_PPCLOC FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE PPC_LOC_EXCLUDE ADD CONSTRAINT FK_INVLOC_PPCLOCEX FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE QUAR_QUAR ADD CONSTRAINT FK_INVLOC_QUARQUAR FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_INVLOC_REQPART FOREIGN KEY ( REMOTE_LOC_DB_ID, REMOTE_LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE RFQ_LINE ADD CONSTRAINT FK_INVLOC_RFQLINE FOREIGN KEY ( SHIP_TO_LOC_DB_ID, SHIP_TO_LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE SCHED_KIT_MAP ADD CONSTRAINT FK_INVLOC_SCHEDKITMAP FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE SHIP_SEGMENT ADD CONSTRAINT FK_INVLOC_SHIPSEGFROM FOREIGN KEY ( SHIP_FROM_DB_ID, SHIP_FROM_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE SHIP_SEGMENT ADD CONSTRAINT FK_INVLOC_SHIPSEGTO FOREIGN KEY ( SHIP_TO_DB_ID, SHIP_TO_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN_LOC_LIST ADD CONSTRAINT FK_INVLOC_WARRANTYLOCLIST FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE INV_OIL_STATUS_RATE ADD CONSTRAINT FK_INVOILSTLOG_INVOILSTRATE FOREIGN KEY ( OIL_STATUS_INV_NO_DB_ID, OIL_STATUS_INV_NO_ID, OIL_STATUS_LOG_ID ) REFERENCES INV_OIL_STATUS_LOG ( INV_NO_DB_ID, INV_NO_ID, OIL_STATUS_LOG_ID ) DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_INVOWNER_INVINV FOREIGN KEY ( OWNER_DB_ID, OWNER_ID ) REFERENCES INV_OWNER ( OWNER_DB_ID, OWNER_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_BIN ADD CONSTRAINT FK_INVOWNER_INVLOCBIN FOREIGN KEY ( OWNER_DB_ID, OWNER_ID ) REFERENCES INV_OWNER ( OWNER_DB_ID, OWNER_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_STOCK ADD CONSTRAINT FK_INVOWNER_INVLOCSTOCK FOREIGN KEY ( OWNER_DB_ID, OWNER_ID ) REFERENCES INV_OWNER ( OWNER_DB_ID, OWNER_ID ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR ADD CONSTRAINT FK_INVOWNER_ORGVENDOR FOREIGN KEY ( OWNER_DB_ID, OWNER_ID ) REFERENCES INV_OWNER ( OWNER_DB_ID, OWNER_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE ADD CONSTRAINT FK_INVOWNER_POLINE FOREIGN KEY ( OWNER_DB_ID, OWNER_ID ) REFERENCES INV_OWNER ( OWNER_DB_ID, OWNER_ID ) DEFERRABLE ;

ALTER TABLE SCHED_KIT_MAP ADD CONSTRAINT FK_INVOWNER_SCHEDKITMAP FOREIGN KEY ( OWNER_DB_ID, OWNER_ID ) REFERENCES INV_OWNER ( OWNER_DB_ID, OWNER_ID ) DEFERRABLE ;

ALTER TABLE STOCK_DIST_REQ ADD CONSTRAINT FK_INVOWNER_STKDISTREQ FOREIGN KEY ( OWNER_DB_ID, OWNER_ID ) REFERENCES INV_OWNER ( OWNER_DB_ID, OWNER_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_OIL_STATUS_RATE ADD CONSTRAINT FK_INVPARMDATA_INVOILSTATRATE FOREIGN KEY ( EVENT_DB_ID, EVENT_ID, EVENT_INV_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID, INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_PARM_DATA ( EVENT_DB_ID, EVENT_ID, EVENT_INV_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID, INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_PARM_DATA ADD CONSTRAINT FK_INVPARMDATA_SCHEDLBRPARMDAT FOREIGN KEY ( EVENT_DB_ID, EVENT_ID, EVENT_INV_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID, INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_PARM_DATA ( EVENT_DB_ID, EVENT_ID, EVENT_INV_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID, INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_REMOVE ADD CONSTRAINT FK_INVREMOVE_EVTEVENT FOREIGN KEY ( EVENT_DB_ID, EVENT_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_REMOVE ADD CONSTRAINT FK_INVREMOVE_INVINV_v1 FOREIGN KEY ( ASSMBL_INV_NO_DB_ID, ASSMBL_INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_REMOVE ADD CONSTRAINT FK_INVREMOVE_INVINV_v2 FOREIGN KEY ( H_INV_NO_DB_ID, H_INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_REMOVE ADD CONSTRAINT FK_INVREMOVE_INVINV_v3 FOREIGN KEY ( NH_INV_NO_DB_ID, NH_INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_REMOVE ADD CONSTRAINT FK_INVREMOVE_INVINV_v4 FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_REMOVE ADD CONSTRAINT FK_INVREMOVE_MIMRSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE STOCK_DIST_REQ_PICKED_ITEM ADD CONSTRAINT FK_INVXFER_DISTREQPICKITEM FOREIGN KEY ( XFER_DB_ID, XFER_ID ) REFERENCES INV_XFER ( XFER_DB_ID, XFER_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_ASSOCIATION ADD CONSTRAINT FK_INV_ASSOCIATION_INV_INV FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_ASSOCIATION ADD CONSTRAINT FK_INV_ASSOCIATION_MIM_DB FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_ASSOCIATION ADD CONSTRAINT FK_INV_ASSOCIATION_MIM_DB_CR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_ASSOCIATION ADD CONSTRAINT FK_INV_ASSOCIATION_MIM_DB_CT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_ASSOCIATION ADD CONSTRAINT FK_INV_ASSOCIATION_MIM_RSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE INV_INV_OEM_ASSMBL ADD CONSTRAINT FK_INV_INV_INVINVOEMASSMB_ASSM FOREIGN KEY ( OEM_ASSMBL_INV_NO_DB_ID, OEM_ASSMBL_INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_INV_RECOUNT ADD CONSTRAINT FK_INV_INV_INVLOCINVRECOUNT FOREIGN KEY ( INV_NO_DB_ID, INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_BIN ADD CONSTRAINT FK_INV_LOC_INVLOCBIN FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_STOCK ADD CONSTRAINT FK_INV_LOC_INVLOCSTOCK FOREIGN KEY ( LOC_DB_ID, LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE INV_RELIABILITY_NOTE ADD CONSTRAINT FK_ISSUEORGHR_INVRELNOTE FOREIGN KEY ( ISSUE_HR_DB_ID, ISSUE_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE EVT_INV ADD CONSTRAINT FK_IVINV_EVTINV FOREIGN KEY ( NH_INV_NO_DB_ID, NH_INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_INV ADD CONSTRAINT FK_IVINV_EVTINVCNDCHG FOREIGN KEY ( nh_inv_no_db_id, nh_inv_no_id ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE EVT_LIC_DEFN ADD CONSTRAINT FK_LICDEFN_EVTLICDEFN FOREIGN KEY ( LIC_DB_ID, LIC_ID ) REFERENCES LIC_DEFN ( LIC_DB_ID, LIC_ID ) DEFERRABLE ;

ALTER TABLE GRP_DEFN_LIC ADD CONSTRAINT FK_LICDEFN_GRPDEFNLIC FOREIGN KEY ( LIC_DB_ID, LIC_ID ) REFERENCES LIC_DEFN ( LIC_DB_ID, LIC_ID ) DEFERRABLE ;

ALTER TABLE INV_AC_REG ADD CONSTRAINT FK_LICDEFN_INVACREG FOREIGN KEY ( LIC_DB_ID, LIC_ID ) REFERENCES LIC_DEFN ( LIC_DB_ID, LIC_ID ) DEFERRABLE ;

ALTER TABLE LIC_DEFN_PREREQ ADD CONSTRAINT FK_LICDEFN_LICDEFNPREREQ FOREIGN KEY ( LIC_DB_ID, LIC_ID ) REFERENCES LIC_DEFN ( LIC_DB_ID, LIC_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_LIC ADD CONSTRAINT FK_LICDEFN_ORGHRLIC FOREIGN KEY ( LIC_DB_ID, LIC_ID ) REFERENCES LIC_DEFN ( LIC_DB_ID, LIC_ID ) DEFERRABLE ;

ALTER TABLE TASK_LIC ADD CONSTRAINT FK_LICDEFN_TASKLIC FOREIGN KEY ( LIC_DB_ID, LIC_ID ) REFERENCES LIC_DEFN ( LIC_DB_ID, LIC_ID ) DEFERRABLE ;

ALTER TABLE LPA_RUN ADD CONSTRAINT FK_LPAFLEET_LPARUN FOREIGN KEY ( FLEET_DB_ID, FLEET_CD ) REFERENCES LPA_FLEET ( FLEET_DB_ID, FLEET_CD ) DEFERRABLE ;

ALTER TABLE LPA_SERVICE_WORK_TYPE ADD CONSTRAINT FK_LPAFLEET_LPASRVCWTYPE FOREIGN KEY ( FLEET_DB_ID, FLEET_CD ) REFERENCES LPA_FLEET ( FLEET_DB_ID, FLEET_CD ) DEFERRABLE ;

ALTER TABLE LPA_TURN_WORK_TYPE ADD CONSTRAINT FK_LPAFLEET_LPATURNWTYPE FOREIGN KEY ( FLEET_DB_ID, FLEET_CD ) REFERENCES LPA_FLEET ( FLEET_DB_ID, FLEET_CD ) DEFERRABLE ;

ALTER TABLE LPA_STASK ADD CONSTRAINT FK_LPALOG_LPASTASK FOREIGN KEY ( LPA_DB_ID ) REFERENCES LPA_LOG ( LPA_DB_ID ) DEFERRABLE ;

ALTER TABLE LPA_RUN_ISSUE ADD CONSTRAINT FK_LPARUNINV_LPARUNISSUE FOREIGN KEY ( RUN_ID, INV_NO_DB_ID, INV_NO_ID ) REFERENCES LPA_RUN_INV ( RUN_ID, INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE LPA_RUN_INV ADD CONSTRAINT FK_LPARUN_LPARUNINV FOREIGN KEY ( RUN_ID ) REFERENCES LPA_RUN ( RUN_ID ) DEFERRABLE ;

ALTER TABLE LPA_RUN_ISSUE ADD CONSTRAINT FK_LPARUN_LPARUNISSUE FOREIGN KEY ( RUN_ID ) REFERENCES LPA_RUN ( RUN_ID ) DEFERRABLE ;

ALTER TABLE LPA_MAINT_OP_CONFLICT ADD CONSTRAINT FK_LPASTASKMAINTOP_LPAMAINOPCO FOREIGN KEY ( LPA_DB_ID, SCHED_DB_ID, SCHED_ID, STASK_MAINT_OP_ID ) REFERENCES LPA_STASK_MAINT_OP ( LPA_DB_ID, SCHED_DB_ID, SCHED_ID, STASK_MAINT_OP_ID ) DEFERRABLE ;

ALTER TABLE LPA_STASK_MAINT_OP ADD CONSTRAINT FK_LPASTASK_LPASTASKMAINTOP FOREIGN KEY ( LPA_DB_ID, SCHED_DB_ID, SCHED_ID ) REFERENCES LPA_STASK ( LPA_DB_ID, SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE LRP_EVENT_USAGES ADD CONSTRAINT FK_LRPEVENT_LRPEVENTUSAGES FOREIGN KEY ( LRP_EVENT_DB_ID, LRP_EVENT_ID ) REFERENCES LRP_EVENT ( LRP_EVENT_DB_ID, LRP_EVENT_ID ) DEFERRABLE ;

ALTER TABLE LRP_EVENT_WORKSCOPE ADD CONSTRAINT FK_LRPEVENT_WORKSCOPE FOREIGN KEY ( LRP_EVENT_DB_ID, LRP_EVENT_ID ) REFERENCES LRP_EVENT ( LRP_EVENT_DB_ID, LRP_EVENT_ID ) DEFERRABLE ;

ALTER TABLE LRP_EVENT_BUCKET ADD CONSTRAINT FK_LRPEVT_EVTBKT FOREIGN KEY ( LRP_EVENT_DB_ID, LRP_EVENT_ID ) REFERENCES LRP_EVENT ( LRP_EVENT_DB_ID, LRP_EVENT_ID ) DEFERRABLE ;

ALTER TABLE LRP_EVENT ADD CONSTRAINT FK_LRPINV_LRPEVENT FOREIGN KEY ( LRP_DB_ID, LRP_ID, LRP_INV_INV_ID ) REFERENCES LRP_INV_INV ( LRP_DB_ID, LRP_ID, LRP_INV_INV_ID ) DEFERRABLE ;

ALTER TABLE LRP_LOC_CAP_EXCEPT ADD CONSTRAINT FK_LRPLOCCAPACITY_LRPLOCCAPEXC FOREIGN KEY ( LRP_DB_ID, LRP_ID, LOC_DB_ID, LOC_ID, CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID ) REFERENCES LRP_LOC_CAPACITY ( LRP_DB_ID, LRP_ID, LOC_DB_ID, LOC_ID, CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID ) DEFERRABLE ;

ALTER TABLE LRP_LOC_CAP_STD ADD CONSTRAINT FK_LRPLOCCAPACITY_LRPLOCCAPSTD FOREIGN KEY ( LRP_DB_ID, LRP_ID, LOC_DB_ID, LOC_ID, CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID ) REFERENCES LRP_LOC_CAPACITY ( LRP_DB_ID, LRP_ID, LOC_DB_ID, LOC_ID, CAPACITY_PATTERN_DB_ID, CAPACITY_PATTERN_ID ) DEFERRABLE ;

ALTER TABLE LRP_EVENT ADD CONSTRAINT FK_LRPLOC_LRPEVENT FOREIGN KEY ( LRP_DB_ID, LRP_ID, LRP_LOC_DB_ID, LRP_LOC_ID ) REFERENCES LRP_LOC ( LRP_DB_ID, LRP_ID, LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE LRP_LOC_CAPABILITY ADD CONSTRAINT FK_LRPLOC_LRPLOCCAP FOREIGN KEY ( LRP_DB_ID, LRP_ID, LOC_DB_ID, LOC_ID ) REFERENCES LRP_LOC ( LRP_DB_ID, LRP_ID, LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE LRP_LOC_CAPACITY ADD CONSTRAINT FK_LRPLOC_LRPLOCCAPACITY FOREIGN KEY ( LRP_DB_ID, LRP_ID, LOC_DB_ID, LOC_ID ) REFERENCES LRP_LOC ( LRP_DB_ID, LRP_ID, LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE LRP_LOC ADD CONSTRAINT FK_LRPLOC_REFLRPDURMODE FOREIGN KEY ( DURATION_MODE ) REFERENCES REF_LRP_DURATION_MODE ( LRP_DURATION_MODE_CD ) DEFERRABLE ;

ALTER TABLE LRP_EVENT ADD CONSTRAINT FK_LRPPLAN_LRPEVENT FOREIGN KEY ( LRP_DB_ID, LRP_ID ) REFERENCES LRP_PLAN ( LRP_DB_ID, LRP_ID ) DEFERRABLE ;

ALTER TABLE LRP_EXTRACTION_RULE ADD CONSTRAINT FK_LRPPLAN_LRPEXRULE FOREIGN KEY ( LRP_DB_ID, LRP_ID ) REFERENCES LRP_PLAN ( LRP_DB_ID, LRP_ID ) DEFERRABLE ;

ALTER TABLE LRP_INV_ADHOC_PLAN ADD CONSTRAINT FK_LRPPLAN_LRPINVADHOCPLAN FOREIGN KEY ( LRP_DB_ID, LRP_ID ) REFERENCES LRP_PLAN ( LRP_DB_ID, LRP_ID ) DEFERRABLE ;

ALTER TABLE LRP_INV_INV ADD CONSTRAINT FK_LRPPLAN_LRPINVINV FOREIGN KEY ( LRP_DB_ID, LRP_ID ) REFERENCES LRP_PLAN ( LRP_DB_ID, LRP_ID ) DEFERRABLE ;

ALTER TABLE LRP_INV_TASK_PLAN ADD CONSTRAINT FK_LRPPLAN_LRPINVTASKPLAN FOREIGN KEY ( LRP_DB_ID, LRP_ID ) REFERENCES LRP_PLAN ( LRP_DB_ID, LRP_ID ) DEFERRABLE ;

ALTER TABLE LRP_PLAN_CONFIG ADD CONSTRAINT FK_LRPPLAN_LRPLANCONFIG FOREIGN KEY ( LRP_DB_ID, LRP_ID ) REFERENCES LRP_PLAN ( LRP_DB_ID, LRP_ID ) DEFERRABLE ;

ALTER TABLE LRP_LOC ADD CONSTRAINT FK_LRPPLAN_LRPLOC FOREIGN KEY ( LRP_DB_ID, LRP_ID ) REFERENCES LRP_PLAN ( LRP_DB_ID, LRP_ID ) DEFERRABLE ;

ALTER TABLE LRP_LOC_ADHOC_PLAN ADD CONSTRAINT FK_LRPPLAN_LRPLOCADHOCPLAN FOREIGN KEY ( LRP_DB_ID, LRP_ID ) REFERENCES LRP_PLAN ( LRP_DB_ID, LRP_ID ) DEFERRABLE ;

ALTER TABLE LRP_TASK_DEFN ADD CONSTRAINT FK_LRPPLAN_LRPTASKDEFN FOREIGN KEY ( LRP_DB_ID, LRP_ID ) REFERENCES LRP_PLAN ( LRP_DB_ID, LRP_ID ) DEFERRABLE ;

ALTER TABLE LRP_PLAN_TYPE ADD CONSTRAINT FK_LRPPLN_LRPPLNTYP FOREIGN KEY ( LRP_DB_ID, LRP_ID ) REFERENCES LRP_PLAN ( LRP_DB_ID, LRP_ID ) DEFERRABLE ;

ALTER TABLE LRP_PLAN_TYPE ADD CONSTRAINT FK_LRPPTYP_EQPPTYPE FOREIGN KEY ( PLANNING_TYPE_DB_ID, PLANNING_TYPE_ID ) REFERENCES EQP_PLANNING_TYPE ( PLANNING_TYPE_DB_ID, PLANNING_TYPE_ID ) DEFERRABLE ;

ALTER TABLE LRP_EVENT_BUCKET ADD CONSTRAINT FK_LRPPTYP_EVTBKT FOREIGN KEY ( LRP_PLAN_TYPE_DB_ID, LRP_PLAN_TYPE_ID ) REFERENCES LRP_PLAN_TYPE ( LRP_PLAN_TYPE_DB_ID, LRP_PLAN_TYPE_ID ) DEFERRABLE ;

ALTER TABLE LRP_TASK_BUCKET ADD CONSTRAINT FK_LRPPTYP_LRPTBKT FOREIGN KEY ( LRP_PLAN_TYPE_DB_ID, LRP_PLAN_TYPE_ID ) REFERENCES LRP_PLAN_TYPE ( LRP_PLAN_TYPE_DB_ID, LRP_PLAN_TYPE_ID ) DEFERRABLE ;

ALTER TABLE LRP_EVENT_WORKSCOPE ADD CONSTRAINT FK_LRPTASKDEFN_LRPEVENTWORKSCO FOREIGN KEY ( LRP_DB_ID, LRP_ID, TASK_DEFN_DB_ID, TASK_DEFN_ID ) REFERENCES LRP_TASK_DEFN ( LRP_DB_ID, LRP_ID, TASK_DEFN_DB_ID, TASK_DEFN_ID ) DEFERRABLE ;

ALTER TABLE LRP_TASK_DEFN ADD CONSTRAINT FK_LRPTASKDEFN_LRPTASKDEFN FOREIGN KEY ( PREV_LRP_DB_ID, PREV_LRP_ID, PREV_TASK_DEFN_DB_ID, PREV_TASK_DEFN_ID ) REFERENCES LRP_TASK_DEFN ( LRP_DB_ID, LRP_ID, TASK_DEFN_DB_ID, TASK_DEFN_ID ) DEFERRABLE ;

ALTER TABLE LRP_TASK_PLAN_RANGE ADD CONSTRAINT FK_LRPTDFN_TSKPRNG FOREIGN KEY ( LRP_DB_ID, LRP_ID, TASK_DEFN_DB_ID, TASK_DEFN_ID ) REFERENCES LRP_TASK_DEFN ( LRP_DB_ID, LRP_ID, TASK_DEFN_DB_ID, TASK_DEFN_ID ) DEFERRABLE ;

ALTER TABLE LRP_TASK_BUCKET ADD CONSTRAINT FK_LRPTSKPLRNG_TBKT FOREIGN KEY ( TASK_PLAN_RANGE_DB_ID, TASK_PLAN_RANGE_ID ) REFERENCES LRP_TASK_PLAN_RANGE ( TASK_PLAN_RANGE_DB_ID, TASK_PLAN_RANGE_ID ) DEFERRABLE ;

ALTER TABLE SCHED_STASK ADD CONSTRAINT FK_MAININV_SHEDSTASK FOREIGN KEY ( MAIN_INV_NO_DB_ID, MAIN_INV_NO_ID ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM ADD CONSTRAINT FK_MAINTPRGMDEFN_MAINTPRGM FOREIGN KEY ( MAINT_PRGM_DEFN_DB_ID, MAINT_PRGM_DEFN_ID ) REFERENCES MAINT_PRGM_DEFN ( MAINT_PRGM_DEFN_DB_ID, MAINT_PRGM_DEFN_ID ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_LOG ADD CONSTRAINT FK_MAINTPRGM_MAINTPRGMLOG FOREIGN KEY ( MAINT_PRGM_DB_ID, MAINT_PRGM_ID ) REFERENCES MAINT_PRGM ( MAINT_PRGM_DB_ID, MAINT_PRGM_ID ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_TASK ADD CONSTRAINT FK_MAINTPRGM_MAINTPRGMTASK FOREIGN KEY ( MAINT_PRGM_DB_ID, MAINT_PRGM_ID ) REFERENCES MAINT_PRGM ( MAINT_PRGM_DB_ID, MAINT_PRGM_ID ) DEFERRABLE ;

ALTER TABLE TASK_TEMP_ISSUE_LOG ADD CONSTRAINT FK_MAINTPRGM_TASKTEMPISSUELOG FOREIGN KEY ( MAINT_PRGM_DB_ID, MAINT_PRGM_ID ) REFERENCES MAINT_PRGM ( MAINT_PRGM_DB_ID, MAINT_PRGM_ID ) DEFERRABLE ;

ALTER TABLE REF_SPEC2K_CUST ADD CONSTRAINT FK_MIMBDB_REFSPEC2KCUST FOREIGN KEY ( SPEC2K_CUST_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE MIM_PART_INPUT ADD CONSTRAINT FK_MIMCALCINPUT_MIMPARTINPUT FOREIGN KEY ( CALC_DB_ID, CALC_ID, INPUT_ID ) REFERENCES MIM_CALC_INPUT ( CALC_DB_ID, CALC_ID, INPUT_ID ) DEFERRABLE ;

ALTER TABLE MIM_CALC_INPUT ADD CONSTRAINT FK_MIMCALC_MIMCALCINPUT FOREIGN KEY ( CALC_DB_ID, CALC_ID ) REFERENCES MIM_CALC ( CALC_DB_ID, CALC_ID ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF_DEAD ADD CONSTRAINT FK_MIMDATATYPE_DEFERREFDEAD FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE EQP_DATA_SOURCE_SPEC ADD CONSTRAINT FK_MIMDATATYPE_EQPDATASRCSPEC FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE EQP_FLIGHT_SPEC ADD CONSTRAINT FK_MIMDATATYPE_EQPFLIGHTSPEC FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE EVT_BAND_FIELD ADD CONSTRAINT FK_MIMDATATYPE_EVTBANDFIELD FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE EVT_INV_USAGE ADD CONSTRAINT FK_MIMDATATYPE_EVTINVUSAGE FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE FC_RATE ADD CONSTRAINT FK_MIMDATATYPE_FCRATE FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_INV_USAGE ADD CONSTRAINT FK_MIMDATATYPE_INVCNDCHUSAG FOREIGN KEY ( data_type_db_id, data_type_id ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE INV_CURR_USAGE ADD CONSTRAINT FK_MIMDATATYPE_INVCURRUSAGE FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE INV_PARM_DATA ADD CONSTRAINT FK_MIMDATATYPE_INVPARMDATA FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE LRP_EVENT_USAGES ADD CONSTRAINT FK_MIMDATATYPE_LRPEVENTUSAGES FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE MIM_CALC ADD CONSTRAINT FK_MIMDATATYPE_MIMCALC FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE MIM_CALC_INPUT ADD CONSTRAINT FK_MIMDATATYPE_MIMCALCINPUT FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE MIM_PART_CHRDATA ADD CONSTRAINT FK_MIMDATATYPE_MIMPRTCHRDATA FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE MIM_PART_NUMDATA ADD CONSTRAINT FK_MIMDATATYPE_MIMPRTNUMDATA FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE REF_FAIL_PARM_DATA ADD CONSTRAINT FK_MIMDATATYPE_REFFALPARMDATA FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE TASK_DEADLINE_EXT ADD CONSTRAINT FK_MIMDATATYPE_TASKDEADEXT FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE TASK_ME_RULE ADD CONSTRAINT FK_MIMDATATYPE_TASKMERULE FOREIGN KEY ( ME_DATA_TYPE_DB_ID, ME_DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE TASK_PARM_DATA ADD CONSTRAINT FK_MIMDATATYPE_TASKPARMDATA FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE TASK_SCHED_RULE ADD CONSTRAINT FK_MIMDATATYPE_TASKSCHEDRULE FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN ADD CONSTRAINT FK_MIMDATATYPE_WARRANTYDEFN FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE EVT_SCHED_DEAD ADD CONSTRAINT FK_MIMDATTYPE_EVTSCHDDEAD FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE MIM_DATA_VALUE ADD CONSTRAINT FK_MIMDATTYPE_MIMDATAVALUE FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE USG_USAGE_DATA ADD CONSTRAINT FK_MIMDATTYPE_USGUSDATA FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE EVT_EVENT ADD CONSTRAINT FK_MIMDBCTRL_EVTEVENT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_MIMDBCTRL_INVINV FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT FK_MIMDBCTRL_INV_CND_CHG_EVENT FOREIGN KEY ( ctrl_db_id ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_USER ADD CONSTRAINT FK_MIMDBCTRL_UTLUSER FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ACFT_CAP_LEVELS ADD CONSTRAINT FK_MIMDB_ACFTCAPLEVELS FOREIGN KEY ( revision_db_id ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ACFT_CAP_LEVELS ADD CONSTRAINT FK_MIMDB_ACFTCAPLEVELS_CR FOREIGN KEY ( creation_db_id ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ACFT_CAP_LEVELS ADD CONSTRAINT FK_MIMDB_ACFTCAPLEVELS_CT FOREIGN KEY ( ctrl_db_id ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_ALERT_TYPE ADD CONSTRAINT FK_MIMDB_ALRTTYPE FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_ALERT_TYPE_ROLE ADD CONSTRAINT FK_MIMDB_ALRTTYPEROLE FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ASSMBL_CAP_LEVELS ADD CONSTRAINT FK_MIMDB_ASSMBLCAPLEVELS FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ASSMBL_CAP_LEVELS ADD CONSTRAINT FK_MIMDB_ASSMBLCAPLEVELS_CR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ASSMBL_CAP_LEVELS ADD CONSTRAINT FK_MIMDB_ASSMBLCAPLEVELS_CT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE AUTO_RSRV_QUEUE ADD CONSTRAINT FK_MIMDB_AUTORSRVQUEUE FOREIGN KEY ( AUTO_RSRV_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE BLT_REF_WF_CYCLE_STATUS ADD CONSTRAINT FK_MIMDB_BLTREFWFCYCLESTATUS FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE BLT_REF_WF_LOG_TYPE ADD CONSTRAINT FK_MIMDB_BLTREFWFLOGTYPE FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE BULK_LOAD_ELEMENT ADD CONSTRAINT FK_MIMDB_BULKLDELMNT_CTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE BULK_LOAD_ELEMENT ADD CONSTRAINT FK_MIMDB_BULKLDELMNT_REV FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE CHARGE ADD CONSTRAINT FK_MIMDB_CHARGECREATION FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE CHARGE ADD CONSTRAINT FK_MIMDB_CHARGECTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE CHARGE_LOG ADD CONSTRAINT FK_MIMDB_CHARGELOGCREATION FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE CHARGE_LOG ADD CONSTRAINT FK_MIMDB_CHARGELOGCTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE CHARGE_LOG ADD CONSTRAINT FK_MIMDB_CHARGELOGREVISION FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE CHARGE ADD CONSTRAINT FK_MIMDB_CHARGEREVISION FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE CHARGE_VENDOR ADD CONSTRAINT FK_MIMDB_CHARGEVENDORCREATION FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE CHARGE_VENDOR ADD CONSTRAINT FK_MIMDB_CHARGEVENDORCTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE CHARGE_VENDOR ADD CONSTRAINT FK_MIMDB_CHARGEVENDORRVS FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE COR_BLOB_APR ADD CONSTRAINT FK_MIMDB_CORBLOBAPR FOREIGN KEY ( BLOB_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE COR_BLOB_AUG ADD CONSTRAINT FK_MIMDB_CORBLOBAUG FOREIGN KEY ( BLOB_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE COR_BLOB_DATA ADD CONSTRAINT FK_MIMDB_CORBLOBDATA FOREIGN KEY ( BLOB_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE COR_BLOB_DEC ADD CONSTRAINT FK_MIMDB_CORBLOBDEC FOREIGN KEY ( BLOB_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE COR_BLOB_FEB ADD CONSTRAINT FK_MIMDB_CORBLOBFEB FOREIGN KEY ( BLOB_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE COR_BLOB_INFO ADD CONSTRAINT FK_MIMDB_CORBLOBINFO FOREIGN KEY ( BLOB_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE COR_BLOB_JAN ADD CONSTRAINT FK_MIMDB_CORBLOBJAN FOREIGN KEY ( BLOB_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE COR_BLOB_JUL ADD CONSTRAINT FK_MIMDB_CORBLOBJUL FOREIGN KEY ( BLOB_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE COR_BLOB_JUN ADD CONSTRAINT FK_MIMDB_CORBLOBJUN FOREIGN KEY ( BLOB_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE COR_BLOB_MAR ADD CONSTRAINT FK_MIMDB_CORBLOBMAR FOREIGN KEY ( BLOB_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE COR_BLOB_MAY ADD CONSTRAINT FK_MIMDB_CORBLOBMAY FOREIGN KEY ( BLOB_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE COR_BLOB_NOV ADD CONSTRAINT FK_MIMDB_CORBLOBNOV FOREIGN KEY ( BLOB_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE COR_BLOB_OCT ADD CONSTRAINT FK_MIMDB_CORBLOBOCT FOREIGN KEY ( BLOB_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE COR_BLOB_SEP ADD CONSTRAINT FK_MIMDB_CORBLOBSEP FOREIGN KEY ( BLOB_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE COR_PERM_BLOB ADD CONSTRAINT FK_MIMDB_CORPERMBLOB FOREIGN KEY ( BLOB_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE PPC_ACTVTY_SNAPSHOT ADD CONSTRAINT FK_MIMDB_CREATEPPCACTVTSNPSHOT FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE PPC_WP_SNAPSHOT ADD CONSTRAINT FK_MIMDB_CREATEPPCWPSNAPSHOT FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_REPORT_TYPE ADD CONSTRAINT FK_MIMDB_CREATEUTLREPORTTYPE FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ACFT_GROUP ADD CONSTRAINT FK_MIMDB_CREATIONACFTGROUP FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE ACFT_GROUP_ASSIGNMENT ADD CONSTRAINT FK_MIMDB_CREATIONACFTGROUPASS FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE BLT_REF_ERROR ADD CONSTRAINT FK_MIMDB_CREATIONBLTREFERROR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE BLT_REF_ERROR_TYPE ADD CONSTRAINT FK_MIMDB_CREATIONBLTREFERRORTY FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE BLT_REF_WF_CYCLE_STATUS ADD CONSTRAINT FK_MIMDB_CREATIONBLTREFWFCYCLE FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE BLT_REF_WF_LOG_STATUS ADD CONSTRAINT FK_MIMDB_CREATIONBLTREFWFLOGST FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE BLT_REF_WF_LOG_TYPE ADD CONSTRAINT FK_MIMDB_CREATIONBLTREFWFLOGTY FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE BLT_WF_CYCLE_LOG ADD CONSTRAINT FK_MIMDB_CREATIONBLTWFCYCLELOG FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ACFT_GROUP ADD CONSTRAINT FK_MIMDB_CTRLACFTGROUP FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE ACFT_GROUP_ASSIGNMENT ADD CONSTRAINT FK_MIMDB_CTRLACFTGROUPASS FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE BLT_REF_ERROR ADD CONSTRAINT FK_MIMDB_CTRLBLTREFERROR FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE BLT_REF_ERROR_TYPE ADD CONSTRAINT FK_MIMDB_CTRLBLTREFERRORTYPE FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE BLT_REF_WF_LOG_STATUS ADD CONSTRAINT FK_MIMDB_CTRLBLTREFWFLOGSTATUS FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE BLT_WF_CYCLE_LOG ADD CONSTRAINT FK_MIMDB_CTRLBLTWFCYCLELOG FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LRP_DURATION_MODE ADD CONSTRAINT FK_MIMDB_CTRLDBID FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE PPC_ACTVTY_SNAPSHOT ADD CONSTRAINT FK_MIMDB_CTRLPPCACTVTSNAPSHOT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE PPC_WP_SNAPSHOT ADD CONSTRAINT FK_MIMDB_CTRLPPCWPSNAPSHOT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_REPORT_TYPE ADD CONSTRAINT FK_MIMDB_CTRLUTLREPORTTYPE FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF_DEGRAD_CAP ADD CONSTRAINT FK_MIMDB_DEGRADCAP FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE STOCK_DIST_REQ_PICKED_ITEM ADD CONSTRAINT FK_MIMDB_DISTREQPICKITEM_CTR FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE STOCK_DIST_REQ_PICKED_ITEM ADD CONSTRAINT FK_MIMDB_DISTREQPICKITEM_REV FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE EQP_ADVSRY ADD CONSTRAINT FK_MIMDB_EQPADVSRY FOREIGN KEY ( ADVSRY_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL ADD CONSTRAINT FK_MIMDB_EQPASSMBL FOREIGN KEY ( ASSMBL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM_SENS ADD CONSTRAINT FK_MIMDB_EQPASSMBLBOMSENS_CRE FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM_SENS ADD CONSTRAINT FK_MIMDB_EQPASSMBLBOMSENS_CTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM_SENS ADD CONSTRAINT FK_MIMDB_EQPASSMBLBOMSENS_REV FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_SENS ADD CONSTRAINT FK_MIMDB_EQPASSMBLSENS_CRE FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_SENS ADD CONSTRAINT FK_MIMDB_EQPASSMBLSENS_CTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_SENS ADD CONSTRAINT FK_MIMDB_EQPASSMBLSENS_REV FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE EQP_BOM_PART ADD CONSTRAINT FK_MIMDB_EQPBOMPART FOREIGN KEY ( BOM_PART_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE EQP_BOM_PART_SENS ADD CONSTRAINT FK_MIMDB_EQPBOMPARTSENS_CRE FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE EQP_BOM_PART_SENS ADD CONSTRAINT FK_MIMDB_EQPBOMPARTSENS_CTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE EQP_BOM_PART_SENS ADD CONSTRAINT FK_MIMDB_EQPBOMPARTSENS_REV FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE EQP_INSTALL_KIT_MAP ADD CONSTRAINT FK_MIMDB_EQPINSTKITMAP FOREIGN KEY ( EQP_INSTALL_KIT_MAP_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE EQP_KIT_PART_GROUPS ADD CONSTRAINT FK_MIMDB_EQPKITPARTGROUPS FOREIGN KEY ( EQP_KIT_PART_GROUP_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE EQP_MANUFACT ADD CONSTRAINT FK_MIMDB_EQPMANUFACT FOREIGN KEY ( MANUFACT_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_MIMDB_EQPPARTNO FOREIGN KEY ( PART_NO_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE EQP_PLANNING_TYPE ADD CONSTRAINT FK_MIMDB_EQPPLANNINGTYPE FOREIGN KEY ( PLANNING_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR_PRICE ADD CONSTRAINT FK_MIMDB_EQPPRTVENDR FOREIGN KEY ( PART_VENDOR_PRICE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE EQP_STOCK_NO ADD CONSTRAINT FK_MIMDB_EQPSTOCKNO FOREIGN KEY ( STOCK_NO_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ER_HEADER ADD CONSTRAINT FK_MIMDB_ER_HEADER FOREIGN KEY ( RULE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ESIG_DOC ADD CONSTRAINT FK_MIMDB_ESIGDOC FOREIGN KEY ( DOC_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ESIG_DOC_SIGN ADD CONSTRAINT FK_MIMDB_ESIGDOCSIGN FOREIGN KEY ( SIGN_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE EVT_EVENT ADD CONSTRAINT FK_MIMDB_EVTEVENT FOREIGN KEY ( EVENT_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE EXT_REF_ITEM ADD CONSTRAINT FK_MIMDB_EXTREFITEM_CT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE EXT_REF_ITEM ADD CONSTRAINT FK_MIMDB_EXTREFITEM_RE FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE FAIL_EFFECT ADD CONSTRAINT FK_MIMDB_FAILEFFECT FOREIGN KEY ( FAIL_EFFECT_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE FAIL_MODE ADD CONSTRAINT FK_MIMDB_FAILMODE FOREIGN KEY ( FAIL_MODE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE FC_MODEL ADD CONSTRAINT FK_MIMDB_FCMODEL FOREIGN KEY ( MODEL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG ADD CONSTRAINT FK_MIMDB_FLLEG FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG_DISRUPT ADD CONSTRAINT FK_MIMDB_FLLEGDIS FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG_DISRUPT_TYPE ADD CONSTRAINT FK_MIMDB_FLLEGDISTYPE FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG_FAIL_EFFECT ADD CONSTRAINT FK_MIMDB_FLLEGFAILEFF FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG_MEASUREMENT ADD CONSTRAINT FK_MIMDB_FLLEGMEAS FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG_NOTE ADD CONSTRAINT FK_MIMDB_FLLEGNOTE FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG_STATUS_LOG ADD CONSTRAINT FK_MIMDB_FLLEGSTATUSLOG FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE FNC_ACCOUNT ADD CONSTRAINT FK_MIMDB_FNCACCOUNT FOREIGN KEY ( ACCOUNT_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE FNC_TCODE ADD CONSTRAINT FK_MIMDB_FNCTCODE FOREIGN KEY ( TCODE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE FNC_XACTION_LOG ADD CONSTRAINT FK_MIMDB_FNCXACTIONLOG FOREIGN KEY ( XACTION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE IETM_IETM ADD CONSTRAINT FK_MIMDB_IETMIETM FOREIGN KEY ( IETM_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE INV_AC_REG_TO_FP ADD CONSTRAINT FK_MIMDB_INVACREGTOFP_CR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_AC_REG_TO_FP ADD CONSTRAINT FK_MIMDB_INVACREGTOFP_CT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_AC_REG_TO_FP ADD CONSTRAINT FK_MIMDB_INVACREGTOFP_RE FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_DAMAGE ADD CONSTRAINT FK_MIMDB_INVDAMAGE_CT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_DAMAGE ADD CONSTRAINT FK_MIMDB_INVDAMAGE_RE FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_MIMDB_INVINV FOREIGN KEY ( INV_NO_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC ADD CONSTRAINT FK_MIMDB_INVLOC FOREIGN KEY ( LOC_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_BIN_LOG ADD CONSTRAINT FK_MIMDB_INVLOCBINLOG FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_LOC_PREF_MAP ADD CONSTRAINT FK_MIMDB_INVLOCPREFMAP_CR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_LOC_PREF_MAP ADD CONSTRAINT FK_MIMDB_INVLOCPREFMAP_CT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_LOC_PREF_MAP ADD CONSTRAINT FK_MIMDB_INVLOCPREFMAP_RE FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_LOC_TO_FP ADD CONSTRAINT FK_MIMDB_INVLOCTOFP_CR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_LOC_TO_FP ADD CONSTRAINT FK_MIMDB_INVLOCTOFP_CT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_LOC_TO_FP ADD CONSTRAINT FK_MIMDB_INVLOCTOFP_RE FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_LOC_WT_CAPABILITY ADD CONSTRAINT FK_MIMDB_INVLOCWTCAPCREATION FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_WT_CAPABILITY ADD CONSTRAINT FK_MIMDB_INVLOCWTCAPCTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_WT_CAPABILITY ADD CONSTRAINT FK_MIMDB_INVLOCWTCAPREVISION FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_ZONE ADD CONSTRAINT FK_MIMDB_INVLOCZONE FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_ZONE ADD CONSTRAINT FK_MIMDB_INVLOCZONEv2 FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_ZONE ADD CONSTRAINT FK_MIMDB_INVLOCZONEv3 FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE INV_OWNER ADD CONSTRAINT FK_MIMDB_INVOWNER FOREIGN KEY ( OWNER_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT FK_MIMDB_INV_CND_CHG_EVENT FOREIGN KEY ( event_db_id ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE LPA_FLEET ADD CONSTRAINT FK_MIMDB_LPAFLEET FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE LPA_LOG ADD CONSTRAINT FK_MIMDB_LPALOG FOREIGN KEY ( LPA_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE LPA_RUN ADD CONSTRAINT FK_MIMDB_LPARUN FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE LPA_RUN_INV ADD CONSTRAINT FK_MIMDB_LPARUNINV FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE LPA_RUN_ISSUE ADD CONSTRAINT FK_MIMDB_LPARUNISSUE FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE LPA_SERVICE_WORK_TYPE ADD CONSTRAINT FK_MIMDB_LPASERVICEWTYPE FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE LPA_TURN_WORK_TYPE ADD CONSTRAINT FK_MIMDB_LPATURNWTYPE FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE LRP_EVENT ADD CONSTRAINT FK_MIMDB_LRPEVENT FOREIGN KEY ( LRP_EVENT_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE LRP_EVENT_WORKSCOPE ADD CONSTRAINT FK_MIMDB_LRPEVENTWORKSCOPE FOREIGN KEY ( LRP_WORKSCOPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE LRP_PLAN ADD CONSTRAINT FK_MIMDB_LRPPLAN FOREIGN KEY ( LRP_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM ADD CONSTRAINT FK_MIMDB_MAINTPRGM FOREIGN KEY ( MAINT_PRGM_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_DEFN ADD CONSTRAINT FK_MIMDB_MAINTPRGMDEFN FOREIGN KEY ( MAINT_PRGM_DEFN_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE MIM_CALC ADD CONSTRAINT FK_MIMDB_MIMCALC FOREIGN KEY ( CALC_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE MIM_LOCAL_DB ADD CONSTRAINT FK_MIMDB_MIMLOCALDB FOREIGN KEY ( DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CONSTRAINT FK_MIMDB_MNTPRGMCRTMPTSK FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ORG_CREW_SHIFT_PLAN ADD CONSTRAINT FK_MIMDB_OGRCREWSHIFTPLAN FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE ORG_CREW_SHIFT_PLAN ADD CONSTRAINT FK_MIMDB_OGRCREWSHIFTPLAN_CR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE ORG_CREW_SHIFT_PLAN ADD CONSTRAINT FK_MIMDB_OGRCREWSHIFTPLAN_CT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE ORG_CREW_SHIFT_TASK ADD CONSTRAINT FK_MIMDB_ORCRSHTASK FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE ORG_CREW_SHIFT_TASK ADD CONSTRAINT FK_MIMDB_ORCRSHTASK_CR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE ORG_CREW_SHIFT_TASK ADD CONSTRAINT FK_MIMDB_ORCRSHTASK_CT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INT_ORDER_EXCEPTION ADD CONSTRAINT FK_MIMDB_ORDEREXCEPTION FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INT_ORDER_EXCEPTION ADD CONSTRAINT FK_MIMDB_ORDEREXCEPTIONC FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INT_ORDER_EXCEPTION ADD CONSTRAINT FK_MIMDB_ORDEREXCEPTIONR FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE ORG_AUTHORITY ADD CONSTRAINT FK_MIMDB_ORGAUTH FOREIGN KEY ( AUTHORITY_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ORG_CARRIER ADD CONSTRAINT FK_MIMDB_ORGCARRIER FOREIGN KEY ( CARRIER_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ORG_CREW_SCHEDULE ADD CONSTRAINT FK_MIMDB_ORGCREWSCHEDULE FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE ORG_CREW_SCHEDULE ADD CONSTRAINT FK_MIMDB_ORGCREWSCHEDULE_CR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE ORG_CREW_SCHEDULE ADD CONSTRAINT FK_MIMDB_ORGCREWSCHEDULE_CT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE ORG_DB ADD CONSTRAINT FK_MIMDB_ORGDB FOREIGN KEY ( DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR ADD CONSTRAINT FK_MIMDB_ORGHR FOREIGN KEY ( HR_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ORG_ORG ADD CONSTRAINT FK_MIMDB_ORGORG FOREIGN KEY ( ORG_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR ADD CONSTRAINT FK_MIMDB_ORGVENDOR FOREIGN KEY ( VENDOR_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_ATTACH ADD CONSTRAINT FK_MIMDB_ORGVNDRATTACH FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_WORK_DEPT ADD CONSTRAINT FK_MIMDB_ORGWORKDEPT FOREIGN KEY ( DEPT_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM_MATRIX ADD CONSTRAINT FK_MIMDB_PMATRIX FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM_MATRIX_COLUMN ADD CONSTRAINT FK_MIMDB_PMATRIXCELL FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM_MATRIX_HEADER ADD CONSTRAINT FK_MIMDB_PMATRIXHEADER FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM_MATRIX_ROW ADD CONSTRAINT FK_MIMDB_PMATRIXROW FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE_ACCOUNT ADD CONSTRAINT FK_MIMDB_POLINEACCTCREATION FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE_ACCOUNT ADD CONSTRAINT FK_MIMDB_POLINEACCTCTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE_ACCOUNT ADD CONSTRAINT FK_MIMDB_POLINEACCTREVISION FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE_KIT_LINE ADD CONSTRAINT FK_MIMDB_POLINEKITLINE FOREIGN KEY ( PO_LINE_KIT_LINE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE_MP ADD CONSTRAINT FK_MIMDB_POLINEMP_CR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE PO_LINE_MP ADD CONSTRAINT FK_MIMDB_POLINEMP_CT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE PO_LINE_MP ADD CONSTRAINT FK_MIMDB_POLINEMP_RE FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE QUAR_QUAR ADD CONSTRAINT FK_MIMDB_QUARQUAR FOREIGN KEY ( QUAR_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_ABC_CLASS ADD CONSTRAINT FK_MIMDB_REFABCCLASS FOREIGN KEY ( ABC_CLASS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_AC_COND ADD CONSTRAINT FK_MIMDB_REFACCOND FOREIGN KEY ( AC_COND_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_ACCOUNT_TYPE ADD CONSTRAINT FK_MIMDB_REFACCOUNTTYPE FOREIGN KEY ( ACCOUNT_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_ACFT_CAP ADD CONSTRAINT FK_MIMDB_REFACFTCAP FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_ACFT_CAP_LEVEL ADD CONSTRAINT FK_MIMDB_REFACFTCAPLEVEL FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_ACFT_CAP_LEVEL ADD CONSTRAINT FK_MIMDB_REFACFTCAPLEVEL_CR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_ACFT_CAP_LEVEL ADD CONSTRAINT FK_MIMDB_REFACFTCAPLEVEL_CT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_ACFT_CAP ADD CONSTRAINT FK_MIMDB_REFACFTCAP_CR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_ACFT_CAP ADD CONSTRAINT FK_MIMDB_REFACFTCAP_CT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ORG_ADDRESS ADD CONSTRAINT FK_MIMDB_REFADDRESS FOREIGN KEY ( ADDRESS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_ADVSRY_TYPE ADD CONSTRAINT FK_MIMDB_REFADVSRYTYPE FOREIGN KEY ( ADVSRY_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_ASSMBL_CLASS ADD CONSTRAINT FK_MIMDB_REFASSMBLCLASS FOREIGN KEY ( ASSMBL_CLASS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_BITMAP ADD CONSTRAINT FK_MIMDB_REFBITMAP FOREIGN KEY ( BITMAP_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_BOM_CLASS ADD CONSTRAINT FK_MIMDB_REFBOMCLASS FOREIGN KEY ( BOM_CLASS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_BULK_LOAD_STATUS ADD CONSTRAINT FK_MIMDB_REFBULKSTATUS_CTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE REF_BULK_LOAD_STATUS ADD CONSTRAINT FK_MIMDB_REFBULKSTATUS_REV FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE REF_BULK_LOAD_FILE_ACTION ADD CONSTRAINT FK_MIMDB_REFBULKTYPE_CTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE REF_BULK_LOAD_FILE_ACTION ADD CONSTRAINT FK_MIMDB_REFBULKTYPE_REV FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE REF_CFG_SLOT_STATUS ADD CONSTRAINT FK_MIMDB_REFCFGSLOTSTATUS FOREIGN KEY ( CFG_SLOT_STATUS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_COND_SET ADD CONSTRAINT FK_MIMDB_REFCONDSET FOREIGN KEY ( COND_SET_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ORG_CONTACT ADD CONSTRAINT FK_MIMDB_REFCONTACT FOREIGN KEY ( CONTACT_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_CONTROL_METHOD ADD CONSTRAINT FK_MIMDB_REFCONTROLMETHOD FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE REF_COUNTRY ADD CONSTRAINT FK_MIMDB_REFCOUNTRY FOREIGN KEY ( COUNTRY_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_CURRENCY ADD CONSTRAINT FK_MIMDB_REFCURRENCY FOREIGN KEY ( CURRENCY_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_DATA_SOURCE_TYPE ADD CONSTRAINT FK_MIMDB_REFDATASOURCETYPE FOREIGN KEY ( DATA_SOURCE_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_DATA_VALUE ADD CONSTRAINT FK_MIMDB_REFDATAVALUE FOREIGN KEY ( DATA_VALUE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_DELAY_CODE ADD CONSTRAINT FK_MIMDB_REFDELAYCODE FOREIGN KEY ( DELAY_CODE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_DEPT_TYPE ADD CONSTRAINT FK_MIMDB_REFDEPTTYPE FOREIGN KEY ( DEPT_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_DISRUPT_TYPE ADD CONSTRAINT FK_MIMDB_REFDISRUPTTYPE FOREIGN KEY ( DISRUPT_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_DOMAIN_TYPE ADD CONSTRAINT FK_MIMDB_REFDOMAINTYPE FOREIGN KEY ( DOMAIN_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_ENG_UNIT ADD CONSTRAINT FK_MIMDB_REFENGUNIT FOREIGN KEY ( ENG_UNIT_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_EVENT_REASON ADD CONSTRAINT FK_MIMDB_REFEVENTREASON FOREIGN KEY ( EVENT_REASON_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_EVENT_STATUS ADD CONSTRAINT FK_MIMDB_REFEVENTSTATUS FOREIGN KEY ( EVENT_STATUS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_EVENT_TYPE ADD CONSTRAINT FK_MIMDB_REFEVENTTYPE FOREIGN KEY ( EVENT_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_FAIL_CATGRY ADD CONSTRAINT FK_MIMDB_REFFAILCATGRY FOREIGN KEY ( FAIL_CATGRY_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_FAIL_DEFER ADD CONSTRAINT FK_MIMDB_REFFAILDEFER FOREIGN KEY ( FAIL_DEFER_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_FAIL_EFFECT_TYPE ADD CONSTRAINT FK_MIMDB_REFFAILEFFECTTYPE FOREIGN KEY ( FAIL_EFFECT_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_FAIL_FACTOR ADD CONSTRAINT FK_MIMDB_REFFAILFACTOR FOREIGN KEY ( FAIL_FACTOR_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_FAIL_PRIORITY ADD CONSTRAINT FK_MIMDB_REFFAILPRIORITY FOREIGN KEY ( FAIL_PRIORITY_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_FAIL_SEV ADD CONSTRAINT FK_MIMDB_REFFAILSEV FOREIGN KEY ( FAIL_SEV_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_FAULT_LOG_TYPE ADD CONSTRAINT FK_MIMDB_REFFAULTLOGTYPE FOREIGN KEY ( FAULT_LOG_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_FAULT_SOURCE ADD CONSTRAINT FK_MIMDB_REFFAULTSOURCE FOREIGN KEY ( FAULT_SOURCE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_FINANCE_TYPE ADD CONSTRAINT FK_MIMDB_REFFINANCETYPE FOREIGN KEY ( FINANCE_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_FLIGHT_STAGE ADD CONSTRAINT FK_MIMDB_REFFLIGHTSTAGE FOREIGN KEY ( FLIGHT_STAGE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_FLIGHT_TYPE ADD CONSTRAINT FK_MIMDB_REFFLIGHTTYPE FOREIGN KEY ( FLIGHT_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_FLIGHT_LEG_STATUS ADD CONSTRAINT FK_MIMDB_REFFLLEGSTAT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_FLIGHT_REASON ADD CONSTRAINT FK_MIMDB_REFFLREASON FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_FOB ADD CONSTRAINT FK_MIMDB_REFFOB FOREIGN KEY ( FOB_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_GRP_TYPE ADD CONSTRAINT FK_MIMDB_REFGRPTYPE FOREIGN KEY ( GRP_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_HR_LIC_STATUS ADD CONSTRAINT FK_MIMDB_REFHRLICSTATUS FOREIGN KEY ( HR_LIC_STATUS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_IMPACT ADD CONSTRAINT FK_MIMDB_REFIMPACT FOREIGN KEY ( IMPACT_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_INT_LOGGING_TYPE ADD CONSTRAINT FK_MIMDB_REFINTLOGTYPE FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_INT_STEP_TYPE ADD CONSTRAINT FK_MIMDB_REFINTSTEPTYPE FOREIGN KEY ( STEP_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_INV_CAPABILITY ADD CONSTRAINT FK_MIMDB_REFINVCAPABILITY FOREIGN KEY ( INV_CAPABILITY_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_INV_CLASS ADD CONSTRAINT FK_MIMDB_REFINVCLASS FOREIGN KEY ( INV_CLASS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_INV_COND ADD CONSTRAINT FK_MIMDB_REFINVCOND FOREIGN KEY ( INV_COND_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_INV_OPER ADD CONSTRAINT FK_MIMDB_REFINVOPER FOREIGN KEY ( INV_OPER_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_JOB_TYPE ADD CONSTRAINT FK_MIMDB_REFJOBTYPE FOREIGN KEY ( JOB_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LABOUR_ROLE_TYPE ADD CONSTRAINT FK_MIMDB_REFLABOURROLETYPE FOREIGN KEY ( LABOUR_ROLE_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LABOUR_SKILL ADD CONSTRAINT FK_MIMDB_REFLABOURSKILL FOREIGN KEY ( LABOUR_SKILL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LABOUR_STAGE ADD CONSTRAINT FK_MIMDB_REFLABOURSTAGE FOREIGN KEY ( LABOUR_STAGE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LABOUR_TIME ADD CONSTRAINT FK_MIMDB_REFLABOURTIME FOREIGN KEY ( LABOUR_TIME_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LABOUR_ROLE_STATUS ADD CONSTRAINT FK_MIMDB_REFLBRROLESTATUS FOREIGN KEY ( LABOUR_ROLE_STATUS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LIC_CATEGORY ADD CONSTRAINT FK_MIMDB_REFLICCATEGORY FOREIGN KEY ( LIC_CAT_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LIC_CLASS ADD CONSTRAINT FK_MIMDB_REFLICCLASS FOREIGN KEY ( LIC_CLASS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LICENSE_TYPE ADD CONSTRAINT FK_MIMDB_REFLICENSETYPE FOREIGN KEY ( LICENSE_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LIC_STATUS ADD CONSTRAINT FK_MIMDB_REFLICSTATUS FOREIGN KEY ( LIC_STATUS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LIC_TYPE ADD CONSTRAINT FK_MIMDB_REFLICTYPE FOREIGN KEY ( LIC_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LOC_TYPE ADD CONSTRAINT FK_MIMDB_REFLOCTYPE FOREIGN KEY ( LOC_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LOGBOOK_TYPE ADD CONSTRAINT FK_MIMDB_REFLOGBOOKTYPE FOREIGN KEY ( LOGBOOK_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LOGCARD_FORM ADD CONSTRAINT FK_MIMDB_REFLOGCARDFORM FOREIGN KEY ( LOGCARD_FORM_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LPA_ISSUE_TYPE ADD CONSTRAINT FK_MIMDB_REFLPAISSUETYPE FOREIGN KEY ( LPA_ISSUE_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LPA_ISSUE_TYPE ADD CONSTRAINT FK_MIMDB_REFLPAISSUETYPEREV FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LPA_RUN_STATUS ADD CONSTRAINT FK_MIMDB_REFLPARUNSTATUS FOREIGN KEY ( LPA_RUN_STATUS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LPA_RUN_STATUS ADD CONSTRAINT FK_MIMDB_REFLPARUNSTATUSREV FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LPA_STATUS ADD CONSTRAINT FK_MIMDB_REFLPASTATUS FOREIGN KEY ( LPA_STATUS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LRP_CONFIG_SEV ADD CONSTRAINT FK_MIMDB_REFLRPCNFSEV FOREIGN KEY ( LRP_CONFIG_SEV_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LRP_PRIORITY ADD CONSTRAINT FK_MIMDB_REFLRPPRIORITY FOREIGN KEY ( LRP_PRIORITY_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_MAINT_PRGM_STATUS ADD CONSTRAINT FK_MIMDB_REFMAINTPRGMSTATUS FOREIGN KEY ( MAINT_PRGM_STATUS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_OIL_STATUS ADD CONSTRAINT FK_MIMDB_REFOILSTATUS FOREIGN KEY ( OIL_STATUS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_ORG_TYPE ADD CONSTRAINT FK_MIMDB_REFORGTYPE FOREIGN KEY ( ORG_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_PART_PROVIDER_TYPE ADD CONSTRAINT FK_MIMDB_REFPARTPROVIDERTYPE FOREIGN KEY ( PART_PROVIDER_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_PART_STATUS ADD CONSTRAINT FK_MIMDB_REFPARTSTATUS FOREIGN KEY ( PART_STATUS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_PART_TYPE ADD CONSTRAINT FK_MIMDB_REFPARTTYPE FOREIGN KEY ( PART_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_PART_USE ADD CONSTRAINT FK_MIMDB_REFPARTUSE FOREIGN KEY ( PART_USE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_PART_VENDOR_TYPE ADD CONSTRAINT FK_MIMDB_REFPARTVENDADVTYPE FOREIGN KEY ( PART_VENDOR_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_PAY_METHOD ADD CONSTRAINT FK_MIMDB_REFPAYMETHOD FOREIGN KEY ( PAY_METHOD_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_PO_AUTH_FLOW ADD CONSTRAINT FK_MIMDB_REFPOAUTHFLOW FOREIGN KEY ( PO_AUTH_FLOW_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_PO_AUTH_LVL ADD CONSTRAINT FK_MIMDB_REFPOAUTHLVL FOREIGN KEY ( PO_AUTH_LVL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_PO_AUTH_LVL_STATUS ADD CONSTRAINT FK_MIMDB_REFPOAUTHLVLSTATUS FOREIGN KEY ( PO_AUTH_LVL_STATUS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_PO_TYPE ADD CONSTRAINT FK_MIMDB_REFPOTYPE FOREIGN KEY ( PO_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_PPC_ACTIVITY_TYPE ADD CONSTRAINT FK_MIMDB_REFPPCACTVITYTYPE FOREIGN KEY ( PPC_ACTIVITY_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_PPC_MILESTONE_TYPE ADD CONSTRAINT FK_MIMDB_REFPPCMILESTONETYPE FOREIGN KEY ( PPC_MILESTONE_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE REF_PPC_OPT_STATUS ADD CONSTRAINT FK_MIMDB_REFPPCOPTSTAT FOREIGN KEY ( PPC_OPT_STATUS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_PPC_PUBLISH_FAIL_TYPE ADD CONSTRAINT FK_MIMDB_REFPPCPUBLISHFAILTYPE FOREIGN KEY ( PPC_PUBLISH_FAIL_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_PREC_PROC ADD CONSTRAINT FK_MIMDB_REFPRECPROC FOREIGN KEY ( PREC_PROC_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_PRICE_TYPE ADD CONSTRAINT FK_MIMDB_REFPRICETYPE FOREIGN KEY ( PRICE_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_PRINTER_TYPE ADD CONSTRAINT FK_MIMDB_REFPRINTERTYPE FOREIGN KEY ( PRINTER_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_PURCH_TYPE ADD CONSTRAINT FK_MIMDB_REFPURCHTYPE FOREIGN KEY ( PURCH_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_QTY_UNIT ADD CONSTRAINT FK_MIMDB_REFQTYUNIT FOREIGN KEY ( QTY_UNIT_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_QUAR_ACTION_CATGRY ADD CONSTRAINT FK_MIMDB_REFQUARACTIONCATGRY FOREIGN KEY ( QUAR_ACTION_CATGRY_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_QUAR_ACTION_STATUS ADD CONSTRAINT FK_MIMDB_REFQUARACTIONSTATUS FOREIGN KEY ( QUAR_ACTION_STATUS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_RCV_PRIORITY ADD CONSTRAINT FK_MIMDB_REFRCVPRIORITY FOREIGN KEY ( RCV_PRIORITY_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_RCV_ROUTING ADD CONSTRAINT FK_MIMDB_REFRCVROUTING FOREIGN KEY ( RCV_ROUTING_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_REF_UNIT ADD CONSTRAINT FK_MIMDB_REFREFUNIT FOREIGN KEY ( REF_UNIT_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_REG_BODY ADD CONSTRAINT FK_MIMDB_REFREGBODY FOREIGN KEY ( REG_BODY_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_RELIABILITY_NOTE_TYPE ADD CONSTRAINT FK_MIMDB_REFRELNOTETYPE FOREIGN KEY ( RELIABILITY_NOTE_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_REL_TYPE ADD CONSTRAINT FK_MIMDB_REFRELTYPE FOREIGN KEY ( REL_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_REMOVE_REASON ADD CONSTRAINT FK_MIMDB_REFREMOVEREASON FOREIGN KEY ( REMOVE_REASON_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_REQ_ACTION ADD CONSTRAINT FK_MIMDB_REFREQACTION FOREIGN KEY ( REQ_ACTION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_REQ_PRIORITY ADD CONSTRAINT FK_MIMDB_REFREQPRIORITY FOREIGN KEY ( REQ_PRIORITY_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_REQ_TYPE ADD CONSTRAINT FK_MIMDB_REFREQTYPE FOREIGN KEY ( REQ_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_SCHED_FROM ADD CONSTRAINT FK_MIMDB_REFSCHEDFROM FOREIGN KEY ( SCHED_FROM_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_SCHED_PART_STATUS ADD CONSTRAINT FK_MIMDB_REFSCHEDPARTSTATUS FOREIGN KEY ( SCHED_PART_STATUS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_SCHED_PRIORITY ADD CONSTRAINT FK_MIMDB_REFSCHEDPRIORITY FOREIGN KEY ( SCHED_PRIORITY_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_SD_NATURE ADD CONSTRAINT FK_MIMDB_REFSDNATURE FOREIGN KEY ( SD_NATURE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_SD_TYPE ADD CONSTRAINT FK_MIMDB_REFSDTYPE FOREIGN KEY ( SD_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_SEV_TYPE ADD CONSTRAINT FK_MIMDB_REFSEVTYPE FOREIGN KEY ( SEV_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_SHIPMENT_TYPE ADD CONSTRAINT FK_MIMDB_REFSHIPMENTTYPE FOREIGN KEY ( SHIPMENT_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_SIZE_CLASS ADD CONSTRAINT FK_MIMDB_REFSIZECLASS FOREIGN KEY ( SIZE_CLASS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_SPEC2K_CMND ADD CONSTRAINT FK_MIMDB_REFSPEC2KCMND FOREIGN KEY ( SPEC2K_CMND_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_STAGE_REASON ADD CONSTRAINT FK_MIMDB_REFSTAGEREASON FOREIGN KEY ( STAGE_REASON_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_STOCK_LOW_ACTN ADD CONSTRAINT FK_MIMDB_REFSTCKLOWACTN FOREIGN KEY ( STOCK_LOW_ACTN_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_STEP_STATUS ADD CONSTRAINT FK_MIMDB_REFSTEPSTATUS FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_SUPPLY_CHAIN ADD CONSTRAINT FK_MIMDB_REFSUPPLYCHAIN FOREIGN KEY ( SUPPLY_CHAIN_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_TASK_ADVISORY_TYPE ADD CONSTRAINT FK_MIMDB_REFTASKADVISORYTYPE FOREIGN KEY ( TASK_ADVISORY_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_TASK_CLASS ADD CONSTRAINT FK_MIMDB_REFTASKCLASS FOREIGN KEY ( TASK_CLASS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_TASK_DEF_DISPOSITION ADD CONSTRAINT FK_MIMDB_REFTASKDEFDISPOSITION FOREIGN KEY ( TASK_DEF_DISPOSITION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_TASK_DEF_STATUS ADD CONSTRAINT FK_MIMDB_REFTASKDEFSTATUS FOREIGN KEY ( TASK_DEF_STATUS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_TASK_DEP_ACTION ADD CONSTRAINT FK_MIMDB_REFTASKDEPACTION FOREIGN KEY ( TASK_DEP_ACTION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_TASK_ORIGINATOR ADD CONSTRAINT FK_MIMDB_REFTASKORIGINATOR FOREIGN KEY ( TASK_ORIGINATOR_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_TASK_REV_REASON ADD CONSTRAINT FK_MIMDB_REFTASKREVREASON FOREIGN KEY ( TASK_REV_REASON_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_TASK_SUBCLASS ADD CONSTRAINT FK_MIMDB_REFTASKSUBCLASS FOREIGN KEY ( TASK_SUBCLASS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_TERMS_CONDITIONS ADD CONSTRAINT FK_MIMDB_REFTERMSCOND FOREIGN KEY ( TERMS_CONDITIONS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_THRESHOLD_MODE ADD CONSTRAINT FK_MIMDB_REFTHMODE FOREIGN KEY ( THRESHOLD_MODE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_TIMEOFF_TYPE ADD CONSTRAINT FK_MIMDB_REFTIMEOFFTYPE FOREIGN KEY ( TIMEOFF_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_TRANSPORT_TYPE ADD CONSTRAINT FK_MIMDB_REFTRANSPORTTYPE FOREIGN KEY ( TRANSPORT_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_USAGE_TYPE ADD CONSTRAINT FK_MIMDB_REFUSTYPE FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_VENDOR_APPROVAL ADD CONSTRAINT FK_MIMDB_REFVENDORAPPROVAL FOREIGN KEY ( VENDOR_APPROVAL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_VENDOR_STATUS ADD CONSTRAINT FK_MIMDB_REFVENDORSTATUS FOREIGN KEY ( VENDOR_STATUS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_VENDOR_TYPE ADD CONSTRAINT FK_MIMDB_REFVENDORTYPE FOREIGN KEY ( VENDOR_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_WF_DEFN_TYPE ADD CONSTRAINT FK_MIMDB_REFWFDEFNTYPE FOREIGN KEY ( WF_DEFN_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_WF_PRIORITY ADD CONSTRAINT FK_MIMDB_REFWFPRIORITY FOREIGN KEY ( WF_PRIORITY_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_WF_STATUS ADD CONSTRAINT FK_MIMDB_REFWFSTATUS FOREIGN KEY ( WF_STATUS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_WF_STEP_REASON ADD CONSTRAINT FK_MIMDB_REFWFSTEPREASON FOREIGN KEY ( WF_STEP_REASON_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_WF_STEP_STATUS ADD CONSTRAINT FK_MIMDB_REFWFSTEPSTATUS FOREIGN KEY ( WF_STEP_STATUS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_WORK_TYPE ADD CONSTRAINT FK_MIMDB_REFWORKTYPE FOREIGN KEY ( WORK_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_WP_SIGN_REQ_STATUS ADD CONSTRAINT FK_MIMDB_REFWPSIGNREQSTAT FOREIGN KEY ( WP_SIGN_REQ_STATUS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_XACTION_TYPE ADD CONSTRAINT FK_MIMDB_REFXACTIONTYPE FOREIGN KEY ( XACTION_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_XFER_TYPE ADD CONSTRAINT FK_MIMDB_REFXFERTYPE FOREIGN KEY ( XFER_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_ATTACH_TYPE ADD CONSTRAINT FK_MIMDB_REF_ATTACH_TYPE FOREIGN KEY ( ATTACH_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_IETM_TYPE ADD CONSTRAINT FK_MIMDB_REF_IETM_TYPE FOREIGN KEY ( IETM_TYPE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ACFT_GROUP ADD CONSTRAINT FK_MIMDB_REVACFTGROUP FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE ACFT_GROUP_ASSIGNMENT ADD CONSTRAINT FK_MIMDB_REVACFTGROUPASS FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE BLT_REF_ERROR ADD CONSTRAINT FK_MIMDB_REVBLTREFERROR FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE BLT_REF_ERROR_TYPE ADD CONSTRAINT FK_MIMDB_REVBLTREFERRORTYPE FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE BLT_REF_WF_CYCLE_STATUS ADD CONSTRAINT FK_MIMDB_REVBLTREFWFCYCLESTATU FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE BLT_REF_WF_LOG_STATUS ADD CONSTRAINT FK_MIMDB_REVBLTREFWFLOGSTATUS FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE BLT_WF_CYCLE_LOG ADD CONSTRAINT FK_MIMDB_REVBLTWFCYCLELOG FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE BLT_REF_WF_LOG_TYPE ADD CONSTRAINT FK_MIMDB_REVIDBLTREFWFLOGTYPE FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_LRP_DURATION_MODE ADD CONSTRAINT FK_MIMDB_REVISIONDBID FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE PPC_WP_SNAPSHOT ADD CONSTRAINT FK_MIMDB_REVISIONPPCWPSNAPSHOT FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE PPC_ACTVTY_SNAPSHOT ADD CONSTRAINT FK_MIMDB_REVPPCACTVTSNAPSHOT FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_REPORT_TYPE ADD CONSTRAINT FK_MIMDB_REVUTLREPORTTYPE FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR ADD CONSTRAINT FK_MIMDB_SCHEDLBR FOREIGN KEY ( LABOUR_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_ROLE ADD CONSTRAINT FK_MIMDB_SCHEDLBRROLE FOREIGN KEY ( LABOUR_ROLE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_ROLE_STATUS ADD CONSTRAINT FK_MIMDB_SCHEDLBRROLESTATUS FOREIGN KEY ( STATUS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_STEP ADD CONSTRAINT FK_MIMDB_SCHEDLBRSTEP_CREATE FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_STEP ADD CONSTRAINT FK_MIMDB_SCHEDLBRSTEP_CTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE SCHED_STEP ADD CONSTRAINT FK_MIMDB_SCHEDSTEP_CREATE FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE SCHED_STEP ADD CONSTRAINT FK_MIMDB_SCHEDSTEP_CTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE SCHED_WP_SIGN_REQ ADD CONSTRAINT FK_MIMDB_SCHEDWPSIGNREQ FOREIGN KEY ( SIGN_REQ_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE SCHED_ZONE ADD CONSTRAINT FK_MIMDB_SCHEDZONE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_SENSITIVITY ADD CONSTRAINT FK_MIMDB_SENSITIVITY_CRE FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE REF_SENSITIVITY ADD CONSTRAINT FK_MIMDB_SENSITIVITY_CTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE REF_SENSITIVITY ADD CONSTRAINT FK_MIMDB_SENSITIVITY_REV FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT_LINE ADD CONSTRAINT FK_MIMDB_SHIPSHIPMENTLINE FOREIGN KEY ( SHIPMENT_LINE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT_LINE_MP ADD CONSTRAINT FK_MIMDB_SHIP_LN_MP_CR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT_LINE_MP ADD CONSTRAINT FK_MIMDB_SHIP_LN_MP_CT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT_LINE_MP ADD CONSTRAINT FK_MIMDB_SHIP_LN_RE FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE SCHED_STEP_APPL_LOG ADD CONSTRAINT FK_MIMDB_SSTEP_APPL_LOG_CREATE FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE SCHED_STEP_APPL_LOG ADD CONSTRAINT FK_MIMDB_SSTEP_APPL_LOG_CTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE STOCK_DIST_REQ_LOG ADD CONSTRAINT FK_MIMDB_STKDISTREQLOG_CTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE STOCK_DIST_REQ_LOG ADD CONSTRAINT FK_MIMDB_STKDISTREQLOG_REV FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE REF_STOCK_DIST_REQ_STATUS ADD CONSTRAINT FK_MIMDB_STKDISTREQSTATUS_CTR FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE REF_STOCK_DIST_REQ_STATUS ADD CONSTRAINT FK_MIMDB_STKDISTREQSTATUS_REV FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE STOCK_DIST_REQ ADD CONSTRAINT FK_MIMDB_STKDISTREQ_CTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE STOCK_DIST_REQ ADD CONSTRAINT FK_MIMDB_STKDISTREQ_REV FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE TAG_TAG ADD CONSTRAINT FK_MIMDB_TAG_LABEL FOREIGN KEY ( TAG_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE TASK_DEFN_TO_FP ADD CONSTRAINT FK_MIMDB_TASKDEFNTOFP_CR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE TASK_DEFN_TO_FP ADD CONSTRAINT FK_MIMDB_TASKDEFNTOFP_CT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE TASK_DEFN_TO_FP ADD CONSTRAINT FK_MIMDB_TASKDEFNTOFP_RE FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE REF_TASK_SCHED_FROM ADD CONSTRAINT FK_MIMDB_TASKSCHEDFROM FOREIGN KEY ( TASK_SCHED_FROM_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_MIMDB_TASKTASK FOREIGN KEY ( TASK_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE TASK_TEMP_ISSUE_LOG ADD CONSTRAINT FK_MIMDB_TASKTEMPISSUELOG FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE TASK_DEFN ADD CONSTRAINT FK_MIMDB_TASK_DEFN FOREIGN KEY ( TASK_DEFN_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE TAX ADD CONSTRAINT FK_MIMDB_TAXCREATIONBID FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE TAX ADD CONSTRAINT FK_MIMDB_TAXCTRLDBID FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE TAX_LOG ADD CONSTRAINT FK_MIMDB_TAXLOGCREATIONDBID FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE TAX_LOG ADD CONSTRAINT FK_MIMDB_TAXLOGCTRLDBID FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE TAX_LOG ADD CONSTRAINT FK_MIMDB_TAXLOGREVISIONDBID FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE TAX ADD CONSTRAINT FK_MIMDB_TAXREVISIONDBID FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE TAX_VENDOR ADD CONSTRAINT FK_MIMDB_TAXVENDORCREATIONDBID FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE TAX_VENDOR ADD CONSTRAINT FK_MIMDB_TAXVENDORCTRLDBID FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE TAX_VENDOR ADD CONSTRAINT FK_MIMDB_TAXVENDORREVISIONDBID FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE TASK_FLEET_APPROVAL ADD CONSTRAINT FK_MIMDB_TSKFLTAPPRVL FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE TASK_STEP_SKILL ADD CONSTRAINT FK_MIMDB_TSKSTEPSKILLCREATE FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE TASK_STEP_SKILL ADD CONSTRAINT FK_MIMDB_TSKSTEPSKILLCTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE TASK_STEP_SKILL ADD CONSTRAINT FK_MIMDB_TSKSTEPSKILLREV FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE USG_USAGE_DATA ADD CONSTRAINT FK_MIMDB_USGUSDATA FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE USG_USAGE_RECORD ADD CONSTRAINT FK_MIMDB_USGUSREC FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_ALERT_LOG ADD CONSTRAINT FK_MIMDB_UTLALERTLOG FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_ALERT_STATUS ADD CONSTRAINT FK_MIMDB_UTLALERTSTATUS FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_ALERT_STATUS_LOG ADD CONSTRAINT FK_MIMDB_UTLALERTSTATUSLOG FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_FILE_IMPORT ADD CONSTRAINT FK_MIMDB_UTLFILEIMPORT_CTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE UTL_FILE_IMPORT ADD CONSTRAINT FK_MIMDB_UTLFILEIMPORT_REV FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE UTL_OC_SVR_JOB_CFG ADD CONSTRAINT FK_MIMDB_UTLOCSVRJOBCFG FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM ADD CONSTRAINT FK_MIMDB_UTLPERM FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM_ANSWER_TYPE ADD CONSTRAINT FK_MIMDB_UTLPERMANSWER FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM_MODE ADD CONSTRAINT FK_MIMDB_UTLPERMMODE FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM_QUESTION ADD CONSTRAINT FK_MIMDB_UTLPERMQUESTION FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM_SET_ACTION_PARM ADD CONSTRAINT FK_MIMDB_UTLPRMSTACTPRM_CRTDBI FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM_SET_ACTION_PARM ADD CONSTRAINT FK_MIMDB_UTLPRMSTACTPRM_CTLDBI FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM_SET_ACTION_PARM ADD CONSTRAINT FK_MIMDB_UTLPRMSTACTPRM_REVDBI FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM_SET ADD CONSTRAINT FK_MIMDB_UTLPRMST_CRTDBID FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM_SET ADD CONSTRAINT FK_MIMDB_UTLPRMST_CTLDBID FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM_SET ADD CONSTRAINT FK_MIMDB_UTLPRMST_REVDBID FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PURGE_GROUP ADD CONSTRAINT FK_MIMDB_UTLPURGEGRP FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PURGE_POLICY ADD CONSTRAINT FK_MIMDB_UTLPURGEPOL FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PURGE_STRATEGY ADD CONSTRAINT FK_MIMDB_UTLPURGESTR FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PURGE_TABLE ADD CONSTRAINT FK_MIMDB_UTLPURGETBL FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_ROLE_PERM_SET ADD CONSTRAINT FK_MIMDB_UTLRLPRMST_CRTDBID FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_ROLE_PERM_SET ADD CONSTRAINT FK_MIMDB_UTLRLPRMST_CTLDBID FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_ROLE_PERM_SET ADD CONSTRAINT FK_MIMDB_UTLRLPRMST_REVDBID FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_TIMEZONE ADD CONSTRAINT FK_MIMDB_UTLTIMEZONE FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_WORK_ITEM ADD CONSTRAINT FK_MIMDB_UTLWORKITEM FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_WORK_ITEM_TYPE ADD CONSTRAINT FK_MIMDB_UTLWORKITEMTYPE FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE WF_DEFN ADD CONSTRAINT FK_MIMDB_WFDEFN FOREIGN KEY ( WF_DEFN_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE WF_DEFN_STEP ADD CONSTRAINT FK_MIMDB_WFDEFNSTEP FOREIGN KEY ( WF_DEFN_STEP_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE WF_LEVEL ADD CONSTRAINT FK_MIMDB_WFLEVEL FOREIGN KEY ( WF_LEVEL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE WF_LEVEL_DEFN ADD CONSTRAINT FK_MIMDB_WFLEVELDEFN FOREIGN KEY ( WF_LEVEL_DEFN_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE WF_STEP ADD CONSTRAINT FK_MIMDB_WFSTEP FOREIGN KEY ( WF_STEP_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE WF_WF ADD CONSTRAINT FK_MIMDB_WFWF FOREIGN KEY ( WF_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_TASK_DEF_ISSUE_BY ADD CONSTRAINT FK_MIMDB__REFTASKDEFISSUEBY FOREIGN KEY ( TASK_DEF_ISSUE_BY_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_MIMDTATYPE_EQPPRTNO FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG_MEASUREMENT ADD CONSTRAINT FK_MIMDTTYP_FLLEGMEAS FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM_OIL ADD CONSTRAINT FK_MIMDT_OILDATATYPE FOREIGN KEY ( OIL_DATA_TYPE_DB_ID, OIL_DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE REF_DATA_TYPE_ASSMBL_CLASS ADD CONSTRAINT FK_MIMDT_REFDTASSMBLCLASS FOREIGN KEY ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM_OIL ADD CONSTRAINT FK_MIMDT_TIMEDATATYPE FOREIGN KEY ( TIME_DATA_TYPE_DB_ID, TIME_DATA_TYPE_ID ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE ORG_SUBORG_CACHE_SP ADD CONSTRAINT FK_MIMRSAT_ORGSUBORGSP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE AC_COND_SETTING ADD CONSTRAINT FK_MIMRSTAT_ACCONDSETTING FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ACFT_CAP_LEVELS ADD CONSTRAINT FK_MIMRSTAT_ACFTCAPLEVELS FOREIGN KEY ( rstat_cd ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ACFT_GROUP ADD CONSTRAINT FK_MIMRSTAT_ACFTGROUP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE ACFT_GROUP_ASSIGNMENT ADD CONSTRAINT FK_MIMRSTAT_ACFTGROUPASS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE ASB_EXCEPTION_LOG ADD CONSTRAINT FK_MIMRSTAT_ASBEXCEPTIONLOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ASB_INBOUND_LOG ADD CONSTRAINT FK_MIMRSTAT_ASBINBOUNDLOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ASB_NOTIFICATION_LOG ADD CONSTRAINT FK_MIMRSTAT_ASBNOTIFICATION FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ASB_OUTBOUND_LOG ADD CONSTRAINT FK_MIMRSTAT_ASBOUTBOUNDLOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ASB_REQUEST_LOG ADD CONSTRAINT FK_MIMRSTAT_ASBREQUESTLOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ASB_RESPONSE_LOG ADD CONSTRAINT FK_MIMRSTAT_ASBRESPONSELOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ASB_TRANSACTION_LOG ADD CONSTRAINT FK_MIMRSTAT_ASBTRANSACTION FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ASSMBL_CAP_LEVELS ADD CONSTRAINT FK_MIMRSTAT_ASSMBLCAPLEVELS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE AUTO_RSRV_QUEUE ADD CONSTRAINT FK_MIMRSTAT_AUTORSRVQUEUE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE BLT_REF_ERROR ADD CONSTRAINT FK_MIMRSTAT_BLTREFERROR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE BLT_REF_ERROR_TYPE ADD CONSTRAINT FK_MIMRSTAT_BLTREFERRORTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE BLT_REF_WF_LOG_STATUS ADD CONSTRAINT FK_MIMRSTAT_BLTREFWFLOGSTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE BLT_REF_WF_LOG_TYPE ADD CONSTRAINT FK_MIMRSTAT_BLTREFWFLOGTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE BLT_WF_CYCLE_LOG ADD CONSTRAINT FK_MIMRSTAT_BLTWFCYCLELOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE BULK_LOAD_ELEMENT ADD CONSTRAINT FK_MIMRSTAT_BULKLDELMNT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE CAPACITY_PATTERN ADD CONSTRAINT FK_MIMRSTAT_CAPACITYPATTERN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE CHARGE ADD CONSTRAINT FK_MIMRSTAT_CHARGE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE CHARGE_LOG ADD CONSTRAINT FK_MIMRSTAT_CHARGELOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE CHARGE_VENDOR ADD CONSTRAINT FK_MIMRSTAT_CHARGEVENDOR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE COR_BLOB_APR ADD CONSTRAINT FK_MIMRSTAT_CORBLOBAPR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE COR_BLOB_AUG ADD CONSTRAINT FK_MIMRSTAT_CORBLOBAUG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE COR_BLOB_DATA ADD CONSTRAINT FK_MIMRSTAT_CORBLOBDATA FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE COR_BLOB_DEC ADD CONSTRAINT FK_MIMRSTAT_CORBLOBDEC FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE COR_BLOB_FEB ADD CONSTRAINT FK_MIMRSTAT_CORBLOBFEB FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE COR_BLOB_INFO ADD CONSTRAINT FK_MIMRSTAT_CORBLOBINFO FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE COR_BLOB_JAN ADD CONSTRAINT FK_MIMRSTAT_CORBLOBJAN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE COR_BLOB_JUL ADD CONSTRAINT FK_MIMRSTAT_CORBLOBJUL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE COR_BLOB_JUN ADD CONSTRAINT FK_MIMRSTAT_CORBLOBJUN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE COR_BLOB_MAR ADD CONSTRAINT FK_MIMRSTAT_CORBLOBMAR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE COR_BLOB_MAY ADD CONSTRAINT FK_MIMRSTAT_CORBLOBMAY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE COR_BLOB_NOV ADD CONSTRAINT FK_MIMRSTAT_CORBLOBNOV FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE COR_BLOB_OCT ADD CONSTRAINT FK_MIMRSTAT_CORBLOBOCT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE COR_BLOB_SEP ADD CONSTRAINT FK_MIMRSTAT_CORBLOBSEP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE COR_PERM_BLOB ADD CONSTRAINT FK_MIMRSTAT_CORPERMBLOB FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE CAPACITY_PATTERN_DAY ADD CONSTRAINT FK_MIMRSTAT_CPDAY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE CAPACITY_PATTERN_DAY_SHIFT ADD CONSTRAINT FK_MIMRSTAT_CPDAYSHIFT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE CAPACITY_PATTERN_DAY_SKILL ADD CONSTRAINT FK_MIMRSTAT_CPDAYSKILL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE CAPACITY_PATTERN_SKILL ADD CONSTRAINT FK_MIMRSTAT_CPSKILL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF_DEGRAD_CAP ADD CONSTRAINT FK_MIMRSTAT_DEGRADCAP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE DIM_INV ADD CONSTRAINT FK_MIMRSTAT_DIMINV FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE DIM_OIL_STATUS ADD CONSTRAINT FK_MIMRSTAT_DIMOILSTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE DIM_TIME ADD CONSTRAINT FK_MIMRSTAT_DIMTIME FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE STOCK_DIST_REQ_PICKED_ITEM ADD CONSTRAINT FK_MIMRSTAT_DISTREQPICKITEM FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE EQP_ADVSRY_ATTACH ADD CONSTRAINT FK_MIMRSTAT_EQPADVSRYATTACH FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_ADVSRY ADD CONSTRAINT FK_MIMRSTAT_EQPADVSRYTY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL ADD CONSTRAINT FK_MIMRSTAT_EQPASSMBL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM ADD CONSTRAINT FK_MIMRSTAT_EQPASSMBLBOM FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM_LOG ADD CONSTRAINT FK_MIMRSTAT_EQPASSMBLBOMLOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM_OIL ADD CONSTRAINT FK_MIMRSTAT_EQPASSMBLBOMOIL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM_SENS ADD CONSTRAINT FK_MIMRSTAT_EQPASSMBLBOMSENS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM_THRESHOLD ADD CONSTRAINT FK_MIMRSTAT_EQPASSMBLBOMTHR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_DATA_TYPE ADD CONSTRAINT FK_MIMRSTAT_EQPASSMBLDATATYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_POS ADD CONSTRAINT FK_MIMRSTAT_EQPASSMBLPOS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_SENS ADD CONSTRAINT FK_MIMRSTAT_EQPASSMBLSENS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_SUBTYPE ADD CONSTRAINT FK_MIMRSTAT_EQPASSSUBTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_BOM_PART ADD CONSTRAINT FK_MIMRSTAT_EQPBOMPART FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_BOM_PART_LOG ADD CONSTRAINT FK_MIMRSTAT_EQPBOMPARTLOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_BOM_PART_SENS ADD CONSTRAINT FK_MIMRSTAT_EQPBOMPARTSENS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE EQP_DATA_SOURCE ADD CONSTRAINT FK_MIMRSTAT_EQPDATASOURCE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_DATA_SOURCE_SPEC ADD CONSTRAINT FK_MIMRSTAT_EQPDTASRCSPEC FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_FINDING ADD CONSTRAINT FK_MIMRSTAT_EQPFINDING FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_FLIGHT_SPEC ADD CONSTRAINT FK_MIMRSTAT_EQPFLIGHTSPEC FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_INSTALL_KIT_MAP ADD CONSTRAINT FK_MIMRSTAT_EQPINSTKITMAP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_INSTALL_KIT_PART_MAP ADD CONSTRAINT FK_MIMRSTAT_EQPINSTKITPARTMAP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_KIT_PART_GROUP_MAP ADD CONSTRAINT FK_MIMRSTAT_EQPKITPARTGROUPMAP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_KIT_PART_GROUPS ADD CONSTRAINT FK_MIMRSTAT_EQPKITPARTGROUPS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_MANUFACT ADD CONSTRAINT FK_MIMRSTAT_EQPMANUFACT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_OIL_THRESHOLD_ASSMBL ADD CONSTRAINT FK_MIMRSTAT_EQPOILTHRESHASSM FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_OIL_THRESHOLD_CARRIER ADD CONSTRAINT FK_MIMRSTAT_EQPOILTHRESHCARR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_OIL_THRESHOLD_INV ADD CONSTRAINT FK_MIMRSTAT_EQPOILTHRESHINV FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_OIL_THRESHOLD_PART ADD CONSTRAINT FK_MIMRSTAT_EQPOILTHRESHPART FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_ADVSRY ADD CONSTRAINT FK_MIMRSTAT_EQPPARTADVSRY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_ALT_UNIT ADD CONSTRAINT FK_MIMRSTAT_EQPPARTALTUNIT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_BASELINE ADD CONSTRAINT FK_MIMRSTAT_EQPPARTBASELINE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_COMPAT_DEF ADD CONSTRAINT FK_MIMRSTAT_EQPPARTCOMPATDEF FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_MIMRSTAT_EQPPARTNO FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO_LOG ADD CONSTRAINT FK_MIMRSTAT_EQPPARTNOLOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CONSTRAINT FK_MIMRSTAT_EQPPARTROTABLE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR_ADVSRY ADD CONSTRAINT FK_MIMRSTAT_EQPPARTVENDORADV FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PLANNING_TYPE ADD CONSTRAINT FK_MIMRSTAT_EQPPLANNINGTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PLANNING_TYPE_SKILL ADD CONSTRAINT FK_MIMRSTAT_EQPPLANNINGTYPESKI FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_ATTACHMENT ADD CONSTRAINT FK_MIMRSTAT_EQPPRTATTACHMENT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR_PRICE ADD CONSTRAINT FK_MIMRSTAT_EQPRTPRICEBRK FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR ADD CONSTRAINT FK_MIMRSTAT_EQPRTVEND FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR_REP ADD CONSTRAINT FK_MIMRSTAT_EQPRTVENDOR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_STOCK_NO ADD CONSTRAINT FK_MIMRSTAT_EQPSTOCKNO FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_TASK_PANEL ADD CONSTRAINT FK_MIMRSTAT_EQPTASKPANEL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_TASK_ZONE ADD CONSTRAINT FK_MIMRSTAT_EQPTASKZONE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_COMPAT_TASK ADD CONSTRAINT FK_MIMRSTAT_EQPTTASKCOMPAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_KIT_PART_MAP ADD CONSTRAINT FK_MIMRSTAT_EQP_KIT_PART_MAP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_IETM ADD CONSTRAINT FK_MIMRSTAT_EQP_PART_IETM FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ER_DATE_RANGE ADD CONSTRAINT FK_MIMRSTAT_ERDATERANGE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ER_HEADER ADD CONSTRAINT FK_MIMRSTAT_ERHEADER FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ER_WEEKLY_RANGE ADD CONSTRAINT FK_MIMRSTAT_ERWEEKLYRANGE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ER_WORK_TYPE ADD CONSTRAINT FK_MIMRSTAT_ERWORKTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ESIG_DOC ADD CONSTRAINT FK_MIMRSTAT_ESIGDOC FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ESIG_DOC_SIGN ADD CONSTRAINT FK_MIMRSTAT_ESIGDOCSIGN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EVT_ATTACH ADD CONSTRAINT FK_MIMRSTAT_EVTATTACH FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EVT_BAND ADD CONSTRAINT FK_MIMRSTAT_EVTBAND FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EVT_BAND_FIELD ADD CONSTRAINT FK_MIMRSTAT_EVTBANDFIELD FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EVT_BAND_GROUP ADD CONSTRAINT FK_MIMRSTAT_EVTBANDGROUP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EVT_BAND_ROLE ADD CONSTRAINT FK_MIMRSTAT_EVTBANDROLE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EVT_DEPT ADD CONSTRAINT FK_MIMRSTAT_EVTDEPT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EVT_EVENT ADD CONSTRAINT FK_MIMRSTAT_EVTEVENT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EVT_EVENT_REL ADD CONSTRAINT FK_MIMRSTAT_EVTEVENTREL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EVT_FAIL_EFFECT ADD CONSTRAINT FK_MIMRSTAT_EVTFAILEFFECT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EVT_FINDING ADD CONSTRAINT FK_MIMRSTAT_EVTFINDING FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EVT_IETM ADD CONSTRAINT FK_MIMRSTAT_EVTIETM FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EVT_INV ADD CONSTRAINT FK_MIMRSTAT_EVTINV FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_INV ADD CONSTRAINT FK_MIMRSTAT_EVTINVCNDCHG FOREIGN KEY ( rstat_cd ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EVT_INV_USAGE ADD CONSTRAINT FK_MIMRSTAT_EVTINVUSAGE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EVT_LOC ADD CONSTRAINT FK_MIMRSTAT_EVTLOC FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EVT_ORG_VENDOR_PO_TYPE ADD CONSTRAINT FK_MIMRSTAT_EVTORGVENPOTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EVT_ORG_VENDOR_SERVICE_TYPE ADD CONSTRAINT FK_MIMRSTAT_EVTORGVENSRVTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EVT_PART_NO ADD CONSTRAINT FK_MIMRSTAT_EVTPARTNO FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EVT_SCHED_DEAD ADD CONSTRAINT FK_MIMRSTAT_EVTSCHEDDEAD FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EVT_STAGE ADD CONSTRAINT FK_MIMRSTAT_EVTSTAGE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EVT_TOOL ADD CONSTRAINT FK_MIMRSTAT_EVTTOOL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE EXT_REF_ITEM ADD CONSTRAINT FK_MIMRSTAT_EXTREFITEM FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE FAIL_DEFER_CARRIER ADD CONSTRAINT FK_MIMRSTAT_FAILDEFCARRIER FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF ADD CONSTRAINT FK_MIMRSTAT_FAILDEFERREF FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF_DEAD ADD CONSTRAINT FK_MIMRSTAT_FAILDEFERREFDEAD FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF_ROLE ADD CONSTRAINT FK_MIMRSTAT_FAILDEFREFRL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FAIL_EFFECT ADD CONSTRAINT FK_MIMRSTAT_FAILEFFECT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FAIL_MODE ADD CONSTRAINT FK_MIMRSTAT_FAILMODE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FAIL_MODE_FACTOR ADD CONSTRAINT FK_MIMRSTAT_FAILMODEFACTOR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FAIL_MODE_EFFECT ADD CONSTRAINT FK_MIMRSTAT_FAILMODEFFECT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FAIL_MODE_IETM ADD CONSTRAINT FK_MIMRSTAT_FAILMODEIETM FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FAIL_MODE_SUPPRESS ADD CONSTRAINT FK_MIMRSTAT_FAILMODESUPPRESS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FC_MODEL ADD CONSTRAINT FK_MIMRSTAT_FCMODEL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FC_RANGE ADD CONSTRAINT FK_MIMRSTAT_FCRANGE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FC_RATE ADD CONSTRAINT FK_MIMRSTAT_FCRATE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FCT_INV_OIL ADD CONSTRAINT FK_MIMRSTAT_FCTINVOIL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FL_LEG ADD CONSTRAINT FK_MIMRSTAT_FLLEG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FL_LEG_DISRUPT ADD CONSTRAINT FK_MIMRSTAT_FLLEGDIS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FL_LEG_DISRUPT_TYPE ADD CONSTRAINT FK_MIMRSTAT_FLLEGDISTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FL_LEG_FAIL_EFFECT ADD CONSTRAINT FK_MIMRSTAT_FLLEGFAILEFF FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FL_LEG_MEASUREMENT ADD CONSTRAINT FK_MIMRSTAT_FLLEGMEAS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FL_LEG_NOTE ADD CONSTRAINT FK_MIMRSTAT_FLLEGNOTE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FL_LEG_STATUS_LOG ADD CONSTRAINT FK_MIMRSTAT_FLLEGSTATLOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FNC_ACCOUNT ADD CONSTRAINT FK_MIMRSTAT_FNCACCOUNT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FNC_XACTION_LOG ADD CONSTRAINT FK_MIMRSTAT_FNCXACTIONLOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE FNC_XACTION_ACCOUNT ADD CONSTRAINT FK_MIMRSTAT_FNCXACTNACCNT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE IETM_ASSMBL ADD CONSTRAINT FK_MIMRSTAT_IETMASSMBL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE IETM_IETM ADD CONSTRAINT FK_MIMRSTAT_IETMIETM FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE IETM_TOPIC ADD CONSTRAINT FK_MIMRSTAT_IETMTOPIC FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE IETM_TOPIC_CARRIER ADD CONSTRAINT FK_MIMRSTAT_IETMTOPICCARRIER FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INT_MESSAGE_ORDER ADD CONSTRAINT FK_MIMRSTAT_INTMSGORDER FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INT_PROCESS ADD CONSTRAINT FK_MIMRSTAT_INTPROCESS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INT_DEST_LOOKUP ADD CONSTRAINT FK_MIMRSTAT_INTSUBWS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_AC_FLIGHT_PLAN ADD CONSTRAINT FK_MIMRSTAT_INVACFLIGHTPLAN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_AC_REG ADD CONSTRAINT FK_MIMRSTAT_INVACREG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_AC_REG_TO_FP ADD CONSTRAINT FK_MIMRSTAT_INVACREGTOFP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE INV_ADVSRY ADD CONSTRAINT FK_MIMRSTAT_INVADVSRY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_INV_USAGE ADD CONSTRAINT FK_MIMRSTAT_INVCNDCHGUSAGE FOREIGN KEY ( rstat_cd ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_CSGN_XCHG ADD CONSTRAINT FK_MIMRSTAT_INVCSGNXCHG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_CURR_USAGE ADD CONSTRAINT FK_MIMRSTAT_INVCURRUSAGE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_DAMAGE ADD CONSTRAINT FK_MIMRSTAT_INVDAMAGE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_MIMRSTAT_INVINV FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_KIT ADD CONSTRAINT FK_MIMRSTAT_INVKIT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_KIT_MAP ADD CONSTRAINT FK_MIMRSTAT_INVKITMAP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC_CONTACT ADD CONSTRAINT FK_MIMRSTAT_INVLCCONTACT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC ADD CONSTRAINT FK_MIMRSTAT_INVLOC FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC_BIN ADD CONSTRAINT FK_MIMRSTAT_INVLOCBIN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC_BIN_LOG ADD CONSTRAINT FK_MIMRSTAT_INVLOCBINLOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE INV_LOC_CAPABILITY ADD CONSTRAINT FK_MIMRSTAT_INVLOCCAPABILITY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC_DEPT ADD CONSTRAINT FK_MIMRSTAT_INVLOCDEPT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC_LABOUR_CAPACITY ADD CONSTRAINT FK_MIMRSTAT_INVLOCLABCAPACITY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC_ORG ADD CONSTRAINT FK_MIMRSTAT_INVLOCORG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC_PREF_MAP ADD CONSTRAINT FK_MIMRSTAT_INVLOCPREFMAP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE INV_LOC_PRINTER ADD CONSTRAINT FK_MIMRSTAT_INVLOCPRINTER FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC_PRINTER_JOB ADD CONSTRAINT FK_MIMRSTAT_INVLOCPRINTERJOB FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC_REPAIR ADD CONSTRAINT FK_MIMRSTAT_INVLOCREPAIR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC_STOCK ADD CONSTRAINT FK_MIMRSTAT_INVLOCSTOCK FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC_TO_FP ADD CONSTRAINT FK_MIMRSTAT_INVLOCTOFP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE INV_LOC_WT_CAPABILITY ADD CONSTRAINT FK_MIMRSTAT_INVLOCWTCAPABILITY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC_ZONE ADD CONSTRAINT FK_MIMRSTAT_INVLOCZONE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_OIL_STATUS_LOG ADD CONSTRAINT FK_MIMRSTAT_INVOILSTATUSLOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_OIL_STATUS_RATE ADD CONSTRAINT FK_MIMRSTAT_INVOILSTATUSRATE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_OWNER ADD CONSTRAINT FK_MIMRSTAT_INVOWNER FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_PARM_DATA ADD CONSTRAINT FK_MIMRSTAT_INVPARMDATA FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_XFER ADD CONSTRAINT FK_MIMRSTAT_INVXFER FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_ATTACH ADD CONSTRAINT FK_MIMRSTAT_INV_ATTACH FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT FK_MIMRSTAT_INV_CND_CHG_EVENT FOREIGN KEY ( rstat_cd ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_IETM ADD CONSTRAINT FK_MIMRSTAT_INV_IETM FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE KIT_SYNC_QUEUE ADD CONSTRAINT FK_MIMRSTAT_KITSYNCQUEUE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LPA_FLEET ADD CONSTRAINT FK_MIMRSTAT_LPAFLEET FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LPA_RUN ADD CONSTRAINT FK_MIMRSTAT_LPARUN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LPA_RUN_INV ADD CONSTRAINT FK_MIMRSTAT_LPARUNINV FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LPA_RUN_ISSUE ADD CONSTRAINT FK_MIMRSTAT_LPARUNISSUE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LPA_SERVICE_WORK_TYPE ADD CONSTRAINT FK_MIMRSTAT_LPASERVWTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LPA_TURN_WORK_TYPE ADD CONSTRAINT FK_MIMRSTAT_LPATURNWTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LRP_EVENT_BUCKET ADD CONSTRAINT FK_MIMRSTAT_LRPEBKT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LRP_EVENT ADD CONSTRAINT FK_MIMRSTAT_LRPEVENT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LRP_EVENT_USAGES ADD CONSTRAINT FK_MIMRSTAT_LRPEVENTUSAGES FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LRP_EXTRACTION_RULE ADD CONSTRAINT FK_MIMRSTAT_LRPEXRULE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LRP_INV_ADHOC_PLAN ADD CONSTRAINT FK_MIMRSTAT_LRPINVADHOCPLAN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LRP_INV_INV ADD CONSTRAINT FK_MIMRSTAT_LRPINVINV FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LRP_INV_TASK_PLAN ADD CONSTRAINT FK_MIMRSTAT_LRPINVTASKPLAN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LRP_LOC ADD CONSTRAINT FK_MIMRSTAT_LRPLOC FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LRP_LOC_ADHOC_PLAN ADD CONSTRAINT FK_MIMRSTAT_LRPLOCADHOCPLAN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LRP_LOC_CAPABILITY ADD CONSTRAINT FK_MIMRSTAT_LRPLOCCAPABILITY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LRP_LOC_CAPACITY ADD CONSTRAINT FK_MIMRSTAT_LRPLOCCAPACITY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LRP_LOC_CAP_EXCEPT ADD CONSTRAINT FK_MIMRSTAT_LRPLOCCAPACITYEXCE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LRP_LOC_CAP_STD ADD CONSTRAINT FK_MIMRSTAT_LRPLOCCAPACITYSTD FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LRP_PLAN ADD CONSTRAINT FK_MIMRSTAT_LRPPLAN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LRP_PLAN_CONFIG ADD CONSTRAINT FK_MIMRSTAT_LRPPLANCONFIG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LRP_PLAN_TYPE ADD CONSTRAINT FK_MIMRSTAT_LRPPTYP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LRP_TASK_DEFN ADD CONSTRAINT FK_MIMRSTAT_LRPTASKDEFN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_LOG ADD CONSTRAINT FK_MIMRSTAT_MAINTPRGMLOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE MIM_CALC ADD CONSTRAINT FK_MIMRSTAT_MIMCALC FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE MIM_CALC_INPUT ADD CONSTRAINT FK_MIMRSTAT_MIMCALCINPUT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE MIM_DATA_TYPE ADD CONSTRAINT FK_MIMRSTAT_MIMDATATYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE MIM_DATA_VALUE ADD CONSTRAINT FK_MIMRSTAT_MIMDATAVALUE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE MIM_DB ADD CONSTRAINT FK_MIMRSTAT_MIMDB FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE MIM_PART_CHRDATA ADD CONSTRAINT FK_MIMRSTAT_MIMPARTCHRDATA FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE MIM_PART_NUMDATA ADD CONSTRAINT FK_MIMRSTAT_MIMPARTNUMDATA FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE MIM_PART_INPUT ADD CONSTRAINT FK_MIMRSTAT_MIMPRTINPUT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_BITMAP ADD CONSTRAINT FK_MIMRSTAT_MIMRSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE MIM_SITE ADD CONSTRAINT FK_MIMRSTAT_MIMSITE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_CARRIER_MAP ADD CONSTRAINT FK_MIMRSTAT_MNTPGMCAR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CONSTRAINT FK_MIMRSTAT_MNTPRGMCRTMPTSK FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_CREW_SHIFT_PLAN ADD CONSTRAINT FK_MIMRSTAT_OCSP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE ORG_CREW_SHIFT_TASK ADD CONSTRAINT FK_MIMRSTAT_ORCRSHTASK FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE INT_ORDER_EXCEPTION ADD CONSTRAINT FK_MIMRSTAT_ORDEREXCEPTION FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE ORG_ADDRESS_LIST ADD CONSTRAINT FK_MIMRSTAT_ORGADDRESS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_AUTH_FAIL_FACTOR ADD CONSTRAINT FK_MIMRSTAT_ORGAUTHFAILFACT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_AUTHORITY ADD CONSTRAINT FK_MIMRSTAT_ORGAUTHORITY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_CARRIER ADD CONSTRAINT FK_MIMRSTAT_ORGCARRIER FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_CONTACT_LIST ADD CONSTRAINT FK_MIMRSTAT_ORGCONTACTLIST FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_CREW_SCHEDULE ADD CONSTRAINT FK_MIMRSTAT_ORGCREWSCHEDULE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE ORG_DB ADD CONSTRAINT FK_MIMRSTAT_ORGDB FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_DEPT_HR ADD CONSTRAINT FK_MIMRSTAT_ORGDEPTHR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR ADD CONSTRAINT FK_MIMRSTAT_ORGHR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_AUTHORITY ADD CONSTRAINT FK_MIMRSTAT_ORGHRAUTH FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_CERT ADD CONSTRAINT FK_MIMRSTAT_ORGHRCERT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_LICENSE ADD CONSTRAINT FK_MIMRSTAT_ORGHRLICENSE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_PO_AUTH_LVL ADD CONSTRAINT FK_MIMRSTAT_ORGHRPOAUTHLVL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_QUAL ADD CONSTRAINT FK_MIMRSTAT_ORGHRQUAL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_SCHEDULE ADD CONSTRAINT FK_MIMRSTAT_ORGHRSCHED FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_SHIFT ADD CONSTRAINT FK_MIMRSTAT_ORGHRSHIFT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_SHIFT_PLAN ADD CONSTRAINT FK_MIMRSTAT_ORGHRSHIFTPLAN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_SUPPLY ADD CONSTRAINT FK_MIMRSTAT_ORGHRSUPPLY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_TIMEOFF ADD CONSTRAINT FK_MIMRSTAT_ORGHRTIMEOFF FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_LOGO ADD CONSTRAINT FK_MIMRSTAT_ORGLOGO FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_ORG ADD CONSTRAINT FK_MIMRSTAT_ORGORG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_ORG_HR ADD CONSTRAINT FK_MIMRSTAT_ORGORGHR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_ORG_LOC ADD CONSTRAINT FK_MIMRSTAT_ORGORGLOC FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_SUBORG_CACHE ADD CONSTRAINT FK_MIMRSTAT_ORGORGSUBCACHE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_ORG_VENDOR ADD CONSTRAINT FK_MIMRSTAT_ORGORGVENDOR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_LABOUR_SKILL_MAP ADD CONSTRAINT FK_MIMRSTAT_ORGSKILLMAP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_AIRPORT ADD CONSTRAINT FK_MIMRSTAT_ORGVENDAIR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR ADD CONSTRAINT FK_MIMRSTAT_ORGVENDOR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_PO_TYPE ADD CONSTRAINT FK_MIMRSTAT_ORGVENPOTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_SERVICE_TYPE ADD CONSTRAINT FK_MIMRSTAT_ORGVENSRVTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_ACCOUNT ADD CONSTRAINT FK_MIMRSTAT_ORGVNDRACCNT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_IETM ADD CONSTRAINT FK_MIMRSTAT_ORGVNDRIETM FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_WORK_DEPT ADD CONSTRAINT FK_MIMRSTAT_ORGWORKDEPT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PO_AUTH ADD CONSTRAINT FK_MIMRSTAT_POAUTH FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_MIMRSTAT_POHEADER FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PO_INVOICE ADD CONSTRAINT FK_MIMRSTAT_POINVOICE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PO_INVOICE_LINE ADD CONSTRAINT FK_MIMRSTAT_POINVOICELINE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PO_INVOICE_LINE_CHARGE ADD CONSTRAINT FK_MIMRSTAT_POINVOICELINECHG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PO_INVOICE_LINE_TAX ADD CONSTRAINT FK_MIMRSTAT_POINVOICELINETAX FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PO_LINE ADD CONSTRAINT FK_MIMRSTAT_POLINE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PO_LINE_ACCOUNT ADD CONSTRAINT FK_MIMRSTAT_POLINEACCOUNT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PO_LINE_CHARGE ADD CONSTRAINT FK_MIMRSTAT_POLINECHARGE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PO_LINE_KIT_LINE ADD CONSTRAINT FK_MIMRSTAT_POLINEKITLINE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PO_LINE_MP ADD CONSTRAINT FK_MIMRSTAT_POLINEMP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE PO_LINE_TAX ADD CONSTRAINT FK_MIMRSTAT_POLINETAX FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PO_LINE_RETURN_MAP ADD CONSTRAINT FK_MIMRSTAT_POLRTRN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_ACTVTY_SNAPSHOT ADD CONSTRAINT FK_MIMRSTAT_PPCACTVTSNAPSHOT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_CREW ADD CONSTRAINT FK_MIMRSTAT_PPCCREW FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_HR_SLOT ADD CONSTRAINT FK_MIMRSTAT_PPCHRSLOT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_LABOUR ADD CONSTRAINT FK_MIMRSTAT_PPCLABOUR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_LABOUR_ROLE ADD CONSTRAINT FK_MIMRSTAT_PPCLABOURROLE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_LOC ADD CONSTRAINT FK_MIMRSTAT_PPCLOC FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_MILESTONE ADD CONSTRAINT FK_MIMRSTAT_PPCMILESTONE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_MILESTONE_COND ADD CONSTRAINT FK_MIMRSTAT_PPCMILESTONECOND FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_MPC_TEMPLATE_TASK ADD CONSTRAINT FK_MIMRSTAT_PPCMPCTEMPLTSK FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE PPC_PHASE ADD CONSTRAINT FK_MIMRSTAT_PPCPHASE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_PHASE_CLASS ADD CONSTRAINT FK_MIMRSTAT_PPCPHASECLASS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_PLANNING_TYPE ADD CONSTRAINT FK_MIMRSTAT_PPCPLNTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_PLANNING_TYPE_SKILL ADD CONSTRAINT FK_MIMRSTAT_PPCPLNTYPESKLL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_PLAN ADD CONSTRAINT FK_MIMRSTAT_PPCPROJ FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_ACTIVITY ADD CONSTRAINT FK_MIMRSTAT_PPCPROJACTIVITY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_DEPENDENCY ADD CONSTRAINT FK_MIMRSTAT_PPCPROJDEP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_PUBLISH ADD CONSTRAINT FK_MIMRSTAT_PPCPUBLISH FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_PUBLISH_FAILURE ADD CONSTRAINT FK_MIMRSTAT_PPCPUBLISHFAILURE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_TASK ADD CONSTRAINT FK_MIMRSTAT_PPCTASK FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_TASK_DEFN_MAP ADD CONSTRAINT FK_MIMRSTAT_PPCTASKDEFNMAP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_WORK_AREA ADD CONSTRAINT FK_MIMRSTAT_PPCWORKAREA FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_WORK_AREA_ZONE ADD CONSTRAINT FK_MIMRSTAT_PPCWORKAREAZONE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_WP ADD CONSTRAINT FK_MIMRSTAT_PPCWP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_WP_SNAPSHOT ADD CONSTRAINT FK_MIMRSTAT_PPCWPSNAPSHOT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_WORK_AREA_CREW ADD CONSTRAINT FK_MIMRSTAT_PPCWRKARECREW FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE QUAR_ACTION ADD CONSTRAINT FK_MIMRSTAT_QUARACTION FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE QUAR_ACTION_ASSIGNMENT ADD CONSTRAINT FK_MIMRSTAT_QUARACTIONASSIGN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE QUAR_ACTION_STATUS ADD CONSTRAINT FK_MIMRSTAT_QUARACTIONSTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE QUAR_QUAR ADD CONSTRAINT FK_MIMRSTAT_QUARQUAR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_ABC_CLASS ADD CONSTRAINT FK_MIMRSTAT_REFABCCLASS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_ACCOUNT_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFACCNTTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_AC_COND ADD CONSTRAINT FK_MIMRSTAT_REFACCOND FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_ACFT_CAP ADD CONSTRAINT FK_MIMRSTAT_REFACFTCAP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_ACFT_CAP_LEVEL ADD CONSTRAINT FK_MIMRSTAT_REFACFTCAPLEVEL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_ADVSRY_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFADVSRYTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_HAZMAT ADD CONSTRAINT FK_MIMRSTAT_REFAHZMAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_FAIL_DEFER ADD CONSTRAINT FK_MIMRSTAT_REFAILDEFER FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_FAIL_PARM_DATA ADD CONSTRAINT FK_MIMRSTAT_REFAILPARMDATA FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_ASSMBL_CLASS ADD CONSTRAINT FK_MIMRSTAT_REFASSMBLCLASS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_ATTACH_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFATTCHTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_BOM_CLASS ADD CONSTRAINT FK_MIMRSTAT_REFBOMCLASS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_BULK_LOAD_STATUS ADD CONSTRAINT FK_MIMRSTAT_REFBULKSTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE REF_BULK_LOAD_FILE_ACTION ADD CONSTRAINT FK_MIMRSTAT_REFBULKTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE REF_CFG_SLOT_STATUS ADD CONSTRAINT FK_MIMRSTAT_REFCFGSLOTSTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_CHANGE_REASON ADD CONSTRAINT FK_MIMRSTAT_REFCHANGEREASON FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_COND_SET ADD CONSTRAINT FK_MIMRSTAT_REFCONDSET FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_CONTROL_METHOD ADD CONSTRAINT FK_MIMRSTAT_REFCONTROLMETHOD FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE REF_COUNTRY ADD CONSTRAINT FK_MIMRSTAT_REFCOUNTRY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_CAPACITY_PATTERN_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFCPTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_CURRENCY ADD CONSTRAINT FK_MIMRSTAT_REFCURRENCY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_DATA_VALUE ADD CONSTRAINT FK_MIMRSTAT_REFDATAVALUE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_DATA_SOURCE ADD CONSTRAINT FK_MIMRSTAT_REFDATSOURCE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_DB_JOB ADD CONSTRAINT FK_MIMRSTAT_REFDBJOB FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_DB_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFDBTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_DELAY_CODE ADD CONSTRAINT FK_MIMRSTAT_REFDELAYCODE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_DEPT_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFDEPTTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_DISRUPT_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFDISRUPTTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_DOMAIN_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFDOMAINTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_DATA_TYPE_ASSMBL_CLASS ADD CONSTRAINT FK_MIMRSTAT_REFDTASSMBLCLASS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_EFFECT_SEV ADD CONSTRAINT FK_MIMRSTAT_REFEFFECTSEV FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_ENG_UNIT ADD CONSTRAINT FK_MIMRSTAT_REFENGUNIT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_EVENT_REASON ADD CONSTRAINT FK_MIMRSTAT_REFEVENTREASON FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_EVENT_STATUS ADD CONSTRAINT FK_MIMRSTAT_REFEVENTSTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_EVENT_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFEVENTTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_FAIL_CATGRY ADD CONSTRAINT FK_MIMRSTAT_REFFAILCATGRY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_FAIL_EFFECT_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFFAILEFFECT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_FAIL_FACTOR ADD CONSTRAINT FK_MIMRSTAT_REFFAILFACTOR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_FAIL_PRIORITY ADD CONSTRAINT FK_MIMRSTAT_REFFAILPRIORITY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_FAIL_SEV ADD CONSTRAINT FK_MIMRSTAT_REFFAILSEV FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_FAIL_SEV_DEFER ADD CONSTRAINT FK_MIMRSTAT_REFFAILSEVDFR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_FAIL_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFFAILTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_FAULT_LOG_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFFAULTLOGTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_FAULT_SOURCE ADD CONSTRAINT FK_MIMRSTAT_REFFAULTSOURCE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_FINANCE_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFFINANCETYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_FINANCIAL_CLASS ADD CONSTRAINT FK_MIMRSTAT_REFFINANCIALCLASS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_FINDING_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFFINDINGTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_FLIGHT_STAGE ADD CONSTRAINT FK_MIMRSTAT_REFFLIGHTSTAGE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_FLIGHT_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFFLIGHTTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_FLIGHT_LEG_STATUS ADD CONSTRAINT FK_MIMRSTAT_REFFLLEGSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_FLIGHT_REASON ADD CONSTRAINT FK_MIMRSTAT_REFFLREASON FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_FOB ADD CONSTRAINT FK_MIMRSTAT_REFFOB FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_IETM_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFIETMTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_IMPACT ADD CONSTRAINT FK_MIMRSTAT_REFIMPACT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_INT_DELIVERY ADD CONSTRAINT FK_MIMRSTAT_REFINTDEL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_INT_LOGGING_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFINTLOGTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_INT_STEP_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFINTSTEPTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_INV_CAPABILITY ADD CONSTRAINT FK_MIMRSTAT_REFINVCAPABILITY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_INV_CLASS ADD CONSTRAINT FK_MIMRSTAT_REFINVCLASS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_INV_COND ADD CONSTRAINT FK_MIMRSTAT_REFINVCOND FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_INV_OPER ADD CONSTRAINT FK_MIMRSTAT_REFINVOPER FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_JOB_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFJOBTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_LABOUR_TIME ADD CONSTRAINT FK_MIMRSTAT_REFLABOURTIME FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_LABOUR_STAGE ADD CONSTRAINT FK_MIMRSTAT_REFLABRSTAGE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_LABOUR_SKILL ADD CONSTRAINT FK_MIMRSTAT_REFLABURSKILL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_LABOUR_ROLE_STATUS ADD CONSTRAINT FK_MIMRSTAT_REFLBRROLESTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_LABOUR_ROLE_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFLBRROLETYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_LICENSE_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFLICENSETYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_LOC_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFLOCTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_LOG_ACTION ADD CONSTRAINT FK_MIMRSTAT_REFLOGACTION FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_LOGBOOK_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFLOGBOOKTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_LOGCARD_FORM ADD CONSTRAINT FK_MIMRSTAT_REFLOGCARDFORM FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_LOG_REASON ADD CONSTRAINT FK_MIMRSTAT_REFLOGREASON FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_LPA_ISSUE_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFLPAISSUETYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_LPA_RUN_STATUS ADD CONSTRAINT FK_MIMRSTAT_REFLPARUNSTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_LPA_STATUS ADD CONSTRAINT FK_MIMRSTAT_REFLPASTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_LRP_CONFIG_SEV ADD CONSTRAINT FK_MIMRSTAT_REFLRPCNFSEV FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_LRP_DURATION_MODE ADD CONSTRAINT FK_MIMRSTAT_REFLRPDURMODE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE REF_LRP_PRIORITY ADD CONSTRAINT FK_MIMRSTAT_REFLRPPRIORITY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_MAINT_PRGM_STATUS ADD CONSTRAINT FK_MIMRSTAT_REFMAINTPRGMSTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_MATERIAL_REQ_STATUS ADD CONSTRAINT FK_MIMRSTAT_REFMATREQSTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_OIL_STATUS ADD CONSTRAINT FK_MIMRSTAT_REFOILSTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_ORG_SUB_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFORGSUBTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_ORG_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFORGTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_OWNER_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFOWNERTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_PACKAGING_INSTR ADD CONSTRAINT FK_MIMRSTAT_REFPACKINST FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_PART_PROVIDER_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFPARTPROVIDERTYP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_PART_STATUS ADD CONSTRAINT FK_MIMRSTAT_REFPARTSTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_PART_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFPARTTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_PART_USE ADD CONSTRAINT FK_MIMRSTAT_REFPARTUSE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_PART_VENDOR_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFPARTVENDTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_PAY_METHOD ADD CONSTRAINT FK_MIMRSTAT_REFPAYMETHOD FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_PO_AUTH_FLOW ADD CONSTRAINT FK_MIMRSTAT_REFPOAUTHFLOW FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_PO_AUTH_LVL ADD CONSTRAINT FK_MIMRSTAT_REFPOAUTHLVL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_PO_AUTH_LVL_STATUS ADD CONSTRAINT FK_MIMRSTAT_REFPOAUTHLVLSTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_PO_LINE_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFPOLINETYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_PO_PAYMENT_INFO ADD CONSTRAINT FK_MIMRSTAT_REFPOPAYINFO FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_PO_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFPOTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_PPC_ACTIVITY_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFPPCACTVITYTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_PPC_MILESTONE_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFPPCMILESTTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE REF_PPC_PUBLISH_FAIL_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFPPCPUBLISHFAILT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_PREC_PROC ADD CONSTRAINT FK_MIMRSTAT_REFPRCPROC FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_PRICE_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFPRICETYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_PRINTER_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFPRINTERTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_PURCH_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFPURCHTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_QTY_UNIT ADD CONSTRAINT FK_MIMRSTAT_REFQTYUNIT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_QUAR_ACTION_CATGRY ADD CONSTRAINT FK_MIMRSTAT_REFQUARACTCATGRY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_QUAR_ACTION_STATUS ADD CONSTRAINT FK_MIMRSTAT_REFQUARACTSTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_RCV_PRIORITY ADD CONSTRAINT FK_MIMRSTAT_REFRCVPRIORITY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_RCV_ROUTING ADD CONSTRAINT FK_MIMRSTAT_REFRCVROUTE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_RECEIVE_COND ADD CONSTRAINT FK_MIMRSTAT_REFRECCOND FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_REFERENCE_REQUEST_STATUS ADD CONSTRAINT FK_MIMRSTAT_REFREFREQSTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE REF_REL_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFREFTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_REF_UNIT ADD CONSTRAINT FK_MIMRSTAT_REFREFUNIT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_REG_BODY ADD CONSTRAINT FK_MIMRSTAT_REFREGBODY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_REQ_ACTION ADD CONSTRAINT FK_MIMRSTAT_REFREQACTION FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_REQ_PRIORITY ADD CONSTRAINT FK_MIMRSTAT_REFREQPRIORITY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_REQ_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFREQTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_RESULT_EVENT ADD CONSTRAINT FK_MIMRSTAT_REFRESULTEVENT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_REMOVE_REASON ADD CONSTRAINT FK_MIMRSTAT_REFRMVRESN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_SCHED_FROM ADD CONSTRAINT FK_MIMRSTAT_REFSCHEDFROM FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_SCHED_PRIORITY ADD CONSTRAINT FK_MIMRSTAT_REFSCHEDPRIORITY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_SCHED_PART_STATUS ADD CONSTRAINT FK_MIMRSTAT_REFSCHEDPRT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_SD_NATURE ADD CONSTRAINT FK_MIMRSTAT_REFSDNATURE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_SD_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFSDTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_SEV_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFSEVTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_SHIPPING_INSTR ADD CONSTRAINT FK_MIMRSTAT_REFSHIPINST FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_SHIPMENT_REASON ADD CONSTRAINT FK_MIMRSTAT_REFSHIPMENTREASON FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_SHIPMENT_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFSHIPTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_SIZE_CLASS ADD CONSTRAINT FK_MIMRSTAT_REFSIZCLASS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_SERVICE_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFSRVTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_STAGE_REASON ADD CONSTRAINT FK_MIMRSTAT_REFSTAGEREASON FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_STATE ADD CONSTRAINT FK_MIMRSTAT_REFSTATE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_STOCK_LOW_ACTN ADD CONSTRAINT FK_MIMRSTAT_REFSTCKLOWACTN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_STEP_STATUS ADD CONSTRAINT FK_MIMRSTAT_REFSTEPSTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_STORAGE_INSTR ADD CONSTRAINT FK_MIMRSTAT_REFSTORAGEINST FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_SUPPLY_CHAIN ADD CONSTRAINT FK_MIMRSTAT_REFSUPPLYCHAIN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_TASK_ADVISORY_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFTASKADVISORYTYP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_TASK_CLASS ADD CONSTRAINT FK_MIMRSTAT_REFTASKCLASS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_TASK_DEF_DISPOSITION ADD CONSTRAINT FK_MIMRSTAT_REFTASKDEFDISPOSIT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_TASK_DEF_ISSUE_BY ADD CONSTRAINT FK_MIMRSTAT_REFTASKDEFISSUEBY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_TASK_DEP_ACTION ADD CONSTRAINT FK_MIMRSTAT_REFTASKDEPACTION FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_TASK_MUST_REMOVE ADD CONSTRAINT FK_MIMRSTAT_REFTASKMUSTREMOVE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_TASK_ORIGINATOR ADD CONSTRAINT FK_MIMRSTAT_REFTASKORIGINATOR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_TASK_SUBCLASS ADD CONSTRAINT FK_MIMRSTAT_REFTASKSUBCLASS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_TERMS_CONDITIONS ADD CONSTRAINT FK_MIMRSTAT_REFTERMSCOND FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_THRESHOLD_MODE ADD CONSTRAINT FK_MIMRSTAT_REFTHMODE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_TIMEOFF_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFTIMEOFFTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_TRANSPORT_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFTRANSTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_TASK_DEF_STATUS ADD CONSTRAINT FK_MIMRSTAT_REFTSKDEFSTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_TASK_PRIORITY ADD CONSTRAINT FK_MIMRSTAT_REFTSKPRIORITY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_USAGE_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFUSTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_VENDOR_APPROVAL ADD CONSTRAINT FK_MIMRSTAT_REFVENDORAPPROVAL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_VENDOR_STATUS ADD CONSTRAINT FK_MIMRSTAT_REFVENDORSTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_VENDOR_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFVNDORTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_WORK_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFWORKTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_WP_SIGN_REQ_STATUS ADD CONSTRAINT FK_MIMRSTAT_REFWPSIGNREQSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_XACTION_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFXACTIONTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_XFER_TYPE ADD CONSTRAINT FK_MIMRSTAT_REFXFERTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_MIMRSTAT_REQPART FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_DATA_SOURCE_TYPE ADD CONSTRAINT FK_MIMRSTAT_RFDATASRCTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE RFQ_HEADER ADD CONSTRAINT FK_MIMRSTAT_RFQHEADER FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE RFQ_LINE ADD CONSTRAINT FK_MIMRSTAT_RFQLINE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE RFQ_LINE_VENDOR ADD CONSTRAINT FK_MIMRSTAT_RFQLINEVENDOR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE RFQ_LINE_VENDOR_CHARGE ADD CONSTRAINT FK_MIMRSTAT_RFQLINEVENDORCHRG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE RFQ_LINE_VENDOR_TAX ADD CONSTRAINT FK_MIMRSTAT_RFQLINEVENDORTAX FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE RFQ_VENDOR ADD CONSTRAINT FK_MIMRSTAT_RFQVENDOR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SB_ASSMBL ADD CONSTRAINT FK_MIMRSTAT_SBASSMBL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SB_COLUMN ADD CONSTRAINT FK_MIMRSTAT_SBCOLUMN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SB_COLUMN_GROUP ADD CONSTRAINT FK_MIMRSTAT_SBCOLUMNGROUP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SB_QUERY ADD CONSTRAINT FK_MIMRSTAT_SBQUERY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SB_STATUS_BOARD ADD CONSTRAINT FK_MIMRSTAT_SBSTATUSBOARD FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_INST_PART ADD CONSTRAINT FK_MIMRSTAT_SCHDINSTPRT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_RMVD_PART ADD CONSTRAINT FK_MIMRSTAT_SCHDRMVDPRT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_WO_LINE ADD CONSTRAINT FK_MIMRSTAT_SCHDWOLINE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_ACTION ADD CONSTRAINT FK_MIMRSTAT_SCHEDACTION FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_EXT_PART ADD CONSTRAINT FK_MIMRSTAT_SCHEDEXTPART FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_IMPACT ADD CONSTRAINT FK_MIMRSTAT_SCHEDIMPACT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_KIT_MAP ADD CONSTRAINT FK_MIMRSTAT_SCHEDKITMAP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_EXT_PART ADD CONSTRAINT FK_MIMRSTAT_SCHEDLABEXTPART FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_ESIG ADD CONSTRAINT FK_MIMRSTAT_SCHEDLABOURESIG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR ADD CONSTRAINT FK_MIMRSTAT_SCHEDLBR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_ACTION ADD CONSTRAINT FK_MIMRSTAT_SCHEDLBRACTION FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_INST_PART ADD CONSTRAINT FK_MIMRSTAT_SCHEDLBRINSTPART FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_PANEL ADD CONSTRAINT FK_MIMRSTAT_SCHEDLBRPANEL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_PARM_DATA ADD CONSTRAINT FK_MIMRSTAT_SCHEDLBRPARMDATA FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_RMVD_PART ADD CONSTRAINT FK_MIMRSTAT_SCHEDLBRRMVDPART FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_ROLE ADD CONSTRAINT FK_MIMRSTAT_SCHEDLBRROLE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_ROLE_STATUS ADD CONSTRAINT FK_MIMRSTAT_SCHEDLBRROLESTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_STEP ADD CONSTRAINT FK_MIMRSTAT_SCHEDLBRSTEP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_TOOL ADD CONSTRAINT FK_MIMRSTAT_SCHEDLBRTOOL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_PART ADD CONSTRAINT FK_MIMRSTAT_SCHEDPART FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_SERVICE_TYPE ADD CONSTRAINT FK_MIMRSTAT_SCHEDSRVTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_STASK ADD CONSTRAINT FK_MIMRSTAT_SCHEDSTASK FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_STEP ADD CONSTRAINT FK_MIMRSTAT_SCHEDSTEP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_WO_MPC ADD CONSTRAINT FK_MIMRSTAT_SCHEDWOMPC FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_WORK_TYPE ADD CONSTRAINT FK_MIMRSTAT_SCHEDWORKTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_WP_SIGN ADD CONSTRAINT FK_MIMRSTAT_SCHEDWPSIGN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_WP_SIGN_ESIG ADD CONSTRAINT FK_MIMRSTAT_SCHEDWPSIGNESIG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_WP_SIGN_REQ ADD CONSTRAINT FK_MIMRSTAT_SCHEDWPSIGNREQ FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_PANEL ADD CONSTRAINT FK_MIMRSTAT_SCHED_PANEL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SD_FAULT ADD CONSTRAINT FK_MIMRSTAT_SDFAULT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SD_FAULT_NATURE ADD CONSTRAINT FK_MIMRSTAT_SDFAULTNATURE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SD_FAULT_PREC_PROC ADD CONSTRAINT FK_MIMRSTAT_SDFAULTPRECPROC FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SD_FAULT_RESULT ADD CONSTRAINT FK_MIMRSTAT_SDFAULTRESULT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_SENSITIVITY ADD CONSTRAINT FK_MIMRSTAT_SENSITIVITY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE SHIFT_SHIFT ADD CONSTRAINT FK_MIMRSTAT_SHIFTSHIFT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT_LINE ADD CONSTRAINT FK_MIMRSTAT_SHIPSHIPLINE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT ADD CONSTRAINT FK_MIMRSTAT_SHIPSHIPMENT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT_LINE_MP ADD CONSTRAINT FK_MIMRSTAT_SHIP_LN_MP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE STOCK_DIST_REQ ADD CONSTRAINT FK_MIMRSTAT_STKDISTREQ FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE STOCK_DIST_REQ_LOG ADD CONSTRAINT FK_MIMRSTAT_STKDISTREQLOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE REF_STOCK_DIST_REQ_STATUS ADD CONSTRAINT FK_MIMRSTAT_STKDISTREQSTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE TAG_TAG ADD CONSTRAINT FK_MIMRSTAT_TAGTAG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TAG_TASK_DEFN ADD CONSTRAINT FK_MIMRSTAT_TAGTASKDEFN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_AC_RULE ADD CONSTRAINT FK_MIMRSTAT_TASKACRULE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_BOM_PART_LIST ADD CONSTRAINT FK_MIMRSTAT_TASKBOMPRTLIST FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_COND ADD CONSTRAINT FK_MIMRSTAT_TASKCOND FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_DEFN ADD CONSTRAINT FK_MIMRSTAT_TASKDEFN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_DEFN_TO_FP ADD CONSTRAINT FK_MIMRSTAT_TASKDEFNTOFP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE TASK_FAIL_MODE ADD CONSTRAINT FK_MIMRSTAT_TASKFAILMODE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_IMPACT ADD CONSTRAINT FK_MIMRSTAT_TASKIMPACT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_INTERVAL ADD CONSTRAINT FK_MIMRSTAT_TASKINTERVAL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_LABOUR_LIST ADD CONSTRAINT FK_MIMRSTAT_TASKLABOURLIST FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CONSTRAINT FK_MIMRSTAT_TASKLABOURSUMMARY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_ME_RULE ADD CONSTRAINT FK_MIMRSTAT_TASKMERULE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_ME_RULE_INTERVAL ADD CONSTRAINT FK_MIMRSTAT_TASKMERULEINTERVAL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_PANEL ADD CONSTRAINT FK_MIMRSTAT_TASKPANEL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_PARM_DATA ADD CONSTRAINT FK_MIMRSTAT_TASKPARMDATA FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_PART_LIST ADD CONSTRAINT FK_MIMRSTAT_TASKPARTLIST FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_PART_TRANSFORM ADD CONSTRAINT FK_MIMRSTAT_TASKPARTTRANSFORM FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_PLANNING_TYPE_SKILL ADD CONSTRAINT FK_MIMRSTAT_TASKPLANNINGTYPESK FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_REF_DOC ADD CONSTRAINT FK_MIMRSTAT_TASKREFDOC FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_TASK_REV_REASON ADD CONSTRAINT FK_MIMRSTAT_TASKREVREASON FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_TASK_SCHED_FROM ADD CONSTRAINT FK_MIMRSTAT_TASKSCHEDFROM FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_SCHED_RULE ADD CONSTRAINT FK_MIMRSTAT_TASKSCHEDRULE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_STEP ADD CONSTRAINT FK_MIMRSTAT_TASKSTEP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_STEP_SKILL ADD CONSTRAINT FK_MIMRSTAT_TASKSTEPSKILL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_MIMRSTAT_TASKTASK FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_TASK_FLAGS ADD CONSTRAINT FK_MIMRSTAT_TASKTASKFLAGS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_TASK_IETM ADD CONSTRAINT FK_MIMRSTAT_TASKTASKIETM FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_TASK_LOG ADD CONSTRAINT FK_MIMRSTAT_TASKTASKLOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_TEMP_ISSUE_LOG ADD CONSTRAINT FK_MIMRSTAT_TASKTEMPISSUELOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_TOOL_LIST ADD CONSTRAINT FK_MIMRSTAT_TASKTOOLLIST FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_TASK_DEP ADD CONSTRAINT FK_MIMRSTAT_TASKTSKDEP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_WORK_TYPE ADD CONSTRAINT FK_MIMRSTAT_TASKWORKTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_ZONE ADD CONSTRAINT FK_MIMRSTAT_TASKZONE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TAX ADD CONSTRAINT FK_MIMRSTAT_TAX FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TAX_LOG ADD CONSTRAINT FK_MIMRSTAT_TAXLOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TAX_VENDOR ADD CONSTRAINT FK_MIMRSTAT_TAXVENDOR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE UTL_TEMP_ASSIGN_ROLE_MAP ADD CONSTRAINT FK_MIMRSTAT_TMPASSIGNROLEMAP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE LRP_TASK_BUCKET ADD CONSTRAINT FK_MIMRSTAT_TSKBKT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_FLEET_APPROVAL ADD CONSTRAINT FK_MIMRSTAT_TSKFLTAPPRVL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LRP_TASK_PLAN_RANGE ADD CONSTRAINT FK_MIMRSTAT_TSKPRNG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE USER_SHIFT_PATTERN ADD CONSTRAINT FK_MIMRSTAT_USERSHIFTPATTERN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE USG_USAGE_DATA ADD CONSTRAINT FK_MIMRSTAT_USGUSDATA FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE USG_USAGE_RECORD ADD CONSTRAINT FK_MIMRSTAT_USGUSREC FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE USER_SHIFT_PATTERN_DAY ADD CONSTRAINT FK_MIMRSTAT_USPDAY FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE USER_SHIFT_PATTERN_DAY_SHIFT ADD CONSTRAINT FK_MIMRSTAT_USPDAYSHIFT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE UTL_ACTION_USER_PARM ADD CONSTRAINT FK_MIMRSTAT_UTLACTUSERPARM FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_ADDRESS ADD CONSTRAINT FK_MIMRSTAT_UTLADDRESS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE UTL_ALERT ADD CONSTRAINT FK_MIMRSTAT_UTLALERT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE UTL_ALERT_LOG ADD CONSTRAINT FK_MIMRSTAT_UTLALERTLOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE UTL_ALERT_STATUS ADD CONSTRAINT FK_MIMRSTAT_UTLALERTSTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE UTL_ALERT_STATUS_LOG ADD CONSTRAINT FK_MIMRSTAT_UTLALERTSTATUSLOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE UTL_ALERT_PARM ADD CONSTRAINT FK_MIMRSTAT_UTLALRTPRM FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_CONTACT ADD CONSTRAINT FK_MIMRSTAT_UTLCONTACT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE UTL_FILE_IMPORT ADD CONSTRAINT FK_MIMRSTAT_UTLFILEIMPORT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE UTL_OC_SVR_JOB_CFG ADD CONSTRAINT FK_MIMRSTAT_UTLOCSVRJOBCFG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE UTL_PERM_SET ADD CONSTRAINT FK_MIMRSTAT_UTLPRMST FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE UTL_PERM_SET_ACTION_PARM ADD CONSTRAINT FK_MIMRSTAT_UTLPRMSTACTPRM FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE UTL_ROLE_PERM_SET ADD CONSTRAINT FK_MIMRSTAT_UTLPRMSTRL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE UTL_PURGE_GROUP ADD CONSTRAINT FK_MIMRSTAT_UTLPURGEGRP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE UTL_PURGE_POLICY ADD CONSTRAINT FK_MIMRSTAT_UTLPURGEPOL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE UTL_PURGE_STRATEGY ADD CONSTRAINT FK_MIMRSTAT_UTLPURGESTR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE UTL_PURGE_TABLE ADD CONSTRAINT FK_MIMRSTAT_UTLPURGETBL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE UTL_REPORT_TYPE ADD CONSTRAINT FK_MIMRSTAT_UTLREPORTTYPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE UTL_USER ADD CONSTRAINT FK_MIMRSTAT_UTLUSER FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE UTL_USER_ALERT ADD CONSTRAINT FK_MIMRSTAT_UTLUSERALERT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE UTL_USER_PARM ADD CONSTRAINT FK_MIMRSTAT_UTLUSERPARM FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE UTL_USER_TEMP_ROLE ADD CONSTRAINT FK_MIMRSTAT_UTLUSERTEMPROLE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE UTL_USER_ROLE ADD CONSTRAINT FK_MIMRSTAT_UTLUSRROLE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE LRP_EVENT_WORKSCOPE ADD CONSTRAINT FK_MIMRSTAT_WORKSCOPE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE MIM_DB ADD CONSTRAINT FK_MIMSITE_MIMDB FOREIGN KEY ( SITE_CD ) REFERENCES MIM_SITE ( SITE_CD ) DEFERRABLE ;

ALTER TABLE BLT_REF_WF_CYCLE_STATUS ADD CONSTRAINT FK_MIMSTAT_BLTREFWFCYCLESTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INT_BP_AUTHORIZATION ADD CONSTRAINT FK_MIMSTAT_INTBPAUTH FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INT_BP_LOOKUP ADD CONSTRAINT FK_MIMSTAT_INTBPLOOKUP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INT_ERROR_LOG ADD CONSTRAINT FK_MIMSTAT_INTERRLOG FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_INT_LOG_STATUS ADD CONSTRAINT FK_MIMSTAT_INTLOGSTATUS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_POS_DESC_QUEUE ADD CONSTRAINT FK_MIMSTAT_INVPOSDESCQUEUE FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_CERT_PASSWORD ADD CONSTRAINT FK_MIMSTAT_ORGHRCERTPASS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_STASK_FLAGS ADD CONSTRAINT FK_MIMSTAT_SCHEDSTASKFLAGS FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE SCHED_WP ADD CONSTRAINT FK_MIMSTAT_SCHEDWP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_LRP_DURATION_MODE ADD CONSTRAINT FK_MIM_DB_CREATIONDBID FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE REF_HAZMAT ADD CONSTRAINT FK_MIM_DB_REFHAZMAT FOREIGN KEY ( HAZMAT_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_PACKAGING_INSTR ADD CONSTRAINT FK_MIM_DB_REFPACKAGINGINSTR FOREIGN KEY ( PACKAGING_INSTR_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_SHIPPING_INSTR ADD CONSTRAINT FK_MIM_DB_REFSHIPPINGINSTR FOREIGN KEY ( SHIPPING_INSTR_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_STORAGE_INSTR ADD CONSTRAINT FK_MIM_DB_REFSTORAGEINST FOREIGN KEY ( STORAGE_INSTR_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PLUGIN ADD CONSTRAINT FK_MIM_DB_UTL_PLUGIN FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_INV_RECOUNT ADD CONSTRAINT FK_MIM_RSTAT_INVLOCINVRECOUNT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC_PART_COUNT ADD CONSTRAINT FK_MIM_RSTAT_INVLOCPARTCOUNT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_TASK_PANEL ADD CONSTRAINT FK_MIM_RSTAT_PPC_TASK_PANEL FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE REF_FINANCIAL_CLASS ADD CONSTRAINT FK_MIM_RSTAT_REFFINANCIALCLASS FOREIGN KEY ( FINANCIAL_CLASS_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_CARRIER_MAP ADD CONSTRAINT FK_MNTPGM_MNTPGMCAR FOREIGN KEY ( MAINT_PRGM_DB_ID, MAINT_PRGM_ID ) REFERENCES MAINT_PRGM ( MAINT_PRGM_DB_ID, MAINT_PRGM_ID ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CONSTRAINT FK_MNTPRGMDEFN_MNTPRGMCRTMPTSK FOREIGN KEY ( MAINT_PRGM_DEFN_DB_ID, MAINT_PRGM_DEFN_ID ) REFERENCES MAINT_PRGM_DEFN ( MAINT_PRGM_DEFN_DB_ID, MAINT_PRGM_DEFN_ID ) DEFERRABLE ;

ALTER TABLE SCHED_PART ADD CONSTRAINT FK_NH_EQPASSMBLPOS_SCHEDPART FOREIGN KEY ( NH_ASSMBL_DB_ID, NH_ASSMBL_CD, NH_ASSMBL_BOM_ID, NH_ASSMBL_POS_ID ) REFERENCES EQP_ASSMBL_POS ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID, ASSMBL_POS_ID ) DEFERRABLE ;

ALTER TABLE PPC_TASK ADD CONSTRAINT FK_NRENDMILESTONE_PPCTASK FOREIGN KEY ( NR_END_MILESTONE_ID ) REFERENCES PPC_MILESTONE ( MILESTONE_ID ) DEFERRABLE ;

ALTER TABLE PPC_PHASE ADD CONSTRAINT FK_NRENDMLSTN_PPCPHASE FOREIGN KEY ( NR_END_MILESTONE_ID ) REFERENCES PPC_MILESTONE ( MILESTONE_ID ) DEFERRABLE ;

ALTER TABLE PPC_TASK ADD CONSTRAINT FK_NRPHASE_PPCTASK FOREIGN KEY ( NR_PHASE_ID ) REFERENCES PPC_PHASE ( PHASE_ID ) DEFERRABLE ;

ALTER TABLE PPC_TASK ADD CONSTRAINT FK_NRSTARTMILESTONE_PPCTASK FOREIGN KEY ( NR_START_MILESTONE_ID ) REFERENCES PPC_MILESTONE ( MILESTONE_ID ) DEFERRABLE ;

ALTER TABLE PPC_PHASE ADD CONSTRAINT FK_NRSTRTMLSTN_PPCPHASE FOREIGN KEY ( NR_START_MILESTONE_ID ) REFERENCES PPC_MILESTONE ( MILESTONE_ID ) DEFERRABLE ;

ALTER TABLE ORG_CREW_SHIFT_PLAN ADD CONSTRAINT FK_OCS_OCSP FOREIGN KEY ( SCHEDULE_ID ) REFERENCES ORG_CREW_SCHEDULE ( ALT_ID ) NOT DEFERRABLE ;

ALTER TABLE ORG_CREW_SHIFT_TASK ADD CONSTRAINT FK_ORCRSHPL_ORCRSHTASK FOREIGN KEY ( CREW_DB_ID, CREW_ID, CREW_SHIFT_PLAN_ID ) REFERENCES ORG_CREW_SHIFT_PLAN ( CREW_DB_ID, CREW_ID, CREW_SHIFT_PLAN_ID ) NOT DEFERRABLE ;

ALTER TABLE EQP_ASSMBL ADD CONSTRAINT FK_ORGAUTHORITY_EQPASSMBL FOREIGN KEY ( AUTHORITY_DB_ID, AUTHORITY_ID ) REFERENCES ORG_AUTHORITY ( AUTHORITY_DB_ID, AUTHORITY_ID ) DEFERRABLE ;

ALTER TABLE FC_MODEL ADD CONSTRAINT FK_ORGAUTHORITY_FCMODEL FOREIGN KEY ( AUTHORITY_DB_ID, AUTHORITY_ID ) REFERENCES ORG_AUTHORITY ( AUTHORITY_DB_ID, AUTHORITY_ID ) DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_ORGAUTHORITY_INVINV FOREIGN KEY ( AUTHORITY_DB_ID, AUTHORITY_ID ) REFERENCES ORG_AUTHORITY ( AUTHORITY_DB_ID, AUTHORITY_ID ) DEFERRABLE ;

ALTER TABLE ORG_AUTH_FAIL_FACTOR ADD CONSTRAINT FK_ORGAUTHORITY_ORGAUTHFAILFAC FOREIGN KEY ( AUTHORITY_DB_ID, AUTHORITY_ID ) REFERENCES ORG_AUTHORITY ( AUTHORITY_DB_ID, AUTHORITY_ID ) DEFERRABLE ;

ALTER TABLE ORG_CARRIER ADD CONSTRAINT FK_ORGAUTHORITY_ORGCARRIER FOREIGN KEY ( AUTHORITY_DB_ID, AUTHORITY_ID ) REFERENCES ORG_AUTHORITY ( AUTHORITY_DB_ID, AUTHORITY_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_AUTHORITY ADD CONSTRAINT FK_ORGAUTHORITY_ORGHRAUTHORITY FOREIGN KEY ( AUTHORITY_DB_ID, AUTHORITY_ID ) REFERENCES ORG_AUTHORITY ( AUTHORITY_DB_ID, AUTHORITY_ID ) DEFERRABLE ;

ALTER TABLE ER_HEADER ADD CONSTRAINT FK_ORGCARRIER_ERHEADER FOREIGN KEY ( CARRIER_DB_ID, CARRIER_ID ) REFERENCES ORG_CARRIER ( CARRIER_DB_ID, CARRIER_ID ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_CARRIER ADD CONSTRAINT FK_ORGCARRIER_FAILDEFCARRIER FOREIGN KEY ( CARRIER_DB_ID, CARRIER_ID ) REFERENCES ORG_CARRIER ( CARRIER_DB_ID, CARRIER_ID ) DEFERRABLE ;

ALTER TABLE IETM_TOPIC_CARRIER ADD CONSTRAINT FK_ORGCARRIER_IETMTOPICCARRIER FOREIGN KEY ( CARRIER_DB_ID, CARRIER_ID ) REFERENCES ORG_CARRIER ( CARRIER_DB_ID, CARRIER_ID ) DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_ORGCARRIER_INVINV FOREIGN KEY ( CARRIER_DB_ID, CARRIER_ID ) REFERENCES ORG_CARRIER ( CARRIER_DB_ID, CARRIER_ID ) DEFERRABLE ;

ALTER TABLE LIC_DEFN ADD CONSTRAINT FK_ORGCARRIER_LICDEFN FOREIGN KEY ( CARRIER_DB_ID, CARRIER_ID ) REFERENCES ORG_CARRIER ( CARRIER_DB_ID, CARRIER_ID ) DEFERRABLE ;

ALTER TABLE LRP_INV_INV ADD CONSTRAINT FK_ORGCARRIER_LRPINVINV FOREIGN KEY ( CARRIER_DB_ID, CARRIER_ID ) REFERENCES ORG_CARRIER ( CARRIER_DB_ID, CARRIER_ID ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_CARRIER_MAP ADD CONSTRAINT FK_ORGCARRIER_MNTPGMCAR FOREIGN KEY ( CARRIER_DB_ID, CARRIER_ID ) REFERENCES ORG_CARRIER ( CARRIER_DB_ID, CARRIER_ID ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CONSTRAINT FK_ORGCARRIER_MNTPRGMCRTMPTSK FOREIGN KEY ( CARRIER_DB_ID, CARRIER_ID ) REFERENCES ORG_CARRIER ( CARRIER_DB_ID, CARRIER_ID ) DEFERRABLE ;

ALTER TABLE PPC_HR_LIC ADD CONSTRAINT FK_ORGCARRIER_PPCHRLIC FOREIGN KEY ( CARRIER_DB_ID, CARRIER_ID ) REFERENCES ORG_CARRIER ( CARRIER_DB_ID, CARRIER_ID ) DEFERRABLE ;

ALTER TABLE TASK_REF_DOC ADD CONSTRAINT FK_ORGCARRIER_TASKREFDOC FOREIGN KEY ( CARRIER_DB_ID, CARRIER_ID ) REFERENCES ORG_CARRIER ( CARRIER_DB_ID, CARRIER_ID ) DEFERRABLE ;

ALTER TABLE EQP_OIL_THRESHOLD_CARRIER ADD CONSTRAINT FK_ORGCARR_EQPOILTHRESHCARR FOREIGN KEY ( CARRIER_DB_ID, CARRIER_ID ) REFERENCES ORG_CARRIER ( CARRIER_DB_ID, CARRIER_ID ) DEFERRABLE ;

ALTER TABLE ESIG_DOC_SIGN ADD CONSTRAINT FK_ORGHRCERT_ESIGDOCSIGN FOREIGN KEY ( HR_DB_ID, HR_ID, CERT_ID ) REFERENCES ORG_HR_CERT ( HR_DB_ID, HR_ID, CERT_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_CERT ADD CONSTRAINT FK_ORGHRCERT_ORGHRCERT FOREIGN KEY ( CERTIFIER_HR_DB_ID, CERTIFIER_HR_ID, CERTIFIER_CERT_ID ) REFERENCES ORG_HR_CERT ( HR_DB_ID, HR_ID, CERT_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_CERT_PASSWORD ADD CONSTRAINT FK_ORGHRCERT_ORGHRCERTPASS FOREIGN KEY ( HR_DB_ID, HR_ID, CERT_ID ) REFERENCES ORG_HR_CERT ( HR_DB_ID, HR_ID, CERT_ID ) DEFERRABLE ;

ALTER TABLE CHARGE_LOG ADD CONSTRAINT FK_ORGHR_CHARGELOG FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE CLAIM ADD CONSTRAINT FK_ORGHR_CLAIM FOREIGN KEY ( CONTACT_HR_DB_ID, CONTACT_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE EQP_ADVSRY ADD CONSTRAINT FK_ORGHR_EQPADVSRY FOREIGN KEY ( ADVSRY_HR_DB_ID, ADVSRY_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM_LOG ADD CONSTRAINT FK_ORGHR_EQPASSMBLBOMLOG FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE EQP_BOM_PART_LOG ADD CONSTRAINT FK_ORGHR_EQPBOMPARTLOC FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE EVT_FINDING ADD CONSTRAINT FK_ORGHR_EQPFINDING FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_ADVSRY ADD CONSTRAINT FK_ORGHR_EQPPARTADVSRY FOREIGN KEY ( CLEAR_HR_DB_ID, CLEAR_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO_LOG ADD CONSTRAINT FK_ORGHR_EQPPARTNOLOG FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR_ADVSRY ADD CONSTRAINT FK_ORGHR_EQPPARTVENDORADV FOREIGN KEY ( CLEAR_HR_DB_ID, CLEAR_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CONSTRAINT FK_ORGHR_EQPPRTROTABLE FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE ESIG_DOC ADD CONSTRAINT FK_ORGHR_ESIGDOC FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE EVT_EVENT ADD CONSTRAINT FK_ORGHR_EVTEVENT FOREIGN KEY ( EDITOR_HR_DB_ID, EDITOR_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE EVT_ORG_HR ADD CONSTRAINT FK_ORGHR_EVTORGHR FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE EVT_STAGE ADD CONSTRAINT FK_ORGHR_EVTSTAGE FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG_NOTE ADD CONSTRAINT FK_ORGHR_FLLEGNOTE FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG_STATUS_LOG ADD CONSTRAINT FK_ORGHR_FLLEGSTATLOG FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE INV_ADVSRY ADD CONSTRAINT FK_ORGHR_INVADVSRY FOREIGN KEY ( CLEAR_HR_DB_ID, CLEAR_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_BIN_LOG ADD CONSTRAINT FK_ORGHR_INVLOCBINLOG FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_LOC_CONTACT ADD CONSTRAINT FK_ORGHR_INVLOCCONTACT FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE INV_OIL_STATUS_LOG ADD CONSTRAINT FK_ORGHR_INVOILSTATUSLOG FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE INV_XFER ADD CONSTRAINT FK_ORGHR_INVXFER FOREIGN KEY ( RECV_BY_HR_DB_ID, RECV_BY_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT FK_ORGHR_INV_CND_CHG_EVENT FOREIGN KEY ( editor_hr_db_id, editor_hr_id ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE LPA_LOG ADD CONSTRAINT FK_ORGHR_LPALOG FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE LPA_RUN ADD CONSTRAINT FK_ORGHR_LPARUN FOREIGN KEY ( REQUESTED_BY_HR_DB_ID, REQUESTED_BY_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE LRP_EVENT ADD CONSTRAINT FK_ORGHR_LRPEVENT FOREIGN KEY ( LOCK_HR_DB_ID, LOCK_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM ADD CONSTRAINT FK_ORGHR_MAINTPRGM FOREIGN KEY ( ACTV_HR_DB_ID, ACTV_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_LOG ADD CONSTRAINT FK_ORGHR_MAINTPRGMLOG FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_TASK ADD CONSTRAINT FK_ORGHR_MAINTPRGMTASK FOREIGN KEY ( ACTION_HR_DB_ID, ACTION_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE ORG_DEPT_HR ADD CONSTRAINT FK_ORGHR_ORGDEPTHR FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_ATTACHMENT ADD CONSTRAINT FK_ORGHR_ORGHRATTACHMENT FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_AUTHORITY ADD CONSTRAINT FK_ORGHR_ORGHRAUTHORITY FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_CERT ADD CONSTRAINT FK_ORGHR_ORGHRCERT FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_LIC ADD CONSTRAINT FK_ORGHR_ORGHRLIC FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_LICENSE ADD CONSTRAINT FK_ORGHR_ORGHRLICENSE FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_PO_AUTH_LVL ADD CONSTRAINT FK_ORGHR_ORGHRPOAUTHLVL FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_QUAL ADD CONSTRAINT FK_ORGHR_ORGHRQUAL FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_SCHEDULE ADD CONSTRAINT FK_ORGHR_ORGHRSCHED FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_SHIFT ADD CONSTRAINT FK_ORGHR_ORGHRSHIFT FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_SHIFT_PLAN ADD CONSTRAINT FK_ORGHR_ORGHRSHIFTPLAN FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_SUPPLY ADD CONSTRAINT FK_ORGHR_ORGHRSUPPLY FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_TIMEOFF ADD CONSTRAINT FK_ORGHR_ORGHRTIMEOFF FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE ORG_ORG_HR ADD CONSTRAINT FK_ORGHR_ORGORGHR FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE PO_AUTH ADD CONSTRAINT FK_ORGHR_POAUTH FOREIGN KEY ( AUTH_HR_DB_ID, AUTH_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_ORGHR_POHEADER FOREIGN KEY ( CONTACT_HR_DB_ID, CONTACT_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE PO_INVOICE ADD CONSTRAINT FK_ORGHR_POINVOICE FOREIGN KEY ( CONTACT_HR_DB_ID, CONTACT_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE PPC_HR ADD CONSTRAINT FK_ORGHR_PPCHR FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE PPC_PUBLISH ADD CONSTRAINT FK_ORGHR_PPCPUBLISH FOREIGN KEY ( PUBLISHED_BY_HR_DB_ID, PUBLISHED_BY_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE QUAR_ACTION_STATUS ADD CONSTRAINT FK_ORGHR_QUARACTIONSTATUS FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE QUAR_ACTION_ASSIGNMENT ADD CONSTRAINT FK_ORGHR_QUARACTNASSIGN FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE QUAR_QUAR ADD CONSTRAINT FK_ORGHR_QUARQUAR FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_ORGHR_REQPART FOREIGN KEY ( REQ_HR_DB_ID, REQ_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_ORGHR_REQPART_REC FOREIGN KEY ( RECEIVED_BY_HR_DB_ID, RECEIVED_BY_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE RFQ_HEADER ADD CONSTRAINT FK_ORGHR_RFQHEADER FOREIGN KEY ( CONTACT_HR_DB_ID, CONTACT_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE SCHED_ACTION ADD CONSTRAINT FK_ORGHR_SCHEDACTION FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE SCHED_ACTION ADD CONSTRAINT FK_ORGHR_SCHEDACTIONCANCELHR FOREIGN KEY ( CANCEL_HR_DB_ID, CANCEL_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_ROLE_STATUS ADD CONSTRAINT FK_ORGHR_SCHEDLBRROLESTAT FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE SCHED_WO_LINE ADD CONSTRAINT FK_ORGHR_SCHEDWOLINE FOREIGN KEY ( COLLECTION_HR_DB_ID, COLLECTION_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE SCHED_WP_SIGN ADD CONSTRAINT FK_ORGHR_SCHEDWPSIGN FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE SD_FAULT ADD CONSTRAINT FK_ORGHR_SDFAULT FOREIGN KEY ( FOUND_BY_HR_DB_ID, FOUND_BY_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE SHIP_SEGMENT ADD CONSTRAINT FK_ORGHR_SHIPSEG FOREIGN KEY ( COMPLETE_HR_DB_ID, COMPLETE_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE STOCK_DIST_REQ ADD CONSTRAINT FK_ORGHR_STKDISTREQ FOREIGN KEY ( ASSIGNED_HR_DB_ID, ASSIGNED_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) NOT DEFERRABLE ;

ALTER TABLE TAG_TAG ADD CONSTRAINT FK_ORGHR_TAGTAG FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE TASK_REF_DOC ADD CONSTRAINT FK_ORGHR_TASKREFDOC FOREIGN KEY ( RECEIVE_BY_HR_DB_ID, RECEIVE_BY_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE TASK_REF_DOC ADD CONSTRAINT FK_ORGHR_TASKREFDOCDISPBY FOREIGN KEY ( DISPOSITION_HR_DB_ID, DISPOSITION_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_ORGHR_TASKREVHR FOREIGN KEY ( REV_HR_DB_ID, REV_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_ORGHR_TASKTASKLOCKED FOREIGN KEY ( LOCKED_HR_DB_ID, LOCKED_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE TASK_TASK_LOG ADD CONSTRAINT FK_ORGHR_TASKTASKLOG FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE TASK_TEMP_ISSUE_LOG ADD CONSTRAINT FK_ORGHR_TASKTEMPISSUELOG FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_ORGHR_TASK_TASKACTV FOREIGN KEY ( ACTV_HR_DB_ID, ACTV_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_ORGHR_TASTTASK_ENGCNTC FOREIGN KEY ( ENG_CONTACT_HR_DB_ID, ENG_CONTACT_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE TAX_LOG ADD CONSTRAINT FK_ORGHR_TAXLOG FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE USG_USAGE_RECORD ADD CONSTRAINT FK_ORGHR_USGUSREC FOREIGN KEY ( RECORD_HR_DB_ID, RECORD_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE UTL_FILE_IMPORT ADD CONSTRAINT FK_ORGHR_UTLFILEIMPORT FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) NOT DEFERRABLE ;

ALTER TABLE WARRANTY_EVAL ADD CONSTRAINT FK_ORGHR_WARRANTYEVAL FOREIGN KEY ( REJECT_HR_DB_ID, REJECT_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE WF_LEVEL ADD CONSTRAINT FK_ORGHR_WFLEVEL FOREIGN KEY ( LEVEL_HR_DB_ID, LEVEL_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE WF_DEFN_LEVEL_HR ADD CONSTRAINT FK_ORGHR_WFLEVELHR FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_PO_TYPE ADD CONSTRAINT FK_ORGORGVENDOR_ORGVENPOTYPE FOREIGN KEY ( ORG_DB_ID, ORG_ID, VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_ORG_VENDOR ( ORG_DB_ID, ORG_ID, VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_SERVICE_TYPE ADD CONSTRAINT FK_ORGORGVEN_ORGVENSRVTYPE FOREIGN KEY ( ORG_DB_ID, ORG_ID, VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_ORG_VENDOR ( ORG_DB_ID, ORG_ID, VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE ORG_ORG ADD CONSTRAINT FK_ORGORG_COMPANY_ORGORG FOREIGN KEY ( COMPANY_ORG_DB_ID, COMPANY_ORG_ID ) REFERENCES ORG_ORG ( ORG_DB_ID, ORG_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_ORG ADD CONSTRAINT FK_ORGORG_INVLOCORG FOREIGN KEY ( ORG_DB_ID, ORG_ID ) REFERENCES ORG_ORG ( ORG_DB_ID, ORG_ID ) DEFERRABLE ;

ALTER TABLE INV_OWNER ADD CONSTRAINT FK_ORGORG_INVOWNER FOREIGN KEY ( ORG_DB_ID, ORG_ID ) REFERENCES ORG_ORG ( ORG_DB_ID, ORG_ID ) DEFERRABLE ;

ALTER TABLE ORG_ORG ADD CONSTRAINT FK_ORGORG_NHORGORG FOREIGN KEY ( NH_ORG_DB_ID, NH_ORG_ID ) REFERENCES ORG_ORG ( ORG_DB_ID, ORG_ID ) DEFERRABLE ;

ALTER TABLE ORG_ADDRESS_LIST ADD CONSTRAINT FK_ORGORG_ORGADDRESSLIST FOREIGN KEY ( ORG_DB_ID, ORG_ID ) REFERENCES ORG_ORG ( ORG_DB_ID, ORG_ID ) DEFERRABLE ;

ALTER TABLE ORG_CARRIER ADD CONSTRAINT FK_ORGORG_ORGCARRIER FOREIGN KEY ( ORG_DB_ID, ORG_ID ) REFERENCES ORG_ORG ( ORG_DB_ID, ORG_ID ) DEFERRABLE ;

ALTER TABLE ORG_CONTACT_LIST ADD CONSTRAINT FK_ORGORG_ORGCONTACT FOREIGN KEY ( ORG_DB_ID, ORG_ID ) REFERENCES ORG_ORG ( ORG_DB_ID, ORG_ID ) DEFERRABLE ;

ALTER TABLE ORG_DB ADD CONSTRAINT FK_ORGORG_ORGDB FOREIGN KEY ( ORG_DB_ID, ORG_ID ) REFERENCES ORG_ORG ( ORG_DB_ID, ORG_ID ) DEFERRABLE ;

ALTER TABLE ORG_LABOUR_SKILL_MAP ADD CONSTRAINT FK_ORGORG_ORGLBRSKILLMAP FOREIGN KEY ( ORG_DB_ID, ORG_ID ) REFERENCES ORG_ORG ( ORG_DB_ID, ORG_ID ) DEFERRABLE ;

ALTER TABLE ORG_LOGO ADD CONSTRAINT FK_ORGORG_ORGLOGO FOREIGN KEY ( ORG_DB_ID, ORG_ID ) REFERENCES ORG_ORG ( ORG_DB_ID, ORG_ID ) DEFERRABLE ;

ALTER TABLE ORG_ORG_HR ADD CONSTRAINT FK_ORGORG_ORGORGHR FOREIGN KEY ( ORG_DB_ID, ORG_ID ) REFERENCES ORG_ORG ( ORG_DB_ID, ORG_ID ) DEFERRABLE ;

ALTER TABLE ORG_ORG_LOC ADD CONSTRAINT FK_ORGORG_ORGORGLOC FOREIGN KEY ( ORG_DB_ID, ORG_ID ) REFERENCES ORG_ORG ( ORG_DB_ID, ORG_ID ) DEFERRABLE ;

ALTER TABLE ORG_ORG_VENDOR ADD CONSTRAINT FK_ORGORG_ORGORGVENDOR FOREIGN KEY ( ORG_DB_ID, ORG_ID ) REFERENCES ORG_ORG ( ORG_DB_ID, ORG_ID ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_ORGORG_POHEADER FOREIGN KEY ( ORG_DB_ID, ORG_ID ) REFERENCES ORG_ORG ( ORG_DB_ID, ORG_ID ) DEFERRABLE ;

ALTER TABLE ORG_SUBORG_CACHE ADD CONSTRAINT FK_ORGORG_SUBORGCACHE_PARENT FOREIGN KEY ( ORG_DB_ID, ORG_ID ) REFERENCES ORG_ORG ( ORG_DB_ID, ORG_ID ) DEFERRABLE ;

ALTER TABLE ORG_SUBORG_CACHE ADD CONSTRAINT FK_ORGORG_SUBORGCACHE_SUBORG FOREIGN KEY ( SUB_ORG_DB_ID, SUB_ORG_ID ) REFERENCES ORG_ORG ( ORG_DB_ID, ORG_ID ) DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_ORGORG_TASKTASK FOREIGN KEY ( ORG_DB_ID, ORG_ID ) REFERENCES ORG_ORG ( ORG_DB_ID, ORG_ID ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_ORGVENDORACCNT_POHEADER FOREIGN KEY ( VENDOR_ACCOUNT_DB_ID, VENDOR_ACCOUNT_ID, VENDOR_ACCOUNT_CD ) REFERENCES ORG_VENDOR_ACCOUNT ( VENDOR_DB_ID, VENDOR_ID, ACCOUNT_CD ) DEFERRABLE ;

ALTER TABLE PO_INVOICE ADD CONSTRAINT FK_ORGVENDORACCOUNT_POINVOICE FOREIGN KEY ( VENDOR_ACCOUNT_DB_ID, VENDOR_ACCOUNT_ID, VENDOR_ACCOUNT_CD ) REFERENCES ORG_VENDOR_ACCOUNT ( VENDOR_DB_ID, VENDOR_ID, ACCOUNT_CD ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_ORGVENDOR_BROKPOHEADER FOREIGN KEY ( BROKER_DB_ID, BROKER_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE CHARGE_VENDOR ADD CONSTRAINT FK_ORGVENDOR_CHARGEVENDOR FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE CLAIM ADD CONSTRAINT FK_ORGVENDOR_CLAIM FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR_REP ADD CONSTRAINT FK_ORGVENDOR_EQPRTVENDOR FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE EVT_VENDOR ADD CONSTRAINT FK_ORGVENDOR_EVTVENDOR FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_ORGVENDOR_INVINV FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC ADD CONSTRAINT FK_ORGVENDOR_INVLOC FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE ORG_ORG_VENDOR ADD CONSTRAINT FK_ORGVENDOR_ORGORGVENDOR FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_SPEC2K_CMND ADD CONSTRAINT FK_ORGVENDOR_ORGVENS2KCMD FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR_EXCHG ADD CONSTRAINT FK_ORGVENDOR_PARTVENDORXCHG FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_ORGVENDOR_POHEADER FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE PO_INVOICE ADD CONSTRAINT FK_ORGVENDOR_POINVOICE FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_ORGVENDOR_REQPART FOREIGN KEY ( PO_VENDOR_DB_ID, PO_VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE RFQ_LINE_VENDOR ADD CONSTRAINT FK_ORGVENDOR_RFQLINEVENDOR FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE RFQ_VENDOR ADD CONSTRAINT FK_ORGVENDOR_RFQVENDOR FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE SCHED_STASK ADD CONSTRAINT FK_ORGVENDOR_SCHEDSTASK FOREIGN KEY ( RO_VENDOR_DB_ID, RO_VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE TAX_VENDOR ADD CONSTRAINT FK_ORGVENDOR_TAXVENDOR FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN ADD CONSTRAINT FK_ORGVENDOR_WARRANTYDEFN FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN_VENDOR_LIST ADD CONSTRAINT FK_ORGVENDOR_WARRANTYDEFNVENDO FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_ACCOUNT ADD CONSTRAINT FK_ORGVENDR_ORGVENDRACCOUNT FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_ATTACH ADD CONSTRAINT FK_ORGVENDR_ORGVNDRATTACH FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_AIRPORT ADD CONSTRAINT FK_ORGVEND_ORGVENDAIR FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE EVT_ORG_VENDOR_PO_TYPE ADD CONSTRAINT FK_ORGVENPOTYPE_EVTORGVENPO FOREIGN KEY ( ORG_DB_ID, ORG_ID, VENDOR_DB_ID, VENDOR_ID, PO_TYPE_DB_ID, PO_TYPE_CD ) REFERENCES ORG_VENDOR_PO_TYPE ( ORG_DB_ID, ORG_ID, VENDOR_DB_ID, VENDOR_ID, PO_TYPE_DB_ID, PO_TYPE_CD ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_SPEC2K_CMND ADD CONSTRAINT FK_ORGVENS2KCMD_REFS2KCMND FOREIGN KEY ( SPEC2K_CMND_DB_ID, SPEC2K_CMND_CD ) REFERENCES REF_SPEC2K_CMND ( SPEC2K_CMND_DB_ID, SPEC2K_CMND_CD ) DEFERRABLE ;

ALTER TABLE EVT_ORG_VENDOR_SERVICE_TYPE ADD CONSTRAINT FK_ORGVENSRVTYPE_EVTORGVENSR FOREIGN KEY ( ORG_DB_ID, ORG_ID, VENDOR_DB_ID, VENDOR_ID, SERVICE_TYPE_DB_ID, SERVICE_TYPE_CD ) REFERENCES ORG_VENDOR_SERVICE_TYPE ( ORG_DB_ID, ORG_ID, VENDOR_DB_ID, VENDOR_ID, SERVICE_TYPE_DB_ID, SERVICE_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR ADD CONSTRAINT FK_ORGVNDR_EQPPRTVENDOR FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_IETM ADD CONSTRAINT FK_ORGVNDR_ORFVENDIETM FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID ) REFERENCES ORG_VENDOR ( VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE ORG_CREW_SHIFT_PLAN ADD CONSTRAINT FK_ORGWKDEPT_OCSP FOREIGN KEY ( CREW_DB_ID, CREW_ID ) REFERENCES ORG_WORK_DEPT ( DEPT_DB_ID, DEPT_ID ) NOT DEFERRABLE ;

ALTER TABLE EVT_DEPT ADD CONSTRAINT FK_ORGWORKDEPT_EVTDEPT FOREIGN KEY ( DEPT_DB_ID, DEPT_ID ) REFERENCES ORG_WORK_DEPT ( DEPT_DB_ID, DEPT_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_DEPT ADD CONSTRAINT FK_ORGWORKDEPT_INVLOCDEPT FOREIGN KEY ( DEPT_DB_ID, DEPT_ID ) REFERENCES ORG_WORK_DEPT ( DEPT_DB_ID, DEPT_ID ) DEFERRABLE ;

ALTER TABLE ORG_DEPT_HR ADD CONSTRAINT FK_ORGWORKDEPT_ORGDEPTHR FOREIGN KEY ( DEPT_DB_ID, DEPT_ID ) REFERENCES ORG_WORK_DEPT ( DEPT_DB_ID, DEPT_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_SHIFT_PLAN ADD CONSTRAINT FK_ORGWORKDEPT_ORGHRSHIFT FOREIGN KEY ( CREW_DB_ID, CREW_ID ) REFERENCES ORG_WORK_DEPT ( DEPT_DB_ID, DEPT_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_SHIFT ADD CONSTRAINT FK_ORGWORKDEPT_ORGHRSHIFT1 FOREIGN KEY ( CREW_DB_ID, CREW_ID ) REFERENCES ORG_WORK_DEPT ( DEPT_DB_ID, DEPT_ID ) NOT DEFERRABLE ;

ALTER TABLE PPC_CREW ADD CONSTRAINT FK_ORGWORKDEPT_PPCCREW FOREIGN KEY ( DEPT_DB_ID, DEPT_ID ) REFERENCES ORG_WORK_DEPT ( DEPT_DB_ID, DEPT_ID ) DEFERRABLE ;

ALTER TABLE QUAR_ACTION_ASSIGNMENT ADD CONSTRAINT FK_ORGWORKDEPT_QUARACTNASSIGN FOREIGN KEY ( DEPT_DB_ID, DEPT_ID ) REFERENCES ORG_WORK_DEPT ( DEPT_DB_ID, DEPT_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_INV_RECOUNT ADD CONSTRAINT FK_ORG_HR_INVLOCINVRECOUNT FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC_PART_COUNT ADD CONSTRAINT FK_ORG_HR_INVLOCPARTCOUNT FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE LRP_PLAN_CONFIG ADD CONSTRAINT FK_OUTOFSEQSEV_LRPPLANCONF FOREIGN KEY ( OUTOFSEQ_SEV_DB_ID, OUTOFSEQ_SEV_CD ) REFERENCES REF_LRP_CONFIG_SEV ( LRP_CONFIG_SEV_DB_ID, LRP_CONFIG_SEV_CD ) DEFERRABLE ;

ALTER TABLE LRP_PLAN_CONFIG ADD CONSTRAINT FK_OVERDUESEV_LRPPLANCONFIG FOREIGN KEY ( OVERDUE_SEV_DB_ID, OVERDUE_SEV_CD ) REFERENCES REF_LRP_CONFIG_SEV ( LRP_CONFIG_SEV_DB_ID, LRP_CONFIG_SEV_CD ) DEFERRABLE ;

ALTER TABLE LRP_PLAN_CONFIG ADD CONSTRAINT FK_OVERFLOWSEV_LRPPLANCONFIG FOREIGN KEY ( OVERFLOW_SEV_DB_ID, OVERFLOW_SEV_CD ) REFERENCES REF_LRP_CONFIG_SEV ( LRP_CONFIG_SEV_DB_ID, LRP_CONFIG_SEV_CD ) DEFERRABLE ;

ALTER TABLE LRP_PLAN_CONFIG ADD CONSTRAINT FK_OVERLAPSEV_LRPPLANCONFIG FOREIGN KEY ( OVERLAP_SEV_DB_ID, OVERLAP_SEV_CD ) REFERENCES REF_LRP_CONFIG_SEV ( LRP_CONFIG_SEV_DB_ID, LRP_CONFIG_SEV_CD ) DEFERRABLE ;

ALTER TABLE LRP_PLAN_CONFIG ADD CONSTRAINT FK_OVERRUNBKTS_LRPPLANCONFIG FOREIGN KEY ( OVERRUNBKTS_SEV_DB_ID, OVERRUNBKTS_SEV_CD ) REFERENCES REF_LRP_CONFIG_SEV ( LRP_CONFIG_SEV_DB_ID, LRP_CONFIG_SEV_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR_EXCHG_LOC ADD CONSTRAINT FK_PARTVENDORXCHG_PARTVENDORXC FOREIGN KEY ( VENDOR_DB_ID, VENDOR_ID, PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_VENDOR_EXCHG ( VENDOR_DB_ID, VENDOR_ID, PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE LRP_PLAN_CONFIG ADD CONSTRAINT FK_PLANAFTMAXYDSEV_LRPPLANCONF FOREIGN KEY ( PLANAFTMAXYD_SEV_DB_ID, PLANAFTMAXYD_SEV_CD ) REFERENCES REF_LRP_CONFIG_SEV ( LRP_CONFIG_SEV_DB_ID, LRP_CONFIG_SEV_CD ) DEFERRABLE ;

ALTER TABLE LRP_PLAN_CONFIG ADD CONSTRAINT FK_PLANBFOREMINYDSEV_LRPPLANCO FOREIGN KEY ( PLANBFOREMINYD_SEV_DB_ID, PLANBFOREMINYD_SEV_CD ) REFERENCES REF_LRP_CONFIG_SEV ( LRP_CONFIG_SEV_DB_ID, LRP_CONFIG_SEV_CD ) DEFERRABLE ;

ALTER TABLE PPC_PLANNING_TYPE_SKILL ADD CONSTRAINT FK_PLNTYPSKILL_RFLBRSKLL FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE UTL_PERM_MATRIX ADD CONSTRAINT FK_PMATRIXCELL_PMATRIX FOREIGN KEY ( MATRIX_COLUMN_ID ) REFERENCES UTL_PERM_MATRIX_COLUMN ( MATRIX_COLUMN_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM_MATRIX_ROW ADD CONSTRAINT FK_PMATRIXHEADER_PMATRIXROW FOREIGN KEY ( MATRIX_ID ) REFERENCES UTL_PERM_MATRIX_HEADER ( MATRIX_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM ADD CONSTRAINT FK_PMATRIXHEADER_UTLPERM FOREIGN KEY ( MATRIX_ID ) REFERENCES UTL_PERM_MATRIX_HEADER ( MATRIX_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM_MATRIX ADD CONSTRAINT FK_PMATRIXROW_PMATRIX FOREIGN KEY ( MATRIX_ROW_ID ) REFERENCES UTL_PERM_MATRIX_ROW ( MATRIX_ROW_ID ) DEFERRABLE ;

ALTER TABLE INV_CSGN_XCHG ADD CONSTRAINT FK_POHEADER_INVCSGNXCHG FOREIGN KEY ( PO_DB_ID, PO_ID ) REFERENCES PO_HEADER ( PO_DB_ID, PO_ID ) DEFERRABLE ;

ALTER TABLE PO_AUTH ADD CONSTRAINT FK_POHEADER_POAUTH FOREIGN KEY ( PO_DB_ID, PO_ID ) REFERENCES PO_HEADER ( PO_DB_ID, PO_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE ADD CONSTRAINT FK_POHEADER_POLINE FOREIGN KEY ( PO_DB_ID, PO_ID ) REFERENCES PO_HEADER ( PO_DB_ID, PO_ID ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT ADD CONSTRAINT FK_POHEADER_SHIPSHIPMENT FOREIGN KEY ( PO_DB_ID, PO_ID ) REFERENCES PO_HEADER ( PO_DB_ID, PO_ID ) DEFERRABLE ;

ALTER TABLE PO_INVOICE_LINE_CHARGE ADD CONSTRAINT FK_POINVCLIN_POINVLINCHG FOREIGN KEY ( PO_INVOICE_DB_ID, PO_INVOICE_ID, PO_INVOICE_LINE_ID ) REFERENCES PO_INVOICE_LINE ( PO_INVOICE_DB_ID, PO_INVOICE_ID, PO_INVOICE_LINE_ID ) DEFERRABLE ;

ALTER TABLE FNC_XACTION_LOG ADD CONSTRAINT FK_POINVOICELINE_FNCXACTNLOG FOREIGN KEY ( PO_INVOICE_DB_ID, PO_INVOICE_ID, PO_INVOICE_LINE_ID ) REFERENCES PO_INVOICE_LINE ( PO_INVOICE_DB_ID, PO_INVOICE_ID, PO_INVOICE_LINE_ID ) DEFERRABLE ;

ALTER TABLE PO_INVOICE_LINE_MAP ADD CONSTRAINT FK_POINVOICELINE_POINVLINEMAP FOREIGN KEY ( PO_INVOICE_DB_ID, PO_INVOICE_ID, PO_INVOICE_LINE_ID ) REFERENCES PO_INVOICE_LINE ( PO_INVOICE_DB_ID, PO_INVOICE_ID, PO_INVOICE_LINE_ID ) DEFERRABLE ;

ALTER TABLE PO_INVOICE_LINE_TAX ADD CONSTRAINT FK_POINVOICELINE_POINVLINETAX FOREIGN KEY ( PO_INVOICE_DB_ID, PO_INVOICE_ID, PO_INVOICE_LINE_ID ) REFERENCES PO_INVOICE_LINE ( PO_INVOICE_DB_ID, PO_INVOICE_ID, PO_INVOICE_LINE_ID ) DEFERRABLE ;

ALTER TABLE PO_INVOICE_LINE ADD CONSTRAINT FK_POINVOICE_POINVOICELINE FOREIGN KEY ( PO_INVOICE_DB_ID, PO_INVOICE_ID ) REFERENCES PO_INVOICE ( PO_INVOICE_DB_ID, PO_INVOICE_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE_KIT_LINE ADD CONSTRAINT FK_POLINEKITLINE_SHIPMENT FOREIGN KEY ( RETURN_SHIPMENT_DB_ID, RETURN_SHIPMENT_ID ) REFERENCES SHIP_SHIPMENT ( SHIPMENT_DB_ID, SHIPMENT_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CONSTRAINT FK_POLINE_EQPPARTROTABLE FOREIGN KEY ( PO_DB_ID, PO_ID, PO_LINE_ID ) REFERENCES PO_LINE ( PO_DB_ID, PO_ID, PO_LINE_ID ) DEFERRABLE ;

ALTER TABLE FNC_XACTION_LOG ADD CONSTRAINT FK_POLINE_FNCXACTLOG FOREIGN KEY ( PO_DB_ID, PO_ID, PO_LINE_ID ) REFERENCES PO_LINE ( PO_DB_ID, PO_ID, PO_LINE_ID ) DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_POLINE_INVINV FOREIGN KEY ( PO_DB_ID, PO_ID, PO_LINE_ID ) REFERENCES PO_LINE ( PO_DB_ID, PO_ID, PO_LINE_ID ) DEFERRABLE ;

ALTER TABLE PO_INVOICE_LINE_MAP ADD CONSTRAINT FK_POLINE_POINVOICELINEMAP FOREIGN KEY ( PO_DB_ID, PO_ID, PO_LINE_ID ) REFERENCES PO_LINE ( PO_DB_ID, PO_ID, PO_LINE_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE_ACCOUNT ADD CONSTRAINT FK_POLINE_POLINEACCOUNT FOREIGN KEY ( PO_DB_ID, PO_ID, PO_LINE_ID ) REFERENCES PO_LINE ( PO_DB_ID, PO_ID, PO_LINE_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE_CHARGE ADD CONSTRAINT FK_POLINE_POLINECHARGE FOREIGN KEY ( PO_DB_ID, PO_ID, PO_LINE_ID ) REFERENCES PO_LINE ( PO_DB_ID, PO_ID, PO_LINE_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE_KIT_LINE ADD CONSTRAINT FK_POLINE_POLINEKITLINE FOREIGN KEY ( PO_DB_ID, PO_ID, PO_LINE_ID ) REFERENCES PO_LINE ( PO_DB_ID, PO_ID, PO_LINE_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE_TAX ADD CONSTRAINT FK_POLINE_POLINETAX FOREIGN KEY ( PO_DB_ID, PO_ID, PO_LINE_ID ) REFERENCES PO_LINE ( PO_DB_ID, PO_ID, PO_LINE_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE_WARRANTY ADD CONSTRAINT FK_POLINE_POLINEWARRANTY FOREIGN KEY ( PO_DB_ID, PO_ID, PO_LINE_ID ) REFERENCES PO_LINE ( PO_DB_ID, PO_ID, PO_LINE_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE_RETURN_MAP ADD CONSTRAINT FK_POLINE_POLRTRN FOREIGN KEY ( PO_DB_ID, PO_ID, PO_LINE_ID ) REFERENCES PO_LINE ( PO_DB_ID, PO_ID, PO_LINE_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_POLINE_REQPART FOREIGN KEY ( PO_DB_ID, PO_ID, PO_LINE_ID ) REFERENCES PO_LINE ( PO_DB_ID, PO_ID, PO_LINE_ID ) DEFERRABLE ;

ALTER TABLE RFQ_LINE ADD CONSTRAINT FK_POLINE_RFQLINE FOREIGN KEY ( PO_DB_ID, PO_ID, PO_LINE_ID ) REFERENCES PO_LINE ( PO_DB_ID, PO_ID, PO_LINE_ID ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT_LINE ADD CONSTRAINT FK_POLINE_SHIPSHIPMENTLINE FOREIGN KEY ( PO_DB_ID, PO_ID, PO_LINE_ID ) REFERENCES PO_LINE ( PO_DB_ID, PO_ID, PO_LINE_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_POWER_ENG_UNIT_EQPPARTNO FOREIGN KEY ( POWER_ENG_UNIT_DB_ID, POWER_ENG_UNIT_CD ) REFERENCES REF_ENG_UNIT ( ENG_UNIT_DB_ID, ENG_UNIT_CD ) DEFERRABLE ;

ALTER TABLE PO_LINE_MP ADD CONSTRAINT FK_PO_LINE_POLINEMP FOREIGN KEY ( PO_DB_ID, PO_ID, PO_LINE_ID ) REFERENCES PO_LINE ( PO_DB_ID, PO_ID, PO_LINE_ID ) NOT DEFERRABLE ;

ALTER TABLE PPC_ACTIVITY ADD CONSTRAINT FK_PPCACTIVITYTYPE_PPCACTVTY FOREIGN KEY ( PPC_ACTIVITY_TYPE_DB_ID, PPC_ACTIVITY_TYPE_CD ) REFERENCES REF_PPC_ACTIVITY_TYPE ( PPC_ACTIVITY_TYPE_DB_ID, PPC_ACTIVITY_TYPE_CD ) DEFERRABLE ;

ALTER TABLE PPC_MILESTONE ADD CONSTRAINT FK_PPCACTIVITY_PPCMILESTONE FOREIGN KEY ( MILESTONE_ID ) REFERENCES PPC_ACTIVITY ( ACTIVITY_ID ) DEFERRABLE ;

ALTER TABLE PPC_PHASE ADD CONSTRAINT FK_PPCACTIVITY_PPCPHASE FOREIGN KEY ( PHASE_ID ) REFERENCES PPC_ACTIVITY ( ACTIVITY_ID ) DEFERRABLE ;

ALTER TABLE PPC_TASK ADD CONSTRAINT FK_PPCACTIVITY_PPCTASK FOREIGN KEY ( TASK_ID ) REFERENCES PPC_ACTIVITY ( ACTIVITY_ID ) DEFERRABLE ;

ALTER TABLE PPC_WORK_AREA ADD CONSTRAINT FK_PPCACTIVITY_PPCWORKAREA FOREIGN KEY ( WORK_AREA_ID ) REFERENCES PPC_ACTIVITY ( ACTIVITY_ID ) DEFERRABLE ;

ALTER TABLE PPC_HR_SHIFT_PLAN ADD CONSTRAINT FK_PPCCREW_PPCHRSHFTPLN FOREIGN KEY ( CREW_ID ) REFERENCES PPC_CREW ( CREW_ID ) DEFERRABLE ;

ALTER TABLE PPC_TASK ADD CONSTRAINT FK_PPCCREW_PPCTASK FOREIGN KEY ( CREW_ID ) REFERENCES PPC_CREW ( CREW_ID ) DEFERRABLE ;

ALTER TABLE PPC_WORK_AREA_CREW ADD CONSTRAINT FK_PPCCREW_PPCWRKAREACRW FOREIGN KEY ( CREW_ID ) REFERENCES PPC_CREW ( CREW_ID ) DEFERRABLE ;

ALTER TABLE PPC_HR_LIC ADD CONSTRAINT FK_PPCHRSHFTPLN_PPCHRLIC FOREIGN KEY ( HUMAN_RESOURCE_SHIFT_ID ) REFERENCES PPC_HR_SHIFT_PLAN ( HUMAN_RESOURCE_SHIFT_ID ) DEFERRABLE ;

ALTER TABLE PPC_HR_SLOT ADD CONSTRAINT FK_PPCHRSHIFTPLAN_PPCHRSLOT FOREIGN KEY ( HUMAN_RESOURCE_SHIFT_ID ) REFERENCES PPC_HR_SHIFT_PLAN ( HUMAN_RESOURCE_SHIFT_ID ) DEFERRABLE ;

ALTER TABLE PPC_HR_SHIFT_PLAN ADD CONSTRAINT FK_PPCHR_PPCHRSHFTPLN FOREIGN KEY ( HUMAN_RESOURCE_ID ) REFERENCES PPC_HR ( HUMAN_RESOURCE_ID ) DEFERRABLE ;

ALTER TABLE PPC_LABOUR_ROLE ADD CONSTRAINT FK_PPCLABOUR_ROLE FOREIGN KEY ( LABOUR_ID ) REFERENCES PPC_LABOUR ( LABOUR_ID ) DEFERRABLE ;

ALTER TABLE PPC_HR_SLOT ADD CONSTRAINT FK_PPCLABROLE_PPCHRSLOT FOREIGN KEY ( LABOUR_ROLE_ID ) REFERENCES PPC_LABOUR_ROLE ( LABOUR_ROLE_ID ) DEFERRABLE ;

ALTER TABLE PPC_HR_SHIFT_PLAN ADD CONSTRAINT FK_PPCLOCCAP_PPCHRSHFTPLN FOREIGN KEY ( CAPACITY_ID ) REFERENCES PPC_LOC_CAPACITY ( LOCATION_CAPACITY_ID ) DEFERRABLE ;

ALTER TABLE PPC_CREW ADD CONSTRAINT FK_PPCLOC_PPCCREW FOREIGN KEY ( LOCATION_ID ) REFERENCES PPC_LOC ( LOCATION_ID ) DEFERRABLE ;

ALTER TABLE PPC_HR_SHIFT_PLAN ADD CONSTRAINT FK_PPCLOC_PPCHRSHFTPLN FOREIGN KEY ( LOCATION_ID ) REFERENCES PPC_LOC ( LOCATION_ID ) DEFERRABLE ;

ALTER TABLE PPC_LOC_CAPACITY ADD CONSTRAINT FK_PPCLOC_PPCLOCCAP FOREIGN KEY ( LOCATION_ID ) REFERENCES PPC_LOC ( LOCATION_ID ) DEFERRABLE ;

ALTER TABLE PPC_MILESTONE_COND ADD CONSTRAINT FK_PPCMILESTONE_PPCMILESTONECO FOREIGN KEY ( MILESTONE_ID ) REFERENCES PPC_MILESTONE ( MILESTONE_ID ) DEFERRABLE ;

ALTER TABLE PPC_PHASE_CLASS ADD CONSTRAINT FK_PPCPHASE_PPCPHASECLASS FOREIGN KEY ( PHASE_ID ) REFERENCES PPC_PHASE ( PHASE_ID ) DEFERRABLE ;

ALTER TABLE PPC_TASK ADD CONSTRAINT FK_PPCPHASE_PPCTASK FOREIGN KEY ( PHASE_ID ) REFERENCES PPC_PHASE ( PHASE_ID ) DEFERRABLE ;

ALTER TABLE PPC_PLAN ADD CONSTRAINT FK_PPCPLAN_AUTHUSER FOREIGN KEY ( AUTH_USER_ID ) REFERENCES UTL_USER ( USER_ID ) DEFERRABLE ;

ALTER TABLE PPC_PLAN ADD CONSTRAINT FK_PPCPLAN_EDITUSER FOREIGN KEY ( EDIT_USER_ID ) REFERENCES UTL_USER ( USER_ID ) DEFERRABLE ;

ALTER TABLE PPC_HR ADD CONSTRAINT FK_PPCPLAN_PPCHR FOREIGN KEY ( PLAN_ID ) REFERENCES PPC_PLAN ( PLAN_ID ) DEFERRABLE ;

ALTER TABLE PPC_LOC ADD CONSTRAINT FK_PPCPLAN_PPCLOC FOREIGN KEY ( PLAN_ID ) REFERENCES PPC_PLAN ( PLAN_ID ) DEFERRABLE ;

ALTER TABLE PPC_LOC_EXCLUDE ADD CONSTRAINT FK_PPCPLAN_PPCLOCEX FOREIGN KEY ( PLAN_ID ) REFERENCES PPC_PLAN ( PLAN_ID ) DEFERRABLE ;

ALTER TABLE PPC_OPT_STATUS ADD CONSTRAINT FK_PPCPLAN_PPCOPTSTAT FOREIGN KEY ( PLAN_ID ) REFERENCES PPC_PLAN ( PLAN_ID ) DEFERRABLE ;

ALTER TABLE PPC_WP ADD CONSTRAINT FK_PPCPLAN_PPCWP FOREIGN KEY ( PLAN_ID ) REFERENCES PPC_PLAN ( PLAN_ID ) DEFERRABLE ;

ALTER TABLE PPC_PLANNING_TYPE_SKILL ADD CONSTRAINT FK_PPCPLNTYP_PLNTYPSKILL FOREIGN KEY ( WORK_PACKAGE_ID, PLANNING_TYPE_DB_ID, PLANNING_TYPE_ID ) REFERENCES PPC_PLANNING_TYPE ( WORK_PACKAGE_ID, PLANNING_TYPE_DB_ID, PLANNING_TYPE_ID ) DEFERRABLE ;

ALTER TABLE PPC_PUBLISH_FAILURE ADD CONSTRAINT FK_PPCPUBLISH_PUBFAILURE FOREIGN KEY ( WORK_PACKAGE_ID ) REFERENCES PPC_PUBLISH ( WORK_PACKAGE_ID ) DEFERRABLE ;

ALTER TABLE PPC_TASK_DEFN_MAP ADD CONSTRAINT FK_PPCTASKDEFN_PPCTASKDEFNMAP FOREIGN KEY ( TASK_DEFINITION_ID ) REFERENCES PPC_TASK_DEFN ( TASK_DEFINITION_ID ) DEFERRABLE ;

ALTER TABLE PPC_LABOUR ADD CONSTRAINT FK_PPCTASK_PPCLABOUR FOREIGN KEY ( TASK_ID ) REFERENCES PPC_TASK ( TASK_ID ) DEFERRABLE ;

ALTER TABLE PPC_MPC_TEMPLATE_TASK ADD CONSTRAINT FK_PPCTASK_PPCMPCTMPLTSK FOREIGN KEY ( TASK_ID ) REFERENCES PPC_TASK ( TASK_ID ) NOT DEFERRABLE ;

ALTER TABLE PPC_PUBLISH_FAILURE ADD CONSTRAINT FK_PPCTASK_PPCPUBLISHFAILURE FOREIGN KEY ( TASK_ID ) REFERENCES PPC_TASK ( TASK_ID ) DEFERRABLE ;

ALTER TABLE PPC_TASK_DEFN_MAP ADD CONSTRAINT FK_PPCTASK_PPCTASKDEFNMAP FOREIGN KEY ( TASK_ID ) REFERENCES PPC_TASK ( TASK_ID ) DEFERRABLE ;

ALTER TABLE PPC_WP ADD CONSTRAINT FK_PPCTEMPLATE_PPCWP FOREIGN KEY ( TEMPLATE_ID ) REFERENCES PPC_PLAN ( PLAN_ID ) DEFERRABLE ;

ALTER TABLE PPC_TASK ADD CONSTRAINT FK_PPCWORKAREA_PPCTASK FOREIGN KEY ( WORK_AREA_ID ) REFERENCES PPC_WORK_AREA ( WORK_AREA_ID ) DEFERRABLE ;

ALTER TABLE PPC_WORK_AREA_ZONE ADD CONSTRAINT FK_PPCWORKAREA_PPCWORKAREAZONE FOREIGN KEY ( WORK_AREA_ID ) REFERENCES PPC_WORK_AREA ( WORK_AREA_ID ) DEFERRABLE ;

ALTER TABLE PPC_ACTVTY_SNAPSHOT ADD CONSTRAINT FK_PPCWPSNAPSHT_PPCACTSNAPSHT FOREIGN KEY ( WP_SNAPSHOT_ID ) REFERENCES PPC_WP_SNAPSHOT ( WP_SNAPSHOT_ID ) DEFERRABLE ;

ALTER TABLE PPC_WP ADD CONSTRAINT FK_PPCWP_CONTROLUSER FOREIGN KEY ( CONTROL_USER_ID ) REFERENCES UTL_USER ( ALT_ID ) DEFERRABLE ;

ALTER TABLE PPC_PLANNING_TYPE ADD CONSTRAINT FK_PPCWP_PLANNINGTYPE FOREIGN KEY ( WORK_PACKAGE_ID ) REFERENCES PPC_WP ( WORK_PACKAGE_ID ) DEFERRABLE ;

ALTER TABLE PPC_ACTIVITY ADD CONSTRAINT FK_PPCWP_PPCACTIVITY FOREIGN KEY ( WORK_PACKAGE_ID ) REFERENCES PPC_WP ( WORK_PACKAGE_ID ) DEFERRABLE ;

ALTER TABLE PPC_PUBLISH ADD CONSTRAINT FK_PPCWP_PPCPUBLISH FOREIGN KEY ( WORK_PACKAGE_ID ) REFERENCES PPC_WP ( WORK_PACKAGE_ID ) DEFERRABLE ;

ALTER TABLE PPC_TASK_DEFN ADD CONSTRAINT FK_PPCWP_TASKDEFN FOREIGN KEY ( WORK_PACKAGE_ID ) REFERENCES PPC_WP ( WORK_PACKAGE_ID ) DEFERRABLE ;

ALTER TABLE PPC_WORK_AREA_CREW ADD CONSTRAINT FK_PPCWRKAREA_PPCWRKAREACRW FOREIGN KEY ( WORK_AREA_ID ) REFERENCES PPC_WORK_AREA ( WORK_AREA_ID ) DEFERRABLE ;

ALTER TABLE PPC_TASK_PANEL ADD CONSTRAINT FK_PPC_TASK_PPC_TASK_PANEL FOREIGN KEY ( TASK_ID ) REFERENCES PPC_TASK ( TASK_ID ) NOT DEFERRABLE ;

ALTER TABLE LRP_PLAN_CONFIG ADD CONSTRAINT FK_PREFFECTDTSEV_LRPPLANCONF FOREIGN KEY ( PRIOREFFECTIVEDT_SEV_DB_ID, PRIOREFFECTIVEDT_SEV_CD ) REFERENCES REF_LRP_CONFIG_SEV ( LRP_CONFIG_SEV_DB_ID, LRP_CONFIG_SEV_CD ) DEFERRABLE ;

ALTER TABLE LRP_EVENT_WORKSCOPE ADD CONSTRAINT FK_PREVEVENTWORKSCOPE_EVENTWOR FOREIGN KEY ( PREV_WORKSCOPE_DB_ID, PREV_WORKSCOPE_ID ) REFERENCES LRP_EVENT_WORKSCOPE ( LRP_WORKSCOPE_DB_ID, LRP_WORKSCOPE_ID ) DEFERRABLE ;

ALTER TABLE LRP_PLAN ADD CONSTRAINT FK_PUBHR_LRPPLAN FOREIGN KEY ( PUB_HR_DB_ID, PUB_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE PUBSUB_CONFIG ADD CONSTRAINT FK_PUBSUB_CONFIG_MIM_DB FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE PUBSUB_CONFIG ADD CONSTRAINT FK_PUBSUB_CONFIG_MIM_DB_CR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE PUBSUB_CONFIG ADD CONSTRAINT FK_PUBSUB_CONFIG_MIM_RSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE PUBSUB_EVENT ADD CONSTRAINT FK_PUBSUB_EVENT_MIM_DB_CR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE PUBSUB_EVENT ADD CONSTRAINT FK_PUBSUB_EVENT_MIM_DB_RE FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE PUBSUB_EVENT ADD CONSTRAINT FK_PUBSUB_EVENT_PUBSUB_CHANNEL FOREIGN KEY ( PUBSUB_CHANNEL_ID ) REFERENCES PUBSUB_CHANNEL ( PUBSUB_CHANNEL_ID ) NOT DEFERRABLE ;

ALTER TABLE PUBSUB_EVENT ADD CONSTRAINT FK_PUBSUB_EVENT_RSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE PUBSUB_SUBSCRIBER ADD CONSTRAINT FK_PUBSUB_SUB_CHANNEL FOREIGN KEY ( PUBSUB_CHANNEL_ID ) REFERENCES PUBSUB_CHANNEL ( PUBSUB_CHANNEL_ID ) NOT DEFERRABLE ;

ALTER TABLE PUBSUB_SUBSCRIBER ADD CONSTRAINT FK_PUBSUB_SUB_MIM_DB_CR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE PUBSUB_SUBSCRIBER ADD CONSTRAINT FK_PUBSUB_SUB_MIM_DB_RE FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE PUBSUB_SUBSCRIBER ADD CONSTRAINT FK_PUBSUB_SUB_RSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE PUBSUB_TRANSACTION ADD CONSTRAINT FK_PUBSUB_TRANSSUB FOREIGN KEY ( PUBSUB_SUBSCRIBER_ID ) REFERENCES PUBSUB_SUBSCRIBER ( PUBSUB_SUBSCRIBER_ID ) NOT DEFERRABLE ;

ALTER TABLE PUBSUB_TRANSACTION ADD CONSTRAINT FK_PUBSUB_TRANS_EVENT FOREIGN KEY ( PUBSUB_EVENT_ID ) REFERENCES PUBSUB_EVENT ( PUBSUB_EVENT_ID ) NOT DEFERRABLE ;

ALTER TABLE PUBSUB_TRANSACTION ADD CONSTRAINT FK_PUBSUB_TRANS_MIM_DB_CR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE PUBSUB_TRANSACTION ADD CONSTRAINT FK_PUBSUB_TRANS_MIM_DB_RE FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE PUBSUB_TRANSACTION ADD CONSTRAINT FK_PUBSUB_TRANS_RSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE PUBSUB_EVENT_PROPERTIES ADD CONSTRAINT FK_PUBS_EVT_PROPS_PUBS_EVT FOREIGN KEY ( PUBSUB_EVENT_ID ) REFERENCES PUBSUB_EVENT ( PUBSUB_EVENT_ID ) ON
DELETE CASCADE NOT DEFERRABLE ;

ALTER TABLE PUBSUB_CHANNEL ADD CONSTRAINT FK_PUB_CHANNEL_MIM_DB_CR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE PUBSUB_CHANNEL ADD CONSTRAINT FK_PUB_CHANNEL_MIM_DB_RE FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE PUBSUB_CHANNEL ADD CONSTRAINT FK_PUB_CHANNEL_MIM_RSTAK FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE QUAR_ACTION_ASSIGNMENT ADD CONSTRAINT FK_QUARACTION_QUARACTNASSIGN FOREIGN KEY ( QUAR_DB_ID, QUAR_ID, QUAR_ACTION_ID ) REFERENCES QUAR_ACTION ( QUAR_DB_ID, QUAR_ID, QUAR_ACTION_ID ) DEFERRABLE ;

ALTER TABLE QUAR_ACTION_STATUS ADD CONSTRAINT FK_QUARACT_QUARACTSTATUS FOREIGN KEY ( QUAR_DB_ID, QUAR_ID, QUAR_ACTION_ID ) REFERENCES QUAR_ACTION ( QUAR_DB_ID, QUAR_ID, QUAR_ACTION_ID ) DEFERRABLE ;

ALTER TABLE QUAR_ACTION ADD CONSTRAINT FK_QUARQUAR_QUARACTION FOREIGN KEY ( QUAR_DB_ID, QUAR_ID ) REFERENCES QUAR_QUAR ( QUAR_DB_ID, QUAR_ID ) DEFERRABLE ;

ALTER TABLE LRP_PLAN_CONFIG ADD CONSTRAINT FK_READONLYSEV_LRPPLANCONFIG FOREIGN KEY ( READONLY_SEV_DB_ID, READONLY_SEV_CD ) REFERENCES REF_LRP_CONFIG_SEV ( LRP_CONFIG_SEV_DB_ID, LRP_CONFIG_SEV_CD ) DEFERRABLE ;

ALTER TABLE FNC_ACCOUNT ADD CONSTRAINT FK_REFACCNTTYP_FNCACCOUNT FOREIGN KEY ( ACCOUNT_TYPE_DB_ID, ACCOUNT_TYPE_CD ) REFERENCES REF_ACCOUNT_TYPE ( ACCOUNT_TYPE_DB_ID, ACCOUNT_TYPE_CD ) DEFERRABLE ;

ALTER TABLE AC_COND_SETTING ADD CONSTRAINT FK_REFACCOND_ACCONDSETTING FOREIGN KEY ( AC_COND_DB_ID, AC_COND_CD ) REFERENCES REF_AC_COND ( AC_COND_DB_ID, AC_COND_CD ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF_DEGRAD_CAP ADD CONSTRAINT FK_REFACFTCAPLEVEL_DEGRADCAP FOREIGN KEY ( CAP_LEVEL_DB_ID, CAP_LEVEL_CD, CAP_DB_ID, CAP_CD ) REFERENCES REF_ACFT_CAP_LEVEL ( ACFT_CAP_LEVEL_DB_ID, ACFT_CAP_LEVEL_CD, ACFT_CAP_DB_ID, ACFT_CAP_CD ) NOT DEFERRABLE ;

ALTER TABLE REF_ACFT_CAP_LEVEL ADD CONSTRAINT FK_REFACFTCAPLEV_REFACFTCAP FOREIGN KEY ( ACFT_CAP_DB_ID, ACFT_CAP_CD ) REFERENCES REF_ACFT_CAP ( ACFT_CAP_DB_ID, ACFT_CAP_CD ) DEFERRABLE ;

ALTER TABLE ASSMBL_CAP_LEVELS ADD CONSTRAINT FK_REFACFTCAPL_ASSEMBLCAPLS FOREIGN KEY ( ACFT_CAP_LEVEL_DB_ID, ACFT_CAP_LEVEL_CD, ACFT_CAP_DB_ID, ACFT_CAP_CD ) REFERENCES REF_ACFT_CAP_LEVEL ( ACFT_CAP_LEVEL_DB_ID, ACFT_CAP_LEVEL_CD, ACFT_CAP_DB_ID, ACFT_CAP_CD ) DEFERRABLE ;

ALTER TABLE ACFT_CAP_LEVELS ADD CONSTRAINT FK_REFACFTCAP_ACFTCAPLS FOREIGN KEY ( cap_db_id, cap_cd ) REFERENCES REF_ACFT_CAP ( ACFT_CAP_DB_ID, ACFT_CAP_CD ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF_DEGRAD_CAP ADD CONSTRAINT FK_REFACFTCAP_DEGRADCAP FOREIGN KEY ( CAP_DB_ID, CAP_CD ) REFERENCES REF_ACFT_CAP ( ACFT_CAP_DB_ID, ACFT_CAP_CD ) NOT DEFERRABLE ;

ALTER TABLE ORG_ADDRESS_LIST ADD CONSTRAINT FK_REFADDRESS_ORGADDRESSLIST FOREIGN KEY ( ADDRESS_DB_ID, ADDRESS_ID ) REFERENCES ORG_ADDRESS ( ADDRESS_DB_ID, ADDRESS_ID ) DEFERRABLE ;

ALTER TABLE EQP_ADVSRY ADD CONSTRAINT FK_REFADVSRYTYPE_EQPADVSRY FOREIGN KEY ( ADVSRY_TYPE_DB_ID, ADVSRY_TYPE_CD ) REFERENCES REF_ADVSRY_TYPE ( ADVSRY_TYPE_DB_ID, ADVSRY_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL ADD CONSTRAINT FK_REFASSMBLCLASS_EQPASSMBL FOREIGN KEY ( ASSMBL_CLASS_DB_ID, ASSMBL_CLASS_CD ) REFERENCES REF_ASSMBL_CLASS ( ASSMBL_CLASS_DB_ID, ASSMBL_CLASS_CD ) DEFERRABLE ;

ALTER TABLE EQP_ADVSRY_ATTACH ADD CONSTRAINT FK_REFATCHTYPE_EQPADVSRYATCH FOREIGN KEY ( ATTACH_TYPE_DB_ID, ATTACH_TYPE_CD ) REFERENCES REF_ATTACH_TYPE ( ATTACH_TYPE_DB_ID, ATTACH_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EVT_ATTACH ADD CONSTRAINT FK_REFATTACHTYPE_EVTATTACH FOREIGN KEY ( ATTACH_TYPE_DB_ID, ATTACH_TYPE_CD ) REFERENCES REF_ATTACH_TYPE ( ATTACH_TYPE_DB_ID, ATTACH_TYPE_CD ) DEFERRABLE ;

ALTER TABLE IETM_TOPIC ADD CONSTRAINT FK_REFATTACHTYPE_IETMTOPIC FOREIGN KEY ( ATTACH_TYPE_DB_ID, ATTACH_TYPE_CD ) REFERENCES REF_ATTACH_TYPE ( ATTACH_TYPE_DB_ID, ATTACH_TYPE_CD ) DEFERRABLE ;

ALTER TABLE INV_ATTACH ADD CONSTRAINT FK_REFATTACHTYPE_INVATTACH FOREIGN KEY ( ATTACH_TYPE_DB_ID, ATTACH_TYPE_CD ) REFERENCES REF_ATTACH_TYPE ( ATTACH_TYPE_DB_ID, ATTACH_TYPE_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_ATTACHMENT ADD CONSTRAINT FK_REFATTACHTYPE_ORGHRATTACHME FOREIGN KEY ( ATTACH_TYPE_DB_ID, ATTACH_TYPE_CD ) REFERENCES REF_ATTACH_TYPE ( ATTACH_TYPE_DB_ID, ATTACH_TYPE_CD ) DEFERRABLE ;

ALTER TABLE WARRANTY_ATTACH ADD CONSTRAINT FK_REFATTACHTYPE_WARRANTYATTAC FOREIGN KEY ( ATTACH_TYPE_DB_ID, ATTACH_TYPE_CD ) REFERENCES REF_ATTACH_TYPE ( ATTACH_TYPE_DB_ID, ATTACH_TYPE_CD ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_ATTACH ADD CONSTRAINT FK_REFATTATYPE_ORGVNRATTACH FOREIGN KEY ( ATTACH_TYPE_DB_ID, ATTACH_TYPE_CD ) REFERENCES REF_ATTACH_TYPE ( ATTACH_TYPE_DB_ID, ATTACH_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL ADD CONSTRAINT FK_REFBITMAP_EQPASSMBL FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_REFBITMAP_EQPPARTNO FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE EVT_EVENT ADD CONSTRAINT FK_REFBITMAP_EVTEVENT FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE FAIL_EFFECT ADD CONSTRAINT FK_REFBITMAP_FAILEFFECT FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE FAIL_MODE ADD CONSTRAINT FK_REFBITMAP_FAILMODE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE ORG_WORK_DEPT ADD CONSTRAINT FK_REFBITMAP_ORGWORKDEPT FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_ABC_CLASS ADD CONSTRAINT FK_REFBITMAP_REFABCCLASS FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_ASSMBL_CLASS ADD CONSTRAINT FK_REFBITMAP_REFASSMBLCLASS FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_BOM_CLASS ADD CONSTRAINT FK_REFBITMAP_REFBOMCLASS FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_COUNTRY ADD CONSTRAINT FK_REFBITMAP_REFCOUNTRY FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_CURRENCY ADD CONSTRAINT FK_REFBITMAP_REFCURRENCY FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_DATA_SOURCE ADD CONSTRAINT FK_REFBITMAP_REFDATASOURCE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_DATA_SOURCE_TYPE ADD CONSTRAINT FK_REFBITMAP_REFDATASOURCETYPE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_DEPT_TYPE ADD CONSTRAINT FK_REFBITMAP_REFDEPTTYPE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_EFFECT_SEV ADD CONSTRAINT FK_REFBITMAP_REFEFFECTSEV FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_ENG_UNIT ADD CONSTRAINT FK_REFBITMAP_REFENGUNIT FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_EVENT_REASON ADD CONSTRAINT FK_REFBITMAP_REFEVENTREASON FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_EVENT_STATUS ADD CONSTRAINT FK_REFBITMAP_REFEVENTSTATUS FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_EVENT_TYPE ADD CONSTRAINT FK_REFBITMAP_REFEVENTTYPE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_FAIL_CATGRY ADD CONSTRAINT FK_REFBITMAP_REFFAILCATGRY FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_FAIL_DEFER ADD CONSTRAINT FK_REFBITMAP_REFFAILDEFER FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_FAIL_EFFECT_TYPE ADD CONSTRAINT FK_REFBITMAP_REFFAILEFFECTTYPE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_FAIL_FACTOR ADD CONSTRAINT FK_REFBITMAP_REFFAILFACTOR FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_FAIL_PRIORITY ADD CONSTRAINT FK_REFBITMAP_REFFAILPRIORITY FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_FAIL_SEV ADD CONSTRAINT FK_REFBITMAP_REFFAILSEV FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_FAIL_TYPE ADD CONSTRAINT FK_REFBITMAP_REFFAILTYPE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_FAULT_SOURCE ADD CONSTRAINT FK_REFBITMAP_REFFAULTSOURCE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_FLIGHT_STAGE ADD CONSTRAINT FK_REFBITMAP_REFFLIGHTSTAGE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_FLIGHT_TYPE ADD CONSTRAINT FK_REFBITMAP_REFFLIGHTTYPE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_INV_CAPABILITY ADD CONSTRAINT FK_REFBITMAP_REFINVCAPABILITY FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_INV_CLASS ADD CONSTRAINT FK_REFBITMAP_REFINVCLASS FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_INV_COND ADD CONSTRAINT FK_REFBITMAP_REFINVCOND FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_INV_OPER ADD CONSTRAINT FK_REFBITMAP_REFINVOPER FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_LABOUR_STAGE ADD CONSTRAINT FK_REFBITMAP_REFLABOURSTAGE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_LABOUR_TIME ADD CONSTRAINT FK_REFBITMAP_REFLABOURTIME FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_LICENSE_TYPE ADD CONSTRAINT FK_REFBITMAP_REFLICENSETYPE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_LOC_TYPE ADD CONSTRAINT FK_REFBITMAP_REFLOCTYPE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_LOGBOOK_TYPE ADD CONSTRAINT FK_REFBITMAP_REFLOGBOOKTYPE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_LOGCARD_FORM ADD CONSTRAINT FK_REFBITMAP_REFLOGCARDFORM FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_PART_STATUS ADD CONSTRAINT FK_REFBITMAP_REFPARTSTATUS FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_PART_TYPE ADD CONSTRAINT FK_REFBITMAP_REFPARTTYPE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_PART_USE ADD CONSTRAINT FK_REFBITMAP_REFPARTUSE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_PAY_METHOD ADD CONSTRAINT FK_REFBITMAP_REFPAYMETHOD FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_PPC_PUBLISH_FAIL_TYPE ADD CONSTRAINT FK_REFBITMAP_REFPPCPUBLISHFAIL FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_PREC_PROC ADD CONSTRAINT FK_REFBITMAP_REFPRECPROC FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_PRICE_TYPE ADD CONSTRAINT FK_REFBITMAP_REFPRICETYPE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_QTY_UNIT ADD CONSTRAINT FK_REFBITMAP_REFQTYUNIT FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_RCV_PRIORITY ADD CONSTRAINT FK_REFBITMAP_REFRCVPRIORITY FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_RCV_ROUTING ADD CONSTRAINT FK_REFBITMAP_REFRCVROUTING FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_REFERENCE_REQUEST_STATUS ADD CONSTRAINT FK_REFBITMAP_REFREFREQSTATUS FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) NOT DEFERRABLE ;

ALTER TABLE REF_REF_UNIT ADD CONSTRAINT FK_REFBITMAP_REFREFUNIT FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_REG_BODY ADD CONSTRAINT FK_REFBITMAP_REFREGBODY FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_REQ_PRIORITY ADD CONSTRAINT FK_REFBITMAP_REFREQPRIORITY FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_SCHED_FROM ADD CONSTRAINT FK_REFBITMAP_REFSCDFRM FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_SCHED_PART_STATUS ADD CONSTRAINT FK_REFBITMAP_REFSCHEDPARTSTATU FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_SCHED_PRIORITY ADD CONSTRAINT FK_REFBITMAP_REFSCHEDPRIORITY FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_SD_NATURE ADD CONSTRAINT FK_REFBITMAP_REFSDNATURE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_SD_TYPE ADD CONSTRAINT FK_REFBITMAP_REFSDTYPE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_SHIPMENT_TYPE ADD CONSTRAINT FK_REFBITMAP_REFSHIPMENTTYPE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_SIZE_CLASS ADD CONSTRAINT FK_REFBITMAP_REFSIZECLASS FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_STAGE_REASON ADD CONSTRAINT FK_REFBITMAP_REFSTAGEREASON FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_STATE ADD CONSTRAINT FK_REFBITMAP_REFSTATE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_STOCK_LOW_ACTN ADD CONSTRAINT FK_REFBITMAP_REFSTKLWACTN FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_TASK_CLASS ADD CONSTRAINT FK_REFBITMAP_REFTASKCLASS FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_TASK_DEF_STATUS ADD CONSTRAINT FK_REFBITMAP_REFTASKDEFSTATUS FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_TASK_DEP_ACTION ADD CONSTRAINT FK_REFBITMAP_REFTASKDEPACTION FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_TASK_ORIGINATOR ADD CONSTRAINT FK_REFBITMAP_REFTASKORIGINATOR FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_TASK_PRIORITY ADD CONSTRAINT FK_REFBITMAP_REFTASKPRIORITY FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_TASK_SUBCLASS ADD CONSTRAINT FK_REFBITMAP_REFTASKSUBCLASS FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_TRANSPORT_TYPE ADD CONSTRAINT FK_REFBITMAP_REFTRANSTYPE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_VENDOR_TYPE ADD CONSTRAINT FK_REFBITMAP_REFVENDORTYPE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_VENDOR_STATUS ADD CONSTRAINT FK_REFBITMAP_REFVENDRSTATUS FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_WORK_TYPE ADD CONSTRAINT FK_REFBITMAP_REFWORKTYPE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_XFER_TYPE ADD CONSTRAINT FK_REFBITMAP_REFXFERTYPE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_ATTACH_TYPE ADD CONSTRAINT FK_REFBITMAP_REF_ATTCH_TYPE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_IETM_TYPE ADD CONSTRAINT FK_REFBITMAP_REF_IETM_TYPE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_REFBITMAP_TASKTASK FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR ADD CONSTRAINT FK_REFBLRSKILL_SCHDLBR FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE REF_FLIGHT_REASON ADD CONSTRAINT FK_REFBMAP_REFFLREASON FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_FLIGHT_LEG_STATUS ADD CONSTRAINT FK_REFBMAP_REFFLSTATUS FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_USAGE_TYPE ADD CONSTRAINT FK_REFBMAP_REFUSTYPE FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM ADD CONSTRAINT FK_REFBOMCLASS_EQPASSMBLBOM FOREIGN KEY ( BOM_CLASS_DB_ID, BOM_CLASS_CD ) REFERENCES REF_BOM_CLASS ( BOM_CLASS_DB_ID, BOM_CLASS_CD ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR ADD CONSTRAINT FK_REFBORROWRATE_ORGVENDOR FOREIGN KEY ( BORROW_RATE_DB_ID, BORROW_RATE_CD ) REFERENCES REF_BORROW_RATE ( BORROW_RATE_DB_ID, BORROW_RATE_CD ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_REFBORROWRATE_POHEADER FOREIGN KEY ( BORROW_RATE_DB_ID, BORROW_RATE_CD ) REFERENCES REF_BORROW_RATE ( BORROW_RATE_DB_ID, BORROW_RATE_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM ADD CONSTRAINT FK_REFCFGSLOTSTATUS_EQPASSMBLB FOREIGN KEY ( CFG_SLOT_STATUS_DB_ID, CFG_SLOT_STATUS_CD ) REFERENCES REF_CFG_SLOT_STATUS ( CFG_SLOT_STATUS_DB_ID, CFG_SLOT_STATUS_CD ) DEFERRABLE ;

ALTER TABLE PO_LINE ADD CONSTRAINT FK_REFCHANGEREASON_POLINE FOREIGN KEY ( CHANGE_REASON_CD ) REFERENCES REF_CHANGE_REASON ( CHANGE_REASON_CD ) DEFERRABLE ;

ALTER TABLE AC_COND_SETTING ADD CONSTRAINT FK_REFCONDSET_ACCONDSETTING FOREIGN KEY ( COND_SET_DB_ID, COND_SET_CD ) REFERENCES REF_COND_SET ( COND_SET_DB_ID, COND_SET_CD ) DEFERRABLE ;

ALTER TABLE ORG_CONTACT_LIST ADD CONSTRAINT FK_REFCONTACT_ORGCONTACTLIST FOREIGN KEY ( CONTACT_DB_ID, CONTACT_ID ) REFERENCES ORG_CONTACT ( CONTACT_DB_ID, CONTACT_ID ) DEFERRABLE ;

ALTER TABLE SCHED_PART ADD CONSTRAINT FK_REFCONTROLMETHOD_SCHEDPART FOREIGN KEY ( CONTROL_METHOD_DB_ID, CONTROL_METHOD_CD ) REFERENCES REF_CONTROL_METHOD ( CONTROL_METHOD_DB_ID, CONTROL_METHOD_CD ) NOT DEFERRABLE ;

ALTER TABLE SCHED_COST_LINE_ITEM ADD CONSTRAINT FK_REFCOSTLINE_SCHEDCOSTLINE FOREIGN KEY ( COST_LINE_ITEM_TYPE_DB_ID, COST_LINE_ITEM_TYPE_CD ) REFERENCES REF_COST_LINE_ITEM_TYPE ( COST_LINE_ITEM_TYPE_DB_ID, COST_LINE_ITEM_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EQP_MANUFACT ADD CONSTRAINT FK_REFCOUNTRY_EQPMANUFACT FOREIGN KEY ( COUNTRY_DB_ID, COUNTRY_CD ) REFERENCES REF_COUNTRY ( COUNTRY_DB_ID, COUNTRY_CD ) DEFERRABLE ;

ALTER TABLE INV_AC_REG ADD CONSTRAINT FK_REFCOUNTRY_INVACREG FOREIGN KEY ( COUNTRY_DB_ID, COUNTRY_CD ) REFERENCES REF_COUNTRY ( COUNTRY_DB_ID, COUNTRY_CD ) DEFERRABLE ;

ALTER TABLE REF_STATE ADD CONSTRAINT FK_REFCOUNTRY_REFSTATE FOREIGN KEY ( COUNTRY_DB_ID, COUNTRY_CD ) REFERENCES REF_COUNTRY ( COUNTRY_DB_ID, COUNTRY_CD ) DEFERRABLE ;

ALTER TABLE CAPACITY_PATTERN ADD CONSTRAINT FK_REFCPTYPE_CP FOREIGN KEY ( CAPACITY_PATTERN_TYPE_DB_ID, CAPACITY_PATTERN_TYPE_CD ) REFERENCES REF_CAPACITY_PATTERN_TYPE ( CAPACITY_PATTERN_TYPE_DB_ID, CAPACITY_PATTERN_TYPE_CD ) DEFERRABLE ;

ALTER TABLE FNC_XACTION_LOG ADD CONSTRAINT FK_REFCURRENCY_FNCXACTLOG FOREIGN KEY ( CURRENCY_DB_ID, CURRENCY_CD ) REFERENCES REF_CURRENCY ( CURRENCY_DB_ID, CURRENCY_CD ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_REFCURRENCY_POHEADER FOREIGN KEY ( CURRENCY_DB_ID, CURRENCY_CD ) REFERENCES REF_CURRENCY ( CURRENCY_DB_ID, CURRENCY_CD ) DEFERRABLE ;

ALTER TABLE PO_INVOICE ADD CONSTRAINT FK_REFCURRENCY_POINVOICE FOREIGN KEY ( CURRENCY_DB_ID, CURRENCY_CD ) REFERENCES REF_CURRENCY ( CURRENCY_DB_ID, CURRENCY_CD ) DEFERRABLE ;

ALTER TABLE RFQ_HEADER ADD CONSTRAINT FK_REFCURRENCY_RFQHEADER FOREIGN KEY ( CURRENCY_DB_ID, CURRENCY_CD ) REFERENCES REF_CURRENCY ( CURRENCY_DB_ID, CURRENCY_CD ) DEFERRABLE ;

ALTER TABLE RFQ_VENDOR ADD CONSTRAINT FK_REFCURRENCY_RFQVENDOR FOREIGN KEY ( CURRENCY_DB_ID, CURRENCY_CD ) REFERENCES REF_CURRENCY ( CURRENCY_DB_ID, CURRENCY_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR_PRICE ADD CONSTRAINT FK_REFCURRNCY_EQPPRTVENDR FOREIGN KEY ( CURRENCY_DB_ID, CURRENCY_CD ) REFERENCES REF_CURRENCY ( CURRENCY_DB_ID, CURRENCY_CD ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR ADD CONSTRAINT FK_REFCURRNCY_ORGVENDR FOREIGN KEY ( CURRENCY_DB_ID, CURRENCY_CD ) REFERENCES REF_CURRENCY ( CURRENCY_DB_ID, CURRENCY_CD ) DEFERRABLE ;

ALTER TABLE REF_DATA_SOURCE ADD CONSTRAINT FK_REFDATASOURCETYPE_REFDATASO FOREIGN KEY ( DATA_SOURCE_TYPE_DB_ID, DATA_SOURCE_TYPE_CD ) REFERENCES REF_DATA_SOURCE_TYPE ( DATA_SOURCE_TYPE_DB_ID, DATA_SOURCE_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EQP_DATA_SOURCE ADD CONSTRAINT FK_REFDATASOURCE_EQPDATASOURCE FOREIGN KEY ( DATA_SOURCE_DB_ID, DATA_SOURCE_CD ) REFERENCES REF_DATA_SOURCE ( DATA_SOURCE_DB_ID, DATA_SOURCE_CD ) DEFERRABLE ;

ALTER TABLE EVT_EVENT ADD CONSTRAINT FK_REFDATASOURCE_EVTEVENT FOREIGN KEY ( DATA_SOURCE_DB_ID, DATA_SOURCE_CD ) REFERENCES REF_DATA_SOURCE ( DATA_SOURCE_DB_ID, DATA_SOURCE_CD ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT FK_REFDATASOURCE_INVCNDCHGEVT FOREIGN KEY ( data_source_db_id, data_source_cd ) REFERENCES REF_DATA_SOURCE ( DATA_SOURCE_DB_ID, DATA_SOURCE_CD ) DEFERRABLE ;

ALTER TABLE INV_PARM_DATA ADD CONSTRAINT FK_REFDATAVALUE_INVPARMDATA FOREIGN KEY ( DATA_VALUE_DB_ID, DATA_VALUE_CD ) REFERENCES REF_DATA_VALUE ( DATA_VALUE_DB_ID, DATA_VALUE_CD ) DEFERRABLE ;

ALTER TABLE MIM_DATA_VALUE ADD CONSTRAINT FK_REFDATAVALUE_MIMDATAVALUE FOREIGN KEY ( DATA_VALUE_DB_ID, DATA_VALUE_CD ) REFERENCES REF_DATA_VALUE ( DATA_VALUE_DB_ID, DATA_VALUE_CD ) DEFERRABLE ;

ALTER TABLE FL_LEG_MEASUREMENT ADD CONSTRAINT FK_REFDATVAL_FLLEGMEAS FOREIGN KEY ( DATA_VALUE_DB_ID, DATA_VALUE_CD ) REFERENCES REF_DATA_VALUE ( DATA_VALUE_DB_ID, DATA_VALUE_CD ) DEFERRABLE ;

ALTER TABLE MIM_DB ADD CONSTRAINT FK_REFDBTYPE_MIMDB FOREIGN KEY ( DB_TYPE_CD ) REFERENCES REF_DB_TYPE ( DB_TYPE_CD ) DEFERRABLE ;

ALTER TABLE REF_DB_JOB ADD CONSTRAINT FK_REFDBTYPE_REFDBJOB FOREIGN KEY ( DB_TYPE_CD ) REFERENCES REF_DB_TYPE ( DB_TYPE_CD ) DEFERRABLE ;

ALTER TABLE FL_LEG_DISRUPT ADD CONSTRAINT FK_REFDELCODE_FLLEGDIS FOREIGN KEY ( DELAY_CODE_DB_ID, DELAY_CODE_CD ) REFERENCES REF_DELAY_CODE ( DELAY_CODE_DB_ID, DELAY_CODE_CD ) DEFERRABLE ;

ALTER TABLE ORG_WORK_DEPT ADD CONSTRAINT FK_REFDEPTTYPE_ORGWORKDEPT FOREIGN KEY ( DEPT_TYPE_DB_ID, DEPT_TYPE_CD ) REFERENCES REF_DEPT_TYPE ( DEPT_TYPE_DB_ID, DEPT_TYPE_CD ) DEFERRABLE ;

ALTER TABLE FL_LEG_DISRUPT_TYPE ADD CONSTRAINT FK_REFDISTYPE_FLLEGDISTYPE FOREIGN KEY ( DISRUPT_TYPE_DB_ID, DISRUPT_TYPE_CD ) REFERENCES REF_DISRUPT_TYPE ( DISRUPT_TYPE_DB_ID, DISRUPT_TYPE_CD ) DEFERRABLE ;

ALTER TABLE MIM_DATA_TYPE ADD CONSTRAINT FK_REFDOMAINTYPE_MIMDATATYPE FOREIGN KEY ( DOMAIN_TYPE_DB_ID, DOMAIN_TYPE_CD ) REFERENCES REF_DOMAIN_TYPE ( DOMAIN_TYPE_DB_ID, DOMAIN_TYPE_CD ) DEFERRABLE ;

ALTER TABLE REF_DATA_TYPE_ASSMBL_CLASS ADD CONSTRAINT FK_REFDTASSMBLCL_REFASSMBLCL FOREIGN KEY ( ASSMBL_CLASS_DB_ID, ASSMBL_CLASS_CD ) REFERENCES REF_ASSMBL_CLASS ( ASSMBL_CLASS_DB_ID, ASSMBL_CLASS_CD ) DEFERRABLE ;

ALTER TABLE FAIL_EFFECT ADD CONSTRAINT FK_REFEFFECTSEV_FAILEFFECT FOREIGN KEY ( EFFECT_SEV_DB_ID, EFFECT_SEV_CD ) REFERENCES REF_EFFECT_SEV ( EFFECT_SEV_DB_ID, EFFECT_SEV_CD ) DEFERRABLE ;

ALTER TABLE INV_PARM_DATA ADD CONSTRAINT FK_REFENGUNIT_INVPARMDATA FOREIGN KEY ( REC_ENG_UNIT_DB_ID, REC_ENG_UNIT_CD ) REFERENCES REF_ENG_UNIT ( ENG_UNIT_DB_ID, ENG_UNIT_CD ) DEFERRABLE ;

ALTER TABLE EVT_EVENT ADD CONSTRAINT FK_REFEVENTREASON_EVTEVENT FOREIGN KEY ( EVENT_REASON_DB_ID, EVENT_REASON_CD ) REFERENCES REF_EVENT_REASON ( EVENT_REASON_DB_ID, EVENT_REASON_CD ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT FK_REFEVENTREASON_INVCNDCHEVT FOREIGN KEY ( event_reason_db_id, event_reason_cd ) REFERENCES REF_EVENT_REASON ( EVENT_REASON_DB_ID, EVENT_REASON_CD ) DEFERRABLE ;

ALTER TABLE EVT_EVENT ADD CONSTRAINT FK_REFEVENTSTATUS_EVTEVENT FOREIGN KEY ( EVENT_STATUS_DB_ID, EVENT_STATUS_CD ) REFERENCES REF_EVENT_STATUS ( EVENT_STATUS_DB_ID, EVENT_STATUS_CD ) DEFERRABLE ;

ALTER TABLE EVT_STAGE ADD CONSTRAINT FK_REFEVENTSTATUS_EVTSTAGE FOREIGN KEY ( EVENT_STATUS_DB_ID, EVENT_STATUS_CD ) REFERENCES REF_EVENT_STATUS ( EVENT_STATUS_DB_ID, EVENT_STATUS_CD ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT FK_REFEVENTSTATUS_INVCNDCHEVT FOREIGN KEY ( event_status_db_id, event_status_cd ) REFERENCES REF_EVENT_STATUS ( EVENT_STATUS_DB_ID, EVENT_STATUS_CD ) DEFERRABLE ;

ALTER TABLE LRP_EVENT ADD CONSTRAINT FK_REFEVENTSTATUS_LRPEVENT FOREIGN KEY ( EVENT_STATUS_DB_ID, EVENT_STATUS_CD ) REFERENCES REF_EVENT_STATUS ( EVENT_STATUS_DB_ID, EVENT_STATUS_CD ) DEFERRABLE ;

ALTER TABLE REF_STAGE_REASON ADD CONSTRAINT FK_REFEVENTSTATUS_REFSTAGEREAS FOREIGN KEY ( EVENT_STATUS_DB_ID, EVENT_STATUS_CD ) REFERENCES REF_EVENT_STATUS ( EVENT_STATUS_DB_ID, EVENT_STATUS_CD ) DEFERRABLE ;

ALTER TABLE EVT_EVENT ADD CONSTRAINT FK_REFEVENTTYPE_EVTEVENT FOREIGN KEY ( EVENT_TYPE_DB_ID, EVENT_TYPE_CD ) REFERENCES REF_EVENT_TYPE ( EVENT_TYPE_DB_ID, EVENT_TYPE_CD ) DEFERRABLE ;

ALTER TABLE REF_EVENT_REASON ADD CONSTRAINT FK_REFEVENTTYPE_REFEVENTREASON FOREIGN KEY ( EVENT_TYPE_DB_ID, EVENT_TYPE_CD ) REFERENCES REF_EVENT_TYPE ( EVENT_TYPE_DB_ID, EVENT_TYPE_CD ) DEFERRABLE ;

ALTER TABLE REF_EVENT_STATUS ADD CONSTRAINT FK_REFEVENTTYPE_REFEVENTSTATUS FOREIGN KEY ( EVENT_TYPE_DB_ID, EVENT_TYPE_CD ) REFERENCES REF_EVENT_TYPE ( EVENT_TYPE_DB_ID, EVENT_TYPE_CD ) DEFERRABLE ;

ALTER TABLE REF_MATERIAL_REQ_STATUS ADD CONSTRAINT FK_REFEVTSTAT_REFMATREQSTAT FOREIGN KEY ( EVENT_STATUS_DB_ID, EVENT_STATUS_CD ) REFERENCES REF_EVENT_STATUS ( EVENT_STATUS_DB_ID, EVENT_STATUS_CD ) NOT DEFERRABLE ;

ALTER TABLE FAIL_MODE ADD CONSTRAINT FK_REFFAILCATGRY_FAILMODE FOREIGN KEY ( FAIL_CATGRY_DB_ID, FAIL_CATGRY_CD ) REFERENCES REF_FAIL_CATGRY ( FAIL_CATGRY_DB_ID, FAIL_CATGRY_CD ) DEFERRABLE ;

ALTER TABLE SD_FAULT ADD CONSTRAINT FK_REFFAILCATGRY_SDFAULT FOREIGN KEY ( FAIL_CATGRY_DB_ID, FAIL_CATGRY_CD ) REFERENCES REF_FAIL_CATGRY ( FAIL_CATGRY_DB_ID, FAIL_CATGRY_CD ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF ADD CONSTRAINT FK_REFFAILDEFER_FAILDEFERREF FOREIGN KEY ( FAIL_DEFER_DB_ID, FAIL_DEFER_CD ) REFERENCES REF_FAIL_DEFER ( FAIL_DEFER_DB_ID, FAIL_DEFER_CD ) DEFERRABLE ;

ALTER TABLE FAIL_MODE ADD CONSTRAINT FK_REFFAILDEFER_FAILMODE FOREIGN KEY ( FAIL_DEFER_DB_ID, FAIL_DEFER_CD ) REFERENCES REF_FAIL_DEFER ( FAIL_DEFER_DB_ID, FAIL_DEFER_CD ) DEFERRABLE ;

ALTER TABLE REF_FAIL_SEV_DEFER ADD CONSTRAINT FK_REFFAILDEFER_REFFAILSEVDFR FOREIGN KEY ( FAIL_DEFER_DB_ID, FAIL_DEFER_CD ) REFERENCES REF_FAIL_DEFER ( FAIL_DEFER_DB_ID, FAIL_DEFER_CD ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF ADD CONSTRAINT FK_REFFAILDEFER_REFSTATUS FOREIGN KEY ( DEFER_REF_STATUS_CD ) REFERENCES REF_FAIL_DEFER_REF_STATUS ( DEFER_REF_STATUS_CD ) NOT DEFERRABLE ;

ALTER TABLE SD_FAULT ADD CONSTRAINT FK_REFFAILDEFER_SDFAULT FOREIGN KEY ( FAIL_DEFER_DB_ID, FAIL_DEFER_CD ) REFERENCES REF_FAIL_DEFER ( FAIL_DEFER_DB_ID, FAIL_DEFER_CD ) DEFERRABLE ;

ALTER TABLE EVT_FAIL_EFFECT ADD CONSTRAINT FK_REFFAILEFFECTTYPE_EVTFAILEF FOREIGN KEY ( FAIL_EFFECT_TYPE_DB_ID, FAIL_EFFECT_TYPE_CD ) REFERENCES REF_FAIL_EFFECT_TYPE ( FAIL_EFFECT_TYPE_DB_ID, FAIL_EFFECT_TYPE_CD ) DEFERRABLE ;

ALTER TABLE FAIL_EFFECT ADD CONSTRAINT FK_REFFAILEFFECTTYPE_FAILEFFEC FOREIGN KEY ( FAIL_EFFECT_TYPE_DB_ID, FAIL_EFFECT_TYPE_CD ) REFERENCES REF_FAIL_EFFECT_TYPE ( FAIL_EFFECT_TYPE_DB_ID, FAIL_EFFECT_TYPE_CD ) DEFERRABLE ;

ALTER TABLE FL_LEG_FAIL_EFFECT ADD CONSTRAINT FK_REFFAILEFFTYP_FLLEGFAILEF FOREIGN KEY ( FAIL_EFFECT_TYPE_DB_ID, FAIL_EFFECT_TYPE_CD ) REFERENCES REF_FAIL_EFFECT_TYPE ( FAIL_EFFECT_TYPE_DB_ID, FAIL_EFFECT_TYPE_CD ) DEFERRABLE ;

ALTER TABLE FAIL_MODE_FACTOR ADD CONSTRAINT FK_REFFAILFACTOR_FAILMODEFACTO FOREIGN KEY ( FAIL_FACTOR_DB_ID, FAIL_FACTOR_CD ) REFERENCES REF_FAIL_FACTOR ( FAIL_FACTOR_DB_ID, FAIL_FACTOR_CD ) DEFERRABLE ;

ALTER TABLE ORG_AUTH_FAIL_FACTOR ADD CONSTRAINT FK_REFFAILFACTOR_ORGAUTHFAILFA FOREIGN KEY ( FAIL_FACTOR_DB_ID, FAIL_FACTOR_CD ) REFERENCES REF_FAIL_FACTOR ( FAIL_FACTOR_DB_ID, FAIL_FACTOR_CD ) DEFERRABLE ;

ALTER TABLE FAIL_MODE ADD CONSTRAINT FK_REFFAILPRIORITY_FAILMODE FOREIGN KEY ( FAIL_PRIORITY_DB_ID, FAIL_PRIORITY_CD ) REFERENCES REF_FAIL_PRIORITY ( FAIL_PRIORITY_DB_ID, FAIL_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE FAIL_MODE_FACTOR ADD CONSTRAINT FK_REFFAILPRIORITY_FAILMODEFAC FOREIGN KEY ( FAIL_PRIORITY_DB_ID, FAIL_PRIORITY_CD ) REFERENCES REF_FAIL_PRIORITY ( FAIL_PRIORITY_DB_ID, FAIL_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE SD_FAULT ADD CONSTRAINT FK_REFFAILPRIORITY_SDFAULT FOREIGN KEY ( FAIL_PRIORITY_DB_ID, FAIL_PRIORITY_CD ) REFERENCES REF_FAIL_PRIORITY ( FAIL_PRIORITY_DB_ID, FAIL_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF ADD CONSTRAINT FK_REFFAILSEV_FAILDEFERREF FOREIGN KEY ( FAIL_SEV_DB_ID, FAIL_SEV_CD ) REFERENCES REF_FAIL_SEV ( FAIL_SEV_DB_ID, FAIL_SEV_CD ) DEFERRABLE ;

ALTER TABLE FAIL_MODE ADD CONSTRAINT FK_REFFAILSEV_FAILMODE FOREIGN KEY ( FAIL_SEV_DB_ID, FAIL_SEV_CD ) REFERENCES REF_FAIL_SEV ( FAIL_SEV_DB_ID, FAIL_SEV_CD ) DEFERRABLE ;

ALTER TABLE REF_FAIL_SEV_DEFER ADD CONSTRAINT FK_REFFAILSEV_REFFAILSEVDFR FOREIGN KEY ( FAIL_SEV_DB_ID, FAIL_SEV_CD ) REFERENCES REF_FAIL_SEV ( FAIL_SEV_DB_ID, FAIL_SEV_CD ) DEFERRABLE ;

ALTER TABLE SD_FAULT ADD CONSTRAINT FK_REFFAILSEV_SDFAULT FOREIGN KEY ( FAIL_SEV_DB_ID, FAIL_SEV_CD ) REFERENCES REF_FAIL_SEV ( FAIL_SEV_DB_ID, FAIL_SEV_CD ) DEFERRABLE ;

ALTER TABLE FAIL_MODE ADD CONSTRAINT FK_REFFAILTYPE_FAILMODE FOREIGN KEY ( FAIL_TYPE_DB_ID, FAIL_TYPE_CD ) REFERENCES REF_FAIL_TYPE ( FAIL_TYPE_DB_ID, FAIL_TYPE_CD ) DEFERRABLE ;

ALTER TABLE SD_FAULT ADD CONSTRAINT FK_REFFAILTYPE_SDFAULT FOREIGN KEY ( FAIL_TYPE_DB_ID, FAIL_TYPE_CD ) REFERENCES REF_FAIL_TYPE ( FAIL_TYPE_DB_ID, FAIL_TYPE_CD ) DEFERRABLE ;

ALTER TABLE REF_FAIL_PARM_DATA ADD CONSTRAINT FK_REFFALTYP_REFFAILPARMDATA FOREIGN KEY ( FAIL_TYPE_DB_ID, FAIL_TYPE_CD ) REFERENCES REF_FAIL_TYPE ( FAIL_TYPE_DB_ID, FAIL_TYPE_CD ) DEFERRABLE ;

ALTER TABLE SD_FAULT ADD CONSTRAINT FK_REFFAULTSOURCE_SDFAULT FOREIGN KEY ( FAULT_SOURCE_DB_ID, FAULT_SOURCE_CD ) REFERENCES REF_FAULT_SOURCE ( FAULT_SOURCE_DB_ID, FAULT_SOURCE_CD ) DEFERRABLE ;

ALTER TABLE REF_FINANCIAL_CLASS ADD CONSTRAINT FK_REFFINANCETYPE_REFFINANCECL FOREIGN KEY ( FINANCE_TYPE_DB_ID, FINANCE_TYPE_CD ) REFERENCES REF_FINANCE_TYPE ( FINANCE_TYPE_DB_ID, FINANCE_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EQP_FINDING ADD CONSTRAINT FK_REFFINDING_EQP_FINDING FOREIGN KEY ( FINDING_TYPE_DB_ID, FINDING_TYPE_CD ) REFERENCES REF_FINDING_TYPE ( FINDING_TYPE_DB_ID, FINDING_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EVT_FAIL_EFFECT ADD CONSTRAINT FK_REFFLIGHTSTAGE_EVTFAILEFFEC FOREIGN KEY ( FLIGHT_STAGE_DB_ID, FLIGHT_STAGE_CD ) REFERENCES REF_FLIGHT_STAGE ( FLIGHT_STAGE_DB_ID, FLIGHT_STAGE_CD ) DEFERRABLE ;

ALTER TABLE SD_FAULT ADD CONSTRAINT FK_REFFLIGHTSTAGE_SDFAULT FOREIGN KEY ( FLIGHT_STAGE_DB_ID, FLIGHT_STAGE_CD ) REFERENCES REF_FLIGHT_STAGE ( FLIGHT_STAGE_DB_ID, FLIGHT_STAGE_CD ) DEFERRABLE ;

ALTER TABLE FL_LEG_STATUS_LOG ADD CONSTRAINT FK_REFFLLEGSTAT_FLLEGSTALOG FOREIGN KEY ( FLIGHT_LEG_STATUS_CD ) REFERENCES REF_FLIGHT_LEG_STATUS ( FLIGHT_LEG_STATUS_CD ) DEFERRABLE ;

ALTER TABLE FL_LEG ADD CONSTRAINT FK_REFFLREASON_FLLEG FOREIGN KEY ( FLIGHT_REASON_CD ) REFERENCES REF_FLIGHT_REASON ( FLIGHT_REASON_CD ) DEFERRABLE ;

ALTER TABLE FL_LEG ADD CONSTRAINT FK_REFFLSTATUS_FLEG FOREIGN KEY ( FLIGHT_LEG_STATUS_CD ) REFERENCES REF_FLIGHT_LEG_STATUS ( FLIGHT_LEG_STATUS_CD ) DEFERRABLE ;

ALTER TABLE FL_LEG_DISRUPT ADD CONSTRAINT FK_REFFLSTG_FLLEGDIS FOREIGN KEY ( FLIGHT_STAGE_DB_ID, FLIGHT_STAGE_CD ) REFERENCES REF_FLIGHT_STAGE ( FLIGHT_STAGE_DB_ID, FLIGHT_STAGE_CD ) DEFERRABLE ;

ALTER TABLE FL_LEG_FAIL_EFFECT ADD CONSTRAINT FK_REFFLSTG_FLLEGFAILEFF FOREIGN KEY ( FLIGHT_STAGE_DB_ID, FLIGHT_STAGE_CD ) REFERENCES REF_FLIGHT_STAGE ( FLIGHT_STAGE_DB_ID, FLIGHT_STAGE_CD ) DEFERRABLE ;

ALTER TABLE FL_LEG ADD CONSTRAINT FK_REFFLTYPE_FLLEG FOREIGN KEY ( FLIGHT_TYPE_DB_ID, FLIGHT_TYPE_CD ) REFERENCES REF_FLIGHT_TYPE ( FLIGHT_TYPE_DB_ID, FLIGHT_TYPE_CD ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_REFFOB_POHEADER FOREIGN KEY ( FOB_DB_ID, FOB_CD ) REFERENCES REF_FOB ( FOB_DB_ID, FOB_CD ) DEFERRABLE ;

ALTER TABLE RFQ_HEADER ADD CONSTRAINT FK_REFFOB_RFQHEADER FOREIGN KEY ( FOB_DB_ID, FOB_CD ) REFERENCES REF_FOB ( FOB_DB_ID, FOB_CD ) DEFERRABLE ;

ALTER TABLE RFQ_VENDOR ADD CONSTRAINT FK_REFFOB_RFQVENDOR FOREIGN KEY ( FOB_DB_ID, FOB_CD ) REFERENCES REF_FOB ( FOB_DB_ID, FOB_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_LIC ADD CONSTRAINT FK_REFHRLICSTATUS_ORGHRLIC FOREIGN KEY ( HR_LIC_STATUS_DB_ID, HR_LIC_STATUS_CD ) REFERENCES REF_HR_LIC_STATUS ( HR_LIC_STATUS_DB_ID, HR_LIC_STATUS_CD ) DEFERRABLE ;

ALTER TABLE IETM_TOPIC ADD CONSTRAINT FK_REFIETMTYPE_IETM_TOPIC FOREIGN KEY ( IETM_TYPE_DB_ID, IETM_TYPE_CD ) REFERENCES REF_IETM_TYPE ( IETM_TYPE_DB_ID, IETM_TYPE_CD ) DEFERRABLE ;

ALTER TABLE INV_IETM ADD CONSTRAINT FK_REFIETMTYPE_INVIETM FOREIGN KEY ( IETM_TYPE_DB_ID, IETM_TYPE_CD ) REFERENCES REF_IETM_TYPE ( IETM_TYPE_DB_ID, IETM_TYPE_CD ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_IETM ADD CONSTRAINT FK_REFIETMTYPE_ORGVNRIETM FOREIGN KEY ( IETM_TYPE_DB_ID, IETM_TYPE_CD ) REFERENCES REF_IETM_TYPE ( IETM_TYPE_DB_ID, IETM_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EVT_IETM ADD CONSTRAINT FK_REFIETMTYP_EVTIETM FOREIGN KEY ( IETM_TYPE_DB_ID, IETM_TYPE_CD ) REFERENCES REF_IETM_TYPE ( IETM_TYPE_DB_ID, IETM_TYPE_CD ) DEFERRABLE ;

ALTER TABLE SCHED_IMPACT ADD CONSTRAINT FK_REFIIMPACT_SCHEDIMPACT FOREIGN KEY ( IMPACT_DB_ID, IMPACT_CD ) REFERENCES REF_IMPACT ( IMPACT_DB_ID, IMPACT_CD ) DEFERRABLE ;

ALTER TABLE TASK_IMPACT ADD CONSTRAINT FK_REFIMPACT_TASKIMPACT FOREIGN KEY ( IMPACT_DB_ID, IMPACT_CD ) REFERENCES REF_IMPACT ( IMPACT_DB_ID, IMPACT_CD ) DEFERRABLE ;

ALTER TABLE INV_AC_REG ADD CONSTRAINT FK_REFINVCAPABILITY_INVACREG FOREIGN KEY ( INV_CAPABILITY_DB_ID, INV_CAPABILITY_CD ) REFERENCES REF_INV_CAPABILITY ( INV_CAPABILITY_DB_ID, INV_CAPABILITY_CD ) DEFERRABLE ;

ALTER TABLE FL_LEG ADD CONSTRAINT FK_REFINVCAP_FLLEG FOREIGN KEY ( INV_CAPABILITY_DB_ID, INV_CAPABILITY_CD ) REFERENCES REF_INV_CAPABILITY ( INV_CAPABILITY_DB_ID, INV_CAPABILITY_CD ) DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_REFINVCLASS_INVINV FOREIGN KEY ( INV_CLASS_DB_ID, INV_CLASS_CD ) REFERENCES REF_INV_CLASS ( INV_CLASS_DB_ID, INV_CLASS_CD ) DEFERRABLE ;

ALTER TABLE EQP_BOM_PART ADD CONSTRAINT FK_REFINVCLAS_EQPBOMPRT FOREIGN KEY ( INV_CLASS_DB_ID, INV_CLASS_CD ) REFERENCES REF_INV_CLASS ( INV_CLASS_DB_ID, INV_CLASS_CD ) DEFERRABLE ;

ALTER TABLE EQP_STOCK_NO ADD CONSTRAINT FK_REFINVCLAS_EQPSTKNO FOREIGN KEY ( INV_CLASS_DB_ID, INV_CLASS_CD ) REFERENCES REF_INV_CLASS ( INV_CLASS_DB_ID, INV_CLASS_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_REFINVCLS_EQPPRTNO FOREIGN KEY ( INV_CLASS_DB_ID, INV_CLASS_CD ) REFERENCES REF_INV_CLASS ( INV_CLASS_DB_ID, INV_CLASS_CD ) DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_REFINVCOND_INVINV FOREIGN KEY ( INV_COND_DB_ID, INV_COND_CD ) REFERENCES REF_INV_COND ( INV_COND_DB_ID, INV_COND_CD ) DEFERRABLE ;

ALTER TABLE REF_REMOVE_REASON ADD CONSTRAINT FK_REFINVCOND_REFREMVREASON FOREIGN KEY ( INV_COND_DB_ID, INV_COND_CD ) REFERENCES REF_INV_COND ( INV_COND_DB_ID, INV_COND_CD ) DEFERRABLE ;

ALTER TABLE SCHED_KIT_MAP ADD CONSTRAINT FK_REFINVCOND_SCHEDKITMAP FOREIGN KEY ( INV_COND_DB_ID, INV_COND_CD ) REFERENCES REF_INV_COND ( INV_COND_DB_ID, INV_COND_CD ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT_LINE ADD CONSTRAINT FK_REFINVCOND_SHIPSHIPMENTLINE FOREIGN KEY ( ROUTE_COND_DB_ID, ROUTE_COND_CD ) REFERENCES REF_INV_COND ( INV_COND_DB_ID, INV_COND_CD ) DEFERRABLE ;

ALTER TABLE INV_AC_REG ADD CONSTRAINT FK_REFINVOPER_INVACREG FOREIGN KEY ( INV_OPER_DB_ID, INV_OPER_CD ) REFERENCES REF_INV_OPER ( INV_OPER_DB_ID, INV_OPER_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC_PRINTER_JOB ADD CONSTRAINT FK_REFJOBTYPE_INVLOCPRNTRJOB FOREIGN KEY ( JOB_TYPE_DB_ID, JOB_TYPE_CD ) REFERENCES REF_JOB_TYPE ( JOB_TYPE_DB_ID, JOB_TYPE_CD ) DEFERRABLE ;

ALTER TABLE CLAIM_LABOUR_LINE ADD CONSTRAINT FK_REFLABOURSKILL_CLAIMLABOURL FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE CAPACITY_PATTERN_DAY_SKILL ADD CONSTRAINT FK_REFLABOURSKILL_CPDAYSKILL FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE CAPACITY_PATTERN_SKILL ADD CONSTRAINT FK_REFLABOURSKILL_CPSKILL FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE DEFN_NR_EST ADD CONSTRAINT FK_REFLABOURSKILL_DEFNNREST FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE EQP_PLANNING_TYPE_SKILL ADD CONSTRAINT FK_REFLABOURSKILL_EQPPLANNINGT FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_QUAL ADD CONSTRAINT FK_REFLABOURSKILL_ORGHRQUAL FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_SCHEDULE ADD CONSTRAINT FK_REFLABOURSKILL_ORGHRSCHED FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_SHIFT ADD CONSTRAINT FK_REFLABOURSKILL_ORGHRSHIFT FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE TASK_LABOUR_LIST ADD CONSTRAINT FK_REFLABOURSKILL_TASKLABOURLI FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CONSTRAINT FK_REFLABOURSKILL_TASKLABOURSU FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE TASK_PLANNING_TYPE_SKILL ADD CONSTRAINT FK_REFLABOURSKILL_TASKPLANNING FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC_LABOUR_CAPACITY ADD CONSTRAINT FK_REFLABRSKILL_INVLOCLABCAP FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_ROLE_STATUS ADD CONSTRAINT FK_REFLBRRLSTAT_SCHEDLBRRLSTAT FOREIGN KEY ( LABOUR_ROLE_STATUS_DB_ID, LABOUR_ROLE_STATUS_CD ) REFERENCES REF_LABOUR_ROLE_STATUS ( LABOUR_ROLE_STATUS_DB_ID, LABOUR_ROLE_STATUS_CD ) DEFERRABLE ;

ALTER TABLE PPC_LABOUR_ROLE ADD CONSTRAINT FK_REFLBRRLSTTS_PPCLBRRL FOREIGN KEY ( LABOUR_ROLE_STATUS_DB_ID, LABOUR_ROLE_STATUS_CD ) REFERENCES REF_LABOUR_ROLE_STATUS ( LABOUR_ROLE_STATUS_DB_ID, LABOUR_ROLE_STATUS_CD ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_ROLE ADD CONSTRAINT FK_REFLBRROLETYPE_SCHEDLBRROLE FOREIGN KEY ( LABOUR_ROLE_TYPE_DB_ID, LABOUR_ROLE_TYPE_CD ) REFERENCES REF_LABOUR_ROLE_TYPE ( LABOUR_ROLE_TYPE_DB_ID, LABOUR_ROLE_TYPE_CD ) DEFERRABLE ;

ALTER TABLE PPC_LABOUR_ROLE ADD CONSTRAINT FK_REFLBRROLE_PPCLBRROLE FOREIGN KEY ( LABOUR_ROLE_TYPE_DB_ID, LABOUR_ROLE_TYPE_CD ) REFERENCES REF_LABOUR_ROLE_TYPE ( LABOUR_ROLE_TYPE_DB_ID, LABOUR_ROLE_TYPE_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_SHIFT_PLAN ADD CONSTRAINT FK_REFLBRSKILL_ORGHRSHIFTPLAN FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE ORG_LABOUR_SKILL_MAP ADD CONSTRAINT FK_REFLBRSKILL_ORGLBRSKILLMAP FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE PPC_LABOUR ADD CONSTRAINT FK_REFLBRSKILL_PPCLBR FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE SCHED_WP_SIGN_REQ ADD CONSTRAINT FK_REFLBRSKILL_SCHEDWPSIGNREQ FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE ORG_WORK_DEPT ADD CONSTRAINT FK_REFLBRSKIL_ORGWRKDPT FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE PPC_CREW ADD CONSTRAINT FK_REFLBRSKIL_PPCCREW FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE PPC_HR_SHIFT_PLAN ADD CONSTRAINT FK_REFLBRSKIL_PPCHRSHFTPLN FOREIGN KEY ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES REF_LABOUR_SKILL ( LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE PPC_LABOUR ADD CONSTRAINT FK_REFLBRSTAGE_PPCLBR FOREIGN KEY ( LABOUR_STAGE_DB_ID, LABOUR_STAGE_CD ) REFERENCES REF_LABOUR_STAGE ( LABOUR_STAGE_DB_ID, LABOUR_STAGE_CD ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR ADD CONSTRAINT FK_REFLBRSTG_SCHDLBR FOREIGN KEY ( LABOUR_STAGE_DB_ID, LABOUR_STAGE_CD ) REFERENCES REF_LABOUR_STAGE ( LABOUR_STAGE_DB_ID, LABOUR_STAGE_CD ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_ROLE ADD CONSTRAINT FK_REFLBRTIME_SCHEDLBRROLE FOREIGN KEY ( LABOUR_TIME_DB_ID, LABOUR_TIME_CD ) REFERENCES REF_LABOUR_TIME ( LABOUR_TIME_DB_ID, LABOUR_TIME_CD ) DEFERRABLE ;

ALTER TABLE LIC_DEFN ADD CONSTRAINT FK_REFLICCATEGORY_LICDEFN FOREIGN KEY ( LIC_CAT_DB_ID, LIC_CAT_CD ) REFERENCES REF_LIC_CATEGORY ( LIC_CAT_DB_ID, LIC_CAT_CD ) DEFERRABLE ;

ALTER TABLE LIC_DEFN ADD CONSTRAINT FK_REFLICCLASS_LICDEFN FOREIGN KEY ( LIC_CLASS_DB_ID, LIC_CLASS_CD ) REFERENCES REF_LIC_CLASS ( LIC_CLASS_DB_ID, LIC_CLASS_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_LICENSE ADD CONSTRAINT FK_REFLICENSETYPE_ORGHRLICENSE FOREIGN KEY ( LICENSE_TYPE_DB_ID, LICENSE_TYPE_CD ) REFERENCES REF_LICENSE_TYPE ( LICENSE_TYPE_DB_ID, LICENSE_TYPE_CD ) DEFERRABLE ;

ALTER TABLE LIC_DEFN ADD CONSTRAINT FK_REFLICSTATUS_LICDEFN FOREIGN KEY ( LIC_STATUS_DB_ID, LIC_STATUS_CD ) REFERENCES REF_LIC_STATUS ( LIC_STATUS_DB_ID, LIC_STATUS_CD ) DEFERRABLE ;

ALTER TABLE LIC_DEFN ADD CONSTRAINT FK_REFLICTYPE_LICDEFN FOREIGN KEY ( LIC_TYPE_DB_ID, LIC_TYPE_CD ) REFERENCES REF_LIC_TYPE ( LIC_TYPE_DB_ID, LIC_TYPE_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC ADD CONSTRAINT FK_REFLOCTYPE_INVLOC FOREIGN KEY ( LOC_TYPE_DB_ID, LOC_TYPE_CD ) REFERENCES REF_LOC_TYPE ( LOC_TYPE_DB_ID, LOC_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EQP_BOM_PART_LOG ADD CONSTRAINT FK_REFLOGACTION_EQPBOMPARTLOG FOREIGN KEY ( LOG_ACTION_DB_ID, LOG_ACTION_CD ) REFERENCES REF_LOG_ACTION ( LOG_ACTION_DB_ID, LOG_ACTION_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO_LOG ADD CONSTRAINT FK_REFLOGACTION_EQPPARTNOLOG FOREIGN KEY ( LOG_ACTION_DB_ID, LOG_ACTION_CD ) REFERENCES REF_LOG_ACTION ( LOG_ACTION_DB_ID, LOG_ACTION_CD ) DEFERRABLE ;

ALTER TABLE INV_OIL_STATUS_LOG ADD CONSTRAINT FK_REFLOGACTION_INVOILSTATLOG FOREIGN KEY ( LOG_ACTION_DB_ID, LOG_ACTION_CD ) REFERENCES REF_LOG_ACTION ( LOG_ACTION_DB_ID, LOG_ACTION_CD ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_LOG ADD CONSTRAINT FK_REFLOGACTION_MAINTPRGMLOG FOREIGN KEY ( LOG_ACTION_DB_ID, LOG_ACTION_CD ) REFERENCES REF_LOG_ACTION ( LOG_ACTION_DB_ID, LOG_ACTION_CD ) DEFERRABLE ;

ALTER TABLE REF_LOG_REASON ADD CONSTRAINT FK_REFLOGACTION_REFLOGREASON FOREIGN KEY ( LOG_ACTION_DB_ID, LOG_ACTION_CD ) REFERENCES REF_LOG_ACTION ( LOG_ACTION_DB_ID, LOG_ACTION_CD ) DEFERRABLE ;

ALTER TABLE TASK_TASK_LOG ADD CONSTRAINT FK_REFLOGACTION_TASKTASKLOG FOREIGN KEY ( LOG_ACTION_DB_ID, LOG_ACTION_CD ) REFERENCES REF_LOG_ACTION ( LOG_ACTION_DB_ID, LOG_ACTION_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM_LOG ADD CONSTRAINT FK_REFLOGACT_EQPASSMBLBOMLOG FOREIGN KEY ( LOG_ACTION_DB_ID, LOG_ACTION_CD ) REFERENCES REF_LOG_ACTION ( LOG_ACTION_DB_ID, LOG_ACTION_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL ADD CONSTRAINT FK_REFLOGBOOKTYPE_EQPASSMBL FOREIGN KEY ( LOGBOOK_TYPE_DB_ID, LOGBOOK_TYPE_CD ) REFERENCES REF_LOGBOOK_TYPE ( LOGBOOK_TYPE_DB_ID, LOGBOOK_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM ADD CONSTRAINT FK_REFLOGCARDFORM_EQPASSMBLBOM FOREIGN KEY ( LOGCARD_FORM_DB_ID, LOGCARD_FORM_CD ) REFERENCES REF_LOGCARD_FORM ( LOGCARD_FORM_DB_ID, LOGCARD_FORM_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM_LOG ADD CONSTRAINT FK_REFLOGREASON_EQPASSMBLBLG FOREIGN KEY ( LOG_REASON_DB_ID, LOG_REASON_CD ) REFERENCES REF_LOG_REASON ( LOG_REASON_DB_ID, LOG_REASON_CD ) DEFERRABLE ;

ALTER TABLE EQP_BOM_PART_LOG ADD CONSTRAINT FK_REFLOGREASON_EQPBOMPARTLOG FOREIGN KEY ( LOG_REASON_DB_ID, LOG_REASON_CD ) REFERENCES REF_LOG_REASON ( LOG_REASON_DB_ID, LOG_REASON_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO_LOG ADD CONSTRAINT FK_REFLOGREASON_EQPPARTNOLOG FOREIGN KEY ( LOG_REASON_DB_ID, LOG_REASON_CD ) REFERENCES REF_LOG_REASON ( LOG_REASON_DB_ID, LOG_REASON_CD ) DEFERRABLE ;

ALTER TABLE INV_OIL_STATUS_LOG ADD CONSTRAINT FK_REFLOGREASON_INVOILSTATLOG FOREIGN KEY ( LOG_REASON_DB_ID, LOG_REASON_CD ) REFERENCES REF_LOG_REASON ( LOG_REASON_DB_ID, LOG_REASON_CD ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_LOG ADD CONSTRAINT FK_REFLOGREASON_MAINTPRGMLOG FOREIGN KEY ( LOG_REASON_DB_ID, LOG_REASON_CD ) REFERENCES REF_LOG_REASON ( LOG_REASON_DB_ID, LOG_REASON_CD ) DEFERRABLE ;

ALTER TABLE TASK_TASK_LOG ADD CONSTRAINT FK_REFLOGREASON_TASKTASKLOG FOREIGN KEY ( LOG_REASON_DB_ID, LOG_REASON_CD ) REFERENCES REF_LOG_REASON ( LOG_REASON_DB_ID, LOG_REASON_CD ) DEFERRABLE ;

ALTER TABLE LPA_RUN_ISSUE ADD CONSTRAINT FK_REFLPAISSUETYPE_LPARUNISSUE FOREIGN KEY ( LPA_ISSUE_TYPE_DB_ID, LPA_ISSUE_TYPE_CD ) REFERENCES REF_LPA_ISSUE_TYPE ( LPA_ISSUE_TYPE_DB_ID, LPA_ISSUE_TYPE_CD ) DEFERRABLE ;

ALTER TABLE LPA_RUN ADD CONSTRAINT FK_REFLPARUNSTATUS_LPARUN FOREIGN KEY ( LPA_RUN_STATUS_DB_ID, LPA_RUN_STATUS_CD ) REFERENCES REF_LPA_RUN_STATUS ( LPA_RUN_STATUS_DB_ID, LPA_RUN_STATUS_CD ) DEFERRABLE ;

ALTER TABLE LPA_LOG ADD CONSTRAINT FK_REFLPASTATUS_LPALOG FOREIGN KEY ( LPA_STATUS_DB_ID, LPA_STATUS_CD ) REFERENCES REF_LPA_STATUS ( LPA_STATUS_DB_ID, LPA_STATUS_CD ) DEFERRABLE ;

ALTER TABLE LRP_INV_INV ADD CONSTRAINT FK_REFLRPPRIORITY_LRPINVINV FOREIGN KEY ( LRP_PRIORITY_DB_ID, LRP_PRIORITY_CD ) REFERENCES REF_LRP_PRIORITY ( LRP_PRIORITY_DB_ID, LRP_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE LRP_LOC_CAPABILITY ADD CONSTRAINT FK_REFLRPPRIORITY_LRPLOCCAP FOREIGN KEY ( LRP_PRIORITY_DB_ID, LRP_PRIORITY_CD ) REFERENCES REF_LRP_PRIORITY ( LRP_PRIORITY_DB_ID, LRP_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM ADD CONSTRAINT FK_REFMNTPGMSTATUS_MNTPGM FOREIGN KEY ( MAINT_PRGM_STATUS_DB_ID, MAINT_PRGM_STATUS_CD ) REFERENCES REF_MAINT_PRGM_STATUS ( MAINT_PRGM_STATUS_DB_ID, MAINT_PRGM_STATUS_CD ) DEFERRABLE ;

ALTER TABLE EQP_OIL_THRESHOLD_ASSMBL ADD CONSTRAINT FK_REFOILSTATUS_EQPOILTHASSM FOREIGN KEY ( OIL_STATUS_DB_ID, OIL_STATUS_CD ) REFERENCES REF_OIL_STATUS ( OIL_STATUS_DB_ID, OIL_STATUS_CD ) DEFERRABLE ;

ALTER TABLE EQP_OIL_THRESHOLD_CARRIER ADD CONSTRAINT FK_REFOILSTATUS_EQPOILTHCARR FOREIGN KEY ( OIL_STATUS_DB_ID, OIL_STATUS_CD ) REFERENCES REF_OIL_STATUS ( OIL_STATUS_DB_ID, OIL_STATUS_CD ) DEFERRABLE ;

ALTER TABLE EQP_OIL_THRESHOLD_INV ADD CONSTRAINT FK_REFOILSTATUS_EQPOILTHINV FOREIGN KEY ( OIL_STATUS_DB_ID, OIL_STATUS_CD ) REFERENCES REF_OIL_STATUS ( OIL_STATUS_DB_ID, OIL_STATUS_CD ) DEFERRABLE ;

ALTER TABLE EQP_OIL_THRESHOLD_PART ADD CONSTRAINT FK_REFOILSTATUS_EQPOILTHPART FOREIGN KEY ( OIL_STATUS_DB_ID, OIL_STATUS_CD ) REFERENCES REF_OIL_STATUS ( OIL_STATUS_DB_ID, OIL_STATUS_CD ) DEFERRABLE ;

ALTER TABLE INV_OIL_STATUS_LOG ADD CONSTRAINT FK_REFOILSTAT_INVOILSTATLOG FOREIGN KEY ( OIL_STATUS_DB_ID, OIL_STATUS_CD ) REFERENCES REF_OIL_STATUS ( OIL_STATUS_DB_ID, OIL_STATUS_CD ) DEFERRABLE ;

ALTER TABLE ORG_ORG ADD CONSTRAINT FK_REFORGSUBTYPE_ORGORG FOREIGN KEY ( ORG_SUB_TYPE_DB_ID, ORG_SUB_TYPE_CD ) REFERENCES REF_ORG_SUB_TYPE ( ORG_SUB_TYPE_DB_ID, ORG_SUB_TYPE_CD ) DEFERRABLE ;

ALTER TABLE ORG_ORG ADD CONSTRAINT FK_REFORGTYPE_ORGORG FOREIGN KEY ( ORG_TYPE_DB_ID, ORG_TYPE_CD ) REFERENCES REF_ORG_TYPE ( ORG_TYPE_DB_ID, ORG_TYPE_CD ) DEFERRABLE ;

ALTER TABLE REF_ORG_SUB_TYPE ADD CONSTRAINT FK_REFORGTYPE_REFORGSUBTYPE FOREIGN KEY ( ORG_TYPE_DB_ID, ORG_TYPE_CD ) REFERENCES REF_ORG_TYPE ( ORG_TYPE_DB_ID, ORG_TYPE_CD ) DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_REFOWNERTYPE_INVINV FOREIGN KEY ( OWNER_TYPE_DB_ID, OWNER_TYPE_CD ) REFERENCES REF_OWNER_TYPE ( OWNER_TYPE_DB_ID, OWNER_TYPE_CD ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_REFPARTPROVIDERTYPE_REQPART FOREIGN KEY ( PART_PROVIDER_TYPE_DB_ID, PART_PROVIDER_TYPE_CD ) REFERENCES REF_PART_PROVIDER_TYPE ( PART_PROVIDER_TYPE_DB_ID, PART_PROVIDER_TYPE_CD ) DEFERRABLE ;

ALTER TABLE TASK_PART_LIST ADD CONSTRAINT FK_REFPARTPROVIDERTYPE_TASKPAR FOREIGN KEY ( PART_PROVIDER_TYPE_DB_ID, PART_PROVIDER_TYPE_CD ) REFERENCES REF_PART_PROVIDER_TYPE ( PART_PROVIDER_TYPE_DB_ID, PART_PROVIDER_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_REFPARTSTATUS_EQPPARTNO FOREIGN KEY ( PART_STATUS_DB_ID, PART_STATUS_CD ) REFERENCES REF_PART_STATUS ( PART_STATUS_DB_ID, PART_STATUS_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_REFPARTTYPE_EQPPARTNO FOREIGN KEY ( PART_TYPE_DB_ID, PART_TYPE_CD ) REFERENCES REF_PART_TYPE ( PART_TYPE_DB_ID, PART_TYPE_CD ) DEFERRABLE ;

ALTER TABLE REF_PART_TYPE ADD CONSTRAINT FK_REFPARTTYPE_REFPARTTYPE FOREIGN KEY ( NH_PART_TYPE_DB_ID, NH_PART_TYPE_CD ) REFERENCES REF_PART_TYPE ( PART_TYPE_DB_ID, PART_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_REFPARTUSE_EQPPARTNO FOREIGN KEY ( PART_USE_DB_ID, PART_USE_CD ) REFERENCES REF_PART_USE ( PART_USE_DB_ID, PART_USE_CD ) DEFERRABLE ;

ALTER TABLE CLAIM ADD CONSTRAINT FK_REFPAYMETHOD_CLAIM FOREIGN KEY ( PAY_METHOD_DB_ID, PAY_METHOD_CD ) REFERENCES REF_PAY_METHOD ( PAY_METHOD_DB_ID, PAY_METHOD_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR ADD CONSTRAINT FK_REFPAYMETHOD_ORGHR FOREIGN KEY ( PAY_METHOD_DB_ID, PAY_METHOD_CD ) REFERENCES REF_PAY_METHOD ( PAY_METHOD_DB_ID, PAY_METHOD_CD ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_REFPOAUTHFLOW_POHEADER FOREIGN KEY ( PO_AUTH_FLOW_DB_ID, PO_AUTH_FLOW_CD ) REFERENCES REF_PO_AUTH_FLOW ( PO_AUTH_FLOW_DB_ID, PO_AUTH_FLOW_CD ) DEFERRABLE ;

ALTER TABLE REF_PO_AUTH_LVL ADD CONSTRAINT FK_REFPOAUTHFLOW_REFPOAUTHLVL FOREIGN KEY ( PO_AUTH_FLOW_DB_ID, PO_AUTH_FLOW_CD ) REFERENCES REF_PO_AUTH_FLOW ( PO_AUTH_FLOW_DB_ID, PO_AUTH_FLOW_CD ) DEFERRABLE ;

ALTER TABLE PO_AUTH ADD CONSTRAINT FK_REFPOAUTHLVLSTATUS_POAUTH FOREIGN KEY ( AUTH_LVL_STATUS_DB_ID, AUTH_LVL_STATUS_CD ) REFERENCES REF_PO_AUTH_LVL_STATUS ( PO_AUTH_LVL_STATUS_DB_ID, PO_AUTH_LVL_STATUS_CD ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_REFPOAUTHLVLSTATUS_POHEADE1 FOREIGN KEY ( AUTH_STATUS_DB_ID, AUTH_STATUS_CD ) REFERENCES REF_PO_AUTH_LVL_STATUS ( PO_AUTH_LVL_STATUS_DB_ID, PO_AUTH_LVL_STATUS_CD ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_REFPOAUTHLVLSTATUS_POHEADER FOREIGN KEY ( BUDGET_CHECK_STATUS_DB_ID, BUDGET_CHECK_STATUS_CD ) REFERENCES REF_PO_AUTH_LVL_STATUS ( PO_AUTH_LVL_STATUS_DB_ID, PO_AUTH_LVL_STATUS_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_PO_AUTH_LVL ADD CONSTRAINT FK_REFPOAUTHLVL_ORGHRPOAUTHLVL FOREIGN KEY ( PO_AUTH_LVL_DB_ID, PO_AUTH_LVL_CD ) REFERENCES REF_PO_AUTH_LVL ( PO_AUTH_LVL_DB_ID, PO_AUTH_LVL_CD ) DEFERRABLE ;

ALTER TABLE PO_LINE ADD CONSTRAINT FK_REFPOLINETYPE_POLINE FOREIGN KEY ( PO_LINE_TYPE_DB_ID, PO_LINE_TYPE_CD ) REFERENCES REF_PO_LINE_TYPE ( PO_LINE_TYPE_DB_ID, PO_LINE_TYPE_CD ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_REFPOPAYINFO_POHEAD1 FOREIGN KEY ( BILL_TO_DB_ID, BILL_TO_CD ) REFERENCES REF_PO_PAYMENT_INFO ( PAYMENT_INFO_DB_ID, PAYMENT_INFO_CD ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_REFPOPAYINFO_POHEAD2 FOREIGN KEY ( CONSIGN_TO_DB_ID, CONSIGN_TO_CD ) REFERENCES REF_PO_PAYMENT_INFO ( PAYMENT_INFO_DB_ID, PAYMENT_INFO_CD ) DEFERRABLE ;

ALTER TABLE CHARGE_VENDOR ADD CONSTRAINT FK_REFPOTYPE_CHARGEVENDOR FOREIGN KEY ( PO_TYPE_DB_ID, PO_TYPE_CD ) REFERENCES REF_PO_TYPE ( PO_TYPE_DB_ID, PO_TYPE_CD ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_PO_TYPE ADD CONSTRAINT FK_REFPOTYPE_ORGVENDORPOTYPE FOREIGN KEY ( PO_TYPE_DB_ID, PO_TYPE_CD ) REFERENCES REF_PO_TYPE ( PO_TYPE_DB_ID, PO_TYPE_CD ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_REFPOTYPE_POHEADER FOREIGN KEY ( PO_TYPE_DB_ID, PO_TYPE_CD ) REFERENCES REF_PO_TYPE ( PO_TYPE_DB_ID, PO_TYPE_CD ) DEFERRABLE ;

ALTER TABLE REF_PO_AUTH_FLOW ADD CONSTRAINT FK_REFPOTYPE_REFPOAUTHFLOW FOREIGN KEY ( PO_TYPE_DB_ID, PO_TYPE_CD ) REFERENCES REF_PO_TYPE ( PO_TYPE_DB_ID, PO_TYPE_CD ) DEFERRABLE ;

ALTER TABLE PPC_MILESTONE ADD CONSTRAINT FK_REFPPCMILSTTYPE_PPCMILEST FOREIGN KEY ( PPC_MILESTONE_TYPE_DB_ID, PPC_MILESTONE_TYPE_CD ) REFERENCES REF_PPC_MILESTONE_TYPE ( PPC_MILESTONE_TYPE_DB_ID, PPC_MILESTONE_TYPE_CD ) NOT DEFERRABLE ;

ALTER TABLE PPC_OPT_STATUS ADD CONSTRAINT FK_REFPPCOPTSTAT_PPCOPTSTAT FOREIGN KEY ( PPC_OPT_STATUS_DB_ID, PPC_OPT_STATUS_CD ) REFERENCES REF_PPC_OPT_STATUS ( PPC_OPT_STATUS_DB_ID, PPC_OPT_STATUS_CD ) DEFERRABLE ;

ALTER TABLE SD_FAULT_PREC_PROC ADD CONSTRAINT FK_REFPRECPROC_SDFAULTPRECPROC FOREIGN KEY ( PREC_PROC_DB_ID, PREC_PROC_CD ) REFERENCES REF_PREC_PROC ( PREC_PROC_DB_ID, PREC_PROC_CD ) DEFERRABLE ;

ALTER TABLE PO_LINE ADD CONSTRAINT FK_REFPRICETYPE_POLINE FOREIGN KEY ( PRICE_TYPE_DB_ID, PRICE_TYPE_CD ) REFERENCES REF_PRICE_TYPE ( PRICE_TYPE_DB_ID, PRICE_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR_PRICE ADD CONSTRAINT FK_REFPRICTYP_EQPPRTVENDR FOREIGN KEY ( PRICE_TYPE_DB_ID, PRICE_TYPE_CD ) REFERENCES REF_PRICE_TYPE ( PRICE_TYPE_DB_ID, PRICE_TYPE_CD ) DEFERRABLE ;

ALTER TABLE PPC_WP ADD CONSTRAINT FK_REFPRIORITY_PPCWP FOREIGN KEY ( PRIORITY_DB_ID, PRIORITY_CD ) REFERENCES REF_TASK_PRIORITY ( TASK_PRIORITY_DB_ID, TASK_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC_PRINTER ADD CONSTRAINT FK_REFPRNTRTYPE_INVLOCPRINTER FOREIGN KEY ( PRINTER_TYPE_DB_ID, PRINTER_TYPE_CD ) REFERENCES REF_PRINTER_TYPE ( PRINTER_TYPE_DB_ID, PRINTER_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR_ADVSRY ADD CONSTRAINT FK_REFPRTVNTYPE_EQPPRTVNADV FOREIGN KEY ( PART_VENDOR_TYPE_DB_ID, PART_VENDOR_TYPE_CD ) REFERENCES REF_PART_VENDOR_TYPE ( PART_VENDOR_TYPE_DB_ID, PART_VENDOR_TYPE_CD ) DEFERRABLE ;

ALTER TABLE PPC_PUBLISH_FAILURE ADD CONSTRAINT FK_REFPUBLISHFAILTYPE_PPCPUBLI FOREIGN KEY ( PPC_PUBLISH_FAIL_TYPE_DB_ID, PPC_PUBLISH_FAIL_TYPE_CD ) REFERENCES REF_PPC_PUBLISH_FAIL_TYPE ( PPC_PUBLISH_FAIL_TYPE_DB_ID, PPC_PUBLISH_FAIL_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EQP_BOM_PART ADD CONSTRAINT FK_REFPURCHTYPE_EQPBOMPART FOREIGN KEY ( PURCH_TYPE_DB_ID, PURCH_TYPE_CD ) REFERENCES REF_PURCH_TYPE ( PURCH_TYPE_DB_ID, PURCH_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EQP_STOCK_NO ADD CONSTRAINT FK_REFPURCHTYPE_EQPSTOCKNO FOREIGN KEY ( PURCH_TYPE_DB_ID, PURCH_TYPE_CD ) REFERENCES REF_PURCH_TYPE ( PURCH_TYPE_DB_ID, PURCH_TYPE_CD ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_REFPURCHTYPE_REQPART FOREIGN KEY ( PURCH_TYPE_DB_ID, PURCH_TYPE_CD ) REFERENCES REF_PURCH_TYPE ( PURCH_TYPE_DB_ID, PURCH_TYPE_CD ) DEFERRABLE ;

ALTER TABLE INV_XFER ADD CONSTRAINT FK_REFQTYUNIT_INVXFER FOREIGN KEY ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) REFERENCES REF_QTY_UNIT ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) DEFERRABLE ;

ALTER TABLE PO_INVOICE_LINE ADD CONSTRAINT FK_REFQTYUNIT_POINVOICELINE FOREIGN KEY ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) REFERENCES REF_QTY_UNIT ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) DEFERRABLE ;

ALTER TABLE PO_LINE ADD CONSTRAINT FK_REFQTYUNIT_POLINE FOREIGN KEY ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) REFERENCES REF_QTY_UNIT ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_REFQTYUNIT_REQPART FOREIGN KEY ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) REFERENCES REF_QTY_UNIT ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) NOT DEFERRABLE ;

ALTER TABLE RFQ_LINE ADD CONSTRAINT FK_REFQTYUNIT_RFQLINE FOREIGN KEY ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) REFERENCES REF_QTY_UNIT ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) DEFERRABLE ;

ALTER TABLE RFQ_LINE_VENDOR ADD CONSTRAINT FK_REFQTYUNIT_RFQLINEVENDOR FOREIGN KEY ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) REFERENCES REF_QTY_UNIT ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) DEFERRABLE ;

ALTER TABLE STOCK_DIST_REQ ADD CONSTRAINT FK_REFQTYUNIT_STKDISTREQ FOREIGN KEY ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) REFERENCES REF_QTY_UNIT ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) NOT DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR_PRICE ADD CONSTRAINT FK_REFQTYUNT_EQPPRTVENDR FOREIGN KEY ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) REFERENCES REF_QTY_UNIT ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) DEFERRABLE ;

ALTER TABLE QUAR_ACTION ADD CONSTRAINT FK_REFQUARACTCATGRY_QUARACT FOREIGN KEY ( QUAR_ACTION_CATGRY_DB_ID, QUAR_ACTION_CATGRY_CD ) REFERENCES REF_QUAR_ACTION_CATGRY ( QUAR_ACTION_CATGRY_DB_ID, QUAR_ACTION_CATGRY_CD ) DEFERRABLE ;

ALTER TABLE QUAR_ACTION_STATUS ADD CONSTRAINT FK_REFQUARACTSTAT_QUARACTSTAT FOREIGN KEY ( QUAR_ACTION_STATUS_DB_ID, QUAR_ACTION_STATUS_CD ) REFERENCES REF_QUAR_ACTION_STATUS ( QUAR_ACTION_STATUS_DB_ID, QUAR_ACTION_STATUS_CD ) DEFERRABLE ;

ALTER TABLE REF_QUICKTEXT_TYPE ADD CONSTRAINT FK_REFQUICKTEXTTYPE_MIMDB_CTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE REF_QUICKTEXT_TYPE ADD CONSTRAINT FK_REFQUICKTEXTTYPE_MIMDB_REV FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE REF_QUICKTEXT_TYPE ADD CONSTRAINT FK_REFQUICKTEXTTYPE_MIMRSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT_LINE ADD CONSTRAINT FK_REFRCVPRIORITY_SHIPSHIPMENT FOREIGN KEY ( RCV_PRIORITY_DB_ID, RCV_PRIORITY_CD ) REFERENCES REF_RCV_PRIORITY ( RCV_PRIORITY_DB_ID, RCV_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_REFRECCOND_INVINV FOREIGN KEY ( RECEIVE_COND_DB_ID, RECEIVE_COND_CD ) REFERENCES REF_RECEIVE_COND ( RECEIVE_COND_DB_ID, RECEIVE_COND_CD ) DEFERRABLE ;

ALTER TABLE RFQ_LINE_VENDOR ADD CONSTRAINT FK_REFRECCOND_RFQLINEVENDOR FOREIGN KEY ( RECEIVE_COND_DB_ID, RECEIVE_COND_CD ) REFERENCES REF_RECEIVE_COND ( RECEIVE_COND_DB_ID, RECEIVE_COND_CD ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN_COMPONENT ADD CONSTRAINT FK_REFRECEIVECOND_WARRANTYDEFN FOREIGN KEY ( RECEIVE_COND_DB_ID, RECEIVE_COND_CD ) REFERENCES REF_RECEIVE_COND ( RECEIVE_COND_DB_ID, RECEIVE_COND_CD ) DEFERRABLE ;

ALTER TABLE SCHED_STASK ADD CONSTRAINT FK_REFRECVCND_SCHDSTSK FOREIGN KEY ( RECEIVE_COND_DB_ID, RECEIVE_COND_CD ) REFERENCES REF_RECEIVE_COND ( RECEIVE_COND_DB_ID, RECEIVE_COND_CD ) DEFERRABLE ;

ALTER TABLE REF_ENG_UNIT ADD CONSTRAINT FK_REFREFUNIT_REFENGUNIT FOREIGN KEY ( REF_UNIT_DB_ID, REF_UNIT_CD ) REFERENCES REF_REF_UNIT ( REF_UNIT_DB_ID, REF_UNIT_CD ) DEFERRABLE ;

ALTER TABLE INV_AC_REG ADD CONSTRAINT FK_REFREGBODY_INVACREG FOREIGN KEY ( REG_BODY_DB_ID, REG_BODY_CD ) REFERENCES REF_REG_BODY ( REG_BODY_DB_ID, REG_BODY_CD ) DEFERRABLE ;

ALTER TABLE TASK_REF_DOC ADD CONSTRAINT FK_REFREGBODY_TASKREFDOC FOREIGN KEY ( REG_BODY_DB_ID, REG_BODY_CD ) REFERENCES REF_REG_BODY ( REG_BODY_DB_ID, REG_BODY_CD ) DEFERRABLE ;

ALTER TABLE INV_RELIABILITY_NOTE ADD CONSTRAINT FK_REFRELNOTETYPE_INVRELNOTE FOREIGN KEY ( RELIABILITY_NOTE_TYPE_DB_ID, RELIABILITY_NOTE_TYPE_CD ) REFERENCES REF_RELIABILITY_NOTE_TYPE ( RELIABILITY_NOTE_TYPE_DB_ID, RELIABILITY_NOTE_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EVT_EVENT_REL ADD CONSTRAINT FK_REFRELTYPE_EVTEVENTREL FOREIGN KEY ( REL_TYPE_DB_ID, REL_TYPE_CD ) REFERENCES REF_REL_TYPE ( REL_TYPE_DB_ID, REL_TYPE_CD ) DEFERRABLE ;

ALTER TABLE PPC_DEPENDENCY ADD CONSTRAINT FK_REFRELTYPE_PPCDEP FOREIGN KEY ( REL_TYPE_DB_ID, REL_TYPE_CD ) REFERENCES REF_REL_TYPE ( REL_TYPE_DB_ID, REL_TYPE_CD ) DEFERRABLE ;

ALTER TABLE SCHED_RMVD_PART ADD CONSTRAINT FK_REFREMVREASN_SHDRMVDPRT FOREIGN KEY ( REMOVE_REASON_DB_ID, REMOVE_REASON_CD ) REFERENCES REF_REMOVE_REASON ( REMOVE_REASON_DB_ID, REMOVE_REASON_CD ) DEFERRABLE ;

ALTER TABLE SCHED_PART ADD CONSTRAINT FK_REFREQACTION_SCHEDPART FOREIGN KEY ( REQ_ACTION_DB_ID, REQ_ACTION_CD ) REFERENCES REF_REQ_ACTION ( REQ_ACTION_DB_ID, REQ_ACTION_CD ) DEFERRABLE ;

ALTER TABLE TASK_PART_LIST ADD CONSTRAINT FK_REFREQACTION_TASKPARTLIST FOREIGN KEY ( REQ_ACTION_DB_ID, REQ_ACTION_CD ) REFERENCES REF_REQ_ACTION ( REQ_ACTION_DB_ID, REQ_ACTION_CD ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_REFREQPRIORITY_POHEADER FOREIGN KEY ( REQ_PRIORITY_DB_ID, REQ_PRIORITY_CD ) REFERENCES REF_REQ_PRIORITY ( REQ_PRIORITY_DB_ID, REQ_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_REFREQPRIORITY_REQPART FOREIGN KEY ( REQ_PRIORITY_DB_ID, REQ_PRIORITY_CD ) REFERENCES REF_REQ_PRIORITY ( REQ_PRIORITY_DB_ID, REQ_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE RFQ_LINE ADD CONSTRAINT FK_REFREQPRIORITY_RFQLINE FOREIGN KEY ( REQ_PRIORITY_DB_ID, REQ_PRIORITY_CD ) REFERENCES REF_REQ_PRIORITY ( REQ_PRIORITY_DB_ID, REQ_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT ADD CONSTRAINT FK_REFREQPRIORITY_SHIPSHIPMENT FOREIGN KEY ( REQ_PRIORITY_DB_ID, REQ_PRIORITY_CD ) REFERENCES REF_REQ_PRIORITY ( REQ_PRIORITY_DB_ID, REQ_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE TASK_PART_LIST ADD CONSTRAINT FK_REFREQPRIORITY_TASKPARTLIST FOREIGN KEY ( REQ_PRIORITY_DB_ID, REQ_PRIORITY_CD ) REFERENCES REF_REQ_PRIORITY ( REQ_PRIORITY_DB_ID, REQ_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_REFREQTYPE_REQPRT FOREIGN KEY ( REQ_TYPE_DB_ID, REQ_TYPE_CD ) REFERENCES REF_REQ_TYPE ( REQ_TYPE_DB_ID, REQ_TYPE_CD ) DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_REFRESCHEDFROM_TASKTASK FOREIGN KEY ( RESCHED_FROM_DB_ID, RESCHED_FROM_CD ) REFERENCES REF_RESCHED_FROM ( RESCHED_FROM_DB_ID, RESCHED_FROM_CD ) DEFERRABLE ;

ALTER TABLE SD_FAULT_RESULT ADD CONSTRAINT FK_REFRESULTEVENT_SDFAULTRESU FOREIGN KEY ( RESULT_EVENT_DB_ID, RESULT_EVENT_CD ) REFERENCES REF_RESULT_EVENT ( RESULT_EVENT_DB_ID, RESULT_EVENT_CD ) DEFERRABLE ;

ALTER TABLE TASK_PART_LIST ADD CONSTRAINT FK_REFRMVREASN_TASKPRTLIST FOREIGN KEY ( REMOVE_REASON_DB_ID, REMOVE_REASON_CD ) REFERENCES REF_REMOVE_REASON ( REMOVE_REASON_DB_ID, REMOVE_REASON_CD ) DEFERRABLE ;

ALTER TABLE EVT_SCHED_DEAD ADD CONSTRAINT FK_REFSCHDFROM_EVTSCHEDDEAD FOREIGN KEY ( SCHED_FROM_DB_ID, SCHED_FROM_CD ) REFERENCES REF_SCHED_FROM ( SCHED_FROM_DB_ID, SCHED_FROM_CD ) DEFERRABLE ;

ALTER TABLE SCHED_PART ADD CONSTRAINT FK_REFSCHEDPARTSTATUS_SCHEDPAR FOREIGN KEY ( SCHED_PART_STATUS_DB_ID, SCHED_PART_STATUS_CD ) REFERENCES REF_SCHED_PART_STATUS ( SCHED_PART_STATUS_DB_ID, SCHED_PART_STATUS_CD ) DEFERRABLE ;

ALTER TABLE EVT_EVENT ADD CONSTRAINT FK_REFSCHEDPRIORITY_EVTEVENT FOREIGN KEY ( SCHED_PRIORITY_DB_ID, SCHED_PRIORITY_CD ) REFERENCES REF_SCHED_PRIORITY ( SCHED_PRIORITY_DB_ID, SCHED_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE LPA_STASK ADD CONSTRAINT FK_REFSCHEDPRIORITY_LPASTASK FOREIGN KEY ( SCHED_PRIORITY_DB_ID, SCHED_PRIORITY_CD ) REFERENCES REF_SCHED_PRIORITY ( SCHED_PRIORITY_DB_ID, SCHED_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE SD_FAULT_NATURE ADD CONSTRAINT FK_REFSDNATURE_SDFAULTNATURE FOREIGN KEY ( SD_NATURE_DB_ID, SD_NATURE_CD ) REFERENCES REF_SD_NATURE ( SD_NATURE_DB_ID, SD_NATURE_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM_SENS ADD CONSTRAINT FK_REFSENS_EQPASSMBLBOMSENS FOREIGN KEY ( SENSITIVITY_CD ) REFERENCES REF_SENSITIVITY ( SENSITIVITY_CD ) NOT DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_SENS ADD CONSTRAINT FK_REFSENS_EQPASSMBLSENS FOREIGN KEY ( SENSITIVITY_CD ) REFERENCES REF_SENSITIVITY ( SENSITIVITY_CD ) NOT DEFERRABLE ;

ALTER TABLE EQP_BOM_PART_SENS ADD CONSTRAINT FK_REFSENS_EQPBOMPARTSENS FOREIGN KEY ( SENSITIVITY_CD ) REFERENCES REF_SENSITIVITY ( SENSITIVITY_CD ) NOT DEFERRABLE ;

ALTER TABLE REF_ACFT_CAP_LEVEL ADD CONSTRAINT FK_REFSENS_REFACFTCAPLEV FOREIGN KEY ( SENSITIVITY_CD ) REFERENCES REF_SENSITIVITY ( SENSITIVITY_CD ) NOT DEFERRABLE ;

ALTER TABLE REF_FAIL_SEV ADD CONSTRAINT FK_REFSEVTYPE_REFFAILSEV FOREIGN KEY ( SEV_TYPE_DB_ID, SEV_TYPE_CD ) REFERENCES REF_SEV_TYPE ( SEV_TYPE_DB_ID, SEV_TYPE_CD ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT ADD CONSTRAINT FK_REFSHIPMENTTYPE_SHIPSHIPMEN FOREIGN KEY ( SHIPMENT_TYPE_DB_ID, SHIPMENT_TYPE_CD ) REFERENCES REF_SHIPMENT_TYPE ( SHIPMENT_TYPE_DB_ID, SHIPMENT_TYPE_CD ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT ADD CONSTRAINT FK_REFSHIPREASON_SHIPSHIPMENT FOREIGN KEY ( SHIPMENT_REASON_DB_ID, SHIPMENT_REASON_CD ) REFERENCES REF_SHIPMENT_REASON ( SHIPMENT_REASON_DB_ID, SHIPMENT_REASON_CD ) DEFERRABLE ;

ALTER TABLE SHIP_SEGMENT ADD CONSTRAINT FK_REFSHIPSEG_SHIPSEG FOREIGN KEY ( SEGMENT_STATUS_DB_ID, SEGMENT_STATUS_CD ) REFERENCES REF_SHIP_SEGMENT_STATUS ( SEGMENT_STATUS_DB_ID, SEGMENT_STATUS_CD ) DEFERRABLE ;

ALTER TABLE REF_SHIPMENT_REASON ADD CONSTRAINT FK_REFSHIPTYPE_REFSHIPREASON FOREIGN KEY ( SHIPMENT_TYPE_DB_ID, SHIPMENT_TYPE_CD ) REFERENCES REF_SHIPMENT_TYPE ( SHIPMENT_TYPE_DB_ID, SHIPMENT_TYPE_CD ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT ADD CONSTRAINT FK_REFSIZCLASS_SHIPSHIPMENT FOREIGN KEY ( SIZE_CLASS_DB_ID, SIZE_CLASS_CD ) REFERENCES REF_SIZE_CLASS ( SIZE_CLASS_DB_ID, SIZE_CLASS_CD ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_REFSPEC2KCUST_POHEADER FOREIGN KEY ( SPEC2K_CUST_DB_ID, SPEC2K_CUST_CD ) REFERENCES REF_SPEC2K_CUST ( SPEC2K_CUST_DB_ID, SPEC2K_CUST_CD ) DEFERRABLE ;

ALTER TABLE RFQ_HEADER ADD CONSTRAINT FK_REFSPEC2KCUST_RFQHEADER FOREIGN KEY ( SPEC2K_CUST_DB_ID, SPEC2K_CUST_CD ) REFERENCES REF_SPEC2K_CUST ( SPEC2K_CUST_DB_ID, SPEC2K_CUST_CD ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_SERVICE_TYPE ADD CONSTRAINT FK_REFSRVTYPE_ORGVENSRVTYPE FOREIGN KEY ( SERVICE_TYPE_DB_ID, SERVICE_TYPE_CD ) REFERENCES REF_SERVICE_TYPE ( SERVICE_TYPE_DB_ID, SERVICE_TYPE_CD ) DEFERRABLE ;

ALTER TABLE SCHED_SERVICE_TYPE ADD CONSTRAINT FK_REFSRVTYPE_SCHEDSRVTYPE FOREIGN KEY ( SERVICE_TYPE_DB_ID, SERVICE_TYPE_CD ) REFERENCES REF_SERVICE_TYPE ( SERVICE_TYPE_DB_ID, SERVICE_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EVT_EVENT ADD CONSTRAINT FK_REFSTAGEREASON_EVTEVENT FOREIGN KEY ( STAGE_REASON_DB_ID, STAGE_REASON_CD ) REFERENCES REF_STAGE_REASON ( STAGE_REASON_DB_ID, STAGE_REASON_CD ) DEFERRABLE ;

ALTER TABLE EVT_STAGE ADD CONSTRAINT FK_REFSTAGEREASON_EVTSTAGE FOREIGN KEY ( STAGE_REASON_DB_ID, STAGE_REASON_CD ) REFERENCES REF_STAGE_REASON ( STAGE_REASON_DB_ID, STAGE_REASON_CD ) DEFERRABLE ;

ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT FK_REFSTAGEREASON_INVCNDCHEVT FOREIGN KEY ( stage_reason_db_id, stage_reason_cd ) REFERENCES REF_STAGE_REASON ( STAGE_REASON_DB_ID, STAGE_REASON_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_LIC ADD CONSTRAINT FK_REFSTAGEREASON_ORGHRLIC FOREIGN KEY ( STAGE_REASON_DB_ID, STAGE_REASON_CD ) REFERENCES REF_STAGE_REASON ( STAGE_REASON_DB_ID, STAGE_REASON_CD ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR ADD CONSTRAINT FK_REFSTAGEREASON_SCHDLBR FOREIGN KEY ( STAGE_REASON_DB_ID, STAGE_REASON_CD ) REFERENCES REF_STAGE_REASON ( STAGE_REASON_DB_ID, STAGE_REASON_CD ) DEFERRABLE ;

ALTER TABLE EQP_MANUFACT ADD CONSTRAINT FK_REFSTATE_EQPMANUFACT FOREIGN KEY ( COUNTRY_DB_ID, COUNTRY_CD, STATE_CD ) REFERENCES REF_STATE ( COUNTRY_DB_ID, COUNTRY_CD, STATE_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC ADD CONSTRAINT FK_REFSTATE_INVLOC FOREIGN KEY ( COUNTRY_DB_ID, COUNTRY_CD, STATE_CD ) REFERENCES REF_STATE ( COUNTRY_DB_ID, COUNTRY_CD, STATE_CD ) DEFERRABLE ;

ALTER TABLE ORG_ADDRESS ADD CONSTRAINT FK_REFSTATE_UTLADDRESS FOREIGN KEY ( COUNTRY_DB_ID, COUNTRY_CD, STATE_CD ) REFERENCES REF_STATE ( COUNTRY_DB_ID, COUNTRY_CD, STATE_CD ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_STEP ADD CONSTRAINT FK_REFSTEPSTATUS_SCHEDLBRSTEP FOREIGN KEY ( STEP_STATUS_CD ) REFERENCES REF_STEP_STATUS ( STEP_STATUS_CD ) DEFERRABLE ;

ALTER TABLE SCHED_STEP ADD CONSTRAINT FK_REFSTEPSTATUS_SCHEDSTEP FOREIGN KEY ( STEP_STATUS_CD ) REFERENCES REF_STEP_STATUS ( STEP_STATUS_CD ) DEFERRABLE ;

ALTER TABLE PPC_PHASE_CLASS ADD CONSTRAINT FK_REFSUBCLASS_PPCPHASECLASS FOREIGN KEY ( TASK_SUBCLASS_DB_ID, TASK_SUBCLASS_CD ) REFERENCES REF_TASK_SUBCLASS ( TASK_SUBCLASS_DB_ID, TASK_SUBCLASS_CD ) DEFERRABLE ;

ALTER TABLE TASK_ADVISORY ADD CONSTRAINT FK_REFTASKADVISORYTYPE_TASKADV FOREIGN KEY ( TASK_ADVISORY_TYPE_DB_ID, TASK_ADVISORY_TYPE_CD ) REFERENCES REF_TASK_ADVISORY_TYPE ( TASK_ADVISORY_TYPE_DB_ID, TASK_ADVISORY_TYPE_CD ) DEFERRABLE ;

ALTER TABLE PPC_PHASE_CLASS ADD CONSTRAINT FK_REFTASKCLASS_PPCPHASECLASS FOREIGN KEY ( TASK_CLASS_DB_ID, TASK_CLASS_CD ) REFERENCES REF_TASK_CLASS ( TASK_CLASS_DB_ID, TASK_CLASS_CD ) DEFERRABLE ;

ALTER TABLE REF_TASK_SUBCLASS ADD CONSTRAINT FK_REFTASKCLASS_REFTASKSUBCLAS FOREIGN KEY ( TASK_CLASS_DB_ID, TASK_CLASS_CD ) REFERENCES REF_TASK_CLASS ( TASK_CLASS_DB_ID, TASK_CLASS_CD ) DEFERRABLE ;

ALTER TABLE SCHED_STASK ADD CONSTRAINT FK_REFTASKCLASS_SCHEDSTASK FOREIGN KEY ( TASK_CLASS_DB_ID, TASK_CLASS_CD ) REFERENCES REF_TASK_CLASS ( TASK_CLASS_DB_ID, TASK_CLASS_CD ) DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_REFTASKCLASS_TASKTASK FOREIGN KEY ( TASK_CLASS_DB_ID, TASK_CLASS_CD ) REFERENCES REF_TASK_CLASS ( TASK_CLASS_DB_ID, TASK_CLASS_CD ) DEFERRABLE ;

ALTER TABLE TASK_REF_DOC ADD CONSTRAINT FK_REFTASKDEFDISPOSITION_TASKR FOREIGN KEY ( TASK_DEF_DISPOSITION_DB_ID, TASK_DEF_DISPOSITION_CD ) REFERENCES REF_TASK_DEF_DISPOSITION ( TASK_DEF_DISPOSITION_DB_ID, TASK_DEF_DISPOSITION_CD ) DEFERRABLE ;

ALTER TABLE TASK_REF_DOC ADD CONSTRAINT FK_REFTASKDEFISSUEBY_TASKREFDO FOREIGN KEY ( TASK_DEF_ISSUE_BY_DB_ID, TASK_DEF_ISSUE_BY_CD ) REFERENCES REF_TASK_DEF_ISSUE_BY ( TASK_DEF_ISSUE_BY_DB_ID, TASK_DEF_ISSUE_BY_CD ) DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_REFTASKDEFSTATUS_TASKTASK FOREIGN KEY ( TASK_DEF_STATUS_DB_ID, TASK_DEF_STATUS_CD ) REFERENCES REF_TASK_DEF_STATUS ( TASK_DEF_STATUS_DB_ID, TASK_DEF_STATUS_CD ) DEFERRABLE ;

ALTER TABLE TASK_TASK_DEP ADD CONSTRAINT FK_REFTASKDEPACTION_TASKTASKDE FOREIGN KEY ( TASK_DEP_ACTION_DB_ID, TASK_DEP_ACTION_CD ) REFERENCES REF_TASK_DEP_ACTION ( TASK_DEP_ACTION_DB_ID, TASK_DEP_ACTION_CD ) DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_REFTASKMUSTREMOVE_TASKTASK FOREIGN KEY ( TASK_MUST_REMOVE_DB_ID, TASK_MUST_REMOVE_CD ) REFERENCES REF_TASK_MUST_REMOVE ( TASK_MUST_REMOVE_DB_ID, TASK_MUST_REMOVE_CD ) DEFERRABLE ;

ALTER TABLE SCHED_STASK ADD CONSTRAINT FK_REFTASKORIGINATOR_SCHEDSTAS FOREIGN KEY ( TASK_ORIGINATOR_DB_ID, TASK_ORIGINATOR_CD ) REFERENCES REF_TASK_ORIGINATOR ( TASK_ORIGINATOR_DB_ID, TASK_ORIGINATOR_CD ) DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_REFTASKORIGINATOR_TASKTASK FOREIGN KEY ( TASK_ORIGINATOR_DB_ID, TASK_ORIGINATOR_CD ) REFERENCES REF_TASK_ORIGINATOR ( TASK_ORIGINATOR_DB_ID, TASK_ORIGINATOR_CD ) DEFERRABLE ;

ALTER TABLE LPA_STASK ADD CONSTRAINT FK_REFTASKPRIORITY_LPASTASK FOREIGN KEY ( TASK_PRIORITY_DB_ID, TASK_PRIORITY_CD ) REFERENCES REF_TASK_PRIORITY ( TASK_PRIORITY_DB_ID, TASK_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE PPC_TASK ADD CONSTRAINT FK_REFTASKPRIORITY_PPCTASK FOREIGN KEY ( TASK_PRIORITY_DB_ID, TASK_PRIORITY_CD ) REFERENCES REF_TASK_PRIORITY ( TASK_PRIORITY_DB_ID, TASK_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE SCHED_STASK ADD CONSTRAINT FK_REFTASKPRIORITY_SCHEDSTASK FOREIGN KEY ( TASK_PRIORITY_DB_ID, TASK_PRIORITY_CD ) REFERENCES REF_TASK_PRIORITY ( TASK_PRIORITY_DB_ID, TASK_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_REFTASKPRIORITY_TASKTASK FOREIGN KEY ( TASK_PRIORITY_DB_ID, TASK_PRIORITY_CD ) REFERENCES REF_TASK_PRIORITY ( TASK_PRIORITY_DB_ID, TASK_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_REFTASKSCHEDFROM_TASKTASK FOREIGN KEY ( TASK_SCHED_FROM_DB_ID, TASK_SCHED_FROM_CD ) REFERENCES REF_TASK_SCHED_FROM ( TASK_SCHED_FROM_DB_ID, TASK_SCHED_FROM_CD ) DEFERRABLE ;

ALTER TABLE SCHED_STASK ADD CONSTRAINT FK_REFTASKSUBCLASS_SCHEDSTASK FOREIGN KEY ( TASK_SUBCLASS_DB_ID, TASK_SUBCLASS_CD ) REFERENCES REF_TASK_SUBCLASS ( TASK_SUBCLASS_DB_ID, TASK_SUBCLASS_CD ) DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_REFTASKSUBCLASS_TASKTASK FOREIGN KEY ( TASK_SUBCLASS_DB_ID, TASK_SUBCLASS_CD ) REFERENCES REF_TASK_SUBCLASS ( TASK_SUBCLASS_DB_ID, TASK_SUBCLASS_CD ) DEFERRABLE ;

ALTER TABLE LPA_FLEET ADD CONSTRAINT FK_REFTASKSUBCL_LPAFLEETSRVC FOREIGN KEY ( SERVICE_WP_TASK_SUBCLASS_DB_ID, SERVICE_WP_TASK_SUBCLASS_CD ) REFERENCES REF_TASK_SUBCLASS ( TASK_SUBCLASS_DB_ID, TASK_SUBCLASS_CD ) DEFERRABLE ;

ALTER TABLE LPA_FLEET ADD CONSTRAINT FK_REFTASKSUBCL_LPAFLEETTURN FOREIGN KEY ( TURN_WP_TASK_SUBCLASS_DB_ID, TURN_WP_TASK_SUBCLASS_CD ) REFERENCES REF_TASK_SUBCLASS ( TASK_SUBCLASS_DB_ID, TASK_SUBCLASS_CD ) DEFERRABLE ;

ALTER TABLE PO_INVOICE ADD CONSTRAINT FK_REFTERMCOND_POINVOICE FOREIGN KEY ( TERMS_CONDITIONS_DB_ID, TERMS_CONDITIONS_CD ) REFERENCES REF_TERMS_CONDITIONS ( TERMS_CONDITIONS_DB_ID, TERMS_CONDITIONS_CD ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR ADD CONSTRAINT FK_REFTERMSCONDITIONS_ORGVENDR FOREIGN KEY ( TERMS_CONDITIONS_DB_ID, TERMS_CONDITIONS_CD ) REFERENCES REF_TERMS_CONDITIONS ( TERMS_CONDITIONS_DB_ID, TERMS_CONDITIONS_CD ) DEFERRABLE ;

ALTER TABLE EQP_ASSMBL_BOM_THRESHOLD ADD CONSTRAINT FK_REFTHMODE_EQPASSMBTH FOREIGN KEY ( THRESHOLD_MODE_DB_ID, THRESHOLD_MODE_CD ) REFERENCES REF_THRESHOLD_MODE ( THRESHOLD_MODE_DB_ID, THRESHOLD_MODE_CD ) DEFERRABLE ;

ALTER TABLE ORG_HR_TIMEOFF ADD CONSTRAINT FK_REFTIMEOFFTYPE_ORGHRTIMEOFF FOREIGN KEY ( TIMEOFF_TYPE_DB_ID, TIMEOFF_TYPE_CD ) REFERENCES REF_TIMEOFF_TYPE ( TIMEOFF_TYPE_DB_ID, TIMEOFF_TYPE_CD ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_REFTRANSPRTTYPE_POHEADER FOREIGN KEY ( TRANSPORT_TYPE_DB_ID, TRANSPORT_TYPE_CD ) REFERENCES REF_TRANSPORT_TYPE ( TRANSPORT_TYPE_DB_ID, TRANSPORT_TYPE_CD ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT ADD CONSTRAINT FK_REFTRANSPRTTYPE_SHPSHIPMENT FOREIGN KEY ( TRANSPORT_TYPE_DB_ID, TRANSPORT_TYPE_CD ) REFERENCES REF_TRANSPORT_TYPE ( TRANSPORT_TYPE_DB_ID, TRANSPORT_TYPE_CD ) DEFERRABLE ;

ALTER TABLE RFQ_HEADER ADD CONSTRAINT FK_REFTRANSTYPE_RFQHEADER FOREIGN KEY ( TRANSPORT_TYPE_DB_ID, TRANSPORT_TYPE_CD ) REFERENCES REF_TRANSPORT_TYPE ( TRANSPORT_TYPE_DB_ID, TRANSPORT_TYPE_CD ) DEFERRABLE ;

ALTER TABLE RFQ_VENDOR ADD CONSTRAINT FK_REFTRANSTYPE_RFQVENDOR FOREIGN KEY ( TRANSPORT_TYPE_DB_ID, TRANSPORT_TYPE_CD ) REFERENCES REF_TRANSPORT_TYPE ( TRANSPORT_TYPE_DB_ID, TRANSPORT_TYPE_CD ) DEFERRABLE ;

ALTER TABLE PO_HEADER ADD CONSTRAINT FK_REFTRMSCONDS_POHEADER FOREIGN KEY ( TERMS_CONDITIONS_DB_ID, TERMS_CONDITIONS_CD ) REFERENCES REF_TERMS_CONDITIONS ( TERMS_CONDITIONS_DB_ID, TERMS_CONDITIONS_CD ) DEFERRABLE ;

ALTER TABLE RFQ_HEADER ADD CONSTRAINT FK_REFTRMSCONDS_RFQHEADER FOREIGN KEY ( TERMS_CONDITIONS_DB_ID, TERMS_CONDITIONS_CD ) REFERENCES REF_TERMS_CONDITIONS ( TERMS_CONDITIONS_DB_ID, TERMS_CONDITIONS_CD ) DEFERRABLE ;

ALTER TABLE RFQ_VENDOR ADD CONSTRAINT FK_REFTRMSCONDS_RFQVENDOR FOREIGN KEY ( TERMS_CONDITIONS_DB_ID, TERMS_CONDITIONS_CD ) REFERENCES REF_TERMS_CONDITIONS ( TERMS_CONDITIONS_DB_ID, TERMS_CONDITIONS_CD ) DEFERRABLE ;

ALTER TABLE USG_USAGE_RECORD ADD CONSTRAINT FK_REFUSTYPE_USGUSREC FOREIGN KEY ( USAGE_TYPE_CD ) REFERENCES REF_USAGE_TYPE ( USAGE_TYPE_CD ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR ADD CONSTRAINT FK_REFVENDRAPPROVAL_ORGVENDR FOREIGN KEY ( VENDOR_APPROVAL_DB_ID, VENDOR_APPROVAL_CD ) REFERENCES REF_VENDOR_APPROVAL ( VENDOR_APPROVAL_DB_ID, VENDOR_APPROVAL_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR ADD CONSTRAINT FK_REFVENDRSTATUS_EQPPRTVENDOR FOREIGN KEY ( VENDOR_STATUS_DB_ID, VENDOR_STATUS_CD ) REFERENCES REF_VENDOR_STATUS ( VENDOR_STATUS_DB_ID, VENDOR_STATUS_CD ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR ADD CONSTRAINT FK_REFVENDRTYPE_ORGVENDR FOREIGN KEY ( VENDOR_TYPE_DB_ID, VENDOR_TYPE_CD ) REFERENCES REF_VENDOR_TYPE ( VENDOR_TYPE_DB_ID, VENDOR_TYPE_CD ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_PO_TYPE ADD CONSTRAINT FK_REFVENSTATUS_ORGVENPOTYPE FOREIGN KEY ( VENDOR_STATUS_DB_ID, VENDOR_STATUS_CD ) REFERENCES REF_VENDOR_STATUS ( VENDOR_STATUS_DB_ID, VENDOR_STATUS_CD ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_SERVICE_TYPE ADD CONSTRAINT FK_REFVENSTAT_ORGVENSRVTYPE FOREIGN KEY ( VENDOR_STATUS_DB_ID, VENDOR_STATUS_CD ) REFERENCES REF_VENDOR_STATUS ( VENDOR_STATUS_DB_ID, VENDOR_STATUS_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR_REP ADD CONSTRAINT FK_REFVNDRSTAT_EQPPRTVENDOR FOREIGN KEY ( VENDOR_STATUS_DB_ID, VENDOR_STATUS_CD ) REFERENCES REF_VENDOR_STATUS ( VENDOR_STATUS_DB_ID, VENDOR_STATUS_CD ) DEFERRABLE ;

ALTER TABLE WF_DEFN ADD CONSTRAINT FK_REFWFDEFNTYPE_WFDEFN FOREIGN KEY ( WF_DEFN_TYPE_DB_ID, WF_DEFN_TYPE_CD ) REFERENCES REF_WF_DEFN_TYPE ( WF_DEFN_TYPE_DB_ID, WF_DEFN_TYPE_CD ) DEFERRABLE ;

ALTER TABLE WF_WF ADD CONSTRAINT FK_REFWFPRIORITY_WFWF FOREIGN KEY ( WF_PRIORITY_DB_ID, WF_PRIORITY_CD ) REFERENCES REF_WF_PRIORITY ( WF_PRIORITY_DB_ID, WF_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE WF_WF ADD CONSTRAINT FK_REFWFSTATUS_WFWF FOREIGN KEY ( WF_STATUS_DB_ID, WF_STATUS_CD ) REFERENCES REF_WF_STATUS ( WF_STATUS_DB_ID, WF_STATUS_CD ) DEFERRABLE ;

ALTER TABLE WF_STEP ADD CONSTRAINT FK_REFWFSTEPREASON_WFSTEP FOREIGN KEY ( WF_STEP_REASON_DB_ID, WF_STEP_REASON_CD ) REFERENCES REF_WF_STEP_REASON ( WF_STEP_REASON_DB_ID, WF_STEP_REASON_CD ) DEFERRABLE ;

ALTER TABLE WF_STEP ADD CONSTRAINT FK_REFWFSTEPSTATUS_STEP FOREIGN KEY ( WF_STEP_STATUS_DB_ID, WF_STEP_STATUS_CD ) REFERENCES REF_WF_STEP_STATUS ( WF_STEP_STATUS_DB_ID, WF_STEP_STATUS_CD ) DEFERRABLE ;

ALTER TABLE ER_WORK_TYPE ADD CONSTRAINT FK_REFWORKTYPE_ERWORKTYPE FOREIGN KEY ( WORK_TYPE_DB_ID, WORK_TYPE_CD ) REFERENCES REF_WORK_TYPE ( WORK_TYPE_DB_ID, WORK_TYPE_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC_CAPABILITY ADD CONSTRAINT FK_REFWORKTYPE_INVLOCCAPABILIT FOREIGN KEY ( WORK_TYPE_DB_ID, WORK_TYPE_CD ) REFERENCES REF_WORK_TYPE ( WORK_TYPE_DB_ID, WORK_TYPE_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC_WT_CAPABILITY ADD CONSTRAINT FK_REFWORKTYPE_INVLOCWTCAPABIL FOREIGN KEY ( WORK_TYPE_DB_ID, WORK_TYPE_CD ) REFERENCES REF_WORK_TYPE ( WORK_TYPE_DB_ID, WORK_TYPE_CD ) DEFERRABLE ;

ALTER TABLE LRP_LOC_CAPABILITY ADD CONSTRAINT FK_REFWORKTYPE_LRPLOCCAP FOREIGN KEY ( WORK_TYPE_DB_ID, WORK_TYPE_CD ) REFERENCES REF_WORK_TYPE ( WORK_TYPE_DB_ID, WORK_TYPE_CD ) DEFERRABLE ;

ALTER TABLE SCHED_WORK_TYPE ADD CONSTRAINT FK_REFWORKTYPE_SCHEDWORKTYPE FOREIGN KEY ( WORK_TYPE_DB_ID, WORK_TYPE_CD ) REFERENCES REF_WORK_TYPE ( WORK_TYPE_DB_ID, WORK_TYPE_CD ) DEFERRABLE ;

ALTER TABLE TASK_WORK_TYPE ADD CONSTRAINT FK_REFWORKTYPE_TASKWORKTYPE FOREIGN KEY ( WORK_TYPE_DB_ID, WORK_TYPE_CD ) REFERENCES REF_WORK_TYPE ( WORK_TYPE_DB_ID, WORK_TYPE_CD ) DEFERRABLE ;

ALTER TABLE SCHED_WP_SIGN_REQ ADD CONSTRAINT FK_REFWPSIGNREQSTAT_SCHEDWPSIG FOREIGN KEY ( WP_SIGN_REQ_STATUS_DB_ID, WP_SIGN_REQ_STATUS_CD ) REFERENCES REF_WP_SIGN_REQ_STATUS ( WP_SIGN_REQ_STATUS_DB_ID, WP_SIGN_REQ_STATUS_CD ) DEFERRABLE ;

ALTER TABLE LPA_SERVICE_WORK_TYPE ADD CONSTRAINT FK_REFWTYPE_LPASERVWTYPE FOREIGN KEY ( WORK_TYPE_DB_ID, WORK_TYPE_CD ) REFERENCES REF_WORK_TYPE ( WORK_TYPE_DB_ID, WORK_TYPE_CD ) DEFERRABLE ;

ALTER TABLE LPA_TURN_WORK_TYPE ADD CONSTRAINT FK_REFWTYPE_LPATURNWTYPE FOREIGN KEY ( WORK_TYPE_DB_ID, WORK_TYPE_CD ) REFERENCES REF_WORK_TYPE ( WORK_TYPE_DB_ID, WORK_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_ROTABLE_ADJUST ADD CONSTRAINT FK_REFXACTIONTYPE_EQPPARTROTAB FOREIGN KEY ( XACTION_TYPE_DB_ID, XACTION_TYPE_CD ) REFERENCES REF_XACTION_TYPE ( XACTION_TYPE_DB_ID, XACTION_TYPE_CD ) DEFERRABLE ;

ALTER TABLE FNC_XACTION_LOG ADD CONSTRAINT FK_REFXCTNTYPE_FNCXACTIONLOG FOREIGN KEY ( XACTION_TYPE_DB_ID, XACTION_TYPE_CD ) REFERENCES REF_XACTION_TYPE ( XACTION_TYPE_DB_ID, XACTION_TYPE_CD ) DEFERRABLE ;

ALTER TABLE INV_XFER ADD CONSTRAINT FK_REFXFERTYPE_INVXFER FOREIGN KEY ( XFER_TYPE_DB_ID, XFER_TYPE_CD ) REFERENCES REF_XFER_TYPE ( XFER_TYPE_DB_ID, XFER_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EQP_STOCK_NO ADD CONSTRAINT FK_REF_ABC_CLASS_EQPSTOCKNO FOREIGN KEY ( ABC_CLASS_DB_ID, ABC_CLASS_CD ) REFERENCES REF_ABC_CLASS ( ABC_CLASS_DB_ID, ABC_CLASS_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_REF_ABC_CLS_EQPPRTNO FOREIGN KEY ( ABC_CLASS_DB_ID, ABC_CLASS_CD ) REFERENCES REF_ABC_CLASS ( ABC_CLASS_DB_ID, ABC_CLASS_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_ATTACHMENT ADD CONSTRAINT FK_REF_ATTACHMENT_TYPE_EQPPRTA FOREIGN KEY ( ATTACH_TYPE_DB_ID, ATTACH_TYPE_CD ) REFERENCES REF_ATTACH_TYPE ( ATTACH_TYPE_DB_ID, ATTACH_TYPE_CD ) DEFERRABLE ;

ALTER TABLE REF_FINANCIAL_CLASS ADD CONSTRAINT FK_REF_BITMAP_REFFINANCIALCLAS FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_HAZMAT ADD CONSTRAINT FK_REF_BITMAP_REFHAZMAT FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_PACKAGING_INSTR ADD CONSTRAINT FK_REF_BITMAP_REFPACKAGINGINST FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_SHIPPING_INSTR ADD CONSTRAINT FK_REF_BITMAP_REFSHIPPINGINSTR FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE REF_STORAGE_INSTR ADD CONSTRAINT FK_REF_BITMAP_REFSTORAGEINSTR FOREIGN KEY ( BITMAP_DB_ID, BITMAP_TAG ) REFERENCES REF_BITMAP ( BITMAP_DB_ID, BITMAP_TAG ) DEFERRABLE ;

ALTER TABLE MIM_DATA_TYPE ADD CONSTRAINT FK_REF_ENG_UNIT_MIMDATATYPE FOREIGN KEY ( ENG_UNIT_DB_ID, ENG_UNIT_CD ) REFERENCES REF_ENG_UNIT ( ENG_UNIT_DB_ID, ENG_UNIT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_REF_FINANCIAL_CLASS_EQPPART FOREIGN KEY ( FINANCIAL_CLASS_DB_ID, FINANCIAL_CLASS_CD ) REFERENCES REF_FINANCIAL_CLASS ( FINANCIAL_CLASS_DB_ID, FINANCIAL_CLASS_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_REF_HAZMAT_EQPPARTNO FOREIGN KEY ( HAZMAT_DB_ID, HAZMAT_CD ) REFERENCES REF_HAZMAT ( HAZMAT_DB_ID, HAZMAT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_IETM ADD CONSTRAINT FK_REF_IETM_TYPE_EQPPARTIETM FOREIGN KEY ( IETM_TYPE_DB_ID, IETM_TYPE_CD ) REFERENCES REF_IETM_TYPE ( IETM_TYPE_DB_ID, IETM_TYPE_CD ) DEFERRABLE ;

ALTER TABLE INT_BP_LOOKUP ADD CONSTRAINT FK_REF_INT_LOGTYP_INT_BP_LUP FOREIGN KEY ( INT_LOGGING_TYPE_CD ) REFERENCES REF_INT_LOGGING_TYPE ( INT_LOGGING_TYPE_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_REF_PAKGING_INSTR_EQPPRTNO FOREIGN KEY ( PACKAGING_INSTR_DB_ID, PACKAGING_INSTR_CD ) REFERENCES REF_PACKAGING_INSTR ( PACKAGING_INSTR_DB_ID, PACKAGING_INSTR_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_ALT_UNIT ADD CONSTRAINT FK_REF_QTY_UNIT_EQPPARTALTUNIT FOREIGN KEY ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) REFERENCES REF_QTY_UNIT ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_REF_QTY_UNIT_EQPPARTNO FOREIGN KEY ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) REFERENCES REF_QTY_UNIT ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) DEFERRABLE ;

ALTER TABLE EQP_STOCK_NO ADD CONSTRAINT FK_REF_QTY_UNIT_EQPSTOCKNO FOREIGN KEY ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) REFERENCES REF_QTY_UNIT ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT_LINE ADD CONSTRAINT FK_REF_QTY_UNIT_SHIPMENTLINE FOREIGN KEY ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) REFERENCES REF_QTY_UNIT ( QTY_UNIT_DB_ID, QTY_UNIT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_REF_SHIPPING_INSTR_EQPPARTN FOREIGN KEY ( SHIPPING_INSTR_DB_ID, SHIPPING_INSTR_CD ) REFERENCES REF_SHIPPING_INSTR ( SHIPPING_INSTR_DB_ID, SHIPPING_INSTR_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC_STOCK ADD CONSTRAINT FK_REF_STOCK_LW_ACTN_INVLOCSTC FOREIGN KEY ( STOCK_LOW_ACTN_DB_ID, STOCK_LOW_ACTN_CD ) REFERENCES REF_STOCK_LOW_ACTN ( STOCK_LOW_ACTN_DB_ID, STOCK_LOW_ACTN_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_REF_STORAGE_INSTR_EQPPRTNO FOREIGN KEY ( STORAGE_INSTR_DB_ID, STORAGE_INSTR_CD ) REFERENCES REF_STORAGE_INSTR ( STORAGE_INSTR_DB_ID, STORAGE_INSTR_CD ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF_REL_DEF ADD CONSTRAINT FK_REL_FAILDEFERREF FOREIGN KEY ( REL_FAIL_DEFER_REF_ID ) REFERENCES FAIL_DEFER_REF ( ALT_ID ) NOT DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF_REL_DEF ADD CONSTRAINT FK_REL_FAILDEFERREF_ORIGIN FOREIGN KEY ( FAIL_DEFER_REF_ID ) REFERENCES FAIL_DEFER_REF ( ALT_ID ) NOT DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF_REL_DEF ADD CONSTRAINT FK_REL_MIMRSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_REPLEQPASSBOM_TASKTASK FOREIGN KEY ( REPL_ASSMBL_DB_ID, REPL_ASSMBL_CD, REPL_ASSMBL_BOM_ID ) REFERENCES EQP_ASSMBL_BOM ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE ADD CONSTRAINT FK_REPLSCHEDSTASK_POLINE FOREIGN KEY ( REPL_TASK_DB_ID, REPL_TASK_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE INV_RELIABILITY_NOTE ADD CONSTRAINT FK_RESOLVEORGHR_INVRELNOTE FOREIGN KEY ( RESOLVE_HR_DB_ID, RESOLVE_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE RFQ_LINE ADD CONSTRAINT FK_RFQHEADER_RFQLINE FOREIGN KEY ( RFQ_DB_ID, RFQ_ID ) REFERENCES RFQ_HEADER ( RFQ_DB_ID, RFQ_ID ) DEFERRABLE ;

ALTER TABLE RFQ_VENDOR ADD CONSTRAINT FK_RFQHEADER_RFQVENDOR FOREIGN KEY ( RFQ_DB_ID, RFQ_ID ) REFERENCES RFQ_HEADER ( RFQ_DB_ID, RFQ_ID ) DEFERRABLE ;

ALTER TABLE RFQ_LINE_VENDOR_CHARGE ADD CONSTRAINT FK_RFQLINEVNDR_RFQLINEVNDRCHRG FOREIGN KEY ( RFQ_DB_ID, RFQ_ID, RFQ_LINE_ID, VENDOR_DB_ID, VENDOR_ID ) REFERENCES RFQ_LINE_VENDOR ( RFQ_DB_ID, RFQ_ID, RFQ_LINE_ID, VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE RFQ_LINE_VENDOR_TAX ADD CONSTRAINT FK_RFQLINEVNDR_RFQLINEVNDRTAX FOREIGN KEY ( RFQ_DB_ID, RFQ_ID, RFQ_LINE_ID, VENDOR_DB_ID, VENDOR_ID ) REFERENCES RFQ_LINE_VENDOR ( RFQ_DB_ID, RFQ_ID, RFQ_LINE_ID, VENDOR_DB_ID, VENDOR_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_RFQLINE_REQPART FOREIGN KEY ( RFQ_DB_ID, RFQ_ID, RFQ_LINE_ID ) REFERENCES RFQ_LINE ( RFQ_DB_ID, RFQ_ID, RFQ_LINE_ID ) DEFERRABLE ;

ALTER TABLE RFQ_LINE_VENDOR ADD CONSTRAINT FK_RFQLINE_RFQLINEVENDOR FOREIGN KEY ( RFQ_DB_ID, RFQ_ID, RFQ_LINE_ID ) REFERENCES RFQ_LINE ( RFQ_DB_ID, RFQ_ID, RFQ_LINE_ID ) DEFERRABLE ;

ALTER TABLE UTL_ALERT_TYPE_ROLE ADD CONSTRAINT FK_ROLE_ALRTTYPEROLE FOREIGN KEY ( ROLE_ID ) REFERENCES UTL_ROLE ( ROLE_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_RO_FNCACCOUNT_EQPPARTNO FOREIGN KEY ( REPAIR_ORDER_ACCOUNT_DB_ID, REPAIR_ORDER_ACCOUNT_ID ) REFERENCES FNC_ACCOUNT ( ACCOUNT_DB_ID, ACCOUNT_ID ) NOT DEFERRABLE ;

ALTER TABLE MAINT_PRGM ADD CONSTRAINT FK_RSTAT_MAINTPRGM FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_DEFN ADD CONSTRAINT FK_RSTAT_MAINTPRGMDEFN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_TASK ADD CONSTRAINT FK_RSTAT_MAINTPRGMTASK FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_VENDOR_SPEC2K_CMND ADD CONSTRAINT FK_RSTAT_ORGVENS2KCMD FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_HR ADD CONSTRAINT FK_RSTAT_PPCHR FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_HR_LIC ADD CONSTRAINT FK_RSTAT_PPCHRLIC FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_HR_SHIFT_PLAN ADD CONSTRAINT FK_RSTAT_PPCHRSHFTPLN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_LOC_CAPACITY ADD CONSTRAINT FK_RSTAT_PPCLOCCAP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_LOC_EXCLUDE ADD CONSTRAINT FK_RSTAT_PPCLOCEX FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_OPT_STATUS ADD CONSTRAINT FK_RSTAT_PPCOPTSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE PPC_TASK_DEFN ADD CONSTRAINT FK_RSTAT_PPCTASKDEFN FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_PPC_OPT_STATUS ADD CONSTRAINT FK_RSTAT_REFPPCOPTSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_SPEC2K_CMND ADD CONSTRAINT FK_RSTAT_REFSPEC2KCMND FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE REF_SPEC2K_CUST ADD CONSTRAINT FK_RSTAT_REFSPEC2KCUST FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_BLOCK_REQ_MAP ADD CONSTRAINT FK_RSTAT_TASKBLKREQMAP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_DEADLINE_EXT ADD CONSTRAINT FK_RSTAT_TASKDEADEXT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE TASK_JIC_REQ_MAP ADD CONSTRAINT FK_RSTAT_TASKJICREQMAP FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE ;

ALTER TABLE ORG_LABOUR_SKILL_MAP ADD CONSTRAINT FK_RVMIMDB_ORGLBRSKILLMAP FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE REF_TASK_SCHED_FROM ADD CONSTRAINT FK_RVMIMDB_TASKSCHEDFROM FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE SB_COLUMN ADD CONSTRAINT FK_SBCOLUMNGROUP_SBCOLUMN FOREIGN KEY ( STATUS_BOARD_DB_ID, STATUS_BOARD_ID, GROUP_ID ) REFERENCES SB_COLUMN_GROUP ( STATUS_BOARD_DB_ID, STATUS_BOARD_ID, GROUP_ID ) DEFERRABLE ;

ALTER TABLE SB_COLUMN ADD CONSTRAINT FK_SBQUERY_SBCOLUMN FOREIGN KEY ( STATUS_BOARD_DB_ID, STATUS_BOARD_ID, QUERY_ID ) REFERENCES SB_QUERY ( STATUS_BOARD_DB_ID, STATUS_BOARD_ID, QUERY_ID ) DEFERRABLE ;

ALTER TABLE SB_ASSMBL ADD CONSTRAINT FK_SBSB_SBASSMBL FOREIGN KEY ( STATUS_BOARD_DB_ID, STATUS_BOARD_ID ) REFERENCES SB_STATUS_BOARD ( STATUS_BOARD_DB_ID, STATUS_BOARD_ID ) DEFERRABLE ;

ALTER TABLE SB_COLUMN_GROUP ADD CONSTRAINT FK_SBSB_SBCOLUMNGROUP FOREIGN KEY ( STATUS_BOARD_DB_ID, STATUS_BOARD_ID ) REFERENCES SB_STATUS_BOARD ( STATUS_BOARD_DB_ID, STATUS_BOARD_ID ) DEFERRABLE ;

ALTER TABLE SB_QUERY ADD CONSTRAINT FK_SBSB_SBQUERY FOREIGN KEY ( STATUS_BOARD_DB_ID, STATUS_BOARD_ID ) REFERENCES SB_STATUS_BOARD ( STATUS_BOARD_DB_ID, STATUS_BOARD_ID ) DEFERRABLE ;

ALTER TABLE SCHED_RMVD_PART ADD CONSTRAINT FK_SCHDRMVDPRT_EQPPRTNO FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR ADD CONSTRAINT FK_SCHDSTASK_WOSCHDLBR FOREIGN KEY ( WO_SCHED_DB_ID, WO_SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_ACTION ADD CONSTRAINT FK_SCHEDACTION_SCHEDLBRACTION FOREIGN KEY ( SCHED_DB_ID, SCHED_ID, ACTION_ID ) REFERENCES SCHED_ACTION ( SCHED_DB_ID, SCHED_ID, ACTION_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_EXT_PART ADD CONSTRAINT FK_SCHEDEXTPART_SCHEDLABEXT FOREIGN KEY ( SCHED_DB_ID, SCHED_ID, SCHED_EXT_PART_ID ) REFERENCES SCHED_EXT_PART ( SCHED_DB_ID, SCHED_ID, SCHED_EXT_PART_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_SCHEDINSTPART_REQPART FOREIGN KEY ( SCHED_DB_ID, SCHED_ID, SCHED_PART_ID, SCHED_INST_PART_ID ) REFERENCES SCHED_INST_PART ( SCHED_DB_ID, SCHED_ID, SCHED_PART_ID, SCHED_INST_PART_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_INST_PART ADD CONSTRAINT FK_SCHEDINSTPART_SCHEDLBRINSTP FOREIGN KEY ( SCHED_DB_ID, SCHED_ID, SCHED_PART_ID, SCHED_INST_PART_ID ) REFERENCES SCHED_INST_PART ( SCHED_DB_ID, SCHED_ID, SCHED_PART_ID, SCHED_INST_PART_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR ADD CONSTRAINT FK_SCHEDLABOUR_SOURCE_JOB_STOP FOREIGN KEY ( SOURCE_JOB_STOP_LABOUR_DB_ID, SOURCE_JOB_STOP_LABOUR_ID ) REFERENCES SCHED_LABOUR ( LABOUR_DB_ID, LABOUR_ID ) NOT DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_EXT_PART ADD CONSTRAINT FK_SCHEDLAB_SCHEDLABEXTPART FOREIGN KEY ( LABOUR_DB_ID, LABOUR_ID ) REFERENCES SCHED_LABOUR ( LABOUR_DB_ID, LABOUR_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_ROLE_STATUS ADD CONSTRAINT FK_SCHEDLBRRL_SCHEDLBRRLSTAT FOREIGN KEY ( LABOUR_ROLE_DB_ID, LABOUR_ROLE_ID ) REFERENCES SCHED_LABOUR_ROLE ( LABOUR_ROLE_DB_ID, LABOUR_ROLE_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_ESIG ADD CONSTRAINT FK_SCHEDLBRROLESTAT_SCHEDLBRES FOREIGN KEY ( STATUS_DB_ID, STATUS_ID ) REFERENCES SCHED_LABOUR_ROLE_STATUS ( STATUS_DB_ID, STATUS_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_ACTION ADD CONSTRAINT FK_SCHEDLBRROLE_SCHEDLBRACTION FOREIGN KEY ( LABOUR_ROLE_DB_ID, LABOUR_ROLE_ID ) REFERENCES SCHED_LABOUR_ROLE ( LABOUR_ROLE_DB_ID, LABOUR_ROLE_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_STEP ADD CONSTRAINT FK_SCHEDLBRSTEP_TASKSTEPSKILL FOREIGN KEY ( STEP_SKILL_ID ) REFERENCES TASK_STEP_SKILL ( STEP_SKILL_ID ) NOT DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_INST_PART ADD CONSTRAINT FK_SCHEDLBR_SCHEDLBRINSTPART FOREIGN KEY ( LABOUR_DB_ID, LABOUR_ID ) REFERENCES SCHED_LABOUR ( LABOUR_DB_ID, LABOUR_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_PANEL ADD CONSTRAINT FK_SCHEDLBR_SCHEDLBRPANEL FOREIGN KEY ( LABOUR_DB_ID, LABOUR_ID ) REFERENCES SCHED_LABOUR ( LABOUR_DB_ID, LABOUR_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_RMVD_PART ADD CONSTRAINT FK_SCHEDLBR_SCHEDLBRRMVDPART FOREIGN KEY ( LABOUR_DB_ID, LABOUR_ID ) REFERENCES SCHED_LABOUR ( LABOUR_DB_ID, LABOUR_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_ROLE ADD CONSTRAINT FK_SCHEDLBR_SCHEDLBRROLE FOREIGN KEY ( LABOUR_DB_ID, LABOUR_ID ) REFERENCES SCHED_LABOUR ( LABOUR_DB_ID, LABOUR_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_STEP ADD CONSTRAINT FK_SCHEDLBR_SCHEDLBRSTEP FOREIGN KEY ( LABOUR_DB_ID, LABOUR_ID ) REFERENCES SCHED_LABOUR ( LABOUR_DB_ID, LABOUR_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_TOOL ADD CONSTRAINT FK_SCHEDLBR_SCHEDLBRTOOL FOREIGN KEY ( LABOUR_DB_ID, LABOUR_ID ) REFERENCES SCHED_LABOUR ( LABOUR_DB_ID, LABOUR_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_PARM_DATA ADD CONSTRAINT FK_SCHEDLBR_SCHEDLBR_PARMDATA FOREIGN KEY ( LABOUR_DB_ID, LABOUR_ID ) REFERENCES SCHED_LABOUR ( LABOUR_DB_ID, LABOUR_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_EVAL_LABOUR ADD CONSTRAINT FK_SCHEDLBR_WARRANTYEVALLBR FOREIGN KEY ( LABOUR_DB_ID, LABOUR_ID ) REFERENCES SCHED_LABOUR ( LABOUR_DB_ID, LABOUR_ID ) DEFERRABLE ;

ALTER TABLE SCHED_PANEL ADD CONSTRAINT FK_SCHEDPANEL_CLSMPCSCHEDPANEL FOREIGN KEY ( CLS_MPC_SCHED_DB_ID, CLS_MPC_SCHED_ID, CLS_MPC_SCHED_PANEL_ID ) REFERENCES SCHED_PANEL ( SCHED_DB_ID, SCHED_ID, SCHED_PANEL_ID ) DEFERRABLE ;

ALTER TABLE SCHED_PANEL ADD CONSTRAINT FK_SCHEDPANEL_OPNMPCSCHEDPANEL FOREIGN KEY ( OPN_MPC_SCHED_DB_ID, OPN_MPC_SCHED_ID, OPN_MPC_SCHED_PANEL_ID ) REFERENCES SCHED_PANEL ( SCHED_DB_ID, SCHED_ID, SCHED_PANEL_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_PANEL ADD CONSTRAINT FK_SCHEDPANEL_SCHEDLBRPANEL FOREIGN KEY ( SCHED_DB_ID, SCHED_ID, SCHED_PANEL_ID ) REFERENCES SCHED_PANEL ( SCHED_DB_ID, SCHED_ID, SCHED_PANEL_ID ) DEFERRABLE ;

ALTER TABLE SCHED_STASK ADD CONSTRAINT FK_SCHEDPART_SCHEDSTASK FOREIGN KEY ( REPL_SCHED_DB_ID, REPL_SCHED_ID, REPL_SCHED_PART_ID ) REFERENCES SCHED_PART ( SCHED_DB_ID, SCHED_ID, SCHED_PART_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_EVAL_PART ADD CONSTRAINT FK_SCHEDPART_WARRANTYEVALPART FOREIGN KEY ( WORKSCOPE_SCHED_DB_ID, WORKSCOPE_SCHED_ID, WORKSCOPE_SCHED_PART_ID ) REFERENCES SCHED_PART ( SCHED_DB_ID, SCHED_ID, SCHED_PART_ID ) DEFERRABLE ;

ALTER TABLE SCHED_INST_PART ADD CONSTRAINT FK_SCHEDPRT_SCDINSTPRT FOREIGN KEY ( SCHED_DB_ID, SCHED_ID, SCHED_PART_ID ) REFERENCES SCHED_PART ( SCHED_DB_ID, SCHED_ID, SCHED_PART_ID ) DEFERRABLE ;

ALTER TABLE SCHED_RMVD_PART ADD CONSTRAINT FK_SCHEDPRT_SCHDRMVDPRT FOREIGN KEY ( SCHED_DB_ID, SCHED_ID, SCHED_PART_ID ) REFERENCES SCHED_PART ( SCHED_DB_ID, SCHED_ID, SCHED_PART_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_RMVD_PART ADD CONSTRAINT FK_SCHEDRMVDPART_SCHEDLBRRMVDP FOREIGN KEY ( SCHED_DB_ID, SCHED_ID, SCHED_PART_ID, SCHED_RMVD_PART_ID ) REFERENCES SCHED_RMVD_PART ( SCHED_DB_ID, SCHED_ID, SCHED_PART_ID, SCHED_RMVD_PART_ID ) DEFERRABLE ;

ALTER TABLE CLAIM_LABOUR_LINE ADD CONSTRAINT FK_SCHEDSTASK_CLAIMLABOURLINE FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE CLAIM_PART_LINE ADD CONSTRAINT FK_SCHEDSTASK_CLAIMPARTLINE FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG_DISRUPT ADD CONSTRAINT FK_SCHEDSTASK_FLLEGDIS FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE FNC_XACTION_LOG ADD CONSTRAINT FK_SCHEDSTASK_FNCXACTIONLOG FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) NOT DEFERRABLE ;

ALTER TABLE SCHED_STASK ADD CONSTRAINT FK_SCHEDSTASK_HSCHEDSTASK FOREIGN KEY ( H_SCHED_DB_ID, H_SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE INV_OIL_STATUS_LOG ADD CONSTRAINT FK_SCHEDSTASK_INVOILSTATUSLOG FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE LPA_RUN_ISSUE ADD CONSTRAINT FK_SCHEDSTASK_LPARUINISSUE FOREIGN KEY ( BLOCK_DB_ID, BLOCK_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE LPA_STASK ADD CONSTRAINT FK_SCHEDSTASK_LPASTASK FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE LRP_EVENT ADD CONSTRAINT FK_SCHEDSTASK_LRPEVENT FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE ORG_CREW_SHIFT_TASK ADD CONSTRAINT FK_SCHEDSTASK_ORCRSHTASK FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) NOT DEFERRABLE ;

ALTER TABLE PO_LINE ADD CONSTRAINT FK_SCHEDSTASK_POLINE FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_SCHEDSTASK_REQPART FOREIGN KEY ( PR_SCHED_DB_ID, PR_SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR ADD CONSTRAINT FK_SCHEDSTASK_SCHDLBR FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SCHED_ACTION ADD CONSTRAINT FK_SCHEDSTASK_SCHEDACTION FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SCHED_COST_LINE_ITEM ADD CONSTRAINT FK_SCHEDSTASK_SCHEDCOSTLINE_ FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SCHED_EXT_PART ADD CONSTRAINT FK_SCHEDSTASK_SCHEDEXTPART FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SCHED_IMPACT ADD CONSTRAINT FK_SCHEDSTASK_SCHEDIMPACT FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SCHED_KIT_MAP ADD CONSTRAINT FK_SCHEDSTASK_SCHEDKITMAP FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SCHED_PANEL ADD CONSTRAINT FK_SCHEDSTASK_SCHEDPANEL FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SCHED_PART ADD CONSTRAINT FK_SCHEDSTASK_SCHEDPART FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SCHED_SERVICE_TYPE ADD CONSTRAINT FK_SCHEDSTASK_SCHEDSRVTYPE FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SCHED_STASK ADD CONSTRAINT FK_SCHEDSTASK_SCHEDSTASK FOREIGN KEY ( DUP_JIC_SCHED_DB_ID, DUP_JIC_SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SCHED_STASK_FLAGS ADD CONSTRAINT FK_SCHEDSTASK_SCHEDSTASKFLAGS FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SCHED_STEP ADD CONSTRAINT FK_SCHEDSTASK_SCHEDSTEP FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SCHED_WO_MPC ADD CONSTRAINT FK_SCHEDSTASK_SCHEDWOMPC FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SCHED_WORK_TYPE ADD CONSTRAINT FK_SCHEDSTASK_SCHEDWORKTYPE FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SCHED_WP ADD CONSTRAINT FK_SCHEDSTASK_SCHEDWP FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SCHED_ZONE ADD CONSTRAINT FK_SCHEDSTASK_SCHEDZONE FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT ADD CONSTRAINT FK_SCHEDSTASK_SHIPSHIPMENT FOREIGN KEY ( CHECK_DB_ID, CHECK_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE TASK_DEADLINE_EXT ADD CONSTRAINT FK_SCHEDSTASK_TASKDEADEXT FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CONSTRAINT FK_SCHEDSTASK_TASKLABOURSUMMAR FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_EVAL ADD CONSTRAINT FK_SCHEDSTASK_WARRANTYEVAL FOREIGN KEY ( WP_SCHED_DB_ID, WP_SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_EVAL_QUEUE ADD CONSTRAINT FK_SCHEDSTASK_WARRANTYEVALQUEU FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_EVAL_TASK ADD CONSTRAINT FK_SCHEDSTASK_WARRANTYEVALTASK FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_INIT_TASK ADD CONSTRAINT FK_SCHEDSTASK_WARRANTYINITTASK FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE LRP_EVENT_WORKSCOPE ADD CONSTRAINT FK_SCHEDSTASK_WORKSCOPE FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE ZIP_TASK ADD CONSTRAINT FK_SCHEDSTASK_ZIPTASK FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SCHED_LABOUR_STEP ADD CONSTRAINT FK_SCHEDSTEP_SCHEDLBRSTEP FOREIGN KEY ( SCHED_DB_ID, SCHED_ID, STEP_ID ) REFERENCES SCHED_STEP ( SCHED_DB_ID, SCHED_ID, STEP_ID ) DEFERRABLE ;

ALTER TABLE SCHED_WO_LINE ADD CONSTRAINT FK_SCHEDSTSK_SCDWOLINE FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SCHED_WP_ERROR ADD CONSTRAINT FK_SCHEDWPERROR_SCHEDSTASK FOREIGN KEY ( TASK_SCHED_DB_ID, TASK_SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) NOT DEFERRABLE ;

ALTER TABLE SCHED_WP_ERROR ADD CONSTRAINT FK_SCHEDWPERROR_SCHEDWP FOREIGN KEY ( WP_SCHED_DB_ID, WP_SCHED_ID ) REFERENCES SCHED_WP ( SCHED_DB_ID, SCHED_ID ) NOT DEFERRABLE ;

ALTER TABLE SCHED_WP_SIGN ADD CONSTRAINT FK_SCHEDWPSIGNREQ_SHEDWPSIGN FOREIGN KEY ( SIGN_REQ_DB_ID, SIGN_REQ_ID ) REFERENCES SCHED_WP_SIGN_REQ ( SIGN_REQ_DB_ID, SIGN_REQ_ID ) DEFERRABLE ;

ALTER TABLE SCHED_WP_SIGN_ESIG ADD CONSTRAINT FK_SCHEDWPSIGN_SCHEDWPSIGNESIG FOREIGN KEY ( SIGN_REQ_DB_ID, SIGN_REQ_ID ) REFERENCES SCHED_WP_SIGN ( SIGN_REQ_DB_ID, SIGN_REQ_ID ) DEFERRABLE ;

ALTER TABLE SCHED_WP_SIGN_REQ ADD CONSTRAINT FK_SCHEDWP_SCHEDWPSIGNREQ FOREIGN KEY ( SCHED_DB_ID, SCHED_ID ) REFERENCES SCHED_WP ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC ADD CONSTRAINT FK_SCHED_STASK_INVLOC FOREIGN KEY ( PREDRAW_SCHED_DB_ID, PREDRAW_SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SD_FAULT_REFERENCE ADD CONSTRAINT FK_SDFAULTREF_FAILDEFERREF FOREIGN KEY ( DEFER_REF_DB_ID, DEFER_REF_ID ) REFERENCES FAIL_DEFER_REF ( FAIL_DEFER_REF_DB_ID, FAIL_DEFER_REF_ID ) NOT DEFERRABLE ;

ALTER TABLE SD_FAULT_REFERENCE ADD CONSTRAINT FK_SDFAULTREF_MIMRSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE SD_FAULT_REFERENCE ADD CONSTRAINT FK_SDFAULTREF_MINDB FOREIGN KEY ( FAULT_REF_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE SD_FAULT_REFERENCE ADD CONSTRAINT FK_SDFAULTREF_REFSTAGEREA FOREIGN KEY ( STAGE_REASON_DB_ID, STAGE_REASON_CD ) REFERENCES REF_STAGE_REASON ( STAGE_REASON_DB_ID, STAGE_REASON_CD ) NOT DEFERRABLE ;

ALTER TABLE SD_FAULT_REFERENCE ADD CONSTRAINT FK_SDFAULTREF_SDFAULT FOREIGN KEY ( FAULT_DB_ID, FAULT_ID ) REFERENCES SD_FAULT ( FAULT_DB_ID, FAULT_ID ) NOT DEFERRABLE ;

ALTER TABLE SD_FAULT_REFERENCE ADD CONSTRAINT FK_SDFAULTREF_TASKTASK FOREIGN KEY ( REP_REF_DB_ID, REP_REF_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_DAMAGE ADD CONSTRAINT FK_SDFAULT_INVDAMAGE FOREIGN KEY ( FAULT_DB_ID, FAULT_ID ) REFERENCES SD_FAULT ( FAULT_DB_ID, FAULT_ID ) NOT DEFERRABLE ;

ALTER TABLE SD_FAULT ADD CONSTRAINT FK_SDFAULT_REFFAULTLOGTYPE FOREIGN KEY ( FAULT_LOG_TYPE_DB_ID, FAULT_LOG_TYPE_CD ) REFERENCES REF_FAULT_LOG_TYPE ( FAULT_LOG_TYPE_DB_ID, FAULT_LOG_TYPE_CD ) DEFERRABLE ;

ALTER TABLE SCHED_STASK ADD CONSTRAINT FK_SDFAULT_SCHEDSTASK FOREIGN KEY ( FAULT_DB_ID, FAULT_ID ) REFERENCES SD_FAULT ( FAULT_DB_ID, FAULT_ID ) DEFERRABLE ;

ALTER TABLE SD_FAULT_NATURE ADD CONSTRAINT FK_SDFAULT_SDFAULTNATURE FOREIGN KEY ( FAULT_DB_ID, FAULT_ID ) REFERENCES SD_FAULT ( FAULT_DB_ID, FAULT_ID ) DEFERRABLE ;

ALTER TABLE SD_FAULT_PREC_PROC ADD CONSTRAINT FK_SDFAULT_SDFAULTPRECPROC FOREIGN KEY ( FAULT_DB_ID, FAULT_ID ) REFERENCES SD_FAULT ( FAULT_DB_ID, FAULT_ID ) DEFERRABLE ;

ALTER TABLE SD_FAULT_RESULT ADD CONSTRAINT FK_SDFAULT_SDFAULTRESULT FOREIGN KEY ( FAULT_DB_ID, FAULT_ID ) REFERENCES SD_FAULT ( FAULT_DB_ID, FAULT_ID ) DEFERRABLE ;

ALTER TABLE INV_INV ADD CONSTRAINT FK_SHEDRMVDPART_INVINV FOREIGN KEY ( SCHED_DB_ID, SCHED_ID, SCHED_PART_ID, SCHED_RMVD_PART_ID ) REFERENCES SCHED_RMVD_PART ( SCHED_DB_ID, SCHED_ID, SCHED_PART_ID, SCHED_RMVD_PART_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_SHELF_REF_ENG_EQPPARTNO FOREIGN KEY ( SHELF_LIFE_UNIT_DB_ID, SHELF_LIFE_UNIT_CD ) REFERENCES REF_ENG_UNIT ( ENG_UNIT_DB_ID, ENG_UNIT_CD ) DEFERRABLE ;

ALTER TABLE CAPACITY_PATTERN_DAY_SHIFT ADD CONSTRAINT FK_SHIFTSHIFT_CPDAYSHIFT FOREIGN KEY ( SHIFT_DB_ID, SHIFT_ID ) REFERENCES SHIFT_SHIFT ( SHIFT_DB_ID, SHIFT_ID ) DEFERRABLE ;

ALTER TABLE INV_LOC ADD CONSTRAINT FK_SHIFTSHIFT_INVLOC FOREIGN KEY ( OVERNIGHT_SHIFT_DB_ID, OVERNIGHT_SHIFT_ID ) REFERENCES SHIFT_SHIFT ( SHIFT_DB_ID, SHIFT_ID ) DEFERRABLE ;

ALTER TABLE ORG_CREW_SHIFT_PLAN ADD CONSTRAINT FK_SHIFTSHIFT_OCSP FOREIGN KEY ( SHIFT_DB_ID, SHIFT_ID ) REFERENCES SHIFT_SHIFT ( SHIFT_DB_ID, SHIFT_ID ) NOT DEFERRABLE ;

ALTER TABLE ORG_HR_SHIFT_PLAN ADD CONSTRAINT FK_SHIFTSHIFT_ORGHRSHIFTPLAN FOREIGN KEY ( SHIFT_DB_ID, SHIFT_ID ) REFERENCES SHIFT_SHIFT ( SHIFT_DB_ID, SHIFT_ID ) DEFERRABLE ;

ALTER TABLE USER_SHIFT_PATTERN_DAY_SHIFT ADD CONSTRAINT FK_SHIFTSHIFT_USPDAYSHIFT FOREIGN KEY ( SHIFT_DB_ID, SHIFT_ID ) REFERENCES SHIFT_SHIFT ( SHIFT_DB_ID, SHIFT_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_SHIFT ADD CONSTRAINT FK_SHIFTTSHIFT_ORGHRSHIFT FOREIGN KEY ( SHIFT_DB_ID, SHIFT_ID ) REFERENCES SHIFT_SHIFT ( SHIFT_DB_ID, SHIFT_ID ) DEFERRABLE ;

ALTER TABLE SHIP_SEGMENT_MAP ADD CONSTRAINT FK_SHIPSEG_SHIPSEGMAP FOREIGN KEY ( SEGMENT_DB_ID, SEGMENT_ID ) REFERENCES SHIP_SEGMENT ( SEGMENT_DB_ID, SEGMENT_ID ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_SHIPSHIPMENTLINE_REQPART FOREIGN KEY ( SHIPMENT_LINE_DB_ID, SHIPMENT_LINE_ID ) REFERENCES SHIP_SHIPMENT_LINE ( SHIPMENT_LINE_DB_ID, SHIPMENT_LINE_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE ADD CONSTRAINT FK_SHIPSHIPMENT_POLINE FOREIGN KEY ( XCHG_SHIPMENT_DB_ID, XCHG_SHIPMENT_ID ) REFERENCES SHIP_SHIPMENT ( SHIPMENT_DB_ID, SHIPMENT_ID ) DEFERRABLE ;

ALTER TABLE SHIP_SEGMENT_MAP ADD CONSTRAINT FK_SHIPSHIPMENT_SHIPSEGMAP FOREIGN KEY ( SHIPMENT_DB_ID, SHIPMENT_ID ) REFERENCES SHIP_SHIPMENT ( SHIPMENT_DB_ID, SHIPMENT_ID ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT_LINE ADD CONSTRAINT FK_SHIPSHIPMENT_SHIPSHIPMENTLI FOREIGN KEY ( SHIPMENT_DB_ID, SHIPMENT_ID ) REFERENCES SHIP_SHIPMENT ( SHIPMENT_DB_ID, SHIPMENT_ID ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT_LINE_MP ADD CONSTRAINT FK_SHIP_SHIPMENT_LINE_MP FOREIGN KEY ( SHIPMENT_LINE_DB_ID, SHIPMENT_LINE_ID ) REFERENCES SHIP_SHIPMENT_LINE ( SHIPMENT_LINE_DB_ID, SHIPMENT_LINE_ID ) NOT DEFERRABLE ;

ALTER TABLE SCHED_STEP_APPL_LOG ADD CONSTRAINT FK_SSTEP_APPL_LOG_MIM_RSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE SCHED_STEP_APPL_LOG ADD CONSTRAINT FK_SSTEP_APPL_LOG_ORG_HR FOREIGN KEY ( HR_DB_ID, HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) NOT DEFERRABLE ;

ALTER TABLE SCHED_STEP_APPL_LOG ADD CONSTRAINT FK_SSTEP_APPL_LOG_REF_STATUS FOREIGN KEY ( STEP_STATUS_CD ) REFERENCES REF_STEP_STATUS ( STEP_STATUS_CD ) NOT DEFERRABLE ;

ALTER TABLE SCHED_STEP_APPL_LOG ADD CONSTRAINT FK_SSTEP_APPL_LOG_SCHED_STEP FOREIGN KEY ( SCHED_DB_ID, SCHED_ID, STEP_ID ) REFERENCES SCHED_STEP ( SCHED_DB_ID, SCHED_ID, STEP_ID ) NOT DEFERRABLE ;

ALTER TABLE WF_STEP_FLOW ADD CONSTRAINT FK_STEP_FLOW FOREIGN KEY ( WF_STEP_DB_ID, WF_STEP_ID ) REFERENCES WF_STEP ( WF_STEP_DB_ID, WF_STEP_ID ) DEFERRABLE ;

ALTER TABLE WF_STEP_GROUP ADD CONSTRAINT FK_STEP_GROUPCHILDREN FOREIGN KEY ( CHILD_WF_STEP_DB_ID, CHILD_WF_STEP_ID ) REFERENCES WF_STEP ( WF_STEP_DB_ID, WF_STEP_ID ) DEFERRABLE ;

ALTER TABLE WF_STEP_FLOW ADD CONSTRAINT FK_STEP_NEXTSTEP FOREIGN KEY ( NEXT_WF_STEP_DB_ID, NEXT_WF_STEP_ID ) REFERENCES WF_STEP ( WF_STEP_DB_ID, WF_STEP_ID ) DEFERRABLE ;

ALTER TABLE STOCK_DIST_REQ_PICKED_ITEM ADD CONSTRAINT FK_STKDISTREQ_DISTREQPICKITEM FOREIGN KEY ( STOCK_DIST_REQ_ID, STOCK_DIST_REQ_DB_ID ) REFERENCES STOCK_DIST_REQ ( STOCK_DIST_REQ_ID, STOCK_DIST_REQ_DB_ID ) NOT DEFERRABLE ;

ALTER TABLE STOCK_DIST_REQ_LOG ADD CONSTRAINT FK_STKDISTREQ_STKDISTREQLOG FOREIGN KEY ( STOCK_DIST_REQ_ID, STOCK_DIST_REQ_DB_ID ) REFERENCES STOCK_DIST_REQ ( STOCK_DIST_REQ_ID, STOCK_DIST_REQ_DB_ID ) NOT DEFERRABLE ;

ALTER TABLE ORG_CARRIER ADD CONSTRAINT FK_SUPPLYCHAIN_ORGCARRIER FOREIGN KEY ( SUPPLY_CHAIN_DB_ID, SUPPLY_CHAIN_CD ) REFERENCES REF_SUPPLY_CHAIN ( SUPPLY_CHAIN_DB_ID, SUPPLY_CHAIN_CD ) DEFERRABLE ;

ALTER TABLE REQ_PART ADD CONSTRAINT FK_SUPPLYCHAIN_REQPART FOREIGN KEY ( SUPPLY_CHAIN_DB_ID, SUPPLY_CHAIN_CD ) REFERENCES REF_SUPPLY_CHAIN ( SUPPLY_CHAIN_DB_ID, SUPPLY_CHAIN_CD ) DEFERRABLE ;

ALTER TABLE INV_LOC ADD CONSTRAINT FK_SUPPLY_LOC_INVLOC FOREIGN KEY ( SUPPLY_LOC_DB_ID, SUPPLY_LOC_ID ) REFERENCES INV_LOC ( LOC_DB_ID, LOC_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG_STATUS_LOG ADD CONSTRAINT FK_SYSFLLEGNOTE_FLLEGSTALOG FOREIGN KEY ( SYSTEM_NOTE_ID ) REFERENCES FL_LEG_NOTE ( FLIGHT_NOTE_ID ) DEFERRABLE ;

ALTER TABLE TAG_TASK_DEFN ADD CONSTRAINT FK_TAGTAG_TAGTASKDEFN FOREIGN KEY ( TAG_DB_ID, TAG_ID ) REFERENCES TAG_TAG ( TAG_DB_ID, TAG_ID ) DEFERRABLE ;

ALTER TABLE DEFN_NR_EST ADD CONSTRAINT FK_TASKDEFN_DEFNNREST FOREIGN KEY ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) REFERENCES TASK_DEFN ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) DEFERRABLE ;

ALTER TABLE EQP_PART_COMPAT_TASK ADD CONSTRAINT FK_TASKDEFN_EQPRTCMPATTSK FOREIGN KEY ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) REFERENCES TASK_DEFN ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF_TASK_DEFN ADD CONSTRAINT FK_TASKDEFN_FAILDEFERREF FOREIGN KEY ( FAIL_DEFER_REF_ID ) REFERENCES FAIL_DEFER_REF ( ALT_ID ) NOT DEFERRABLE ;

ALTER TABLE LPA_FLEET ADD CONSTRAINT FK_TASKDEFN_LPAFLEETSRVC FOREIGN KEY ( SERVICE_BLOCK_DEFN_DB_ID, SERVICE_BLOCK_DEFN_ID ) REFERENCES TASK_DEFN ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) DEFERRABLE ;

ALTER TABLE LPA_FLEET ADD CONSTRAINT FK_TASKDEFN_LPAFLEETTURN FOREIGN KEY ( TURN_BLOCK_DEFN_DB_ID, TURN_BLOCK_DEFN_ID ) REFERENCES TASK_DEFN ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) DEFERRABLE ;

ALTER TABLE LRP_INV_TASK_PLAN ADD CONSTRAINT FK_TASKDEFN_LRPINVTASKPLAN FOREIGN KEY ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) REFERENCES TASK_DEFN ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) DEFERRABLE ;

ALTER TABLE LRP_TASK_DEFN ADD CONSTRAINT FK_TASKDEFN_LRPTASKDEFN FOREIGN KEY ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) REFERENCES TASK_DEFN ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_TASK ADD CONSTRAINT FK_TASKDEFN_MAINTPRGMTASK FOREIGN KEY ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) REFERENCES TASK_DEFN ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF_TASK_DEFN ADD CONSTRAINT FK_TASKDEFN_MIMRSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CONSTRAINT FK_TASKDEFN_MNTPRGMCRTMPTSK FOREIGN KEY ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) REFERENCES TASK_DEFN ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) DEFERRABLE ;

ALTER TABLE PPC_TASK ADD CONSTRAINT FK_TASKDEFN_PPCTASK FOREIGN KEY ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) REFERENCES TASK_DEFN ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) DEFERRABLE ;

ALTER TABLE PPC_TASK_DEFN ADD CONSTRAINT FK_TASKDEFN_PPCTASKDEFN FOREIGN KEY ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) REFERENCES TASK_DEFN ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) DEFERRABLE ;

ALTER TABLE TAG_TASK_DEFN ADD CONSTRAINT FK_TASKDEFN_TAGTASKDEFN FOREIGN KEY ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) REFERENCES TASK_DEFN ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) DEFERRABLE ;

ALTER TABLE TASK_BLOCK_REQ_MAP ADD CONSTRAINT FK_TASKDEFN_TASKBLKREQMAP FOREIGN KEY ( REQ_TASK_DEFN_DB_ID, REQ_TASK_DEFN_ID ) REFERENCES TASK_DEFN ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF_TASK_DEFN ADD CONSTRAINT FK_TASKDEFN_TASKDEFN FOREIGN KEY ( TASK_DEFN_ID ) REFERENCES TASK_DEFN ( ALT_ID ) NOT DEFERRABLE ;

ALTER TABLE TASK_DEFN_TO_FP ADD CONSTRAINT FK_TASKDEFN_TASKDEFNTOFP FOREIGN KEY ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) REFERENCES TASK_DEFN ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) NOT DEFERRABLE ;

ALTER TABLE TASK_JIC_REQ_MAP ADD CONSTRAINT FK_TASKDEFN_TASKJICREQMAP FOREIGN KEY ( REQ_TASK_DEFN_DB_ID, REQ_TASK_DEFN_ID ) REFERENCES TASK_DEFN ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) DEFERRABLE ;

ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CONSTRAINT FK_TASKDEFN_TASKLABOURSUMMARY FOREIGN KEY ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) REFERENCES TASK_DEFN ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) DEFERRABLE ;

ALTER TABLE TASK_TASK_DEP ADD CONSTRAINT FK_TASKDEFN_TASKTASKDEP FOREIGN KEY ( DEP_TASK_DEFN_DB_ID, DEP_TASK_DEFN_ID ) REFERENCES TASK_DEFN ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_TASKDEFN_TASK_TASK FOREIGN KEY ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) REFERENCES TASK_DEFN ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) DEFERRABLE ;

ALTER TABLE TASK_ME_RULE_INTERVAL ADD CONSTRAINT FK_TASKMERULE_TASKMERULEINTRVL FOREIGN KEY ( TASK_DB_ID, TASK_ID, RULE_DATA_TYPE_DB_ID, RULE_DATA_TYPE_ID, ME_DATA_TYPE_DB_ID, ME_DATA_TYPE_ID ) REFERENCES TASK_ME_RULE ( TASK_DB_ID, TASK_ID, RULE_DATA_TYPE_DB_ID, RULE_DATA_TYPE_ID, ME_DATA_TYPE_DB_ID, ME_DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE LRP_EVENT_WORKSCOPE ADD CONSTRAINT FK_TASKSCHEDRULE_LRPEVENTWORKS FOREIGN KEY ( RULE_TASK_DB_ID, RULE_TASK_ID, RULE_DATA_TYPE_DB_ID, RULE_DATA_TYPE_ID ) REFERENCES TASK_SCHED_RULE ( TASK_DB_ID, TASK_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE TASK_AC_RULE ADD CONSTRAINT FK_TASKSCHEDRULE_TASKACRULE FOREIGN KEY ( TASK_DB_ID, TASK_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES TASK_SCHED_RULE ( TASK_DB_ID, TASK_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE TASK_INTERVAL ADD CONSTRAINT FK_TASKSCHEDRULE_TASKINTERVAL FOREIGN KEY ( TASK_DB_ID, TASK_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID ) REFERENCES TASK_SCHED_RULE ( TASK_DB_ID, TASK_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE TASK_ME_RULE ADD CONSTRAINT FK_TASKSCHEDRULE_TASKMERULE FOREIGN KEY ( TASK_DB_ID, TASK_ID, RULE_DATA_TYPE_DB_ID, RULE_DATA_TYPE_ID ) REFERENCES TASK_SCHED_RULE ( TASK_DB_ID, TASK_ID, DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE ;

ALTER TABLE SCHED_STEP ADD CONSTRAINT FK_TASKSTEP_SCHEDSTEP FOREIGN KEY ( TASK_DB_ID, TASK_ID, TASK_STEP_ID ) REFERENCES TASK_STEP ( TASK_DB_ID, TASK_ID, STEP_ID ) NOT DEFERRABLE ;

ALTER TABLE FAIL_MODE ADD CONSTRAINT FK_TASKTASK_FAILMODE FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_TASK ADD CONSTRAINT FK_TASKTASK_MAINTPRGMTASK FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_CARRIER_TEMP_TASK ADD CONSTRAINT FK_TASKTASK_MNTPRGMCRTMPTSK FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE SCHED_STASK ADD CONSTRAINT FK_TASKTASK_SCHEDSTASK FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE SCHED_WO_MPC ADD CONSTRAINT FK_TASKTASK_SCHEDWOMPC FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_ADVISORY ADD CONSTRAINT FK_TASKTASK_TASKADVISORY FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_BLOCK_REQ_MAP ADD CONSTRAINT FK_TASKTASK_TASKBLKREQMAP FOREIGN KEY ( BLOCK_TASK_DB_ID, BLOCK_TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_BOM_PART_LIST ADD CONSTRAINT FK_TASKTASK_TASKBOMPARTLIST FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_COND ADD CONSTRAINT FK_TASKTASK_TASKCOND FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_DEADLINE_EXT ADD CONSTRAINT FK_TASKTASK_TASKDEADEXT FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_IMPACT ADD CONSTRAINT FK_TASKTASK_TASKIMPACT FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_JIC_REQ_MAP ADD CONSTRAINT FK_TASKTASK_TASKJICREQMAP FOREIGN KEY ( JIC_TASK_DB_ID, JIC_TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_LABOUR_LIST ADD CONSTRAINT FK_TASKTASK_TASKLABOURLIST FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE DWT_TASK_LABOUR_SUMMARY ADD CONSTRAINT FK_TASKTASK_TASKLABOURSUMMARY FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_LIC ADD CONSTRAINT FK_TASKTASK_TASKLIC FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_PARM_DATA ADD CONSTRAINT FK_TASKTASK_TASKPARMDATA FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_PART_LIST ADD CONSTRAINT FK_TASKTASK_TASKPARTLIST FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_PART_MAP ADD CONSTRAINT FK_TASKTASK_TASKPARTMAP FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_PART_TRANSFORM ADD CONSTRAINT FK_TASKTASK_TASKPARTTRANSFORM FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_PLANNING_TYPE_SKILL ADD CONSTRAINT FK_TASKTASK_TASKPLANNINGTYPESK FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_REF_DOC ADD CONSTRAINT FK_TASKTASK_TASKREFDOC FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_TASK ADD CONSTRAINT FK_TASKTASK_TASKREVREASON FOREIGN KEY ( TASK_REV_REASON_DB_ID, TASK_REV_REASON_CD ) REFERENCES REF_TASK_REV_REASON ( TASK_REV_REASON_DB_ID, TASK_REV_REASON_CD ) DEFERRABLE ;

ALTER TABLE TASK_SCHED_RULE ADD CONSTRAINT FK_TASKTASK_TASKSCHEDRULE FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_STEP ADD CONSTRAINT FK_TASKTASK_TASKSTEP FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_TASK_DEP ADD CONSTRAINT FK_TASKTASK_TASKTASKDEP2 FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_TASK_FLAGS ADD CONSTRAINT FK_TASKTASK_TASKTASKFLAGS FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_TASK_IETM ADD CONSTRAINT FK_TASKTASK_TASKTASKIETM FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_TASK_LOG ADD CONSTRAINT FK_TASKTASK_TASKTASKLOG FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_TEMP_ISSUE_LOG ADD CONSTRAINT FK_TASKTASK_TASKTEMPISSUELOG FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_TOOL_LIST ADD CONSTRAINT FK_TASKTASK_TASKTOOLLIST FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_WF ADD CONSTRAINT FK_TASKTASK_TASKWF FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_WORK_TYPE ADD CONSTRAINT FK_TASKTASK_TASKWORKTYPE FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_ZONE ADD CONSTRAINT FK_TASKTASK_TASKZONE FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_FAIL_MODE ADD CONSTRAINT FK_TASKTASK_TSKFAILMODE FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN_TASK ADD CONSTRAINT FK_TASKTASK_WARRANTYDEFNTASK FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE EVT_TOOL ADD CONSTRAINT FK_TASKTOOLLIST_EVTTOOL FOREIGN KEY ( TASK_DB_ID, TASK_ID, TASK_TOOL_ID ) REFERENCES TASK_TOOL_LIST ( TASK_DB_ID, TASK_ID, TASK_TOOL_ID ) DEFERRABLE ;

ALTER TABLE TASK_WEIGHT_BALANCE ADD CONSTRAINT FK_TASKWEIGHTBAL_EQPPARTNO FOREIGN KEY ( PART_NO_DB_ID, PART_NO_ID ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) NOT DEFERRABLE ;

ALTER TABLE TASK_WEIGHT_BALANCE ADD CONSTRAINT FK_TASKWEIGHTBAL_MIMDB FOREIGN KEY ( TASK_WEIGHT_BALANCE_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE TASK_WEIGHT_BALANCE ADD CONSTRAINT FK_TASKWEIGHTBAL_MIMRSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE TASK_WEIGHT_BALANCE ADD CONSTRAINT FK_TASKWEIGHTBAL_TASKTASK FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) NOT DEFERRABLE ;

ALTER TABLE TASK_REP_REF ADD CONSTRAINT FK_TASK_REP_REF_MIM_DB FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE TASK_REP_REF ADD CONSTRAINT FK_TASK_REP_REF_MIM_DB_CT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE TASK_REP_REF ADD CONSTRAINT FK_TASK_REP_REF_MIM_RSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE TASK_REP_REF ADD CONSTRAINT FK_TASK_REP_REF_TASK_TASK FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) NOT DEFERRABLE ;

ALTER TABLE PO_INVOICE_LINE_TAX ADD CONSTRAINT FK_TAX_POINVOICELINETAX FOREIGN KEY ( TAX_ID ) REFERENCES TAX ( TAX_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE_TAX ADD CONSTRAINT FK_TAX_POLINETAX FOREIGN KEY ( TAX_ID ) REFERENCES TAX ( TAX_ID ) DEFERRABLE ;

ALTER TABLE RFQ_LINE_VENDOR_TAX ADD CONSTRAINT FK_TAX_RFQLINEVENDORTAX FOREIGN KEY ( TAX_ID ) REFERENCES TAX ( TAX_ID ) DEFERRABLE ;

ALTER TABLE TAX_LOG ADD CONSTRAINT FK_TAX_TAXLOG FOREIGN KEY ( TAX_ID ) REFERENCES TAX ( TAX_ID ) DEFERRABLE ;

ALTER TABLE TAX_VENDOR ADD CONSTRAINT FK_TAX_TAXVENDOR FOREIGN KEY ( TAX_ID ) REFERENCES TAX ( TAX_ID ) DEFERRABLE ;

ALTER TABLE PPC_DEPENDENCY ADD CONSTRAINT FK_TOACTIVITY_DEPENDENCY FOREIGN KEY ( TO_ACTIVITY_ID ) REFERENCES PPC_ACTIVITY ( ACTIVITY_ID ) DEFERRABLE ;

ALTER TABLE TASK_FLEET_APPROVAL ADD CONSTRAINT FK_TSKDFN_TSKFLTAPPRVL FOREIGN KEY ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) REFERENCES TASK_DEFN ( TASK_DEFN_DB_ID, TASK_DEFN_ID ) DEFERRABLE ;

ALTER TABLE TASK_STEP_SKILL ADD CONSTRAINT FK_TSKLBRLIST_TSKSTEPSKILL FOREIGN KEY ( TASK_DB_ID, TASK_ID, LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) REFERENCES TASK_LABOUR_LIST ( TASK_DB_ID, TASK_ID, LABOUR_SKILL_DB_ID, LABOUR_SKILL_CD ) DEFERRABLE ;

ALTER TABLE MAINT_PRGM_TASK ADD CONSTRAINT FK_TSKREVREASON_MNTPGMTSK FOREIGN KEY ( TASK_REV_REASON_DB_ID, TASK_REV_REASON_CD ) REFERENCES REF_TASK_REV_REASON ( TASK_REV_REASON_DB_ID, TASK_REV_REASON_CD ) DEFERRABLE ;

ALTER TABLE TASK_STEP_SKILL ADD CONSTRAINT FK_TSKSTEPSKILL_TASKSTEP FOREIGN KEY ( TASK_DB_ID, TASK_ID, STEP_ID ) REFERENCES TASK_STEP ( TASK_DB_ID, TASK_ID, STEP_ID ) NOT DEFERRABLE ;

ALTER TABLE TASK_PANEL ADD CONSTRAINT FK_TSKTASK_TASKPANEL FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE TASK_FLEET_APPROVAL ADD CONSTRAINT FK_TSKTSK_TSKFLTAPPRVL FOREIGN KEY ( TASK_DB_ID, TASK_ID ) REFERENCES TASK_TASK ( TASK_DB_ID, TASK_ID ) DEFERRABLE ;

ALTER TABLE LRP_PLAN_CONFIG ADD CONSTRAINT FK_UPDATEACTSEV_LRPPLANCONF FOREIGN KEY ( UPDATEACTUAL_SEV_DB_ID, UPDATEACTUAL_SEV_CD ) REFERENCES REF_LRP_CONFIG_SEV ( LRP_CONFIG_SEV_DB_ID, LRP_CONFIG_SEV_CD ) DEFERRABLE ;

ALTER TABLE LRP_PLAN ADD CONSTRAINT FK_UPDATEHR_LRPPLAN FOREIGN KEY ( CREATED_HR_DB_ID, CREATED_HR_ID ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE ;

ALTER TABLE EVT_INV_USAGE ADD CONSTRAINT FK_USGSNAPSHOTSRC_EVTINVUSAGE FOREIGN KEY ( SOURCE_DB_ID, SOURCE_CD ) REFERENCES REF_USG_SNAPSHOT_SRC_TYPE ( SOURCE_DB_ID, SOURCE_CD ) NOT DEFERRABLE ;

ALTER TABLE REF_USG_SNAPSHOT_SRC_TYPE ADD CONSTRAINT FK_USGSNAPSHOTSRC_MIMDB FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE REF_USG_SNAPSHOT_SRC_TYPE ADD CONSTRAINT FK_USGSNAPSHOTSRC_MIMDBCR FOREIGN KEY ( CREATION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE REF_USG_SNAPSHOT_SRC_TYPE ADD CONSTRAINT FK_USGSNAPSHOTSRC_MIMDBCT FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE REF_USG_SNAPSHOT_SRC_TYPE ADD CONSTRAINT FK_USGSNAPSHOTSRC_MIMRSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE FL_LEG ADD CONSTRAINT FK_USGUSREC_FLLEG FOREIGN KEY ( USAGE_RECORD_ID ) REFERENCES USG_USAGE_RECORD ( USAGE_RECORD_ID ) DEFERRABLE ;

ALTER TABLE USG_USAGE_DATA ADD CONSTRAINT FK_USGUSREC_USGUSDATA FOREIGN KEY ( USAGE_RECORD_ID ) REFERENCES USG_USAGE_RECORD ( USAGE_RECORD_ID ) DEFERRABLE ;

ALTER TABLE USER_SHIFT_PATTERN_DAY ADD CONSTRAINT FK_USPATTERN_USPATTERNDAY FOREIGN KEY ( USER_SHIFT_PATTERN_DB_ID, USER_SHIFT_PATTERN_ID ) REFERENCES USER_SHIFT_PATTERN ( USER_SHIFT_PATTERN_DB_ID, USER_SHIFT_PATTERN_ID ) DEFERRABLE ;

ALTER TABLE USER_SHIFT_PATTERN_DAY_SHIFT ADD CONSTRAINT FK_USPDAY_USPDAYSHIFT FOREIGN KEY ( USER_SHIFT_PATTERN_DB_ID, USER_SHIFT_PATTERN_ID, USER_SHIFT_PATTERN_DAY_ORD ) REFERENCES USER_SHIFT_PATTERN_DAY ( USER_SHIFT_PATTERN_DB_ID, USER_SHIFT_PATTERN_ID, USER_SHIFT_PATTERN_DAY_ORD ) DEFERRABLE ;

ALTER TABLE ORG_CREW_SCHEDULE ADD CONSTRAINT FK_USP_ORGCREWSHEDULE FOREIGN KEY ( CREW_SHIFT_PATTERN_DB_ID, CREW_SHIFT_PATTERN_ID ) REFERENCES USER_SHIFT_PATTERN ( USER_SHIFT_PATTERN_DB_ID, USER_SHIFT_PATTERN_ID ) NOT DEFERRABLE ;

ALTER TABLE ORG_HR_SCHEDULE ADD CONSTRAINT FK_USP_ORGHRSCHEDULE FOREIGN KEY ( USER_SHIFT_PATTERN_DB_ID, USER_SHIFT_PATTERN_ID ) REFERENCES USER_SHIFT_PATTERN ( USER_SHIFT_PATTERN_DB_ID, USER_SHIFT_PATTERN_ID ) DEFERRABLE ;

ALTER TABLE FL_LEG_STATUS_LOG ADD CONSTRAINT FK_USRFLLEGNOTE_FLLEGSTALOG FOREIGN KEY ( USER_NOTE_ID ) REFERENCES FL_LEG_NOTE ( FLIGHT_NOTE_ID ) DEFERRABLE ;

ALTER TABLE UTL_ACTION_CONFIG_PARM ADD CONSTRAINT FK_UTLACTCFGPRM_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_ACTION_USER_PARM ADD CONSTRAINT FK_UTLACTCFGPRM_UTLACTUSRPRM FOREIGN KEY ( PARM_NAME ) REFERENCES UTL_ACTION_CONFIG_PARM ( PARM_NAME ) DEFERRABLE ;

ALTER TABLE UTL_PERM_SET_ACTION_PARM ADD CONSTRAINT FK_UTLACTCFGPRM_UTLPRMSTACTPRM FOREIGN KEY ( PARM_NAME ) REFERENCES UTL_ACTION_CONFIG_PARM ( PARM_NAME ) DEFERRABLE ;

ALTER TABLE UTL_ACTION_ROLE_PARM ADD CONSTRAINT FK_UTLACTCFGPRM_UTLROLEPARM FOREIGN KEY ( PARM_NAME ) REFERENCES UTL_ACTION_CONFIG_PARM ( PARM_NAME ) DEFERRABLE ;

ALTER TABLE UTL_TODO_BUTTON ADD CONSTRAINT FK_UTLACTCNFGPRM_UTLTODOBUTT FOREIGN KEY ( PARM_NAME ) REFERENCES UTL_ACTION_CONFIG_PARM ( PARM_NAME ) DEFERRABLE ;

ALTER TABLE UTL_ACTION_ROLE_PARM ADD CONSTRAINT FK_UTLACTRLPRM_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_ACTION_USER_PARM ADD CONSTRAINT FK_UTLACTUSRPRM_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_ALERT_PARM ADD CONSTRAINT FK_UTLALERTPARM_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_ALERT ADD CONSTRAINT FK_UTLALERTSTATUS_UTLALERT FOREIGN KEY ( ALERT_STATUS_CD ) REFERENCES UTL_ALERT_STATUS ( ALERT_STATUS_CD ) DEFERRABLE ;

ALTER TABLE UTL_ALERT_STATUS_LOG ADD CONSTRAINT FK_UTLALERTSTATUS_UTLALERTSTAT FOREIGN KEY ( ALERT_STATUS_CD ) REFERENCES UTL_ALERT_STATUS ( ALERT_STATUS_CD ) DEFERRABLE ;

ALTER TABLE UTL_ALERT ADD CONSTRAINT FK_UTLALERT_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_ALERT_LOG ADD CONSTRAINT FK_UTLALERT_UTLALERTLOG FOREIGN KEY ( ALERT_ID ) REFERENCES UTL_ALERT ( ALERT_ID ) DEFERRABLE ;

ALTER TABLE UTL_ALERT_STATUS_LOG ADD CONSTRAINT FK_UTLALERT_UTLALERTSTATUSLOG FOREIGN KEY ( ALERT_ID ) REFERENCES UTL_ALERT ( ALERT_ID ) DEFERRABLE ;

ALTER TABLE UTL_ALERT_PARM ADD CONSTRAINT FK_UTLALERT_UTLARTPARM FOREIGN KEY ( ALERT_ID ) REFERENCES UTL_ALERT ( ALERT_ID ) DEFERRABLE ;

ALTER TABLE UTL_USER_ALERT ADD CONSTRAINT FK_UTLALERT_UTLUSERALERT FOREIGN KEY ( ALERT_ID ) REFERENCES UTL_ALERT ( ALERT_ID ) DEFERRABLE ;

ALTER TABLE UTL_API_VERSION_CONFIG ADD CONSTRAINT FK_UTLAPIDEFN_UTLAPIVERCONFG FOREIGN KEY ( API_ID ) REFERENCES UTL_API_DEFINITION ( API_ID ) DEFERRABLE ;

ALTER TABLE UTL_API_VERSION ADD CONSTRAINT FK_UTLAPIDEFN_UTLAPIVERSION FOREIGN KEY ( API_ID ) REFERENCES UTL_API_DEFINITION ( API_ID ) DEFERRABLE ;

ALTER TABLE UTL_API_NOTIF_ASSIGN ADD CONSTRAINT FK_UTLAPIVERSION_UTLAPINOTIFA FOREIGN KEY ( API_VERSION_ID ) REFERENCES UTL_API_VERSION ( API_VERSION_ID ) DEFERRABLE ;

ALTER TABLE UTL_API_VERSION_CONFIG ADD CONSTRAINT FK_UTLAPIVERSION_UTLAPIVERSIO FOREIGN KEY ( API_VERSION_ID ) REFERENCES UTL_API_VERSION ( API_VERSION_ID ) DEFERRABLE ;

ALTER TABLE UTL_ROLE_PARM ADD CONSTRAINT FK_UTLCONFIGPARM_UTLROLEPARM FOREIGN KEY ( PARM_NAME, PARM_TYPE ) REFERENCES UTL_CONFIG_PARM ( PARM_NAME, PARM_TYPE ) DEFERRABLE ;

ALTER TABLE UTL_USER_PARM ADD CONSTRAINT FK_UTLCONFIGPARM_UTLUSERPARM FOREIGN KEY ( PARM_NAME, PARM_TYPE ) REFERENCES UTL_CONFIG_PARM ( PARM_NAME, PARM_TYPE ) DEFERRABLE ;

ALTER TABLE UTL_CONFIG_PARM ADD CONSTRAINT FK_UTLCONFPRM_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE BULK_LOAD_ELEMENT ADD CONSTRAINT FK_UTLFILEIMPORT_STAGINGBULK FOREIGN KEY ( FILE_IMPORT_ID, FILE_IMPORT_DB_ID ) REFERENCES UTL_FILE_IMPORT ( FILE_IMPORT_ID, FILE_IMPORT_DB_ID ) NOT DEFERRABLE ;

ALTER TABLE UTL_HA_SINGLETON_SERVICE ADD CONSTRAINT FK_UTLHASINGLSERV_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_MENU_GROUP_ITEM ADD CONSTRAINT FK_UTLID_UTLMNUGROUP FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_TODO_BUTTON ADD CONSTRAINT FK_UTLID_UTLTDBUTTON FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_TODO_LIST ADD CONSTRAINT FK_UTLID_UTLTDLST FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_TODO_LIST_BUTTON ADD CONSTRAINT FK_UTLID_UTLTDLSTBUTT FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_TODO_LIST_TAB ADD CONSTRAINT FK_UTLID_UTLTDLSTTAB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_TODO_TAB ADD CONSTRAINT FK_UTLID_UTLTDTAB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_JOB ADD CONSTRAINT FK_UTLJOB_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_MENU_ITEM_ARG ADD CONSTRAINT FK_UTLMENUARG_UTLMENUITEMARG FOREIGN KEY ( ARG_CD ) REFERENCES UTL_MENU_ARG ( ARG_CD ) DEFERRABLE ;

ALTER TABLE UTL_MENU_GROUP_ITEM ADD CONSTRAINT FK_UTLMENUGRP_UTLMNUGITEM FOREIGN KEY ( GROUP_ID ) REFERENCES UTL_MENU_GROUP ( GROUP_ID ) DEFERRABLE ;

ALTER TABLE UTL_MENU_ITEM_ARG ADD CONSTRAINT FK_UTLMENUITEM_UTLMENUITEMARG FOREIGN KEY ( MENU_ID ) REFERENCES UTL_MENU_ITEM ( MENU_ID ) DEFERRABLE ;

ALTER TABLE UTL_MESSAGE ADD CONSTRAINT FK_UTLMESS_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_MENU_ARG ADD CONSTRAINT FK_UTLMNUARG_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_MENU_GROUP ADD CONSTRAINT FK_UTLMNUGRP_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_MENU_GROUP_ITEM ADD CONSTRAINT FK_UTLMNUITEM_MENUGROUP FOREIGN KEY ( MENU_ID ) REFERENCES UTL_MENU_ITEM ( MENU_ID ) DEFERRABLE ;

ALTER TABLE UTL_MENU_ITEM ADD CONSTRAINT FK_UTLMNUITM_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_MENU_ITEM_ARG ADD CONSTRAINT FK_UTLMUARG_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_API_NOTIF_ASSIGN ADD CONSTRAINT FK_UTLNOTIFDEFINITION_UTLAPIN FOREIGN KEY ( NOTIF_DEFINITION_ID ) REFERENCES UTL_NOTIF_DEFINITION ( NOTIF_DEFINITION_ID ) DEFERRABLE ;

ALTER TABLE UTL_API_NOTIF_ASSIGN ADD CONSTRAINT FK_UTLNOTIFEVENTTYPE_UTLAPINO FOREIGN KEY ( NOTIF_EVENT_TYPE_ID ) REFERENCES UTL_NOTIF_EVENT_TYPE ( NOTIF_EVENT_TYPE_ID ) DEFERRABLE ;

ALTER TABLE UTL_NOTIF_DEFINITION ADD CONSTRAINT FK_UTLNOTIFTYPE_UTLNOTIFDEFIN FOREIGN KEY ( NOTIF_TYPE_ID ) REFERENCES UTL_NOTIF_TYPE ( NOTIF_TYPE_ID ) DEFERRABLE ;

ALTER TABLE UTL_NOTIFICATION_CONFIG ADD CONSTRAINT FK_UTLNOTIFTYPE_UTLNOTIFICATI FOREIGN KEY ( NOTIF_TYPE_ID ) REFERENCES UTL_NOTIF_TYPE ( NOTIF_TYPE_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM_MATRIX ADD CONSTRAINT FK_UTLPANSTYPE_UTLPMATRIX FOREIGN KEY ( ANSWER_TYPE_CD ) REFERENCES UTL_PERM_ANSWER_TYPE ( ANSWER_TYPE_CD ) DEFERRABLE ;

ALTER TABLE UTL_PB_APP ADD CONSTRAINT FK_UTLPBAPP_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PB_ASSIGN ADD CONSTRAINT FK_UTLPBAPP_UTLPBASSIGN FOREIGN KEY ( APP_CD ) REFERENCES UTL_PB_APP ( APP_CD ) DEFERRABLE ;

ALTER TABLE UTL_PB_FILTER ADD CONSTRAINT FK_UTLPBAPP_UTLPBFILTER FOREIGN KEY ( APP_CD ) REFERENCES UTL_PB_APP ( APP_CD ) DEFERRABLE ;

ALTER TABLE UTL_PB_HELP ADD CONSTRAINT FK_UTLPBAPP_UTLPBHELP FOREIGN KEY ( APP_CD ) REFERENCES UTL_PB_APP ( APP_CD ) DEFERRABLE ;

ALTER TABLE UTL_PB_ITEM_DOC ADD CONSTRAINT FK_UTLPBAPP_UTLPBITEMDOC FOREIGN KEY ( APP_CD ) REFERENCES UTL_PB_APP ( APP_CD ) DEFERRABLE ;

ALTER TABLE UTL_PB_MESSAGE ADD CONSTRAINT FK_UTLPBAPP_UTLPBMESSAGE FOREIGN KEY ( APP_CD ) REFERENCES UTL_PB_APP ( APP_CD ) DEFERRABLE ;

ALTER TABLE UTL_PB_REF_TERM ADD CONSTRAINT FK_UTLPBAPP_UTLPBREFTERM FOREIGN KEY ( APP_CD ) REFERENCES UTL_PB_APP ( APP_CD ) DEFERRABLE ;

ALTER TABLE UTL_PB_SEARCH ADD CONSTRAINT FK_UTLPBAPP_UTLPBSEARCH FOREIGN KEY ( APP_CD ) REFERENCES UTL_PB_APP ( APP_CD ) DEFERRABLE ;

ALTER TABLE UTL_PB_ASSIGN ADD CONSTRAINT FK_UTLPBASS_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PB_DOC_LIB ADD CONSTRAINT FK_UTLPBDOCLIB_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PB_FILTER ADD CONSTRAINT FK_UTLPBFIL_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PB_HELP ADD CONSTRAINT FK_UTLPBHLP_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PB_ITEM_DOC ADD CONSTRAINT FK_UTLPBIDOC_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PB_DOC_LIB ADD CONSTRAINT FK_UTLPBITEMDOC_UTLPBDOCLIB FOREIGN KEY ( APP_CD, ITEM_TYPE_CD ) REFERENCES UTL_PB_ITEM_DOC ( APP_CD, ITEM_TYPE_CD ) DEFERRABLE ;

ALTER TABLE UTL_PB_MESSAGE ADD CONSTRAINT FK_UTLPBMESS_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PB_REF_TERM ADD CONSTRAINT FK_UTLPBRFTRM_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PB_SEARCH ADD CONSTRAINT FK_UTLPBSRC_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM_MATRIX_ROW ADD CONSTRAINT FK_UTLPERMMODE_PMATRIXROW FOREIGN KEY ( MODE_CD ) REFERENCES UTL_PERM_MODE ( MODE_CD ) DEFERRABLE ;

ALTER TABLE UTL_PERM_MATRIX_COLUMN ADD CONSTRAINT FK_UTLPMATRIXHEADER_UTLPMCOLUM FOREIGN KEY ( MATRIX_ID ) REFERENCES UTL_PERM_MATRIX_HEADER ( MATRIX_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM_MATRIX_COLUMN ADD CONSTRAINT FK_UTLPMQUESTION_UTLPMCOLUMN FOREIGN KEY ( QUESTION_ID ) REFERENCES UTL_PERM_QUESTION ( QUESTION_ID ) DEFERRABLE ;

ALTER TABLE UTL_PERM_SET_ACTION_PARM ADD CONSTRAINT FK_UTLPRMST_UTLPRMSTPRM FOREIGN KEY ( PERM_SET_ID ) REFERENCES UTL_PERM_SET ( ID ) DEFERRABLE ;

ALTER TABLE UTL_ROLE_PERM_SET ADD CONSTRAINT FK_UTLPRMST_UTLPRMSTRL FOREIGN KEY ( PERM_SET_ID ) REFERENCES UTL_PERM_SET ( ID ) DEFERRABLE ;

ALTER TABLE UTL_PURGE_POLICY ADD CONSTRAINT FK_UTLPURGEGRP_UTLPURGEPOL FOREIGN KEY ( PURGE_GROUP_CD ) REFERENCES UTL_PURGE_GROUP ( PURGE_GROUP_CD ) DEFERRABLE ;

ALTER TABLE UTL_PURGE_STRATEGY ADD CONSTRAINT FK_UTLPURGEPOL_UTLPURGESTR FOREIGN KEY ( PURGE_POLICY_CD ) REFERENCES UTL_PURGE_POLICY ( PURGE_POLICY_CD ) DEFERRABLE ;

ALTER TABLE UTL_PURGE_STRATEGY ADD CONSTRAINT FK_UTLPURGETBL_UTLPURGESTR FOREIGN KEY ( PURGE_TABLE_CD ) REFERENCES UTL_PURGE_TABLE ( PURGE_TABLE_CD ) DEFERRABLE ;

ALTER TABLE UTL_QUICKTEXT ADD CONSTRAINT FK_UTLQUICKTEXT_MIMDB_CTRL FOREIGN KEY ( CTRL_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE UTL_QUICKTEXT ADD CONSTRAINT FK_UTLQUICKTEXT_MIMDB_DBID FOREIGN KEY ( QUICKTEXT_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE UTL_QUICKTEXT ADD CONSTRAINT FK_UTLQUICKTEXT_MIMDB_REV FOREIGN KEY ( REVISION_DB_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE UTL_QUICKTEXT ADD CONSTRAINT FK_UTLQUICKTEXT_MIMRSTAT FOREIGN KEY ( RSTAT_CD ) REFERENCES MIM_RSTAT ( RSTAT_CD ) NOT DEFERRABLE ;

ALTER TABLE UTL_QUICKTEXT ADD CONSTRAINT FK_UTLQUICKTEXT_REFTYPE FOREIGN KEY ( TYPE_CD ) REFERENCES REF_QUICKTEXT_TYPE ( QUICKTEXT_TYPE_CD ) NOT DEFERRABLE ;

ALTER TABLE UTL_ROLE_PARM ADD CONSTRAINT FK_UTLRLPRM_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_ROLE_PERM_SET ADD CONSTRAINT FK_UTLRL_UTLRLPRMST FOREIGN KEY ( ROLE_ID ) REFERENCES UTL_ROLE ( ROLE_ID ) DEFERRABLE ;

ALTER TABLE EVT_BAND_ROLE ADD CONSTRAINT FK_UTLROLE_EVTBANDROLE FOREIGN KEY ( ROLE_ID ) REFERENCES UTL_ROLE ( ROLE_ID ) DEFERRABLE ;

ALTER TABLE FAIL_DEFER_REF_ROLE ADD CONSTRAINT FK_UTLROLE_FAILDEFREFRL FOREIGN KEY ( ROLE_ID ) REFERENCES UTL_ROLE ( ROLE_ID ) DEFERRABLE ;

ALTER TABLE UTL_ROLE ADD CONSTRAINT FK_UTLROLE_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_MENU_GROUP ADD CONSTRAINT FK_UTLROLE_MNUGROUP FOREIGN KEY ( ROLE_ID ) REFERENCES UTL_ROLE ( ROLE_ID ) DEFERRABLE ;

ALTER TABLE TASK_ADVISORY ADD CONSTRAINT FK_UTLROLE_TASKADVISORY FOREIGN KEY ( ROLE_ID ) REFERENCES UTL_ROLE ( ROLE_ID ) DEFERRABLE ;

ALTER TABLE UTL_TEMP_ASSIGN_ROLE_MAP ADD CONSTRAINT FK_UTLROLE_TMPASSIGNROLEMAP FOREIGN KEY ( ROLE_ID ) REFERENCES UTL_ROLE ( ROLE_ID ) NOT DEFERRABLE ;

ALTER TABLE UTL_TEMP_ASSIGN_ROLE_MAP ADD CONSTRAINT FK_UTLROLE_TMPASSIGNROLEMAP2 FOREIGN KEY ( ASSIGNABLE_ROLE_ID ) REFERENCES UTL_ROLE ( ROLE_ID ) NOT DEFERRABLE ;

ALTER TABLE UTL_ACTION_ROLE_PARM ADD CONSTRAINT FK_UTLROLE_UTLACTROLEPARM FOREIGN KEY ( ROLE_ID ) REFERENCES UTL_ROLE ( ROLE_ID ) DEFERRABLE ;

ALTER TABLE UTL_ROLE_PARM ADD CONSTRAINT FK_UTLROLE_UTLROLEPARM FOREIGN KEY ( ROLE_ID ) REFERENCES UTL_ROLE ( ROLE_ID ) DEFERRABLE ;

ALTER TABLE UTL_TODO_LIST ADD CONSTRAINT FK_UTLROLE_UTLTDLIST FOREIGN KEY ( ROLE_ID ) REFERENCES UTL_ROLE ( ROLE_ID ) DEFERRABLE ;

ALTER TABLE UTL_USER_ROLE ADD CONSTRAINT FK_UTLROLE_UTLUSERROLE FOREIGN KEY ( ROLE_ID ) REFERENCES UTL_ROLE ( ROLE_ID ) DEFERRABLE ;

ALTER TABLE UTL_USER_TEMP_ROLE ADD CONSTRAINT FK_UTLROLE_UTLUSERTEMPROLE FOREIGN KEY ( ROLE_ID ) REFERENCES UTL_ROLE ( ROLE_ID ) NOT DEFERRABLE ;

ALTER TABLE UTL_RULE ADD CONSTRAINT FK_UTLRULE_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_SEQUENCE ADD CONSTRAINT FK_UTLSEQ_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_TODO_LIST_BUTTON ADD CONSTRAINT FK_UTLTDBUTT_UTLTDLSTBUTT FOREIGN KEY ( TODO_BUTTON_ID ) REFERENCES UTL_TODO_BUTTON ( TODO_BUTTON_ID ) DEFERRABLE ;

ALTER TABLE UTL_MENU_ITEM ADD CONSTRAINT FK_UTLTDLST_UTLMNUITEM FOREIGN KEY ( TODO_LIST_ID ) REFERENCES UTL_TODO_LIST ( TODO_LIST_ID ) DEFERRABLE ;

ALTER TABLE UTL_TODO_LIST_BUTTON ADD CONSTRAINT FK_UTLTDLST_UTLTDLSTBUTT FOREIGN KEY ( TODO_LIST_ID ) REFERENCES UTL_TODO_LIST ( TODO_LIST_ID ) DEFERRABLE ;

ALTER TABLE UTL_TODO_LIST_TAB ADD CONSTRAINT FK_UTLTDOTAB_UTLTOLISTTAB FOREIGN KEY ( TODO_TAB_ID ) REFERENCES UTL_TODO_TAB ( TODO_TAB_ID ) DEFERRABLE ;

ALTER TABLE UTL_TEMP_ASSIGN_ROLE_MAP ADD CONSTRAINT FK_UTLTEMPASSIGNROLEMAP_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE INV_LOC ADD CONSTRAINT FK_UTLTIMEZONE_INVLOC FOREIGN KEY ( TIMEZONE_CD ) REFERENCES UTL_TIMEZONE ( TIMEZONE_CD ) DEFERRABLE ;

ALTER TABLE UTL_TODO_LIST_TAB ADD CONSTRAINT FK_UTLTODOLST_UTLTDLSTTAB FOREIGN KEY ( TODO_LIST_ID ) REFERENCES UTL_TODO_LIST ( TODO_LIST_ID ) DEFERRABLE ;

ALTER TABLE UTL_TRIGGER ADD CONSTRAINT FK_UTLTRIG_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_USER_PASSWORD ADD CONSTRAINT FK_UTLUSERPASSWORD_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_USER_TEMP_ROLE ADD CONSTRAINT FK_UTLUSERTEMPROLE_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) NOT DEFERRABLE ;

ALTER TABLE UTL_USER ADD CONSTRAINT FK_UTLUSER_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR ADD CONSTRAINT FK_UTLUSER_ORGHR FOREIGN KEY ( USER_ID ) REFERENCES UTL_USER ( USER_ID ) DEFERRABLE ;

ALTER TABLE ORG_HR_SUPPLY ADD CONSTRAINT FK_UTLUSER_ORGHRSUPPLY FOREIGN KEY ( USER_ID ) REFERENCES UTL_USER ( USER_ID ) DEFERRABLE ;

ALTER TABLE UTL_ACTION_USER_PARM ADD CONSTRAINT FK_UTLUSER_UTLACTUSERPARM FOREIGN KEY ( USER_ID ) REFERENCES UTL_USER ( USER_ID ) DEFERRABLE ;

ALTER TABLE UTL_ALERT_LOG ADD CONSTRAINT FK_UTLUSER_UTLALERTLOG FOREIGN KEY ( USER_ID ) REFERENCES UTL_USER ( USER_ID ) DEFERRABLE ;

ALTER TABLE UTL_ALERT_STATUS_LOG ADD CONSTRAINT FK_UTLUSER_UTLALERTSTATUSLOG FOREIGN KEY ( USER_ID ) REFERENCES UTL_USER ( USER_ID ) DEFERRABLE ;

ALTER TABLE UTL_PB_FILTER ADD CONSTRAINT FK_UTLUSER_UTLPBFILTER2 FOREIGN KEY ( USER_ID ) REFERENCES UTL_USER ( USER_ID ) DEFERRABLE ;

ALTER TABLE UTL_USER_ALERT ADD CONSTRAINT FK_UTLUSER_UTLUSERALERT FOREIGN KEY ( USER_ID ) REFERENCES UTL_USER ( USER_ID ) DEFERRABLE ;

ALTER TABLE UTL_USER_PARM ADD CONSTRAINT FK_UTLUSER_UTLUSERPARM FOREIGN KEY ( USER_ID ) REFERENCES UTL_USER ( USER_ID ) DEFERRABLE ;

ALTER TABLE UTL_USER_PASSWORD ADD CONSTRAINT FK_UTLUSER_UTLUSERPASSWORD FOREIGN KEY ( USER_ID ) REFERENCES UTL_USER ( USER_ID ) DEFERRABLE ;

ALTER TABLE UTL_USER_ROLE ADD CONSTRAINT FK_UTLUSER_UTLUSERROLE FOREIGN KEY ( USER_ID ) REFERENCES UTL_USER ( USER_ID ) DEFERRABLE ;

ALTER TABLE UTL_USER_TEMP_ROLE ADD CONSTRAINT FK_UTLUSER_UTLUSERTEMPROLE FOREIGN KEY ( USER_ID ) REFERENCES UTL_USER ( USER_ID ) NOT DEFERRABLE ;

ALTER TABLE UTL_USER_TEMP_ROLE ADD CONSTRAINT FK_UTLUSER_UTLUSERTEMPROLE2 FOREIGN KEY ( ASSIGNED_BY ) REFERENCES UTL_USER ( USER_ID ) NOT DEFERRABLE ;

ALTER TABLE UTL_USER_TEMP_ROLE ADD CONSTRAINT FK_UTLUSER_UTLUSERTEMPROLE3 FOREIGN KEY ( UNASSIGNED_BY ) REFERENCES UTL_USER ( USER_ID ) NOT DEFERRABLE ;

ALTER TABLE UTL_USER_ALERT ADD CONSTRAINT FK_UTLUSRART_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_USER_PARM ADD CONSTRAINT FK_UTLUSRPRM_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_USER_ROLE ADD CONSTRAINT FK_UTLUSRRL_MIMDB FOREIGN KEY ( UTL_ID ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE ;

ALTER TABLE UTL_WORK_ITEM ADD CONSTRAINT FK_UTLWORKITEMTYPE_UTLWORKITEM FOREIGN KEY ( TYPE ) REFERENCES UTL_WORK_ITEM_TYPE ( NAME ) DEFERRABLE ;

ALTER TABLE EQP_PART_VENDOR_EXCHG ADD CONSTRAINT FK_VENDORSTATUS_PARTVENDORXCHG FOREIGN KEY ( VENDOR_STATUS_DB_ID, VENDOR_STATUS_CD ) REFERENCES REF_VENDOR_STATUS ( VENDOR_STATUS_DB_ID, VENDOR_STATUS_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_VOLTAGE_REF_ENG_EQPPARTNO FOREIGN KEY ( VOLTAGE_ENG_UNIT_DB_ID, VOLTAGE_ENG_UNIT_CD ) REFERENCES REF_ENG_UNIT ( ENG_UNIT_DB_ID, ENG_UNIT_CD ) DEFERRABLE ;

ALTER TABLE REF_WARRANTY_SUB_TYPE ADD CONSTRAINT FK_WARARNTYTYPE_WARRANTYSUBTYP FOREIGN KEY ( WARRANTY_TYPE_DB_ID, WARRANTY_TYPE_CD ) REFERENCES REF_WARRANTY_TYPE ( WARRANTY_TYPE_DB_ID, WARRANTY_TYPE_CD ) DEFERRABLE ;

ALTER TABLE CLAIM_LABOUR_LINE ADD CONSTRAINT FK_WAREVALLAB_CLMLABLINE FOREIGN KEY ( WARRANTY_EVAL_DB_ID, WARRANTY_EVAL_ID, WARRANTY_EVAL_TASK_ID, WARRANTY_EVAL_LABOUR_ID ) REFERENCES WARRANTY_EVAL_LABOUR ( WARRANTY_EVAL_DB_ID, WARRANTY_EVAL_ID, WARRANTY_EVAL_TASK_ID, WARRANTY_EVAL_LABOUR_ID ) DEFERRABLE ;

ALTER TABLE CLAIM_PART_LINE ADD CONSTRAINT FK_WAREVALPRT_CLMPRTLINE FOREIGN KEY ( WARRANTY_EVAL_DB_ID, WARRANTY_EVAL_ID, WARRANTY_EVAL_TASK_ID, WARRANTY_EVAL_PART_ID ) REFERENCES WARRANTY_EVAL_PART ( WARRANTY_EVAL_DB_ID, WARRANTY_EVAL_ID, WARRANTY_EVAL_TASK_ID, WARRANTY_EVAL_PART_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_EVAL_LABOUR ADD CONSTRAINT FK_WAREVALTSK_WAREVALAB FOREIGN KEY ( WARRANTY_EVAL_DB_ID, WARRANTY_EVAL_ID, WARRANTY_EVAL_TASK_ID ) REFERENCES WARRANTY_EVAL_TASK ( WARRANTY_EVAL_DB_ID, WARRANTY_EVAL_ID, WARRANTY_EVAL_TASK_ID ) DEFERRABLE ;

ALTER TABLE PO_LINE_WARRANTY ADD CONSTRAINT FK_WARRANTYDEFN_POLINEWARRANTY FOREIGN KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) REFERENCES WARRANTY_DEFN ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_ATTACH ADD CONSTRAINT FK_WARRANTYDEFN_WARRANTYATTACH FOREIGN KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) REFERENCES WARRANTY_DEFN ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN_ASSEMBLY ADD CONSTRAINT FK_WARRANTYDEFN_WARRANTYDEFNAS FOREIGN KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) REFERENCES WARRANTY_DEFN ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN_COMPONENT ADD CONSTRAINT FK_WARRANTYDEFN_WARRANTYDEFNCO FOREIGN KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) REFERENCES WARRANTY_DEFN ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN_PART_LIST ADD CONSTRAINT FK_WARRANTYDEFN_WARRANTYDEFNPA FOREIGN KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) REFERENCES WARRANTY_DEFN ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN_TASK ADD CONSTRAINT FK_WARRANTYDEFN_WARRANTYDEFNTA FOREIGN KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) REFERENCES WARRANTY_DEFN ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN_VENDOR_LIST ADD CONSTRAINT FK_WARRANTYDEFN_WARRANTYDEFNVE FOREIGN KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) REFERENCES WARRANTY_DEFN ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_IETM ADD CONSTRAINT FK_WARRANTYDEFN_WARRANTYIETM FOREIGN KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) REFERENCES WARRANTY_DEFN ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_INIT ADD CONSTRAINT FK_WARRANTYDEFN_WARRANTY_INIT FOREIGN KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) REFERENCES WARRANTY_DEFN ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_EVAL ADD CONSTRAINT FK_WARRANTYEVALSTATUS_WARRANTY FOREIGN KEY ( STATUS_DB_ID, STATUS_CD ) REFERENCES REF_WARRANTY_EVAL_STATUS ( WARRANTY_EVAL_STATUS_DB_ID, WARRANTY_EVAL_STATUS_CD ) DEFERRABLE ;

ALTER TABLE WARRANTY_EVAL_PART ADD CONSTRAINT FK_WARRANTYEVALTASK_WRNTEVALPA FOREIGN KEY ( WARRANTY_EVAL_DB_ID, WARRANTY_EVAL_ID, WARRANTY_EVAL_TASK_ID ) REFERENCES WARRANTY_EVAL_TASK ( WARRANTY_EVAL_DB_ID, WARRANTY_EVAL_ID, WARRANTY_EVAL_TASK_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_EVAL_ALERT_QUEUE ADD CONSTRAINT FK_WARRANTYEVAL_ALERTQUEUE FOREIGN KEY ( WARRANTY_EVAL_DB_ID, WARRANTY_EVAL_ID ) REFERENCES WARRANTY_EVAL ( WARRANTY_EVAL_DB_ID, WARRANTY_EVAL_ID ) DEFERRABLE ;

ALTER TABLE CLAIM ADD CONSTRAINT FK_WARRANTYEVAL_CLAIM FOREIGN KEY ( WARRANTY_EVAL_DB_ID, WARRANTY_EVAL_ID ) REFERENCES WARRANTY_EVAL ( WARRANTY_EVAL_DB_ID, WARRANTY_EVAL_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_EVAL_TASK ADD CONSTRAINT FK_WARRANTYEVAL_TASKS FOREIGN KEY ( WARRANTY_EVAL_DB_ID, WARRANTY_EVAL_ID ) REFERENCES WARRANTY_EVAL ( WARRANTY_EVAL_DB_ID, WARRANTY_EVAL_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_EVAL ADD CONSTRAINT FK_WARRANTYINIT_WARRANTYEVAL FOREIGN KEY ( WARRANTY_INIT_DB_ID, WARRANTY_INIT_ID ) REFERENCES WARRANTY_INIT ( WARRANTY_INIT_DB_ID, WARRANTY_INIT_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_INIT_TASK ADD CONSTRAINT FK_WARRANTYINIT_WRNTINITTASK FOREIGN KEY ( WARRANTY_INIT_DB_ID, WARRANTY_INIT_ID ) REFERENCES WARRANTY_INIT ( WARRANTY_INIT_DB_ID, WARRANTY_INIT_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN ADD CONSTRAINT FK_WARRANTYPRIORITY_WARRANTYDE FOREIGN KEY ( PRIORITY_DB_ID, PRIORITY_CD ) REFERENCES REF_WARRANTY_PRIORITY ( WARRANTY_PRIORITY_DB_ID, WARRANTY_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE WARRANTY_INIT ADD CONSTRAINT FK_WARRANTYPRIORITY_WARRANTYIN FOREIGN KEY ( WARRANTY_PRIORITY_DB_ID, WARRANTY_PRIORITY_CD ) REFERENCES REF_WARRANTY_PRIORITY ( WARRANTY_PRIORITY_DB_ID, WARRANTY_PRIORITY_CD ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN ADD CONSTRAINT FK_WARRANTYSTATUS_WARRANTYDEFN FOREIGN KEY ( STATUS_DB_ID, STATUS_CD ) REFERENCES REF_WARRANTY_STATUS ( WARRANTY_STATUS_DB_ID, WARRANTY_STATUS_CD ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN ADD CONSTRAINT FK_WARRANTYSUBTYPE_WARRANTYDEF FOREIGN KEY ( WARRANTY_SUB_TYPE_DB_ID, WARRANTY_SUB_TYPE_CD ) REFERENCES REF_WARRANTY_SUB_TYPE ( WARRANTY_SUB_TYPE_DB_ID, WARRANTY_SUB_TYPE_CD ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN ADD CONSTRAINT FK_WARRANTYTERMSSTATE_CONFIGSL FOREIGN KEY ( CONFIG_SLOT_STATE_DB_ID, CONFIG_SLOT_STATE_CD ) REFERENCES REF_WARRANTY_TERMS_STATE ( WARRANTY_TERMS_STATE_DB_ID, WARRANTY_TERMS_STATE_CD ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN ADD CONSTRAINT FK_WARRANTYTERMSSTATE_NONREPPA FOREIGN KEY ( NON_REP_PARTS_STATE_DB_ID, NON_REP_PARTS_STATE_CD ) REFERENCES REF_WARRANTY_TERMS_STATE ( WARRANTY_TERMS_STATE_DB_ID, WARRANTY_TERMS_STATE_CD ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN ADD CONSTRAINT FK_WARRANTYTERMSSTATE_REPPARTS FOREIGN KEY ( REP_PARTS_STATE_DB_ID, REP_PARTS_STATE_CD ) REFERENCES REF_WARRANTY_TERMS_STATE ( WARRANTY_TERMS_STATE_DB_ID, WARRANTY_TERMS_STATE_CD ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN ADD CONSTRAINT FK_WARRANTYTYPE_WARRANTYDEFN FOREIGN KEY ( WARRANTY_TYPE_DB_ID, WARRANTY_TYPE_CD ) REFERENCES REF_WARRANTY_TYPE ( WARRANTY_TYPE_DB_ID, WARRANTY_TYPE_CD ) DEFERRABLE ;

ALTER TABLE WARRANTY_TERMS_CONFIG_SLOTS ADD CONSTRAINT FK_WARRANTY_TERMSCONFIGSLOTS FOREIGN KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) REFERENCES WARRANTY_DEFN ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_DEFN_LOC_LIST ADD CONSTRAINT FK_WARRANTY_WARRANTYLOCLIST FOREIGN KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) REFERENCES WARRANTY_DEFN ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_TERMS_NON_REP_PARTS ADD CONSTRAINT FK_WARRANTY_WRRNTTERMSNONREPPA FOREIGN KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) REFERENCES WARRANTY_DEFN ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_TERMS_REP_PARTS ADD CONSTRAINT FK_WARRANT_TERMSREPPARTS FOREIGN KEY ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) REFERENCES WARRANTY_DEFN ( WARRANTY_DEFN_DB_ID, WARRANTY_DEFN_ID ) DEFERRABLE ;

ALTER TABLE WARRANTY_INIT_INV ADD CONSTRAINT FK_WARRNTYINIT_WRNTYINITINV FOREIGN KEY ( WARRANTY_INIT_DB_ID, WARRANTY_INIT_ID ) REFERENCES WARRANTY_INIT ( WARRANTY_INIT_DB_ID, WARRANTY_INIT_ID ) DEFERRABLE ;

ALTER TABLE SHIP_SHIPMENT ADD CONSTRAINT FK_WEIGHTREFENGUNIT_SHIPSHIPME FOREIGN KEY ( WEIGHT_ENG_UNIT_DB_ID, WEIGHT_ENG_UNIT_CD ) REFERENCES REF_ENG_UNIT ( ENG_UNIT_DB_ID, ENG_UNIT_CD ) DEFERRABLE ;

ALTER TABLE EQP_PART_NO ADD CONSTRAINT FK_WEIGHT_REF_ENG_EQPPRTNO FOREIGN KEY ( WEIGHT_ENG_UNIT_DB_ID, WEIGHT_ENG_UNIT_CD ) REFERENCES REF_ENG_UNIT ( ENG_UNIT_DB_ID, ENG_UNIT_CD ) DEFERRABLE ;

ALTER TABLE WF_DEFN_LEVEL_HR ADD CONSTRAINT FK_WFDEFNLEVEL_WFDEFNLEVELHR FOREIGN KEY ( WF_LEVEL_DEFN_DB_ID, WF_LEVEL_DEFN_ID ) REFERENCES WF_LEVEL_DEFN ( WF_LEVEL_DEFN_DB_ID, WF_LEVEL_DEFN_ID ) DEFERRABLE ;

ALTER TABLE WF_DEFN_STEP_GROUP ADD CONSTRAINT FK_WFDEFNSTEP_CHILDREN FOREIGN KEY ( CHILD_WF_DEFN_STEP_DB_ID, CHILD_WF_DEFN_STEP_ID ) REFERENCES WF_DEFN_STEP ( WF_DEFN_STEP_DB_ID, WF_DEFN_STEP_ID ) DEFERRABLE ;

ALTER TABLE WF_DEFN_FLOW ADD CONSTRAINT FK_WFDEFNSTEP_FLOW FOREIGN KEY ( NEXT_WF_DEFN_STEP_DB_ID, NEXT_WF_DEFN_STEP_ID ) REFERENCES WF_DEFN_STEP ( WF_DEFN_STEP_DB_ID, WF_DEFN_STEP_ID ) DEFERRABLE ;

ALTER TABLE WF_DEFN_STEP_GROUP ADD CONSTRAINT FK_WFDEFNSTEP_GROUPS FOREIGN KEY ( WF_DEFN_STEP_DB_ID, WF_DEFN_STEP_ID ) REFERENCES WF_DEFN_STEP ( WF_DEFN_STEP_DB_ID, WF_DEFN_STEP_ID ) DEFERRABLE ;

ALTER TABLE WF_DEFN_STEP_LEVELS ADD CONSTRAINT FK_WFDEFNSTEP_LEVELS FOREIGN KEY ( WF_DEFN_STEP_DB_ID, WF_DEFN_STEP_ID ) REFERENCES WF_DEFN_STEP ( WF_DEFN_STEP_DB_ID, WF_DEFN_STEP_ID ) DEFERRABLE ;

ALTER TABLE WF_DEFN_FLOW ADD CONSTRAINT FK_WFDEFNSTEP_NEXTFLOW FOREIGN KEY ( WF_DEFN_STEP_DB_ID, WF_DEFN_STEP_ID ) REFERENCES WF_DEFN_STEP ( WF_DEFN_STEP_DB_ID, WF_DEFN_STEP_ID ) DEFERRABLE ;

ALTER TABLE WF_DEFN_STEPS ADD CONSTRAINT FK_WFDEFNSTEP_WFDEFN FOREIGN KEY ( WF_DEFN_STEP_DB_ID, WF_DEFN_STEP_ID ) REFERENCES WF_DEFN_STEP ( WF_DEFN_STEP_DB_ID, WF_DEFN_STEP_ID ) DEFERRABLE ;

ALTER TABLE WF_DEFN_STEPS ADD CONSTRAINT FK_WFDEFN_STEPS FOREIGN KEY ( WF_DEFN_DB_ID, WF_DEFN_ID ) REFERENCES WF_DEFN ( WF_DEFN_DB_ID, WF_DEFN_ID ) DEFERRABLE ;

ALTER TABLE WF_WF ADD CONSTRAINT FK_WFDEFN_WFWF FOREIGN KEY ( WF_DEFN_DB_ID, WF_DEFN_ID ) REFERENCES WF_DEFN ( WF_DEFN_DB_ID, WF_DEFN_ID ) DEFERRABLE ;

ALTER TABLE WF_DEFN_STEP_LEVELS ADD CONSTRAINT FK_WFLEVELDEFN_STEPS FOREIGN KEY ( WF_LEVEL_DEFN_DB_ID, WF_LEVEL_DEFN_ID ) REFERENCES WF_LEVEL_DEFN ( WF_LEVEL_DEFN_DB_ID, WF_LEVEL_DEFN_ID ) DEFERRABLE ;

ALTER TABLE WF_LEVEL ADD CONSTRAINT FK_WFLEVELDEFN_WFLEVEL FOREIGN KEY ( WF_LEVEL_DEFN_DB_ID, WF_LEVEL_DEFN_ID ) REFERENCES WF_LEVEL_DEFN ( WF_LEVEL_DEFN_DB_ID, WF_LEVEL_DEFN_ID ) DEFERRABLE ;

ALTER TABLE WF_STEP_LEVELS ADD CONSTRAINT FK_WFLEVEL_STEPS FOREIGN KEY ( WF_LEVEL_DB_ID, WF_LEVEL_ID ) REFERENCES WF_LEVEL ( WF_LEVEL_DB_ID, WF_LEVEL_ID ) DEFERRABLE ;

ALTER TABLE WF_STEP_GROUP ADD CONSTRAINT FK_WFSTEP_GROUPPARENT FOREIGN KEY ( WF_STEP_DB_ID, WF_STEP_ID ) REFERENCES WF_STEP ( WF_STEP_DB_ID, WF_STEP_ID ) DEFERRABLE ;

ALTER TABLE WF_STEP_LEVELS ADD CONSTRAINT FK_WFSTEP_LEVELS FOREIGN KEY ( WF_STEP_DB_ID, WF_STEP_ID ) REFERENCES WF_STEP ( WF_STEP_DB_ID, WF_STEP_ID ) DEFERRABLE ;

ALTER TABLE WF_STEPS ADD CONSTRAINT FK_WFSTEP_WF FOREIGN KEY ( WF_STEP_DB_ID, WF_STEP_ID ) REFERENCES WF_STEP ( WF_STEP_DB_ID, WF_STEP_ID ) DEFERRABLE ;

ALTER TABLE TASK_WF ADD CONSTRAINT FK_WFWF_TASKWF FOREIGN KEY ( WF_DB_ID, WF_ID ) REFERENCES WF_WF ( WF_DB_ID, WF_ID ) DEFERRABLE ;

ALTER TABLE WF_STEPS ADD CONSTRAINT FK_WFWF_WFSTEPS FOREIGN KEY ( WF_DB_ID, WF_ID ) REFERENCES WF_WF ( WF_DB_ID, WF_ID ) DEFERRABLE ;

ALTER TABLE WPL_WORK_PACKAGE_SETUP ADD CONSTRAINT FK_WORK_PACKAGE_SETUP_BLOB FOREIGN KEY ( BLOB_ID ) REFERENCES WPL_WORK_PACKAGE_SETUP_BLOB ( ID ) NOT DEFERRABLE ;

ALTER TABLE SCHED_WO_LINE ADD CONSTRAINT FK_WO_SCHDSTSK_SCHEDWOLINE FOREIGN KEY ( WO_SCHED_DB_ID, WO_SCHED_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE SCHED_STASK ADD CONSTRAINT FK_WO_SCHEDSTASK FOREIGN KEY ( WO_DB_ID, WO_ID ) REFERENCES EVT_EVENT ( EVENT_DB_ID, EVENT_ID ) DEFERRABLE ;

ALTER TABLE LPA_RUN_ISSUE ADD CONSTRAINT FK_WPSCHEDSTASK_LPARUNISSUE FOREIGN KEY ( WP_DB_ID, WP_ID ) REFERENCES SCHED_STASK ( SCHED_DB_ID, SCHED_ID ) DEFERRABLE ;

ALTER TABLE ZIP_TASK ADD CONSTRAINT FK_ZIPQUEUE_ZIPTASK FOREIGN KEY ( ZIP_ID ) REFERENCES ZIP_QUEUE ( ZIP_ID ) DEFERRABLE ;

ALTER TABLE PO_AUTH ADD CONSTRAINT FK__POAUTHLVL_POAUTH FOREIGN KEY ( PO_AUTH_LVL_DB_ID, PO_AUTH_LVL_CD ) REFERENCES REF_PO_AUTH_LVL ( PO_AUTH_LVL_DB_ID, PO_AUTH_LVL_CD ) DEFERRABLE ;


-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                           831
-- CREATE INDEX                          1107
-- ALTER TABLE                           8678
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           0
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                  27
-- CREATE STRUCTURED TYPE                  24
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
