--liquibase formatted sql

--changeSet OPER-23973:1 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_create('
    CREATE TABLE INV_CND_CHG_EVENT
	  (
		event_db_id        NUMBER (10) NOT NULL ,
		event_id           NUMBER (10) NOT NULL ,
		stage_reason_db_id NUMBER (10) ,
		stage_reason_cd    VARCHAR2 (16) ,
		editor_hr_db_id    NUMBER (10) ,
		editor_hr_id       NUMBER (10) ,
		event_status_db_id NUMBER (10) ,
		event_status_cd    VARCHAR2 (16) ,
		event_reason_db_id NUMBER (10) ,
		event_reason_cd    VARCHAR2 (8) ,
		data_source_db_id  NUMBER (10) ,
		data_source_cd     VARCHAR2 (8) ,
		h_event_db_id      NUMBER (10) ,
		h_event_id         NUMBER (10) ,
		event_sdesc        VARCHAR2 (500) NOT NULL ,
		ext_key_sdesc      VARCHAR2 (80) ,
		seq_err_bool       NUMBER (1) DEFAULT 0 NOT NULL ,
		event_ldesc        VARCHAR2 (4000) ,
		event_dt           DATE ,
		sched_start_dt     DATE ,
		sub_event_ord      NUMBER (4) ,
		alt_id RAW (16) NOT NULL ,
		rstat_cd       NUMBER (3) NOT NULL ,
		revision_no    NUMBER (10) NOT NULL ,
		ctrl_db_id     NUMBER (10) NOT NULL ,
		creation_dt    DATE NOT NULL ,
		revision_dt    DATE NOT NULL ,
		revision_db_id NUMBER (10) NOT NULL ,
		revision_user  VARCHAR2 (30) NOT NULL
	  )
  ');
END;
/

--changeSet OPER-23973:2 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_EVENT ADD CHECK ( seq_err_bool IN (0, 1)) DEFERRABLE');
END;
/

--changeSet OPER-23973:3 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_EVENT ADD CHECK ( rstat_cd     IN (0, 1, 2, 3)) DEFERRABLE');
END;
/


--changeSet OPER-23973:4 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  EXECUTE IMMEDIATE q'[COMMENT ON TABLE INV_CND_CHG_EVENT IS
	  'Inventory Change (AC) Event.  This class enumerates all of the change actions (i.e. data records, fault records, etc.) that are entered into the system against an inventory item. It is the foundation for all recorded transactions against assets and is driven in sequence by time and usage. Events can be historical in nature, can be current or can be in the future. An event has
	a) a lifecycle
	b) a duration
	c) records completed actions for FAA purposes
	d) records pending actions for FAA purposes
	e) records technical log related information
	f) records journey log related information']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.event_db_id IS
	  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.event_id IS
	  'Unique idenifier assigned from Sequence EVENT_ID_SEQ.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.stage_reason_db_id IS
	  'FK to REF_STAGE_REASON']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.stage_reason_cd IS
	  'FK to REF_STAGE_REASON.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.editor_hr_db_id IS
	  'FK to ORG_HR. The current editor of the event record.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.editor_hr_id IS
	  'FK to ORG_HR. The current editor of the event record.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.event_status_db_id IS
	  'The last recorded status of the workflow. FK to REF_EVENT_STATUS']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.event_status_cd IS
	  'The last recorded status of the workflow. FK to REF_EVENT_STATUS']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.event_reason_db_id IS
	  'FK to REF_EVENT_REASON. Identifies main reason for event occurrence.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.event_reason_cd IS
	  'FK to REF_EVENT_REASON. Identifies main reason for event occurrence.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.data_source_db_id IS
	  'FK to REF_DATA_SOURCE.  Identifies the method that the system will use to retrieve actual data.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.data_source_cd IS
	  'FK to REF_DATA_SOURCE.  Identifies the method that the system will use to retrieve actual data.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.h_event_db_id IS
	  'FK to INV_CND_CHG_EVENT.  Corresponds to the highest Event under which this Event is grouped.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.h_event_id IS
	  'FK to INV_CND_CHG_EVENT.  Corresponds to the highest Event under which this Event is grouped.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.event_sdesc IS
	  'A short label used for the event. Frequently generated by the system.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.ext_key_sdesc IS
	  'A field used to store an external system''s PK value.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.seq_err_bool IS
	  'Indicates if the event was recorded out of chronological sequence.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.event_ldesc IS
	  'A long description for the event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.event_dt IS
	  'Local time that the event actually ended.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.sched_start_dt IS
	  'Scheduled local time to start the event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.sub_event_ord IS
	  'Defines the hierarchy of a series of related events.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.rstat_cd IS
	  'A physical attribute that defines the read/write access of the record.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.revision_no IS
	  'A number incremented each time the record is modified.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.creation_dt IS
	  'The database server''s timestamp captured at the time the record was inserted.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.revision_dt IS
	  'The database server''s timestamp captured at the time the record was last updated.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.revision_db_id IS
	  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_EVENT.revision_user IS
	  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.']';
END;
/

--changeSet OPER-23973:5 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('CREATE INDEX IX_INV_CND_CHG_EVENT_SDESC_LW ON INV_CND_CHG_EVENT (LOWER(EVENT_SDESC))');
END;
/

--changeSet OPER-23973:6 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('CREATE INDEX IX_INV_CND_CHG_EVENT_EVTEVTH ON INV_CND_CHG_EVENT (h_event_db_id ASC ,h_event_id ASC )');
END;
/

--changeSet OPER-23973:7 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('CREATE INDEX IX_INV_CND_CHG_EVENT_EVTSDESC ON INV_CND_CHG_EVENT ( event_sdesc ASC)');
END;
/

--changeSet OPER-23973:8 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('CREATE INDEX IX_INVCNDCHGEVT_EXTKEYSDESC ON INV_CND_CHG_EVENT (ext_key_sdesc ASC)');
END;
/

--changeSet OPER-23973:9 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('CREATE INDEX IX_INVCNDCHGEVT_TYPESTATUS ON INV_CND_CHG_EVENT (event_status_db_id ASC ,event_status_cd ASC)');
END;
/

--changeSet OPER-23973:10 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('CREATE INDEX IX_ORGHR_INV_CND_CHG_EVENT ON INV_CND_CHG_EVENT (editor_hr_db_id ASC ,editor_hr_id ASC)');
END;
/

--changeSet OPER-23973:11 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT PK_INV_CND_CHG_EVENT PRIMARY KEY ( event_db_id, event_id )');
END;
/

--changeSet OPER-23973:12 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT IX_INV_CND_CHG_EVENTALTID_UNQ UNIQUE ( alt_id )');
END;
/

--changeSet OPER-23973:20 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_create('
  CREATE TABLE INV_CND_CHG_INV
  (
    event_db_id         NUMBER (10) NOT NULL ,
    event_id            NUMBER (10) NOT NULL ,
    event_inv_id        NUMBER (10) NOT NULL ,
    inv_no_db_id        NUMBER (10) NOT NULL ,
    inv_no_id           NUMBER (10) NOT NULL ,
    nh_inv_no_db_id     NUMBER (10) ,
    nh_inv_no_id        NUMBER (10) ,
    assmbl_inv_no_db_id NUMBER (10) ,
    assmbl_inv_no_id    NUMBER (10) ,
    h_inv_no_db_id      NUMBER (10) ,
    h_inv_no_id         NUMBER (10) ,
    assmbl_db_id        NUMBER (10) ,
    assmbl_cd           VARCHAR2 (8) ,
    assmbl_bom_id       NUMBER (10) ,
    assmbl_pos_id       NUMBER (10) ,
    part_no_db_id       NUMBER (10) ,
    part_no_id          NUMBER (10) ,
    bom_part_db_id      NUMBER (10) ,
    bom_part_id         NUMBER (10) ,
    main_inv_bool       NUMBER (1) DEFAULT 0 NOT NULL ,
    rstat_cd            NUMBER (3) NOT NULL ,
    revision_no         NUMBER (10) NOT NULL ,
    ctrl_db_id          NUMBER (10) NOT NULL ,
    creation_dt         DATE NOT NULL ,
    revision_dt         DATE NOT NULL ,
    revision_db_id      NUMBER (10) NOT NULL ,
    revision_user       VARCHAR2 (30) NOT NULL
  )');
END;
/

--changeSet OPER-23973:21 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_INV ADD CHECK ( main_inv_bool IN (0, 1)) DEFERRABLE ');
END;
/

--changeSet OPER-23973:22 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_INV ADD CHECK ( rstat_cd      IN (0, 1, 2, 3)) DEFERRABLE');
END;
/

--changeSet OPER-23973:23 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  EXECUTE IMMEDIATE q'[COMMENT ON TABLE INV_CND_CHG_INV IS
  'Inventory Change (AC) Event Inventory Configuration: This entity is used to determine which log card an event should be filed against. It also captures the log card''s asset configuration (ie, exact component, assembly, engine, aircraft, etc...) at the time the event was completed. It is the foundation for reconstructing configurations at points in history.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.event_db_id IS
  'FK to EVT_EVENT.  The event the log card should be filed against.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.event_id IS
  'FK to EVT_EVENT.  The event the log card should be filed against.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.event_inv_id IS
  'Number assigned (1..n) in context of the event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.inv_no_db_id IS
  'FK to INV_INV. The immediate item that the event is assigned to.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.inv_no_id IS
  'FK to INV_INV. The immediate item that the event is assigned to.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.nh_inv_no_db_id IS
  'FK to INV_INV. The immediate item''s immediate parent at the time of the event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.nh_inv_no_id IS
  'FK to INV_INV. The immediate item''s immediate parent at the time of the event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.assmbl_inv_no_db_id IS
  'FK to INV_INV. The immediate item''s immediate parent assembly at the time of the event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.assmbl_inv_no_id IS
  'FK to INV_INV. The immediate item''s immediate parent assembly at the time of the event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.h_inv_no_db_id IS
  'FK to INV_INV. The immediate item''s highest parent at the time of the event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.h_inv_no_id IS
  'FK to INV_INV. The immediate item''s highest parent at the time of the event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.assmbl_db_id IS
  'FK to EQP_ASSMBL_BOM_POS. The position of the immediate item at the time of the event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.assmbl_cd IS
  'FK to EQP_ASSMBL_BOM_POS. The position of the immediate item at the time of the event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.assmbl_bom_id IS
  'FK to EQP_ASSMBL_BOM_POS. The position of the immediate item at the time of the event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.assmbl_pos_id IS
  'FK to EQP_ASSMBL_BOM_POS. The position of the immediate item at the time of the event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.part_no_db_id IS
  'FK to EQP_PART_NO. The part number of the immediate item at the time of the event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.part_no_id IS
  'FK to EQP_PART_NO. The part number of the immediate item at the time of the event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.bom_part_db_id IS
  'FK to EQP_BOM_PART.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.bom_part_id IS
  'FK to EQP_BOM_PART.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.main_inv_bool IS
  'Indicates that this item is THE immediate item which always carries the event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.rstat_cd IS
  'A physical attribute that defines the read/write access of the record.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.revision_no IS
  'A number incremented each time the record is modified.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.ctrl_db_id IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.creation_dt IS
  'The database server''s timestamp captured at the time the record was inserted.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.revision_dt IS
  'The database server''s timestamp captured at the time the record was last updated.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.revision_db_id IS
  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV.revision_user IS
  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.']';
END;
/

--changeSet OPER-23973:24 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('
    CREATE INDEX IX_EQPASSMBLPOS_EVTINVCNDCHG ON INV_CND_CHG_INV
    (
      assmbl_db_id ASC ,
      assmbl_cd ASC ,
      assmbl_bom_id ASC ,
      assmbl_pos_id ASC
    )');
END;
/

--changeSet OPER-23973:25 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('
    CREATE INDEX IX_EQPBOMPART_EVTINVCNDCHG ON INV_CND_CHG_INV
    (
      bom_part_db_id ASC ,
      bom_part_id ASC
    )');
END;
/

--changeSet OPER-23973:26 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('
    CREATE INDEX IX_EQPPARTNO_EVTINVCNDCHG ON INV_CND_CHG_INV
    (
      part_no_db_id ASC ,
      part_no_id ASC
    )');
END;
/

--changeSet OPER-23973:27 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('
    CREATE INDEX IX_EVTINVCNDCHG_EVTEVENT ON INV_CND_CHG_INV
    (
      inv_no_db_id ASC ,
      inv_no_id ASC ,
      event_db_id ASC ,
      event_id ASC ,
      main_inv_bool ASC
    )');
END;
/

--changeSet OPER-23973:28 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('
    CREATE INDEX IX_ININV_EVTINVCNDCHG ON INV_CND_CHG_INV
    (
      assmbl_inv_no_db_id ASC ,
      assmbl_inv_no_id ASC
    )');
END;
/

--changeSet OPER-23973:29 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('
    CREATE INDEX IX_INVINV_EVTINVCNDCHG ON INV_CND_CHG_INV
    (
      h_inv_no_db_id ASC ,
      h_inv_no_id ASC
    )');
END;
/

--changeSet OPER-23973:30 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('
    CREATE INDEX IX_INVIN_EVTINVCNDCHG ON INV_CND_CHG_INV
    (
      inv_no_db_id ASC ,
      inv_no_id ASC
    )');
END;
/

--changeSet OPER-23973:31 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('
    CREATE INDEX IX_INV_INV_EVTINVCNDCHG_IE ON INV_CND_CHG_INV
    (
      event_db_id ASC ,
      event_id ASC ,
      inv_no_db_id ASC ,
      inv_no_id ASC
    )');
END;
/

--changeSet OPER-23973:32 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('  CREATE INDEX IX_IVINV_EVTINVCNDCHG ON INV_CND_CHG_INV
    (
      nh_inv_no_db_id ASC ,
      nh_inv_no_id ASC
    )');
END;
/

--changeSet OPER-23973:33 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('
    CREATE INDEX IX_MAIN_EVT_EVTINVCNDCHG ON INV_CND_CHG_INV
    (
      event_db_id ASC ,
      event_id ASC ,
      main_inv_bool ASC
    )');
END;
/

--changeSet OPER-23973:34 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('
    CREATE INDEX IX_MAIN_INV_EVTINVCNDCHG ON INV_CND_CHG_INV
    (
      inv_no_db_id ASC ,
      inv_no_id ASC ,
      main_inv_bool ASC
    )');
END;
/

--changeSet OPER-23973:35 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('
    CREATE INDEX IX_MAIN_INV_EVT_EVTINVCNDCHG ON INV_CND_CHG_INV
    (
      event_db_id ASC ,
      event_id ASC ,
      inv_no_db_id ASC ,
      inv_no_id ASC ,
      main_inv_bool ASC
    )');
END;
/

--changeSet OPER-23973:36 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_INV ADD CONSTRAINT PK_INV_CND_CHG_INV PRIMARY KEY ( event_db_id, event_id, event_inv_id )');
END;
/



--changeSet OPER-23973:40 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_create('
	CREATE TABLE INV_CND_CHG_INV_USAGE
	  (
		event_db_id     NUMBER (10) NOT NULL ,
		event_id        NUMBER (10) NOT NULL ,
		event_inv_id    NUMBER (10) NOT NULL ,
		data_type_db_id NUMBER (10) NOT NULL ,
		data_type_id    NUMBER (10) NOT NULL ,
		tsn_qt FLOAT NOT NULL ,
		tso_qt FLOAT NOT NULL ,
		tsi_qt FLOAT NOT NULL ,
		assmbl_tsn_qt FLOAT ,
		assmbl_tso_qt FLOAT ,
		h_tsn_qt FLOAT ,
		h_tso_qt FLOAT ,
		nh_tsn_qt FLOAT ,
		nh_tso_qt FLOAT ,
		negated_bool   NUMBER (1) DEFAULT 0 NOT NULL ,
		rstat_cd       NUMBER (3) NOT NULL ,
		revision_no    NUMBER (10) NOT NULL ,
		ctrl_db_id     NUMBER (10) NOT NULL ,
		creation_dt    DATE NOT NULL ,
		revision_dt    DATE NOT NULL ,
		revision_db_id NUMBER (10) NOT NULL ,
		revision_user  VARCHAR2 (30) NOT NULL
	  )') ;
END;
/

--changeSet OPER-23973:41 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_INV_USAGE ADD CHECK ( negated_bool IN (0, 1)) DEFERRABLE');
END;
/

--changeSet OPER-23973:42 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_INV_USAGE ADD CHECK ( rstat_cd     IN (0, 1, 2, 3)) DEFERRABLE');
END;
/

--changeSet OPER-23973:43 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  EXECUTE IMMEDIATE q'[COMMENT ON TABLE INV_CND_CHG_INV_USAGE IS
    'Event Usage: The usage values (TSN and TSO) at the time of the event are captured in this entity. This is required for historical auditing, scheduling and usage auditing.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.event_db_id IS
    'FK to EVT_INV.  Determines the event the log card was filed against.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.event_id IS
    'FK to EVT_INV.  Determines the event the log card was filed against.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.event_inv_id IS
    'FK to EVT_INV.  Determines the event the log card was filed against.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.data_type_db_id IS
    'FK to MIM_DATA_TYPE.  Identifies the main usage parameter for this event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.data_type_id IS
    'FK to MIM_DATA_TYPE.  Identifies the main usage parameter for this event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.tsn_qt IS
    'The total usage since new on the item when the event occurred']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.tso_qt IS
    'The total usage since overhaul on the item when the event occurred']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.tsi_qt IS
    'Whenever a usage snapshot is taken on an event, we will record the TSI_QT as well as the TSN_QT and the TSO_QT. This value can be taken directly from the new INV_CURR_USAGE.TSI_QT column.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.assmbl_tsn_qt IS
    'The total usage since new on the item''s next most immediate parent assembly when the event occurred']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.assmbl_tso_qt IS
    'The total usage since overhaul on the item''s next most immediate parent assembly when the event occurred']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.h_tsn_qt IS
    'The total usage since new on the item''s highest parent when the event occurred']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.h_tso_qt IS
    'The total usage since overhaul on the item''s highest parent when the event occurred']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.nh_tsn_qt IS
    'The total usage since new on the item''s next highest parent when the event occurred']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.nh_tso_qt IS
    'The total usage since overhaul on the item''s next highest parent when the event occurred']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.negated_bool IS
    'Indicates that the usage record was negated']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.rstat_cd IS
    'A physical attribute that defines the read/write access of the record.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.revision_no IS
    'A number incremented each time the record is modified.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.creation_dt IS
    'The database server''s timestamp captured at the time the record was inserted.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.revision_dt IS
    'The database server''s timestamp captured at the time the record was last updated.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.revision_db_id IS
    'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_INV_USAGE.revision_user IS
    'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.']';

END;
/

--changeSet OPER-23973:44 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('
  CREATE INDEX IX_EVTINV_INVCNDCHGUSAGE ON INV_CND_CHG_INV_USAGE
    (
      event_db_id ASC ,
      event_id ASC ,
      event_inv_id ASC
    )');
END;
/

--changeSet OPER-23973:45 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('
  CREATE INDEX IX_MDATATYPE_INVCNDCHGUSAGE ON INV_CND_CHG_INV_USAGE
    (
      data_type_db_id ASC ,
      data_type_id ASC
    )');
END;
/

--changeSet OPER-23973:46 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_INV_USAGE ADD CONSTRAINT PK_INV_CND_CHG_INV_USAGE PRIMARY KEY ( event_db_id, event_id, event_inv_id, data_type_db_id, data_type_id )');
END;
/

--changeSet OPER-23973:60 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_create('
	CREATE TABLE INV_CND_CHG_STAGE
	  (
		event_db_id        NUMBER (10) NOT NULL ,
		event_id           NUMBER (10) NOT NULL ,
		stage_id           NUMBER (10) NOT NULL ,
		event_status_db_id NUMBER (10) ,
		event_status_cd    VARCHAR2 (16) ,
		stage_reason_db_id NUMBER (10) ,
		stage_reason_cd    VARCHAR2 (16) ,
		stage_event_db_id  NUMBER (10) ,
		stage_event_id     NUMBER (10) ,
		hr_db_id           NUMBER (10) ,
		hr_id              NUMBER (10) ,
		stage_dt           DATE NOT NULL ,
		stage_note         VARCHAR2 (4000) ,
		system_bool        NUMBER (1) DEFAULT 0 NOT NULL ,
		alt_id RAW (16) NOT NULL ,
		rstat_cd       NUMBER (3) NOT NULL ,
		revision_no    NUMBER (10) NOT NULL ,
		ctrl_db_id     NUMBER (10) NOT NULL ,
		creation_dt    DATE NOT NULL ,
		revision_dt    DATE NOT NULL ,
		revision_db_id NUMBER (10) NOT NULL ,
		revision_user  VARCHAR2 (30) NOT NULL
	  )');
END;
/

--changeSet OPER-23973:61 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_STAGE ADD CHECK ( system_bool IN (0, 1)) DEFERRABLE');
END;
/

--changeSet OPER-23973:62 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_STAGE ADD CHECK ( rstat_cd    IN (0, 1, 2, 3)) DEFERRABLE');
END;
/

--changeSet OPER-23973:63 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  EXECUTE IMMEDIATE q'[COMMENT ON TABLE INV_CND_CHG_STAGE IS
	  'Event Lifecycle Stage: Each event has workflow models associated with them. This entity records the progression of every event through every workflow state.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.event_db_id IS
	  'Identifies the creation database (MIM_LOCAL_DB) of the record and forms part of the record''s primary key.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.event_id IS
	  'Unique idenifier assigned from Sequence EVENT_ID_SEQ.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.stage_id IS
	  'Number assigned (1..n) in context of the event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.event_status_db_id IS
	  'FK to REF_EVENT_STATUS.  Defines the workflow step for the Event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.event_status_cd IS
	  'FK to REF_EVENT_STATUS.  Defines the workflow step for the Event.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.stage_reason_db_id IS
	  'FK to REF_STAGE_REASON.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.stage_reason_cd IS
	  'FK to REF_STAGE_REASON.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.stage_event_db_id IS
	  'FK to REF_STAGE_REASON.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.stage_event_id IS
	  'FK to REF_STAGE_REASON.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.hr_db_id IS
	  'FK to ORG_HR.  The human resource assigned for this event stage.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.hr_id IS
	  'FK to ORG_HR.  The human resource assigned for this event stage.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.stage_dt IS
	  'The local date the stage changed.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.stage_note IS
	  'Any notes entered when the stage changed.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.system_bool IS
	  'A physical attribute that defines the read/write access of the record.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.alt_id IS
	  'The surrogate key for the INV_CND_CHG_STAGE table, used for APIs.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.rstat_cd IS
	  'A physical attribute that defines the read/write access of the record.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.revision_no IS
	  'A number incremented each time the record is modified.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.ctrl_db_id IS
	  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.creation_dt IS
	  'The database server''s timestamp captured at the time the record was inserted.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.revision_dt IS
	  'The database server''s timestamp captured at the time the record was last updated.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.revision_db_id IS
	  'The database identifier (MIM_LOCAL_DB) captured at the time the record was last updated. Identifies where modifications are being made in distributed Maintenix.']';
  EXECUTE IMMEDIATE q'[COMMENT ON COLUMN INV_CND_CHG_STAGE.revision_user IS
	  'The user that last modified the record. The user is either a) the user that logged into Maintenix - pushed into the database from the client or b) if the record update is not via a Maintenix application, the user is the Oracle user name that is processing the transaction.']';
END;
/

--changeSet OPER-23973:64 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('
  CREATE INDEX IX_EVTEVENT_INVCNDCHGSTAGE ON INV_CND_CHG_STAGE
    (
      stage_event_db_id ASC ,
      stage_event_id ASC
    )');
END;
/

--changeSet OPER-23973:65 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('
  CREATE INDEX IX_EVTEVENT_INVCNDCHGSTAGE2 ON INV_CND_CHG_STAGE
    (
      event_db_id ASC ,
      event_id ASC
    )');
END;
/

--changeSet OPER-23973:66 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('
  CREATE INDEX IX_INV_CND_CHG_STAGE_IF1066 ON INV_CND_CHG_STAGE
    (
      stage_reason_db_id ASC ,
      stage_reason_cd ASC
    )');
END;
/

--changeSet OPER-23973:67 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.index_create('
  CREATE INDEX IX_ORGHR_INVCNDCHGSTAGE ON INV_CND_CHG_STAGE
    (
      hr_db_id ASC ,
      hr_id ASC
    )');
END;
/

--changeSet OPER-23973:68 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_STAGE ADD CONSTRAINT PK_INV_CND_CHG_STAGE PRIMARY KEY ( event_db_id, event_id, stage_id )');
END;
/

--changeSet OPER-23973:69 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_STAGE ADD CONSTRAINT IX_INVCNDCHGSTAGEALTID_UNQ UNIQUE ( alt_id )');
END;
/

--comment INV_CND_CHG_STAGE FKs
--changeSet OPER-23973:80 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_STAGE ADD CONSTRAINT FK_EVTEVENT_INVCNDCHGSTAGE FOREIGN KEY ( stage_event_db_id, stage_event_id ) REFERENCES INV_CND_CHG_EVENT ( event_db_id, event_id ) DEFERRABLE');
END;
/

--changeSet OPER-23973:81 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_STAGE ADD CONSTRAINT FK_EVTEVENT_INVCNDCHGSTAGE2 FOREIGN KEY ( event_db_id, event_id ) REFERENCES INV_CND_CHG_EVENT ( event_db_id, event_id ) DEFERRABLE');
END;
/

--changeSet OPER-23973:82 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_STAGE ADD CONSTRAINT FK_MIMRSTAT_INVCNDCHGSTAGE FOREIGN KEY ( rstat_cd ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE');
END;
/

--changeSet OPER-23973:83 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_STAGE ADD CONSTRAINT FK_ORGHR_INVCNDCHGSTAGE FOREIGN KEY ( hr_db_id, hr_id ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE');
END;
/

--changeSet OPER-23973:84 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_STAGE ADD CONSTRAINT FK_REFEVENTSTATUS_INVCNDCHGSTG FOREIGN KEY ( event_status_db_id, event_status_cd ) REFERENCES REF_EVENT_STATUS ( EVENT_STATUS_DB_ID, EVENT_STATUS_CD ) DEFERRABLE');
END;
/

--changeSet OPER-23973:85 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_STAGE ADD CONSTRAINT FK_REFSTAGEREASON_INVCNDCHGSTG FOREIGN KEY ( stage_reason_db_id, stage_reason_cd ) REFERENCES REF_STAGE_REASON ( STAGE_REASON_DB_ID, STAGE_REASON_CD ) DEFERRABLE');
END;
/


--comment INV_CND_CHG_INV FKs
--changeSet OPER-23973:90 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_INV ADD CONSTRAINT FK_EQPASSMBLPOS_EVTINVCNDCHG FOREIGN KEY ( assmbl_db_id, assmbl_cd, assmbl_bom_id, assmbl_pos_id ) REFERENCES EQP_ASSMBL_POS ( ASSMBL_DB_ID, ASSMBL_CD, ASSMBL_BOM_ID, ASSMBL_POS_ID ) DEFERRABLE');
END;
/

--changeSet OPER-23973:91 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_INV ADD CONSTRAINT FK_EQPBOMPART_EVTINVCNDCHG FOREIGN KEY ( bom_part_db_id, bom_part_id ) REFERENCES EQP_BOM_PART ( BOM_PART_DB_ID, BOM_PART_ID ) DEFERRABLE');
END;
/

--changeSet OPER-23973:92 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_INV ADD CONSTRAINT FK_EQPPARTNO_EVTINVCNDCHG FOREIGN KEY ( part_no_db_id, part_no_id ) REFERENCES EQP_PART_NO ( PART_NO_DB_ID, PART_NO_ID ) DEFERRABLE');
END;
/

--changeSet OPER-23973:93 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_INV ADD CONSTRAINT FK_EVTEVENT_EVTINVCNDCHG FOREIGN KEY ( event_db_id, event_id ) REFERENCES INV_CND_CHG_EVENT ( event_db_id, event_id ) DEFERRABLE');
END;
/

--changeSet OPER-23973:94 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_INV ADD CONSTRAINT FK_ININV_EVTINVCNDCHG FOREIGN KEY ( assmbl_inv_no_db_id, assmbl_inv_no_id ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE');
END;
/

--changeSet OPER-23973:95 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_INV ADD CONSTRAINT FK_INVINV_EVTINVCNDCHG FOREIGN KEY ( h_inv_no_db_id, h_inv_no_id ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE');
END;
/

--changeSet OPER-23973:96 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_INV ADD CONSTRAINT FK_INVIN_EVTINVCNDCHG FOREIGN KEY ( inv_no_db_id, inv_no_id ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE');
END;
/

--changeSet OPER-23973:97 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_INV ADD CONSTRAINT FK_IVINV_EVTINVCNDCHG FOREIGN KEY ( nh_inv_no_db_id, nh_inv_no_id ) REFERENCES INV_INV ( INV_NO_DB_ID, INV_NO_ID ) DEFERRABLE');
END;
/

--changeSet OPER-23973:98 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_INV ADD CONSTRAINT FK_MIMRSTAT_EVTINVCNDCHG FOREIGN KEY ( rstat_cd ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE');
END;
/

--comment INV_CND_CHG_INV_USAGE FKs
--changeSet OPER-23973:99 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_INV_USAGE ADD CONSTRAINT FK_EVTINV_INVCNDCHGUSAGE FOREIGN KEY ( event_db_id, event_id, event_inv_id ) REFERENCES INV_CND_CHG_INV ( event_db_id, event_id, event_inv_id ) DEFERRABLE');
END;
/

--changeSet OPER-23973:100 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_INV_USAGE ADD CONSTRAINT FK_MIMDATATYPE_INVCNDCHUSAG FOREIGN KEY ( data_type_db_id, data_type_id ) REFERENCES MIM_DATA_TYPE ( DATA_TYPE_DB_ID, DATA_TYPE_ID ) DEFERRABLE');
END;
/

--changeSet OPER-23973:101 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_INV_USAGE ADD CONSTRAINT FK_MIMRSTAT_INVCNDCHGUSAGE FOREIGN KEY ( rstat_cd ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE');
END;
/


--comment INV_CND_CHG_EVENT FKs
--changeSet OPER-23973:110 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT FK_INVCNDCHGEVT_INVCNDCHGEVT FOREIGN KEY ( h_event_db_id, h_event_id ) REFERENCES INV_CND_CHG_EVENT ( event_db_id, event_id ) NOT DEFERRABLE');
END;
/

--changeSet OPER-23973:111 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT FK_MIMDBCTRL_INV_CND_CHG_EVENT FOREIGN KEY ( ctrl_db_id ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE');
END;
/

--changeSet OPER-23973:112 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT FK_MIMDB_INV_CND_CHG_EVENT FOREIGN KEY ( event_db_id ) REFERENCES MIM_DB ( DB_ID ) DEFERRABLE');
END;
/

--changeSet OPER-23973:113 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT FK_MIMRSTAT_INV_CND_CHG_EVENT FOREIGN KEY ( rstat_cd ) REFERENCES MIM_RSTAT ( RSTAT_CD ) DEFERRABLE');
END;
/

--changeSet OPER-23973:114 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT FK_ORGHR_INV_CND_CHG_EVENT FOREIGN KEY ( editor_hr_db_id, editor_hr_id ) REFERENCES ORG_HR ( HR_DB_ID, HR_ID ) DEFERRABLE');
END;
/

--changeSet OPER-23973:115 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT FK_REFDATASOURCE_INVCNDCHGEVT FOREIGN KEY ( data_source_db_id, data_source_cd ) REFERENCES REF_DATA_SOURCE ( DATA_SOURCE_DB_ID, DATA_SOURCE_CD ) DEFERRABLE');
END;
/

--changeSet OPER-23973:116 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT FK_REFEVENTREASON_INVCNDCHEVT FOREIGN KEY ( event_reason_db_id, event_reason_cd ) REFERENCES REF_EVENT_REASON ( EVENT_REASON_DB_ID, EVENT_REASON_CD ) DEFERRABLE');
END;
/

--changeSet OPER-23973:117 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT FK_REFEVENTSTATUS_INVCNDCHEVT FOREIGN KEY ( event_status_db_id, event_status_cd ) REFERENCES REF_EVENT_STATUS ( EVENT_STATUS_DB_ID, EVENT_STATUS_CD ) DEFERRABLE');
END;
/

--changeSet OPER-23973:118 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
  upg_migr_schema_v1_pkg.table_constraint_add('ALTER TABLE INV_CND_CHG_EVENT ADD CONSTRAINT FK_REFSTAGEREASON_INVCNDCHEVT FOREIGN KEY ( stage_reason_db_id, stage_reason_cd ) REFERENCES REF_STAGE_REASON ( STAGE_REASON_DB_ID, STAGE_REASON_CD ) DEFERRABLE');
END;
/


--changeSet OPER-23973:120 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_INV_CND_CHG_EVENT" BEFORE INSERT
   ON "INV_CND_CHG_EVENT" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN

  MX_TRIGGER_PKG.before_insert(
    :new.rstat_cd,
    :new.revision_no,
	:new.ctrl_db_id,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user );
END;
/

--changeSet OPER-23973:121 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_INV_CND_CHG_EVENT" BEFORE UPDATE
   ON "INV_CND_CHG_EVENT" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN

  MX_TRIGGER_PKG.before_update(
    :old.rstat_cd,
    :new.rstat_cd,
    :old.revision_no,
    :new.revision_no,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user );
END;
/

--changeSet OPER-23973:122 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_INV_CND_CHG_STAGE" BEFORE INSERT
   ON "INV_CND_CHG_STAGE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN

  MX_TRIGGER_PKG.before_insert(
    :new.rstat_cd,
    :new.revision_no,
	:new.ctrl_db_id,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user );
END;
/

--changeSet OPER-23973:123 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_INV_CND_CHG_STAGE" BEFORE UPDATE
   ON "INV_CND_CHG_STAGE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN

  MX_TRIGGER_PKG.before_update(
    :old.rstat_cd,
    :new.rstat_cd,
    :old.revision_no,
    :new.revision_no,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user );
END;
/

--changeSet OPER-23973:124 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_INV_CND_CHG_INV" BEFORE INSERT
   ON "INV_CND_CHG_INV" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN

  MX_TRIGGER_PKG.before_insert(
    :new.rstat_cd,
    :new.revision_no,
	:new.ctrl_db_id,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user );
END;
/

--changeSet OPER-23973:125 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_INV_CND_CHG_INV" BEFORE UPDATE
   ON "INV_CND_CHG_INV" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN

  MX_TRIGGER_PKG.before_update(
    :old.rstat_cd,
    :new.rstat_cd,
    :old.revision_no,
    :new.revision_no,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user );
END;
/

--changeSet OPER-23973:126 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_INV_CND_CHG_INV_USAGE" BEFORE INSERT
   ON "INV_CND_CHG_INV_USAGE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN

  MX_TRIGGER_PKG.before_insert(
    :new.rstat_cd,
    :new.revision_no,
	:new.ctrl_db_id,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user );
END;
/

--changeSet OPER-23973:127 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_INV_CND_CHG_INV_USAGE" BEFORE UPDATE
   ON "INV_CND_CHG_INV_USAGE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN

  MX_TRIGGER_PKG.before_update(
    :old.rstat_cd,
    :new.rstat_cd,
    :old.revision_no,
    :new.revision_no,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user );
END;
/

--changeSet OPER-23973:140 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_INV_CND_CHG_EVENT_ALT_ID" BEFORE INSERT
   ON "INV_CND_CHG_EVENT" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN
  IF :NEW.alt_id IS NULL THEN
     :NEW.alt_id := mx_key_pkg.new_uuid();
  END IF;
END;
/

--changeSet OPER-23973:141 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_INV_CND_CHG_STAGE_ALT_ID" BEFORE INSERT
   ON "INV_CND_CHG_STAGE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
BEGIN
  IF :NEW.alt_id IS NULL THEN
     :NEW.alt_id := mx_key_pkg.new_uuid();
  END IF;
END;
/