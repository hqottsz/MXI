--liquibase formatted sql


--changeSet DEV-685_PPC_MasterMigr:1 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
--
-- PPC Master Migration Script
--
--
-- Modified Date: 10 Nov 2010 
--
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
--
-- PPC TABLES
--
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_PLAN" (
	"PPC_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"DESC_SDESC" Varchar2 (80) NOT NULL DEFERRABLE ,
	"DESC_LDESC" Varchar2 (4000),
	"HORIZON_DAYS" Number(10,0) NOT NULL DEFERRABLE ,
	"TEMPLATE_BOOL" Number(1,0) Default 0 NOT NULL DEFERRABLE  Check (TEMPLATE_BOOL IN (0, 1) ) DEFERRABLE ,
	"AUTH_USER_ID" Number(10,0),
	"AUTH_DT" Date,
	"EDIT_USER_ID" Number(10,0),
	"EDIT_DT" Date,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_PLAN" primary key ("PPC_DB_ID","PPC_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:2 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_ACTIVITY" (
	"PPC_ACTIVITY_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_ACTIVITY_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_ACTIVITY_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_ACTIVITY_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_WP_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WP_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_WP_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WP_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"ACTIVITY_CD" Varchar2 (500) NOT NULL DEFERRABLE ,
	"ACTIVITY_SDESC" Varchar2 (500) NOT NULL DEFERRABLE ,
	"START_AFTER_HRS" Number(19,0),
	"END_BEFORE_HRS" Number(19,0),
	"LOCKED_BOOL" Number(1,0) Default 0 NOT NULL DEFERRABLE  Check (LOCKED_BOOL IN (0, 1) ) DEFERRABLE ,
	"PPC_ACTIVITY_TYPE_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_ACTIVITY_TYPE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_ACTIVITY_TYPE_CD" Varchar2 (16) NOT NULL DEFERRABLE ,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_ACTIVITY" primary key ("PPC_ACTIVITY_DB_ID","PPC_ACTIVITY_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:3 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "REF_PPC_ACTIVITY_TYPE" (
	"PPC_ACTIVITY_TYPE_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_ACTIVITY_TYPE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_ACTIVITY_TYPE_CD" Varchar2 (16) NOT NULL DEFERRABLE ,
	"DESC_SDESC" Varchar2 (80),
	"DESC_LDESC" Varchar2 (4000),
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_REF_PPC_ACTIVITY_TYPE" primary key ("PPC_ACTIVITY_TYPE_DB_ID","PPC_ACTIVITY_TYPE_CD") 
)
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:4 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_TASK" (
	"PPC_TASK_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_TASK_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_TASK_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_TASK_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"START_DT" Date NOT NULL DEFERRABLE ,
	"END_DT" Date NOT NULL DEFERRABLE ,
	"SCHED_DB_ID" Number(10,0) Check (SCHED_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"SCHED_ID" Number(10,0) Check (SCHED_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"TASK_DEFN_DB_ID" Number(10,0) Check (TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"TASK_DEFN_ID" Number(10,0) Check (TASK_DEFN_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_PHASE_DB_ID" Number(10,0) Check (PPC_PHASE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_PHASE_ID" Number(10,0) Check (PPC_PHASE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_WORK_AREA_DB_ID" Number(10,0) Check (PPC_WORK_AREA_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_WORK_AREA_ID" Number(10,0) Check (PPC_WORK_AREA_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"NR_PHASE_DB_ID" Number(10,0) Check (NR_PHASE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"NR_PHASE_ID" Number(10,0) Check (NR_PHASE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"NR_START_MILESTONE_DB_ID" Number(10,0) Check (NR_START_MILESTONE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"NR_START_MILESTONE_ID" Number(10,0) Check (NR_START_MILESTONE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"NR_END_MILESTONE_DB_ID" Number(10,0) Check (NR_END_MILESTONE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"NR_END_MILESTONE_ID" Number(10,0) Check (NR_END_MILESTONE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"SEQ_ID" Number(10,0) Check (SEQ_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"TASK_PRIORITY_DB_ID" Number(10,0) Check (TASK_PRIORITY_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"TASK_PRIORITY_CD" Varchar2 (8),
	"PLANNING_TYPE_DB_ID" Number(10,0) Check (PLANNING_TYPE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PLANNING_TYPE_ID" Number(10,0) Check (PLANNING_TYPE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_CREW_DB_ID" Number(10,0) Check (PPC_CREW_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_CREW_ID" Number(10,0) Check (PPC_CREW_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"NR_EST_BOOL" Number(1,0) Default 0 NOT NULL DEFERRABLE  Check (NR_EST_BOOL IN (0, 1) ) DEFERRABLE ,
	"WATCH_BOOL" Number(1,0) Default 0 NOT NULL DEFERRABLE  Check (WATCH_BOOL IN (0, 1) ) DEFERRABLE ,
	"LATE_BOOL" Number(1,0) Default 0 NOT NULL DEFERRABLE  Check (LATE_BOOL IN (0, 1) ) DEFERRABLE ,
	"MAX_SPLIT_QT" Number(4,0),
	"SPLIT_BOOL" Number(1,0) Default 0 NOT NULL DEFERRABLE  Check (SPLIT_BOOL IN (0, 1) ) DEFERRABLE ,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_TASK" primary key ("PPC_TASK_DB_ID","PPC_TASK_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:5 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_MILESTONE" (
	"PPC_MILESTONE_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_MILESTONE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_MILESTONE_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_MILESTONE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_MILESTONE" primary key ("PPC_MILESTONE_DB_ID","PPC_MILESTONE_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:6 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_MILESTONE_COND" (
	"PPC_MILESTONE_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_MILESTONE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_MILESTONE_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_MILESTONE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"AC_COND_DB_ID" Number(10,0) Check (AC_COND_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"AC_COND_CD" Varchar2 (8),
	"COND_SET_DB_ID" Number(10,0) Check (COND_SET_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"COND_SET_CD" Varchar2 (8),
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_MILESTONE_COND" primary key ("PPC_MILESTONE_DB_ID","PPC_MILESTONE_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:7 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_PHASE" (
	"PPC_PHASE_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_PHASE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_PHASE_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_PHASE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"NR_PHASE_DB_ID" Number(10,0) Check (NR_PHASE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"NR_PHASE_ID" Number(10,0) Check (NR_PHASE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"NR_START_MILESTONE_DB_ID" Number(10,0) Check (NR_START_MILESTONE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"NR_START_MILESTONE_ID" Number(10,0) Check (NR_START_MILESTONE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"NR_END_MILESTONE_DB_ID" Number(10,0) Check (NR_END_MILESTONE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"NR_END_MILESTONE_ID" Number(10,0) Check (NR_END_MILESTONE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_PHASE" primary key ("PPC_PHASE_DB_ID","PPC_PHASE_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:8 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_PHASE_CLASS" (
	"PPC_PHASE_CLASS_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_PHASE_CLASS_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_PHASE_CLASS_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_PHASE_CLASS_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_PHASE_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_PHASE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_PHASE_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_PHASE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"TASK_CLASS_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (TASK_CLASS_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"TASK_CLASS_CD" Varchar2 (16) NOT NULL DEFERRABLE ,
	"TASK_SUBCLASS_DB_ID" Number(10,0) Check (TASK_SUBCLASS_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"TASK_SUBCLASS_CD" Varchar2 (8),
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_PHASE_CLASS" primary key ("PPC_PHASE_CLASS_DB_ID","PPC_PHASE_CLASS_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:9 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_WORK_AREA" (
	"PPC_WORK_AREA_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WORK_AREA_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_WORK_AREA_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WORK_AREA_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"MAX_LBR_CAPACITY_QT" Number(4,0),
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_WORK_AREA" primary key ("PPC_WORK_AREA_DB_ID","PPC_WORK_AREA_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:10 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_WORK_AREA_ZONE" (
	"PPC_WORK_AREA_ZONE_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WORK_AREA_ZONE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_WORK_AREA_ZONE_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WORK_AREA_ZONE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_WORK_AREA_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WORK_AREA_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_WORK_AREA_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WORK_AREA_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"ZONE_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (ZONE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"ZONE_ID" Number(10,0) NOT NULL DEFERRABLE  Check (ZONE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_WORK_AREA_ZONE" primary key ("PPC_WORK_AREA_ZONE_DB_ID","PPC_WORK_AREA_ZONE_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:11 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_DEPENDENCY" (
	"FROM_ACTIVITY_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (FROM_ACTIVITY_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"FROM_ACTIVITY_ID" Number(10,0) NOT NULL DEFERRABLE  Check (FROM_ACTIVITY_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"TO_ACTIVITY_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (TO_ACTIVITY_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"TO_ACTIVITY_ID" Number(10,0) NOT NULL DEFERRABLE  Check (TO_ACTIVITY_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REL_TYPE_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REL_TYPE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REL_TYPE_CD" Varchar2 (8) NOT NULL DEFERRABLE ,
	"DELAY_HRS" Number(6,2) NOT NULL DEFERRABLE ,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_DEPENDENCY" primary key ("FROM_ACTIVITY_DB_ID","FROM_ACTIVITY_ID","TO_ACTIVITY_DB_ID","TO_ACTIVITY_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:12 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_PUBLISH" (
	"PPC_WP_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WP_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_WP_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WP_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LAST_PUBLISH_DT" Date NOT NULL DEFERRABLE ,
	"PUBLISHED_BY_HR_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PUBLISHED_BY_HR_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PUBLISHED_BY_HR_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PUBLISHED_BY_HR_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"FAILURE_NUM" Number(10,0) NOT NULL DEFERRABLE  Check (FAILURE_NUM BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PUBLISHED_TASK_NUM" Number(10,0) NOT NULL DEFERRABLE  Check (PUBLISHED_TASK_NUM BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"TOTAL_TASK_NUM" Number(10,0) NOT NULL DEFERRABLE  Check (TOTAL_TASK_NUM BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_PUBLISH" primary key ("PPC_WP_DB_ID","PPC_WP_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:13 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_PUBLISH_FAILURE" (
	"PPC_FAILURE_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_FAILURE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_FAILURE_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_FAILURE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_WP_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WP_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_WP_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WP_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_TASK_DB_ID" Number(10,0) Check (PPC_TASK_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_TASK_ID" Number(10,0) Check (PPC_TASK_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_PUBLISH_FAIL_TYPE_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_PUBLISH_FAIL_TYPE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_PUBLISH_FAIL_TYPE_CD" Varchar2 (8) NOT NULL DEFERRABLE ,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_PUBLISH_FAILURE" primary key ("PPC_FAILURE_DB_ID","PPC_FAILURE_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:14 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "REF_PPC_PUBLISH_FAIL_TYPE" (
	"PPC_PUBLISH_FAIL_TYPE_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_PUBLISH_FAIL_TYPE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_PUBLISH_FAIL_TYPE_CD" Varchar2 (8) NOT NULL DEFERRABLE ,
	"BITMAP_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (BITMAP_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"BITMAP_TAG" Number(10,0) NOT NULL DEFERRABLE  Check (BITMAP_TAG BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"DESC_SDESC" Varchar2 (80),
	"DESC_LDESC" Varchar2 (4000),
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_REF_PPC_PUBLISH_FAIL_TYPE" primary key ("PPC_PUBLISH_FAIL_TYPE_DB_ID","PPC_PUBLISH_FAIL_TYPE_CD") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:15 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_PLANNING_TYPE" (
	"PPC_WP_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WP_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_WP_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WP_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PLANNING_TYPE_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PLANNING_TYPE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PLANNING_TYPE_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PLANNING_TYPE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"NR_FACTOR" Number(8,5) NOT NULL DEFERRABLE ,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_PLANNING_TYPE" primary key ("PPC_WP_DB_ID","PPC_WP_ID","PLANNING_TYPE_DB_ID","PLANNING_TYPE_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:16 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_PLANNING_TYPE_SKILL" (
	"PPC_WP_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WP_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_WP_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WP_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PLANNING_TYPE_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PLANNING_TYPE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PLANNING_TYPE_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PLANNING_TYPE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LABOUR_SKILL_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LABOUR_SKILL_CD" Varchar2 (8) NOT NULL DEFERRABLE ,
	"EFFORT_PCT" Number Default 1 NOT NULL DEFERRABLE ,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_PLANNING_TYPE_SKILL" primary key ("PPC_WP_DB_ID","PPC_WP_ID","PLANNING_TYPE_DB_ID","PLANNING_TYPE_ID","LABOUR_SKILL_DB_ID","LABOUR_SKILL_CD") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:17 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_CREW" (
	"PPC_CREW_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_CREW_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_CREW_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_CREW_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_LOC_DB_ID" Number(10,0) Check (PPC_LOC_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_LOC_ID" Number(10,0) Check (PPC_LOC_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"DEPT_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (DEPT_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"DEPT_ID" Number(10,0) NOT NULL DEFERRABLE  Check (DEPT_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"CREW_CD" Varchar2 (200) NOT NULL DEFERRABLE ,
	"DESC_SDESC" Varchar2 (200),
	"LABOUR_SKILL_DB_ID" Number(10,0) Check (LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LABOUR_SKILL_CD" Varchar2 (8),
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_CREW" primary key ("PPC_CREW_DB_ID","PPC_CREW_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:18 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_LABOUR" (
	"LABOUR_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (LABOUR_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LABOUR_ID" Number(10,0) NOT NULL DEFERRABLE  Check (LABOUR_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_TASK_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_TASK_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_TASK_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_TASK_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LABOUR_SKILL_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LABOUR_SKILL_CD" Varchar2 (8) NOT NULL DEFERRABLE ,
	"SCHED_LABOUR_DB_ID" Number(10,0) Check (SCHED_LABOUR_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"SCHED_LABOUR_ID" Number(10,0) Check (SCHED_LABOUR_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LABOUR_STAGE_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (LABOUR_STAGE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LABOUR_STAGE_CD" Varchar2 (8) NOT NULL DEFERRABLE ,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_LABOUR" primary key ("LABOUR_DB_ID","LABOUR_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:19 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_LABOUR_ROLE" (
	"LABOUR_ROLE_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (LABOUR_ROLE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LABOUR_ROLE_ID" Number(10,0) NOT NULL DEFERRABLE  Check (LABOUR_ROLE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LABOUR_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (LABOUR_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LABOUR_ID" Number(10,0) NOT NULL DEFERRABLE  Check (LABOUR_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LABOUR_ROLE_TYPE_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (LABOUR_ROLE_TYPE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LABOUR_ROLE_TYPE_CD" Varchar2 (8) NOT NULL DEFERRABLE ,
	"SCHED_LABOUR_ROLE_DB_ID" Number(10,0) Check (SCHED_LABOUR_ROLE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"SCHED_LABOUR_ROLE_ID" Number(10,0) Check (SCHED_LABOUR_ROLE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"START_DT" Date NOT NULL DEFERRABLE ,
	"END_DT" Date NOT NULL DEFERRABLE ,
	"SCHED_HR" Number(6,2) NOT NULL DEFERRABLE ,
	"ACTUAL_HR" Number(6,2),
	"LABOUR_ROLE_STATUS_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (LABOUR_ROLE_STATUS_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LABOUR_ROLE_STATUS_CD" Varchar2 (8) NOT NULL DEFERRABLE ,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_LABOUR_ROLE" primary key ("LABOUR_ROLE_DB_ID","LABOUR_ROLE_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:20 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_HR_SLOT" (
	"PPC_HR_SLOT_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_HR_SLOT_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_HR_SLOT_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_HR_SLOT_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"HR_SLOT_ORD" Number(10,0) NOT NULL DEFERRABLE ,
	"LABOUR_ROLE_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (LABOUR_ROLE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LABOUR_ROLE_ID" Number(10,0) NOT NULL DEFERRABLE  Check (LABOUR_ROLE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LOCKED_BOOL" Number(1,0) Default 0 NOT NULL DEFERRABLE  Check (LOCKED_BOOL IN (0, 1) ) DEFERRABLE ,
	"START_DT" Date NOT NULL DEFERRABLE ,
	"END_DT" Date NOT NULL DEFERRABLE ,
	"SCHED_HR" Number(6,2) NOT NULL DEFERRABLE ,
	"PPC_HR_SHIFT_DB_ID" Number(10,0) Check (PPC_HR_SHIFT_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_HR_SHIFT_ID" Number(10,0) Check (PPC_HR_SHIFT_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"HR_NAME" Varchar2 (40),
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_HR_SLOT" primary key ("PPC_HR_SLOT_DB_ID","PPC_HR_SLOT_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:21 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_WP" (
	"PPC_WP_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WP_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_WP_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WP_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_LOC_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_LOC_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_LOC_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_LOC_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"ASSMBL_DB_ID" Number(10,0) Check (ASSMBL_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"ASSMBL_CD" Varchar2 (8),
	"WP_DB_ID" Number(10,0) Check (WP_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"WP_ID" Number(10,0) Check (WP_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"NR_PHASE_DB_ID" Number(10,0) Check (NR_PHASE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"NR_PHASE_ID" Number(10,0) Check (NR_PHASE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"TEMPLATE_DB_ID" Number(10,0) Check (TEMPLATE_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"TEMPLATE_ID" Number(10,0) Check (TEMPLATE_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"MAX_NR_DURATION_HR" Number(6,2),
	"ACTIVE_BOOL" Number(1,0) Default 0 NOT NULL DEFERRABLE  Check (ACTIVE_BOOL IN (0, 1) ) DEFERRABLE ,
	"LOCKED_BOOL" Number(1,0) Default 0 NOT NULL DEFERRABLE  Check (LOCKED_BOOL IN (0, 1) ) DEFERRABLE ,
	"EXCLUDED_BOOL" Number(1,0) Default 0 NOT NULL DEFERRABLE  Check (EXCLUDED_BOOL IN (0, 1) ) DEFERRABLE ,
	"PRIORITY_DB_ID" Number(10,0) Check (PRIORITY_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PRIORITY_CD" Varchar2 (8),
	"START_DT" Date,
	"START_AFTER_DT" Date,
	"END_BEFORE_DT" Date,
	"NR_ORIG_EST" Blob,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_WP" primary key ("PPC_WP_DB_ID","PPC_WP_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:22 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_LOC" (
	"PPC_LOC_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_LOC_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_LOC_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_LOC_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"NH_PPC_LOC_DB_ID" Number(10,0) Check (NH_PPC_LOC_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"NH_PPC_LOC_ID" Number(10,0) Check (NH_PPC_LOC_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LOC_DB_ID" Number(10,0) Check (LOC_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LOC_ID" Number(10,0) Check (LOC_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LOC_CD" Varchar2 (2000),
	"PRODUCTIVITY_PCT" Number(3,2),
	"SHIFT_LOAD_DT" Date,
	"SHIFT_EARLIEST_DT" Date,
	"SHIFT_LATEST_DT" Date,
	"SHIFT_CT" Number(10,0) Default 0,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_LOC" primary key ("PPC_LOC_DB_ID","PPC_LOC_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:23 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_TASK_DEFN" (
	"PPC_TASK_DEFN_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_TASK_DEFN_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_TASK_DEFN_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_WP_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WP_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_WP_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WP_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"TASK_DEFN_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"TASK_DEFN_ID" Number(10,0) NOT NULL DEFERRABLE  Check (TASK_DEFN_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"CLASS_MODE_CD" Varchar2 (8) NOT NULL DEFERRABLE ,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_TASK_DEFN" primary key ("PPC_TASK_DEFN_DB_ID","PPC_TASK_DEFN_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:24 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_HR" (
	"PPC_HR_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_HR_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_HR_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_HR_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"HR_DB_ID" Number(10,0) Check (HR_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"HR_ID" Number(10,0) Check (HR_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"HR_NAME" Varchar2 (40),
	"VIRTUAL_BOOL" Number(1,0) Default 0 NOT NULL DEFERRABLE  Check (VIRTUAL_BOOL IN (0, 1) ) DEFERRABLE ,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_HR" primary key ("PPC_HR_DB_ID","PPC_HR_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:25 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_OPT_STATUS" (
	"PPC_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_OPT_STATUS_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_OPT_STATUS_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_OPT_STATUS_CD" Varchar2 (20) NOT NULL DEFERRABLE ,
	"DESC_SDESC" Varchar2 (80),
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_OPT_STATUS" primary key ("PPC_DB_ID","PPC_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:26 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "REF_PPC_OPT_STATUS" (
	"PPC_OPT_STATUS_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_OPT_STATUS_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_OPT_STATUS_CD" Varchar2 (20) NOT NULL DEFERRABLE ,
	"USER_CD" Varchar2 (20) NOT NULL DEFERRABLE ,
	"DESC_SDESC" Varchar2 (80) NOT NULL DEFERRABLE ,
	"DESC_LDESC" Varchar2 (4000) NOT NULL DEFERRABLE ,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_REF_PPC_OPT_STATUS" primary key ("PPC_OPT_STATUS_DB_ID","PPC_OPT_STATUS_CD") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:27 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_HR_SHIFT_PLAN" (
	"PPC_HR_SHIFT_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_HR_SHIFT_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_HR_SHIFT_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_HR_SHIFT_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"HR_DB_ID" Number(10,0) Check (HR_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"HR_ID" Number(10,0) Check (HR_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"HR_SHIFT_PLAN_ID" Number(10,0) Check (HR_SHIFT_PLAN_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_HR_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_HR_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_HR_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_HR_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_CREW_DB_ID" Number(10,0) Check (PPC_CREW_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_CREW_ID" Number(10,0) Check (PPC_CREW_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LABOUR_SKILL_DB_ID" Number(10,0) Check (LABOUR_SKILL_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LABOUR_SKILL_CD" Varchar2 (8),
	"START_DT" Date NOT NULL DEFERRABLE ,
	"END_DT" Date NOT NULL DEFERRABLE ,
	"WORK_HRS" Number(6,2) NOT NULL DEFERRABLE ,
	"EFFICIENCY_PCT" Number(3,2) NOT NULL DEFERRABLE ,
	"PPC_CAPACITY_DB_ID" Number(10,0) Check (PPC_CAPACITY_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_CAPACITY_ID" Number(10,0) Check (PPC_CAPACITY_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_LOC_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_LOC_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_LOC_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_LOC_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"ABSENT_BOOL" Number(1,0) Default 0 NOT NULL DEFERRABLE  Check (ABSENT_BOOL IN (0, 1) ) DEFERRABLE ,
	"LICENSED_BOOL" Number(1,0) Default 0 NOT NULL DEFERRABLE  Check (LICENSED_BOOL IN (0, 1) ) DEFERRABLE ,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_HR_SHIFT_PLAN" primary key ("PPC_HR_SHIFT_DB_ID","PPC_HR_SHIFT_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:28 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_HR_LIC" (
	"PPC_HR_LIC_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_HR_LIC_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_HR_LIC_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_HR_LIC_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"ASSMBL_DB_ID" Number(10,0) Check (ASSMBL_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"ASSMBL_CD" Varchar2 (8),
	"CARRIER_DB_ID" Number(10,0) Check (CARRIER_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"CARRIER_ID" Number(10,0) Check (CARRIER_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_HR_SHIFT_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_HR_SHIFT_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_HR_SHIFT_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_HR_SHIFT_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_HR_LIC" primary key ("PPC_HR_LIC_DB_ID","PPC_HR_LIC_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:29 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_LOC_EXCLUDE" (
	"PPC_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LOC_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (LOC_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"LOC_ID" Number(10,0) NOT NULL DEFERRABLE  Check (LOC_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_LOC_EXCLUDE" primary key ("PPC_DB_ID","PPC_ID","LOC_DB_ID","LOC_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:30 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_LOC_CAPACITY" (
	"PPC_CAPACITY_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_CAPACITY_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_CAPACITY_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_CAPACITY_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_LOC_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_LOC_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_LOC_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_LOC_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"CAP_PATTERN_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (CAP_PATTERN_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"CAP_PATTERN_ID" Number(10,0) NOT NULL DEFERRABLE  Check (CAP_PATTERN_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"START_DT" Date,
	"END_DT" Date,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_LOC_CAPACITY" primary key ("PPC_CAPACITY_DB_ID","PPC_CAPACITY_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:31 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_TASK_DEFN_MAP" (
	"PPC_TASK_DEFN_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_TASK_DEFN_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_TASK_DEFN_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_TASK_DEFN_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_TASK_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_TASK_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_TASK_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_TASK_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_TASK_DEFN_MAP" primary key ("PPC_TASK_DEFN_DB_ID","PPC_TASK_DEFN_ID","PPC_TASK_DB_ID","PPC_TASK_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:32 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_create('
Create table "PPC_WORK_AREA_CREW" (
	"PPC_WORK_AREA_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WORK_AREA_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_WORK_AREA_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_WORK_AREA_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_CREW_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_CREW_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"PPC_CREW_ID" Number(10,0) NOT NULL DEFERRABLE  Check (PPC_CREW_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"RSTAT_CD" Number(3,0) NOT NULL DEFERRABLE  Check (RSTAT_CD IN (0, 1, 2, 3) ) DEFERRABLE ,
	"CREATION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DT" Date NOT NULL DEFERRABLE ,
	"REVISION_DB_ID" Number(10,0) NOT NULL DEFERRABLE  Check (REVISION_DB_ID BETWEEN 0 AND 4294967295 ) DEFERRABLE ,
	"REVISION_USER" Varchar2 (30) NOT NULL DEFERRABLE ,
 Constraint "PK_PPC_WORK_AREA_CREW" primary key ("PPC_WORK_AREA_DB_ID","PPC_WORK_AREA_ID","PPC_CREW_DB_ID","PPC_CREW_ID") 
) 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:33 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
--
-- PPC TABLE INDEXES
--
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCACTV_PPCWP_IFK" ON "PPC_ACTIVITY" ("PPC_WP_DB_ID","PPC_WP_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:34 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCTASK_SCHED_IFK" ON "PPC_TASK" ("SCHED_DB_ID","SCHED_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:35 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCTASK_TASKDEFN_IFK" ON "PPC_TASK" ("TASK_DEFN_DB_ID","TASK_DEFN_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:36 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCTASK_PPCPHASE_IFK" ON "PPC_TASK" ("PPC_PHASE_DB_ID","PPC_PHASE_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:37 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCTASK_PPCWA_IFK" ON "PPC_TASK" ("PPC_WORK_AREA_DB_ID","PPC_WORK_AREA_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:38 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCTASK_PPCNRPHASE_IFK" ON "PPC_TASK" ("NR_PHASE_DB_ID","NR_PHASE_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:39 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCTASK_NRSTARTMS_IFK" ON "PPC_TASK" ("NR_START_MILESTONE_DB_ID","NR_START_MILESTONE_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:40 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCTASK_NRENDMS_IFK" ON "PPC_TASK" ("NR_END_MILESTONE_DB_ID","NR_END_MILESTONE_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:41 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCTASK_PLNTYP_IFK" ON "PPC_TASK" ("PLANNING_TYPE_DB_ID","PLANNING_TYPE_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:42 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCTASK_PPCCREW_IFK" ON "PPC_TASK" ("PPC_CREW_DB_ID","PPC_CREW_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:43 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCCREW_PPCLOC_IFK" ON "PPC_CREW" ("PPC_LOC_DB_ID","PPC_LOC_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:44 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCCREW_DEPT_IFK" ON "PPC_CREW" ("DEPT_DB_ID","DEPT_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:45 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCLBR_PPCTASK_IFK" ON "PPC_LABOUR" ("PPC_TASK_DB_ID","PPC_TASK_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:46 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCLBRL_PPCLBR_IFK" ON "PPC_LABOUR_ROLE" ("LABOUR_DB_ID","LABOUR_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:47 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCHRSLT_PPCLBRL_IFK" ON "PPC_HR_SLOT" ("LABOUR_ROLE_DB_ID","LABOUR_ROLE_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:48 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCWP_PPCPLAN_IFK" ON "PPC_WP" ("PPC_DB_ID","PPC_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:49 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCWP_PPCLOC_IFK" ON "PPC_WP" ("PPC_LOC_DB_ID","PPC_LOC_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:50 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCWP_ASSMBL_IFK" ON "PPC_WP" ("ASSMBL_DB_ID","ASSMBL_CD") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:51 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCWP_WP_IFK" ON "PPC_WP" ("WP_DB_ID","WP_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:52 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCWP_NRPHS_IFK" ON "PPC_WP" ("NR_PHASE_DB_ID","NR_PHASE_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:53 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCWP_TMPL_IFK" ON "PPC_WP" ("TEMPLATE_DB_ID","TEMPLATE_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:54 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCLOC_PPCPLAN_IFK" ON "PPC_LOC" ("PPC_DB_ID","PPC_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:55 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCHR_PPCPLAN_IFK" ON "PPC_HR" ("PPC_DB_ID","PPC_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:56 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCHR_HR_IFK" ON "PPC_HR" ("HR_DB_ID","HR_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:57 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCHRSHIFT_PPCHR_IFK" ON "PPC_HR_SHIFT_PLAN" ("PPC_HR_DB_ID","PPC_HR_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:58 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCHRSHIFT_PPCCREW_IFK" ON "PPC_HR_SHIFT_PLAN" ("PPC_CREW_DB_ID","PPC_CREW_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:59 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCHRSHIFT_HRSHIFT_IFK" ON "PPC_HR_SHIFT_PLAN" ("HR_DB_ID","HR_ID","HR_SHIFT_PLAN_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:60 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCHRLIC_CARRIER_IFK" ON "PPC_HR_LIC" ("CARRIER_DB_ID","CARRIER_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:61 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCHRLIC_ASSMBL_IFK" ON "PPC_HR_LIC" ("ASSMBL_DB_ID","ASSMBL_CD") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:62 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCHRLIC_PPCHRSHIFTPLAN" ON "PPC_HR_LIC" ("PPC_HR_SHIFT_DB_ID","PPC_HR_SHIFT_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:63 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCLOCCAP_PPCLOC_IFK" ON "PPC_LOC_CAPACITY" ("PPC_LOC_DB_ID","PPC_LOC_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:64 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.index_create('
Create Index "PPCLOCCAP_CAP_IFK" ON "PPC_LOC_CAPACITY" ("CAP_PATTERN_DB_ID","CAP_PATTERN_ID") 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:65 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
--
-- PPC TABLE FOREIGN KEY CONSTRAINTS
--
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_HR_LIC" add Constraint "FK_EQPASMBL_PPCHRLIC" foreign key ("ASSMBL_DB_ID","ASSMBL_CD") references "EQP_ASSMBL" ("ASSMBL_DB_ID","ASSMBL_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:66 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LOC" add Constraint "FK_INVLOC_PPCLOC" foreign key ("LOC_DB_ID","LOC_ID") references "INV_LOC" ("LOC_DB_ID","LOC_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:67 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LOC_EXCLUDE" add Constraint "FK_INVLOC_PPCLOCEX" foreign key ("LOC_DB_ID","LOC_ID") references "INV_LOC" ("LOC_DB_ID","LOC_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:68 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PLAN" add Constraint "FK_MIMDB_PPCPROJ" foreign key ("PPC_DB_ID") references "MIM_DB" ("DB_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:69 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "REF_PPC_PUBLISH_FAIL_TYPE" add Constraint "FK_MIMDB_REFPPCPUBLISHFAILTYPE" foreign key ("PPC_PUBLISH_FAIL_TYPE_DB_ID") references "MIM_DB" ("DB_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:70 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_CREW" add Constraint "FK_MIMDB_PPCCREW" foreign key ("PPC_CREW_DB_ID") references "MIM_DB" ("DB_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:71 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LABOUR" add Constraint "FK_MIMDB_PPCLABOUR" foreign key ("LABOUR_DB_ID") references "MIM_DB" ("DB_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:72 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LABOUR_ROLE" add Constraint "FK_MIMDB_PPCLABOURROLE" foreign key ("LABOUR_ROLE_DB_ID") references "MIM_DB" ("DB_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:73 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_HR_SLOT" add Constraint "FK_MIMDB_PPCHRSLOT" foreign key ("PPC_HR_SLOT_DB_ID") references "MIM_DB" ("DB_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:74 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_WP" add Constraint "FK_MIMDB_PPCWP" foreign key ("PPC_WP_DB_ID") references "MIM_DB" ("DB_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:75 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LOC" add Constraint "FK_MIMDB_PPCLOC" foreign key ("PPC_LOC_DB_ID") references "MIM_DB" ("DB_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:76 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_ACTIVITY" add Constraint "FK_MIMDB_PPCACTIVITY" foreign key ("PPC_ACTIVITY_DB_ID") references "MIM_DB" ("DB_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:77 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PHASE_CLASS" add Constraint "FK_MIMDB_PPCPHASECLASS" foreign key ("PPC_PHASE_CLASS_DB_ID") references "MIM_DB" ("DB_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:78 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_WORK_AREA_ZONE" add Constraint "FK_MIMDB_PPCWORKAREAZONE" foreign key ("PPC_WORK_AREA_ZONE_DB_ID") references "MIM_DB" ("DB_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:79 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PUBLISH_FAILURE" add Constraint "FK_MIMDB_PPCPUBLISHFAILURE" foreign key ("PPC_FAILURE_DB_ID") references "MIM_DB" ("DB_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:80 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_TASK_DEFN" add Constraint "FK_MIMDB_PPCTASKDEFN" foreign key ("PPC_TASK_DEFN_DB_ID") references "MIM_DB" ("DB_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:81 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_HR" add Constraint "FK_MIMDB_PPCHR" foreign key ("PPC_HR_DB_ID") references "MIM_DB" ("DB_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:82 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_HR_SHIFT_PLAN" add Constraint "FK_MIMDB_PPCHRSFTPLN" foreign key ("PPC_HR_SHIFT_DB_ID") references "MIM_DB" ("DB_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:83 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_HR_LIC" add Constraint "FK_MIMDB_PPCHRLIC" foreign key ("PPC_HR_LIC_DB_ID") references "MIM_DB" ("DB_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:84 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LOC_CAPACITY" add Constraint "FK_MIMDB_PPCLOCCAP" foreign key ("PPC_CAPACITY_DB_ID") references "MIM_DB" ("DB_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:85 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "REF_PPC_OPT_STATUS" add Constraint "FK_MIMDB_REFPPCOPTSTAT" foreign key ("PPC_OPT_STATUS_DB_ID") references "MIM_DB" ("DB_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:86 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_HR_LIC" add Constraint "FK_ORGCARRIER_PPCHRLIC" foreign key ("CARRIER_DB_ID","CARRIER_ID") references "ORG_CARRIER" ("CARRIER_DB_ID","CARRIER_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:87 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PUBLISH" add Constraint "FK_ORGHR_PPCPUBLISH" foreign key ("PUBLISHED_BY_HR_DB_ID","PUBLISHED_BY_HR_ID") references "ORG_HR" ("HR_DB_ID","HR_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:88 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_HR" add Constraint "FK_ORGHR_PPCHR" foreign key ("HR_DB_ID","HR_ID") references "ORG_HR" ("HR_DB_ID","HR_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:89 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_CREW" add Constraint "FK_ORGWORKDEPT_PPCCREW" foreign key ("DEPT_DB_ID","DEPT_ID") references "ORG_WORK_DEPT" ("DEPT_DB_ID","DEPT_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:90 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PLANNING_TYPE_SKILL" add Constraint "FK_PLNTYPSKILL_RFLBRSKLL" foreign key ("LABOUR_SKILL_DB_ID","LABOUR_SKILL_CD") references "REF_LABOUR_SKILL" ("LABOUR_SKILL_DB_ID","LABOUR_SKILL_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:91 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "REF_PPC_PUBLISH_FAIL_TYPE" add Constraint "FK_REFBITMAP_REFPPCPUBLISHFAIL" foreign key ("BITMAP_DB_ID","BITMAP_TAG") references "REF_BITMAP" ("BITMAP_DB_ID","BITMAP_TAG")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:92 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LABOUR" add Constraint "FK_REFLBRSKILL_PPCLBR" foreign key ("LABOUR_SKILL_DB_ID","LABOUR_SKILL_CD") references "REF_LABOUR_SKILL" ("LABOUR_SKILL_DB_ID","LABOUR_SKILL_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:93 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_HR_SHIFT_PLAN" add Constraint "FK_REFLBRSKIL_PPCHRSHFTPLN" foreign key ("LABOUR_SKILL_DB_ID","LABOUR_SKILL_CD") references "REF_LABOUR_SKILL" ("LABOUR_SKILL_DB_ID","LABOUR_SKILL_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:94 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_CREW" add Constraint "FK_REFLBRSKIL_PPCCREW" foreign key ("LABOUR_SKILL_DB_ID","LABOUR_SKILL_CD") references "REF_LABOUR_SKILL" ("LABOUR_SKILL_DB_ID","LABOUR_SKILL_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:95 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LABOUR" add Constraint "FK_REFLBRSTAGE_PPCLBR" foreign key ("LABOUR_STAGE_DB_ID","LABOUR_STAGE_CD") references "REF_LABOUR_STAGE" ("LABOUR_STAGE_DB_ID","LABOUR_STAGE_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:96 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_DEPENDENCY" add Constraint "FK_REFRELTYPE_PPCDEP" foreign key ("REL_TYPE_DB_ID","REL_TYPE_CD") references "REF_REL_TYPE" ("REL_TYPE_DB_ID","REL_TYPE_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:97 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PHASE_CLASS" add Constraint "FK_REFTASKCLASS_PPCPHASECLASS" foreign key ("TASK_CLASS_DB_ID","TASK_CLASS_CD") references "REF_TASK_CLASS" ("TASK_CLASS_DB_ID","TASK_CLASS_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:98 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_TASK" add Constraint "FK_REFTASKPRIORITY_PPCTASK" foreign key ("TASK_PRIORITY_DB_ID","TASK_PRIORITY_CD") references "REF_TASK_PRIORITY" ("TASK_PRIORITY_DB_ID","TASK_PRIORITY_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:99 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_WP" add Constraint "FK_REFPRIORITY_PPCWP" foreign key ("PRIORITY_DB_ID","PRIORITY_CD") references "REF_TASK_PRIORITY" ("TASK_PRIORITY_DB_ID","TASK_PRIORITY_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:100 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PHASE_CLASS" add Constraint "FK_REFSUBCLASS_PPCPHASECLASS" foreign key ("TASK_SUBCLASS_DB_ID","TASK_SUBCLASS_CD") references "REF_TASK_SUBCLASS" ("TASK_SUBCLASS_DB_ID","TASK_SUBCLASS_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:101 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PLAN" add Constraint "FK_PPCPLAN_AUTHUSER" foreign key ("AUTH_USER_ID") references "UTL_USER" ("USER_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:102 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PLAN" add Constraint "FK_PPCPLAN_EDITUSER" foreign key ("EDIT_USER_ID") references "UTL_USER" ("USER_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:103 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_TASK" add Constraint "FK_TASKDEFN_PPCTASK" foreign key ("TASK_DEFN_DB_ID","TASK_DEFN_ID") references "TASK_DEFN" ("TASK_DEFN_DB_ID","TASK_DEFN_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:104 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_TASK_DEFN" add Constraint "FK_TASKDEFN_PPCTASKDEFN" foreign key ("TASK_DEFN_DB_ID","TASK_DEFN_ID") references "TASK_DEFN" ("TASK_DEFN_DB_ID","TASK_DEFN_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:105 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_MILESTONE_COND" add Constraint "FK_MIMRSTAT_PPCMILESTONECOND" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:106 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PLAN" add Constraint "FK_MIMRSTAT_PPCPROJ" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:107 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_MILESTONE" add Constraint "FK_MIMRSTAT_PPCMILESTONE" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:108 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_ACTIVITY" add Constraint "FK_MIMRSTAT_PPCPROJACTIVITY" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:109 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PUBLISH" add Constraint "FK_MIMRSTAT_PPCPUBLISH" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:110 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PHASE" add Constraint "FK_MIMRSTAT_PPCPHASE" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:111 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PHASE_CLASS" add Constraint "FK_MIMRSTAT_PPCPHASECLASS" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:112 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_WORK_AREA" add Constraint "FK_MIMRSTAT_PPCWORKAREA" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:113 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_WORK_AREA_ZONE" add Constraint "FK_MIMRSTAT_PPCWORKAREAZONE" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:114 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_TASK" add Constraint "FK_MIMRSTAT_PPCTASK" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:115 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_DEPENDENCY" add Constraint "FK_MIMRSTAT_PPCPROJDEP" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:116 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "REF_PPC_PUBLISH_FAIL_TYPE" add Constraint "FK_MIMRSTAT_REFPPCPUBLISHFAILT" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:117 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PUBLISH_FAILURE" add Constraint "FK_MIMRSTAT_PPCPUBLISHFAILURE" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:118 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PLANNING_TYPE" add Constraint "FK_MIMRSTAT_PPCPLNTYPE" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:119 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PLANNING_TYPE_SKILL" add Constraint "FK_MIMRSTAT_PPCPLNTYPESKLL" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:120 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_CREW" add Constraint "FK_MIMRSTAT_PPCCREW" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:121 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LABOUR" add Constraint "FK_MIMRSTAT_PPCLABOUR" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:122 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LABOUR_ROLE" add Constraint "FK_MIMRSTAT_PPCLABOURROLE" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:123 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_HR_SLOT" add Constraint "FK_MIMRSTAT_PPCHRSLOT" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:124 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_WP" add Constraint "FK_MIMRSTAT_PPCWP" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:125 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LOC" add Constraint "FK_MIMRSTAT_PPCLOC" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:126 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_TASK_DEFN" add Constraint "FK_RSTAT_PPCTASKDEFN" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:127 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_OPT_STATUS" add Constraint "FK_RSTAT_PPCOPTSTAT" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:128 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LOC_EXCLUDE" add Constraint "FK_RSTAT_PPCLOCEX" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:129 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LOC_CAPACITY" add Constraint "FK_RSTAT_PPCLOCCAP" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:130 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_HR" add Constraint "FK_RSTAT_PPCHR" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:131 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_HR_SHIFT_PLAN" add Constraint "FK_RSTAT_PPCHRSHFTPLN" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:132 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_HR_LIC" add Constraint "FK_RSTAT_PPCHRLIC" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:133 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "REF_PPC_OPT_STATUS" add Constraint "FK_RSTAT_REFPPCOPTSTAT" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:134 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_TASK_DEFN_MAP" add Constraint "FK_MIMRSTAT_PPCTASKDEFNMAP" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:135 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_WORK_AREA_CREW" add Constraint "FK_MIMRSTAT_PPCWRKARECREW" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:136 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_WORK_AREA_ZONE" add Constraint "FK_EQPTASKZONE_PPCWORKAREAZONE" foreign key ("ZONE_DB_ID","ZONE_ID") references "EQP_TASK_ZONE" ("ZONE_DB_ID","ZONE_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:137 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_MILESTONE_COND" add Constraint "FK_REFACCONDSETTING_PPCMILESTO" foreign key ("AC_COND_DB_ID","AC_COND_CD","COND_SET_DB_ID","COND_SET_CD") references "AC_COND_SETTING" ("AC_COND_DB_ID","AC_COND_CD","COND_SET_DB_ID","COND_SET_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:138 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LABOUR_ROLE" add Constraint "FK_REFLBRROLE_PPCLBRROLE" foreign key ("LABOUR_ROLE_TYPE_DB_ID","LABOUR_ROLE_TYPE_CD") references "REF_LABOUR_ROLE_TYPE" ("LABOUR_ROLE_TYPE_DB_ID","LABOUR_ROLE_TYPE_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:139 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LABOUR_ROLE" add Constraint "FK_REFLBRRLSTTS_PPCLBRRL" foreign key ("LABOUR_ROLE_STATUS_DB_ID","LABOUR_ROLE_STATUS_CD") references "REF_LABOUR_ROLE_STATUS" ("LABOUR_ROLE_STATUS_DB_ID","LABOUR_ROLE_STATUS_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:140 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_WP" add Constraint "FK_PPCPLAN_PPCWP" foreign key ("PPC_DB_ID","PPC_ID") references "PPC_PLAN" ("PPC_DB_ID","PPC_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:141 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LOC" add Constraint "FK_PPCPLAN_PPCLOC" foreign key ("PPC_DB_ID","PPC_ID") references "PPC_PLAN" ("PPC_DB_ID","PPC_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:142 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_OPT_STATUS" add Constraint "FK_PPCPLAN_PPCOPTSTAT" foreign key ("PPC_DB_ID","PPC_ID") references "PPC_PLAN" ("PPC_DB_ID","PPC_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:143 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_HR" add Constraint "FK_PPCPLAN_PPCHR" foreign key ("PPC_DB_ID","PPC_ID") references "PPC_PLAN" ("PPC_DB_ID","PPC_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:144 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LOC_EXCLUDE" add Constraint "FK_PPCPLAN_PPCLOCEX" foreign key ("PPC_DB_ID","PPC_ID") references "PPC_PLAN" ("PPC_DB_ID","PPC_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:145 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_WP" add Constraint "FK_PPCTEMPLATE_PPCWP" foreign key ("TEMPLATE_DB_ID","TEMPLATE_ID") references "PPC_PLAN" ("PPC_DB_ID","PPC_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:146 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_DEPENDENCY" add Constraint "FK_TOACTIVITY_DEPENDENCY" foreign key ("TO_ACTIVITY_DB_ID","TO_ACTIVITY_ID") references "PPC_ACTIVITY" ("PPC_ACTIVITY_DB_ID","PPC_ACTIVITY_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:147 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PHASE" add Constraint "FK_PPCACTIVITY_PPCPHASE" foreign key ("PPC_PHASE_DB_ID","PPC_PHASE_ID") references "PPC_ACTIVITY" ("PPC_ACTIVITY_DB_ID","PPC_ACTIVITY_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:148 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_WORK_AREA" add Constraint "FK_PPCACTIVITY_PPCWORKAREA" foreign key ("PPC_WORK_AREA_DB_ID","PPC_WORK_AREA_ID") references "PPC_ACTIVITY" ("PPC_ACTIVITY_DB_ID","PPC_ACTIVITY_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:149 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_DEPENDENCY" add Constraint "FK_FROMACTIVITY_DEPENDENCY" foreign key ("FROM_ACTIVITY_DB_ID","FROM_ACTIVITY_ID") references "PPC_ACTIVITY" ("PPC_ACTIVITY_DB_ID","PPC_ACTIVITY_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:150 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_MILESTONE" add Constraint "FK_PPCACTIVITY_PPCMILESTONE" foreign key ("PPC_MILESTONE_DB_ID","PPC_MILESTONE_ID") references "PPC_ACTIVITY" ("PPC_ACTIVITY_DB_ID","PPC_ACTIVITY_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:151 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_TASK" add Constraint "FK_PPCACTIVITY_PPCTASK" foreign key ("PPC_TASK_DB_ID","PPC_TASK_ID") references "PPC_ACTIVITY" ("PPC_ACTIVITY_DB_ID","PPC_ACTIVITY_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:152 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PUBLISH_FAILURE" add Constraint "FK_PPCTASK_PPCPUBLISHFAILURE" foreign key ("PPC_TASK_DB_ID","PPC_TASK_ID") references "PPC_TASK" ("PPC_TASK_DB_ID","PPC_TASK_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:153 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LABOUR" add Constraint "FK_PPCTASK_PPCLABOUR" foreign key ("PPC_TASK_DB_ID","PPC_TASK_ID") references "PPC_TASK" ("PPC_TASK_DB_ID","PPC_TASK_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:154 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_TASK_DEFN_MAP" add Constraint "FK_PPCTASK_PPCTASKDEFNMAP" foreign key ("PPC_TASK_DB_ID","PPC_TASK_ID") references "PPC_TASK" ("PPC_TASK_DB_ID","PPC_TASK_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:155 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_MILESTONE_COND" add Constraint "FK_PPCMILESTONE_PPCMILESTONECO" foreign key ("PPC_MILESTONE_DB_ID","PPC_MILESTONE_ID") references "PPC_MILESTONE" ("PPC_MILESTONE_DB_ID","PPC_MILESTONE_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:156 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_TASK" add Constraint "FK_NRSTARTMILESTONE_PPCTASK" foreign key ("NR_START_MILESTONE_DB_ID","NR_START_MILESTONE_ID") references "PPC_MILESTONE" ("PPC_MILESTONE_DB_ID","PPC_MILESTONE_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:157 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_TASK" add Constraint "FK_NRENDMILESTONE_PPCTASK" foreign key ("NR_END_MILESTONE_DB_ID","NR_END_MILESTONE_ID") references "PPC_MILESTONE" ("PPC_MILESTONE_DB_ID","PPC_MILESTONE_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:158 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PHASE" add Constraint "FK_NRSTRTMLSTN_PPCPHASE" foreign key ("NR_START_MILESTONE_DB_ID","NR_START_MILESTONE_ID") references "PPC_MILESTONE" ("PPC_MILESTONE_DB_ID","PPC_MILESTONE_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:159 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PHASE" add Constraint "FK_NRENDMLSTN_PPCPHASE" foreign key ("NR_END_MILESTONE_DB_ID","NR_END_MILESTONE_ID") references "PPC_MILESTONE" ("PPC_MILESTONE_DB_ID","PPC_MILESTONE_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:160 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PHASE_CLASS" add Constraint "FK_PPCPHASE_PPCPHASECLASS" foreign key ("PPC_PHASE_DB_ID","PPC_PHASE_ID") references "PPC_PHASE" ("PPC_PHASE_DB_ID","PPC_PHASE_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:161 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_TASK" add Constraint "FK_PPCPHASE_PPCTASK" foreign key ("PPC_PHASE_DB_ID","PPC_PHASE_ID") references "PPC_PHASE" ("PPC_PHASE_DB_ID","PPC_PHASE_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:162 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PHASE" add Constraint "FK_NRPHASE_PPCPHASE" foreign key ("NR_PHASE_DB_ID","NR_PHASE_ID") references "PPC_PHASE" ("PPC_PHASE_DB_ID","PPC_PHASE_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:163 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_TASK" add Constraint "FK_NRPHASE_PPCTASK" foreign key ("NR_PHASE_DB_ID","NR_PHASE_ID") references "PPC_PHASE" ("PPC_PHASE_DB_ID","PPC_PHASE_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:164 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_WP" add Constraint "FK_NRPHASE_PPCWP" foreign key ("NR_PHASE_DB_ID","NR_PHASE_ID") references "PPC_PHASE" ("PPC_PHASE_DB_ID","PPC_PHASE_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:165 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_WORK_AREA_ZONE" add Constraint "FK_PPCWORKAREA_PPCWORKAREAZONE" foreign key ("PPC_WORK_AREA_DB_ID","PPC_WORK_AREA_ID") references "PPC_WORK_AREA" ("PPC_WORK_AREA_DB_ID","PPC_WORK_AREA_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:166 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_TASK" add Constraint "FK_PPCWORKAREA_PPCTASK" foreign key ("PPC_WORK_AREA_DB_ID","PPC_WORK_AREA_ID") references "PPC_WORK_AREA" ("PPC_WORK_AREA_DB_ID","PPC_WORK_AREA_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:167 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_WORK_AREA_CREW" add Constraint "FK_PPCWRKAREA_PPCWRKAREACRW" foreign key ("PPC_WORK_AREA_DB_ID","PPC_WORK_AREA_ID") references "PPC_WORK_AREA" ("PPC_WORK_AREA_DB_ID","PPC_WORK_AREA_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:168 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PUBLISH_FAILURE" add Constraint "FK_PPCPUBLISH_PUBFAILURE" foreign key ("PPC_WP_DB_ID","PPC_WP_ID") references "PPC_PUBLISH" ("PPC_WP_DB_ID","PPC_WP_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:169 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PUBLISH_FAILURE" add Constraint "FK_REFPUBLISHFAILTYPE_PPCPUBLI" foreign key ("PPC_PUBLISH_FAIL_TYPE_DB_ID","PPC_PUBLISH_FAIL_TYPE_CD") references "REF_PPC_PUBLISH_FAIL_TYPE" ("PPC_PUBLISH_FAIL_TYPE_DB_ID","PPC_PUBLISH_FAIL_TYPE_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:170 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_TASK" add Constraint "FK_EQPPLANNINGTYPE_PPCTASK" foreign key ("PLANNING_TYPE_DB_ID","PLANNING_TYPE_ID") references "EQP_PLANNING_TYPE" ("PLANNING_TYPE_DB_ID","PLANNING_TYPE_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:171 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PLANNING_TYPE" add Constraint "FK_EQPPLNTYP_PPCPLNTYP" foreign key ("PLANNING_TYPE_DB_ID","PLANNING_TYPE_ID") references "EQP_PLANNING_TYPE" ("PLANNING_TYPE_DB_ID","PLANNING_TYPE_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:172 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LOC_CAPACITY" add Constraint "FK_CAPPATTERN_PPCLOCCAP" foreign key ("CAP_PATTERN_DB_ID","CAP_PATTERN_ID") references "CAPACITY_PATTERN" ("CAPACITY_PATTERN_DB_ID","CAPACITY_PATTERN_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:173 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PLANNING_TYPE_SKILL" add Constraint "FK_PPCPLNTYP_PLNTYPSKILL" foreign key ("PPC_WP_DB_ID","PPC_WP_ID","PLANNING_TYPE_DB_ID","PLANNING_TYPE_ID") references "PPC_PLANNING_TYPE" ("PPC_WP_DB_ID","PPC_WP_ID","PLANNING_TYPE_DB_ID","PLANNING_TYPE_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:174 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_TASK" add Constraint "FK_PPCCREW_PPCTASK" foreign key ("PPC_CREW_DB_ID","PPC_CREW_ID") references "PPC_CREW" ("PPC_CREW_DB_ID","PPC_CREW_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:175 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_HR_SHIFT_PLAN" add Constraint "FK_PPCCREW_PPCHRSHFTPLN" foreign key ("PPC_CREW_DB_ID","PPC_CREW_ID") references "PPC_CREW" ("PPC_CREW_DB_ID","PPC_CREW_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:176 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_WORK_AREA_CREW" add Constraint "FK_PPCCREW_PPCWRKAREACRW" foreign key ("PPC_CREW_DB_ID","PPC_CREW_ID") references "PPC_CREW" ("PPC_CREW_DB_ID","PPC_CREW_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:177 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LABOUR_ROLE" add Constraint "FK_PPCLABOUR_ROLE" foreign key ("LABOUR_DB_ID","LABOUR_ID") references "PPC_LABOUR" ("LABOUR_DB_ID","LABOUR_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:178 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_HR_SLOT" add Constraint "FK_PPCLABROLE_HRSLOT" foreign key ("LABOUR_ROLE_DB_ID","LABOUR_ROLE_ID") references "PPC_LABOUR_ROLE" ("LABOUR_ROLE_DB_ID","LABOUR_ROLE_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:179 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_ACTIVITY" add Constraint "FK_PPCWP_PPCACTIVITY" foreign key ("PPC_WP_DB_ID","PPC_WP_ID") references "PPC_WP" ("PPC_WP_DB_ID","PPC_WP_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:180 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PLANNING_TYPE" add Constraint "FK_PPCWP_PLANNINGTYPE" foreign key ("PPC_WP_DB_ID","PPC_WP_ID") references "PPC_WP" ("PPC_WP_DB_ID","PPC_WP_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:181 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_PUBLISH" add Constraint "FK_PPCWP_PPCPUBLISH" foreign key ("PPC_WP_DB_ID","PPC_WP_ID") references "PPC_WP" ("PPC_WP_DB_ID","PPC_WP_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:182 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_TASK_DEFN" add Constraint "FK_PPCWP_TASKDEFN" foreign key ("PPC_WP_DB_ID","PPC_WP_ID") references "PPC_WP" ("PPC_WP_DB_ID","PPC_WP_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:183 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LOC" add Constraint "FK_PPCLOC_NHPPCLOC" foreign key ("NH_PPC_LOC_DB_ID","NH_PPC_LOC_ID") references "PPC_LOC" ("PPC_LOC_DB_ID","PPC_LOC_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:184 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_WP" add Constraint "FK_PPCLOC_PPCWP" foreign key ("PPC_LOC_DB_ID","PPC_LOC_ID") references "PPC_LOC" ("PPC_LOC_DB_ID","PPC_LOC_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:185 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_CREW" add Constraint "FK_PPCLOC_PPCCREW" foreign key ("PPC_LOC_DB_ID","PPC_LOC_ID") references "PPC_LOC" ("PPC_LOC_DB_ID","PPC_LOC_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:186 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_LOC_CAPACITY" add Constraint "FK_PPCLOC_PPCLOCCAP" foreign key ("PPC_LOC_DB_ID","PPC_LOC_ID") references "PPC_LOC" ("PPC_LOC_DB_ID","PPC_LOC_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:187 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_HR_SHIFT_PLAN" add Constraint "FK_PPCLOC_PPCHRSHFTPLN" foreign key ("PPC_LOC_DB_ID","PPC_LOC_ID") references "PPC_LOC" ("PPC_LOC_DB_ID","PPC_LOC_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:188 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_TASK_DEFN_MAP" add Constraint "FK_PPCTASKDEFN_PPCTASKDEFNMAP" foreign key ("PPC_TASK_DEFN_DB_ID","PPC_TASK_DEFN_ID") references "PPC_TASK_DEFN" ("PPC_TASK_DEFN_DB_ID","PPC_TASK_DEFN_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:189 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_HR_SHIFT_PLAN" add Constraint "FK_PPCHR_PPCHRSHFTPLN" foreign key ("PPC_HR_DB_ID","PPC_HR_ID") references "PPC_HR" ("PPC_HR_DB_ID","PPC_HR_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:190 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_OPT_STATUS" add Constraint "FK_REFPPCOPTSTAT_PPCOPTSTAT" foreign key ("PPC_OPT_STATUS_DB_ID","PPC_OPT_STATUS_CD") references "REF_PPC_OPT_STATUS" ("PPC_OPT_STATUS_DB_ID","PPC_OPT_STATUS_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:191 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_HR_SLOT" add Constraint "FK_PPCHRSHIFTPLAN_PPCHRSLOT" foreign key ("PPC_HR_SHIFT_DB_ID","PPC_HR_SHIFT_ID") references "PPC_HR_SHIFT_PLAN" ("PPC_HR_SHIFT_DB_ID","PPC_HR_SHIFT_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:192 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_HR_LIC" add Constraint "FK_PPCHRSHFTPLN_PPCHRLIC" foreign key ("PPC_HR_SHIFT_DB_ID","PPC_HR_SHIFT_ID") references "PPC_HR_SHIFT_PLAN" ("PPC_HR_SHIFT_DB_ID","PPC_HR_SHIFT_ID")  DEFERRABLE 
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:193 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_HR_SHIFT_PLAN" add Constraint "FK_PPCLOCCAP_PPCHRSHFTPLN" foreign key ("PPC_CAPACITY_DB_ID","PPC_CAPACITY_ID") references "PPC_LOC_CAPACITY" ("PPC_CAPACITY_DB_ID","PPC_CAPACITY_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:194 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "REF_PPC_ACTIVITY_TYPE" add Constraint "FK_MIMDB_REFPPCACTVITYTYPE" foreign key ("PPC_ACTIVITY_TYPE_DB_ID") references "MIM_DB" ("DB_ID")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:195 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "REF_PPC_ACTIVITY_TYPE" add Constraint "FK_MIMRSTAT_REFPPCACTVITYTYPE" foreign key ("RSTAT_CD") references "MIM_RSTAT" ("RSTAT_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:196 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
utl_migr_schema_pkg.table_constraint_add('
Alter table "PPC_ACTIVITY" add Constraint "FK_PPCACTIVITYTYPE_PPCACTVTY" foreign key ("PPC_ACTIVITY_TYPE_DB_ID","PPC_ACTIVITY_TYPE_CD") references "REF_PPC_ACTIVITY_TYPE" ("PPC_ACTIVITY_TYPE_DB_ID","PPC_ACTIVITY_TYPE_CD")  DEFERRABLE
');
END;
/

--changeSet DEV-685_PPC_MasterMigr:197 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
--
-- PPC TABLE INSERT AND UPDATE TRIGGERS
--
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
CREATE OR REPLACE TRIGGER "TIBR_PPC_PLAN" BEFORE INSERT
   ON "PPC_PLAN" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:198 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_PLAN" BEFORE UPDATE
   ON "PPC_PLAN" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:199 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_ACTIVITY" BEFORE INSERT
   ON "PPC_ACTIVITY" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:200 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_ACTIVITY" BEFORE UPDATE
   ON "PPC_ACTIVITY" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:201 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_TASK" BEFORE INSERT
   ON "PPC_TASK" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:202 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_TASK" BEFORE UPDATE
   ON "PPC_TASK" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:203 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_MILESTONE" BEFORE INSERT
   ON "PPC_MILESTONE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:204 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_MILESTONE" BEFORE UPDATE
   ON "PPC_MILESTONE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:205 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_MILESTONE_COND" BEFORE INSERT
   ON "PPC_MILESTONE_COND" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:206 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_MILESTONE_COND" BEFORE UPDATE
   ON "PPC_MILESTONE_COND" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:207 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_PHASE" BEFORE INSERT
   ON "PPC_PHASE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:208 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_PHASE" BEFORE UPDATE
   ON "PPC_PHASE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:209 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_PHASE_CLASS" BEFORE INSERT
   ON "PPC_PHASE_CLASS" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:210 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_PHASE_CLASS" BEFORE UPDATE
   ON "PPC_PHASE_CLASS" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:211 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_WORK_AREA" BEFORE INSERT
   ON "PPC_WORK_AREA" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:212 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_WORK_AREA" BEFORE UPDATE
   ON "PPC_WORK_AREA" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:213 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_WORK_AREA_ZONE" BEFORE INSERT
   ON "PPC_WORK_AREA_ZONE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:214 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_WORK_AREA_ZONE" BEFORE UPDATE
   ON "PPC_WORK_AREA_ZONE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:215 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_DEPENDENCY" BEFORE INSERT
   ON "PPC_DEPENDENCY" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:216 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_DEPENDENCY" BEFORE UPDATE
   ON "PPC_DEPENDENCY" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:217 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_PUBLISH" BEFORE INSERT
   ON "PPC_PUBLISH" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:218 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_PUBLISH" BEFORE UPDATE
   ON "PPC_PUBLISH" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:219 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_PUBLISH_FAILURE" BEFORE INSERT
   ON "PPC_PUBLISH_FAILURE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:220 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_PUBLISH_FAILURE" BEFORE UPDATE
   ON "PPC_PUBLISH_FAILURE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:221 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_REF_PPC_PUBLISH_FAIL_TYPE" BEFORE INSERT
   ON "REF_PPC_PUBLISH_FAIL_TYPE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:222 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_REF_PPC_PUBLISH_FAIL_TYPE" BEFORE UPDATE
   ON "REF_PPC_PUBLISH_FAIL_TYPE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:223 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_PLANNING_TYPE" BEFORE INSERT
   ON "PPC_PLANNING_TYPE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:224 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_PLANNING_TYPE" BEFORE UPDATE
   ON "PPC_PLANNING_TYPE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:225 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_PLANNING_TYPE_SKILL" BEFORE INSERT
   ON "PPC_PLANNING_TYPE_SKILL" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:226 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_PLANNING_TYPE_SKILL" BEFORE UPDATE
   ON "PPC_PLANNING_TYPE_SKILL" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:227 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_CREW" BEFORE INSERT
   ON "PPC_CREW" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:228 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_CREW" BEFORE UPDATE
   ON "PPC_CREW" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:229 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_HR_SLOT" BEFORE INSERT
   ON "PPC_HR_SLOT" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:230 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_HR_SLOT" BEFORE UPDATE
   ON "PPC_HR_SLOT" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:231 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_LABOUR_ROLE" BEFORE INSERT
   ON "PPC_LABOUR_ROLE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:232 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_LABOUR_ROLE" BEFORE UPDATE
   ON "PPC_LABOUR_ROLE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:233 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_LABOUR" BEFORE INSERT
   ON "PPC_LABOUR" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:234 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_LABOUR" BEFORE UPDATE
   ON "PPC_LABOUR" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:235 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_LOC" BEFORE INSERT
   ON "PPC_LOC" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:236 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_LOC" BEFORE UPDATE
   ON "PPC_LOC" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:237 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_WP" BEFORE INSERT
   ON "PPC_WP" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:238 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_WP" BEFORE UPDATE
   ON "PPC_WP" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:239 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_TASK_DEFN" BEFORE INSERT
   ON "PPC_TASK_DEFN" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:240 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_TASK_DEFN" BEFORE UPDATE
   ON "PPC_TASK_DEFN" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:241 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_HR" BEFORE INSERT
   ON "PPC_HR" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:242 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_HR" BEFORE UPDATE
   ON "PPC_HR" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:243 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_OPT_STATUS" BEFORE INSERT
   ON "PPC_OPT_STATUS" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:244 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_OPT_STATUS" BEFORE UPDATE
   ON "PPC_OPT_STATUS" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:245 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_REF_PPC_OPT_STATUS" BEFORE INSERT
   ON "REF_PPC_OPT_STATUS" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:246 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_REF_PPC_OPT_STATUS" BEFORE UPDATE
   ON "REF_PPC_OPT_STATUS" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:247 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_HR_SHIFT_PLAN" BEFORE INSERT
   ON "PPC_HR_SHIFT_PLAN" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:248 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_HR_SHIFT_PLAN" BEFORE UPDATE
   ON "PPC_HR_SHIFT_PLAN" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:249 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_HR_LIC" BEFORE INSERT
   ON "PPC_HR_LIC" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:250 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_HR_LIC" BEFORE UPDATE
   ON "PPC_HR_LIC" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:251 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_LOC_EXCLUDE" BEFORE INSERT
   ON "PPC_LOC_EXCLUDE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:252 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_LOC_EXCLUDE" BEFORE UPDATE
   ON "PPC_LOC_EXCLUDE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:253 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_LOC_CAPACITY" BEFORE INSERT
   ON "PPC_LOC_CAPACITY" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:254 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_LOC_CAPACITY" BEFORE UPDATE
   ON "PPC_LOC_CAPACITY" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:255 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_TASK_DEFN_MAP" BEFORE INSERT
   ON "PPC_TASK_DEFN_MAP" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:256 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_TASK_DEFN_MAP" BEFORE UPDATE
   ON "PPC_TASK_DEFN_MAP" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:257 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_PPC_WORK_AREA_CREW" BEFORE INSERT
   ON "PPC_WORK_AREA_CREW" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:258 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_PPC_WORK_AREA_CREW" BEFORE UPDATE
   ON "PPC_WORK_AREA_CREW" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:259 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TIBR_REF_PPC_ACTIVITY_TYPE" BEFORE INSERT
   ON "REF_PPC_ACTIVITY_TYPE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setinsertaudit(
    :new.rstat_cd,
    :new.creation_dt,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:260 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE TRIGGER "TUBR_REF_PPC_ACTIVITY_TYPE" BEFORE UPDATE
   ON "REF_PPC_ACTIVITY_TYPE" REFERENCING NEW AS NEW OLD AS OLD FOR EACH ROW
declare
  ln_error NUMBER := 0;
  lv_error VARCHAR2(32767) := '';
  audit_error EXCEPTION;
begin
  application_object_pkg.setupdateaudit(
    :old.rstat_cd,
    :new.rstat_cd,
    :new.revision_dt,
    :new.revision_db_id,
    :new.revision_user,
    ln_error,
    lv_error);
  IF ln_error <> 0 THEN
    RAISE_APPLICATION_ERROR (ln_error, lv_error);
  END IF;
end;
/

--changeSet DEV-685_PPC_MasterMigr:261 stripComments:false
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
--
-- PPC 0-LEVEL REF TABLE DATA
--
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
INSERT INTO
   REF_PPC_PUBLISH_FAIL_TYPE
   (
      PPC_PUBLISH_FAIL_TYPE_DB_ID, PPC_PUBLISH_FAIL_TYPE_CD, DESC_SDESC, DESC_LDESC, BITMAP_DB_ID, BITMAP_TAG, RSTAT_CD, CREATION_DT, REVISION_DT, REVISION_DB_ID, REVISION_USER
   )
   SELECT 0, 'LBRHR', 'LBRHR', 'Fail to set HR of Labor Role.', 0, 1, 0, TO_DATE('2010-06-09', 'YYYY-MM-DD'), TO_DATE('2010-06-09', 'YYYY-MM-DD'), 0, 'MXI'
   FROM
      dual
   WHERE
      NOT EXISTS ( SELECT 1 FROM REF_PPC_PUBLISH_FAIL_TYPE WHERE PPC_PUBLISH_FAIL_TYPE_DB_ID = 0 AND PPC_PUBLISH_FAIL_TYPE_CD = 'LBRHR' );          

--changeSet DEV-685_PPC_MasterMigr:262 stripComments:false
INSERT INTO
   REF_PPC_PUBLISH_FAIL_TYPE
   (
      PPC_PUBLISH_FAIL_TYPE_DB_ID, PPC_PUBLISH_FAIL_TYPE_CD, DESC_SDESC, DESC_LDESC, BITMAP_DB_ID, BITMAP_TAG, RSTAT_CD, CREATION_DT, REVISION_DT, REVISION_DB_ID, REVISION_USER
   )
   SELECT 0, 'TASKLRD', 'TASKLRD', 'Task labor role duration mismatch.', 0, 1, 0, TO_DATE('2010-06-09', 'YYYY-MM-DD'), TO_DATE('2010-06-09', 'YYYY-MM-DD'), 0, 'MXI'
   FROM
      dual
   WHERE
      NOT EXISTS ( SELECT 1 FROM REF_PPC_PUBLISH_FAIL_TYPE WHERE PPC_PUBLISH_FAIL_TYPE_DB_ID = 0 AND PPC_PUBLISH_FAIL_TYPE_CD = 'TASKLRD' );    

--changeSet DEV-685_PPC_MasterMigr:263 stripComments:false
INSERT INTO 
   REF_PPC_PUBLISH_FAIL_TYPE
   (
      PPC_PUBLISH_FAIL_TYPE_DB_ID, PPC_PUBLISH_FAIL_TYPE_CD, DESC_SDESC, DESC_LDESC, BITMAP_DB_ID, BITMAP_TAG, RSTAT_CD, CREATION_DT, REVISION_DT, REVISION_DB_ID, REVISION_USER
   )
   SELECT 0, 'WPHIST', 'WPHIST', 'Work Package is historic.', 0, 1, 0, TO_DATE('2009-10-17', 'YYYY-MM-DD'), TO_DATE('2009-10-17', 'YYYY-MM-DD'), 0, 'MXI'
   FROM 
      DUAL 
   WHERE NOT EXISTS ( SELECT 1 FROM REF_PPC_PUBLISH_FAIL_TYPE WHERE PPC_PUBLISH_FAIL_TYPE_DB_ID = 0 AND PPC_PUBLISH_FAIL_TYPE_CD = 'WPHIST' );

--changeSet DEV-685_PPC_MasterMigr:264 stripComments:false
INSERT INTO 
   REF_PPC_PUBLISH_FAIL_TYPE
   (
      PPC_PUBLISH_FAIL_TYPE_DB_ID, PPC_PUBLISH_FAIL_TYPE_CD, DESC_SDESC, DESC_LDESC, BITMAP_DB_ID, BITMAP_TAG, RSTAT_CD, CREATION_DT, REVISION_DT, REVISION_DB_ID, REVISION_USER
   )
   SELECT 0, 'TASKHIST', 'TASKHIST', 'Task is historic.', 0, 1, 0, TO_DATE('2009-10-17', 'YYYY-MM-DD'), TO_DATE('2009-10-17', 'YYYY-MM-DD'), 0, 'MXI'
   FROM 
      DUAL 
   WHERE NOT EXISTS (SELECT 1 FROM REF_PPC_PUBLISH_FAIL_TYPE WHERE PPC_PUBLISH_FAIL_TYPE_DB_ID = 0 AND PPC_PUBLISH_FAIL_TYPE_CD = 'TASKHIST');

--changeSet DEV-685_PPC_MasterMigr:265 stripComments:false
INSERT INTO 
   REF_PPC_PUBLISH_FAIL_TYPE
   (
      PPC_PUBLISH_FAIL_TYPE_DB_ID, PPC_PUBLISH_FAIL_TYPE_CD, DESC_SDESC, DESC_LDESC, BITMAP_DB_ID, BITMAP_TAG, RSTAT_CD, CREATION_DT, REVISION_DT, REVISION_DB_ID, REVISION_USER
   )
   SELECT 0, 'TASKUNEX', 'TASKUNEX', 'Task has unexpected status.', 0, 1, 0, TO_DATE('2009-10-17', 'YYYY-MM-DD'), TO_DATE('2009-10-17', 'YYYY-MM-DD'), 0, 'MXI'
   FROM 
      DUAL 
   WHERE NOT EXISTS (SELECT 1 FROM REF_PPC_PUBLISH_FAIL_TYPE WHERE PPC_PUBLISH_FAIL_TYPE_DB_ID = 0 AND PPC_PUBLISH_FAIL_TYPE_CD = 'TASKUNEX');

--changeSet DEV-685_PPC_MasterMigr:266 stripComments:false
INSERT INTO 
   REF_PPC_PUBLISH_FAIL_TYPE
   (
      PPC_PUBLISH_FAIL_TYPE_DB_ID, PPC_PUBLISH_FAIL_TYPE_CD, DESC_SDESC, DESC_LDESC, BITMAP_DB_ID, BITMAP_TAG, RSTAT_CD, CREATION_DT, REVISION_DT, REVISION_DB_ID, REVISION_USER
   )
   SELECT 0, 'TASKOOS', 'TASKOOS', 'Task is out of the scope of the work package.', 0, 1, 0, TO_DATE('2009-10-17', 'YYYY-MM-DD'), TO_DATE('2009-10-17', 'YYYY-MM-DD'), 0, 'MXI'
   FROM 
      DUAL 
   WHERE NOT EXISTS (SELECT 1 FROM REF_PPC_PUBLISH_FAIL_TYPE WHERE PPC_PUBLISH_FAIL_TYPE_DB_ID = 0 AND PPC_PUBLISH_FAIL_TYPE_CD = 'TASKOOS');

--changeSet DEV-685_PPC_MasterMigr:267 stripComments:false
INSERT INTO
   ref_ppc_opt_status
   (
      ppc_opt_status_db_id, ppc_opt_status_cd, user_cd, desc_sdesc, desc_ldesc, rstat_cd, creation_dt, revision_dt, revision_db_id, revision_user
   )
   SELECT 0, 'PENDING', 'PENDING', 'Pending Optimization', 'This status indicates that request to optimize was plan, but no confirmation was received from the optimizer.', 0, TO_DATE('2010-04-29', 'YYYY-MM-DD'), TO_DATE('2010-04-29', 'YYYY-MM-DD'), 0, 'MXI'
   FROM
      dual
   WHERE
      NOT EXISTS ( SELECT 1 FROM ref_ppc_opt_status WHERE  ppc_opt_status_db_id = 0 and ppc_opt_status_cd = 'PENDING' );  

--changeSet DEV-685_PPC_MasterMigr:268 stripComments:false
INSERT INTO
   ref_ppc_opt_status
   (
      ppc_opt_status_db_id, ppc_opt_status_cd, user_cd, desc_sdesc, desc_ldesc, rstat_cd, creation_dt, revision_dt, revision_db_id, revision_user
   )
   SELECT 0, 'PROCESS', 'PROCESSING', 'Processing Message', 'This status indicates that an optimizer received the request to optimize the production plan, and is processing the massage.', 0, TO_DATE('2010-04-29', 'YYYY-MM-DD'), TO_DATE('2010-04-29', 'YYYY-MM-DD'), 0, 'MXI'
   FROM
      dual
   WHERE
      NOT EXISTS ( SELECT 1 FROM ref_ppc_opt_status WHERE  ppc_opt_status_db_id = 0 and ppc_opt_status_cd = 'PROCESS' );    

--changeSet DEV-685_PPC_MasterMigr:269 stripComments:false
INSERT INTO
   ref_ppc_opt_status
   (
      ppc_opt_status_db_id, ppc_opt_status_cd, user_cd, desc_sdesc, desc_ldesc, rstat_cd, creation_dt, revision_dt, revision_db_id, revision_user
   )
   SELECT 0, 'FORCESTP', 'FORCESTOP', 'Force stop initiated', 'This status indicates that user tried to stop the optimization of the production plan.', 0, TO_DATE('2010-04-29', 'YYYY-MM-DD'), TO_DATE('2010-04-29', 'YYYY-MM-DD'), 0, 'MXI'
   FROM
      dual
   WHERE
      NOT EXISTS ( SELECT 1 FROM ref_ppc_opt_status WHERE  ppc_opt_status_db_id = 0 and ppc_opt_status_cd = 'FORCESTP' );    

--changeSet DEV-685_PPC_MasterMigr:270 stripComments:false
INSERT INTO
   ref_ppc_opt_status
   (
      ppc_opt_status_db_id, ppc_opt_status_cd, user_cd, desc_sdesc, desc_ldesc, rstat_cd, creation_dt, revision_dt, revision_db_id, revision_user
   )
   SELECT 0, 'SUCCESS', 'SUCCESS', 'Optimization Completed', 'This status indicates that the optimization message was processed and received successfully. The production plan was optimized. ', 0, TO_DATE('2010-04-29', 'YYYY-MM-DD'), TO_DATE('2010-04-29', 'YYYY-MM-DD'), 0, 'MXI'
   FROM
      dual
   WHERE
      NOT EXISTS ( SELECT 1 FROM ref_ppc_opt_status WHERE  ppc_opt_status_db_id = 0 and ppc_opt_status_cd = 'SUCCESS' );    

--changeSet DEV-685_PPC_MasterMigr:271 stripComments:false
INSERT INTO
   ref_ppc_opt_status
   (
      ppc_opt_status_db_id, ppc_opt_status_cd, user_cd, desc_sdesc, desc_ldesc, rstat_cd, creation_dt, revision_dt, revision_db_id, revision_user
   )
   SELECT 0, 'FAILED', 'FAILED', 'Optimization Failed', 'This status indicates that there was a failure at some point and the production plan could not be optimized.', 0, TO_DATE('2010-04-29', 'YYYY-MM-DD'), TO_DATE('2010-04-29', 'YYYY-MM-DD'), 0, 'MXI'
   FROM
      dual
   WHERE
      NOT EXISTS ( SELECT 1 FROM ref_ppc_opt_status WHERE  ppc_opt_status_db_id = 0 and ppc_opt_status_cd = 'FAILED' );    

--changeSet DEV-685_PPC_MasterMigr:272 stripComments:false
INSERT INTO
   ref_ppc_opt_status
   (
      ppc_opt_status_db_id, ppc_opt_status_cd, user_cd, desc_sdesc, desc_ldesc, rstat_cd, creation_dt, revision_dt, revision_db_id, revision_user
   )
   SELECT 0, 'STOPPED', 'STOPPED', 'Optimization Stopped', 'This status indicates that optimization was successfully stopped.', 0, TO_DATE('2010-04-29', 'YYYY-MM-DD'), TO_DATE('2010-04-29', 'YYYY-MM-DD'), 0, 'MXI'
   FROM
      dual
   WHERE
      NOT EXISTS ( SELECT 1 FROM ref_ppc_opt_status WHERE  ppc_opt_status_db_id = 0 and ppc_opt_status_cd = 'STOPPED' );

--changeSet DEV-685_PPC_MasterMigr:273 stripComments:false
INSERT INTO
   REF_PPC_ACTIVITY_TYPE
   (
      PPC_ACTIVITY_TYPE_DB_ID, PPC_ACTIVITY_TYPE_CD, DESC_SDESC, DESC_LDESC, RSTAT_CD, CREATION_DT, REVISION_DT, REVISION_DB_ID, REVISION_USER
   )
   SELECT 0, 'MILESTONE', 'MILESTONE', 'Milestone activity type.', 0, TO_DATE('2010-11-10', 'YYYY-MM-DD'), TO_DATE('2010-11-10', 'YYYY-MM-DD'), 0, 'MXI'
   FROM
      dual
   WHERE
      NOT EXISTS ( SELECT 1 FROM REF_PPC_ACTIVITY_TYPE WHERE PPC_ACTIVITY_TYPE_DB_ID = 0 AND PPC_ACTIVITY_TYPE_CD = 'MILESTONE' );    

--changeSet DEV-685_PPC_MasterMigr:274 stripComments:false
INSERT INTO
   REF_PPC_ACTIVITY_TYPE
   (
      PPC_ACTIVITY_TYPE_DB_ID, PPC_ACTIVITY_TYPE_CD, DESC_SDESC, DESC_LDESC, RSTAT_CD, CREATION_DT, REVISION_DT, REVISION_DB_ID, REVISION_USER
   )
   SELECT 0, 'PHASE', 'PHASE', 'Phase activity type.', 0, TO_DATE('2010-11-10', 'YYYY-MM-DD'), TO_DATE('2010-11-10', 'YYYY-MM-DD'), 0, 'MXI'
   FROM
      dual
   WHERE
      NOT EXISTS ( SELECT 1 FROM REF_PPC_ACTIVITY_TYPE WHERE PPC_ACTIVITY_TYPE_DB_ID = 0 AND PPC_ACTIVITY_TYPE_CD = 'PHASE' );    

--changeSet DEV-685_PPC_MasterMigr:275 stripComments:false
INSERT INTO
   REF_PPC_ACTIVITY_TYPE
   (
      PPC_ACTIVITY_TYPE_DB_ID, PPC_ACTIVITY_TYPE_CD, DESC_SDESC, DESC_LDESC, RSTAT_CD, CREATION_DT, REVISION_DT, REVISION_DB_ID, REVISION_USER
   )
   SELECT 0, 'TASK', 'TASK', 'Task activity type.', 0, TO_DATE('2010-11-10', 'YYYY-MM-DD'), TO_DATE('2010-11-10', 'YYYY-MM-DD'), 0, 'MXI'
   FROM
      dual
   WHERE
      NOT EXISTS ( SELECT 1 FROM REF_PPC_ACTIVITY_TYPE WHERE PPC_ACTIVITY_TYPE_DB_ID = 0 AND PPC_ACTIVITY_TYPE_CD = 'TASK' );    

--changeSet DEV-685_PPC_MasterMigr:276 stripComments:false
INSERT INTO
   REF_PPC_ACTIVITY_TYPE
   (
      PPC_ACTIVITY_TYPE_DB_ID, PPC_ACTIVITY_TYPE_CD, DESC_SDESC, DESC_LDESC, RSTAT_CD, CREATION_DT, REVISION_DT, REVISION_DB_ID, REVISION_USER
   )
   SELECT 0, 'WORKAREA', 'WORKAREA', 'Work area activity type.', 0, TO_DATE('2010-11-10', 'YYYY-MM-DD'), TO_DATE('2010-11-10', 'YYYY-MM-DD'), 0, 'MXI'
   FROM
      dual
   WHERE
      NOT EXISTS ( SELECT 1 FROM REF_PPC_ACTIVITY_TYPE WHERE PPC_ACTIVITY_TYPE_DB_ID = 0 AND PPC_ACTIVITY_TYPE_CD = 'WORKAREA' );    

--changeSet DEV-685_PPC_MasterMigr:277 stripComments:false
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
--
-- PPC 0-LEVEL UTL TABLE DATA
--
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
-- UTL_CONFIG_PARM
INSERT INTO
   UTL_CONFIG_PARM
   (
      PARM_NAME, PARM_VALUE, PARM_TYPE, ENCRYPT_BOOL,
      PARM_DESC, 
      CONFIG_TYPE, ALLOW_VALUE_DESC, DEFAULT_VALUE, MAND_CONFIG_BOOL, CATEGORY, MODIFIED_IN, UTL_ID
   )
   SELECT 'PPC_PUBLISH_TASK_CREWHR_RANGE', '24', 'LOGIC', 0,
      'When production plan is published for a work package, system will assign crews and/or human resources only to tasks scheduled in the next set period.',
      'GLOBAL', 'NUMBER', '24', 1, 'Production Planning Control', '7.5', 0
   FROM
      dual
   WHERE
      NOT EXISTS ( SELECT 1 FROM utl_config_parm WHERE parm_name = 'PPC_PUBLISH_TASK_CREWHR_RANGE' );      

--changeSet DEV-685_PPC_MasterMigr:278 stripComments:false
INSERT INTO
   UTL_CONFIG_PARM
   (
      PARM_NAME, PARM_TYPE, PARM_VALUE, ENCRYPT_BOOL, PARM_DESC, CONFIG_TYPE, DEFAULT_VALUE, ALLOW_VALUE_DESC,  MAND_CONFIG_BOOL, CATEGORY, MODIFIED_IN, UTL_ID
   )
   SELECT 'DEFAULT_MAX_AVG_NR_TASK_DURATION', 'LOGIC', 3, 0, 'Default value in hours for maximum average non routine task duration.', 'GLOBAL', 3, 'NUMBER', 1, 'Maint - Production Planning and Control', '7.5', 0
   FROM
      dual
   WHERE
      NOT EXISTS ( SELECT 1 FROM utl_config_parm WHERE parm_name = 'DEFAULT_MAX_AVG_NR_TASK_DURATION' );  

--changeSet DEV-685_PPC_MasterMigr:279 stripComments:false
UPDATE UTL_CONFIG_PARM SET PARM_TYPE='LOGIC', CATEGORY='Maint - Production Planning and Control' 
   WHERE PARM_NAME = 'DEFAULT_MAX_AVG_NR_TASK_DURATION';

--changeSet DEV-685_PPC_MasterMigr:280 stripComments:false
INSERT INTO
   UTL_CONFIG_PARM
   (
      PARM_NAME, PARM_TYPE, PARM_VALUE, ENCRYPT_BOOL, PARM_DESC, CONFIG_TYPE, DEFAULT_VALUE, ALLOW_VALUE_DESC, MAND_CONFIG_BOOL, CATEGORY, MODIFIED_IN, UTL_ID
   )
   SELECT 'DEFAULT_PPC_PLAN_HORIZON', 'LOGIC', 30, 0, 'Default horizon value', 'GLOBAL', 30, 'NUMBER', 1, 'Maint - Production Planning and Control', '7.5', 0
   FROM
      dual
   WHERE
      NOT EXISTS ( SELECT 1 FROM utl_config_parm WHERE parm_name = 'DEFAULT_PPC_PLAN_HORIZON' );   

--changeSet DEV-685_PPC_MasterMigr:281 stripComments:false
UPDATE UTL_CONFIG_PARM SET PARM_TYPE='LOGIC', CATEGORY='Maint - Production Planning and Control' 
   WHERE PARM_NAME = 'DEFAULT_PPC_PLAN_HORIZON';

--changeSet DEV-685_PPC_MasterMigr:282 stripComments:false
INSERT INTO 
   utl_config_parm 
   (
      PARM_NAME, PARM_TYPE, PARM_VALUE, ENCRYPT_BOOL, PARM_DESC, CONFIG_TYPE, DEFAULT_VALUE, ALLOW_VALUE_DESC,  MAND_CONFIG_BOOL, CATEGORY, MODIFIED_IN, UTL_ID
   )
   SELECT 'PPC_PUBLISH_TASK_CREWHR_RANGE', 'LOGIC', 24, 0, 'When production plan is published for a work package, system will assign crews and/or human resources only to tasks scheduled in the next set period.', 'GLOBAL', 24, 'NUMBER', 1, 'Production Planning Control', '7.5', 0
   FROM 
      DUAL 
   WHERE NOT EXISTS (SELECT 1 FROM UTL_CONFIG_PARM WHERE PARM_NAME = 'PPC_PUBLISH_TASK_CREWHR_RANGE' AND PARM_TYPE = 'LOGIC');

--changeSet DEV-685_PPC_MasterMigr:283 stripComments:false
INSERT INTO
   UTL_CONFIG_PARM
   (
      PARM_NAME, PARM_TYPE, PARM_VALUE, ENCRYPT_BOOL, PARM_DESC, CONFIG_TYPE, DEFAULT_VALUE, ALLOW_VALUE_DESC, MAND_CONFIG_BOOL, CATEGORY, MODIFIED_IN, UTL_ID
   )
   SELECT 'PPC_PLAN_HORIZON_LIMIT', 'LOGIC', 90, 0, 'The horizon value limit', 'GLOBAL', 90, 'NUMBER', 1, 'Production Planning and Control', '7.5', 0
   FROM
      DUAL
   WHERE
      NOT EXISTS ( SELECT 1 FROM utl_config_parm WHERE parm_name = 'PPC_PLAN_HORIZON_LIMIT' );      

--changeSet DEV-685_PPC_MasterMigr:284 stripComments:false
-- Planning Types ToDo List
INSERT INTO 
   UTL_TODO_TAB 
   (
      TODO_TAB_ID, TODO_TAB_CD, TODO_TAB_NAME, PATH, TODO_TAB_LDESC, REFRESH_INTERVAL, UTL_ID
   )
   SELECT 11022, 'idTabPlanningTypes', 'web.todotab.PLANNING_TYPES', '/web/todolist/PlanningTypesTab.jsp', 'web.todotab.PLANNING_TYPES_TAB', 0, 0
   FROM 
      DUAL 
   WHERE NOT EXISTS (SELECT 1 FROM UTL_TODO_TAB WHERE TODO_TAB_ID = 11022);

--changeSet DEV-685_PPC_MasterMigr:285 stripComments:false
-- Create Planning Type
INSERT INTO 
   UTL_CONFIG_PARM 
   (
      PARM_VALUE, PARM_NAME, PARM_TYPE, PARM_DESC, CONFIG_TYPE, ALLOW_VALUE_DESC, DEFAULT_VALUE, MAND_CONFIG_BOOL, CATEGORY, MODIFIED_IN, UTL_ID
   )
   SELECT 'false', 'ACTION_CREATE_PLANNING_TYPE', 'SECURED_RESOURCE', 'Permission to create planning types', 'USER', 'TRUE/FALSE', 'FALSE', 1,'Maint - Planning', '7.5',0
   FROM 
      DUAL 
   WHERE NOT EXISTS (SELECT 1 FROM UTL_CONFIG_PARM WHERE PARM_NAME = 'ACTION_CREATE_PLANNING_TYPE' AND PARM_TYPE = 'SECURED_RESOURCE');

--changeSet DEV-685_PPC_MasterMigr:286 stripComments:false
UPDATE UTL_CONFIG_PARM SET CATEGORY='Maint - Planning', MODIFIED_IN='7.5' 
   WHERE PARM_NAME = 'ACTION_CREATE_PLANNING_TYPE' AND PARM_TYPE = 'SECURED_RESOURCE';

--changeSet DEV-685_PPC_MasterMigr:287 stripComments:false
INSERT INTO 
   UTL_TODO_BUTTON 
   (
      TODO_BUTTON_ID, PARM_NAME, PARM_TYPE, BUTTON_NAME, ICON, ACTION, TOOLTIP, TODO_BUTTON_LDESC, UTL_ID
   )
   SELECT 10057, 'ACTION_CREATE_PLANNING_TYPE', 'SECURED_RESOURCE' , 'web.todobutton.CREATE_PLANNING_TYPE_NAME', '/common/images/tracker/create.gif', '/web/taskdefn/CreateEditPlanningType.jsp?aMode=CREATE_PLANNING_TYPE', 'web.todobutton.CREATE_PLANNING_TYPE_TOOLTIP', 'web.todobutton.CREATE_PLANNING_TYPE_LDESC', 0
   FROM 
      DUAL 
   WHERE NOT EXISTS (SELECT 1 FROM UTL_TODO_BUTTON WHERE TODO_BUTTON_ID = 10057);

--changeSet DEV-685_PPC_MasterMigr:288 stripComments:false
-- Edit Planning Type
INSERT INTO 
   UTL_CONFIG_PARM 
   (
      PARM_VALUE, PARM_NAME, PARM_TYPE, PARM_DESC, CONFIG_TYPE, ALLOW_VALUE_DESC, DEFAULT_VALUE, MAND_CONFIG_BOOL, CATEGORY, MODIFIED_IN, UTL_ID
   )
   SELECT 'false', 'ACTION_EDIT_PLANNING_TYPE', 'SECURED_RESOURCE', 'Permission to edit planning types', 'USER', 'TRUE/FALSE', 'FALSE', 1,'Maint - Planning', '7.5',0
   FROM 
      DUAL 
   WHERE NOT EXISTS (SELECT 1 FROM UTL_CONFIG_PARM WHERE PARM_NAME = 'ACTION_EDIT_PLANNING_TYPE' AND PARM_TYPE = 'SECURED_RESOURCE');

--changeSet DEV-685_PPC_MasterMigr:289 stripComments:false
UPDATE UTL_CONFIG_PARM SET CATEGORY='Maint - Planning', MODIFIED_IN='7.5' 
   WHERE PARM_NAME = 'ACTION_EDIT_PLANNING_TYPE' AND PARM_TYPE = 'SECURED_RESOURCE';

--changeSet DEV-685_PPC_MasterMigr:290 stripComments:false
INSERT INTO 
   UTL_TODO_BUTTON 
   (
      TODO_BUTTON_ID, PARM_NAME, PARM_TYPE, BUTTON_NAME, ICON, ACTION, TOOLTIP, TODO_BUTTON_LDESC, UTL_ID
   )
   SELECT 10058, 'ACTION_EDIT_PLANNING_TYPE', 'SECURED_RESOURCE' , 'web.todobutton.EDIT_PLANNING_TYPE_NAME', '/common/images/tracker/edit.gif', '/web/taskdefn/CreateEditPlanningType.jsp?aMode=EDIT_PLANNING_TYPE', 'web.todobutton.EDIT_PLANNING_TYPE_TOOLTIP', 'web.todobutton.EDIT_PLANNING_TYPE_LDESC', 0
   FROM 
      DUAL 
   WHERE NOT EXISTS (SELECT 1 FROM UTL_TODO_BUTTON WHERE TODO_BUTTON_ID = 10058);

--changeSet DEV-685_PPC_MasterMigr:291 stripComments:false
-- Remove Planning Type
INSERT INTO 
   UTL_CONFIG_PARM 
   (
      PARM_VALUE, PARM_NAME, PARM_TYPE, PARM_DESC, CONFIG_TYPE, ALLOW_VALUE_DESC, DEFAULT_VALUE, MAND_CONFIG_BOOL, CATEGORY, MODIFIED_IN, UTL_ID
   )
   SELECT 'false', 'ACTION_REMOVE_PLANNING_TYPE', 'SECURED_RESOURCE', 'Permission to remove planning types', 'USER', 'TRUE/FALSE', 'FALSE', 1,'Maint - Planning', '7.5',0
   FROM 
      DUAL 
   WHERE NOT EXISTS (SELECT 1 FROM UTL_CONFIG_PARM WHERE PARM_NAME = 'ACTION_REMOVE_PLANNING_TYPE' AND PARM_TYPE = 'SECURED_RESOURCE');

--changeSet DEV-685_PPC_MasterMigr:292 stripComments:false
UPDATE UTL_CONFIG_PARM SET CATEGORY='Maint - Planning', MODIFIED_IN='7.5' 
   WHERE PARM_NAME = 'ACTION_REMOVE_PLANNING_TYPE' AND PARM_TYPE = 'SECURED_RESOURCE';

--changeSet DEV-685_PPC_MasterMigr:293 stripComments:false
INSERT INTO 
   UTL_TODO_BUTTON 
   (
      TODO_BUTTON_ID, PARM_NAME, PARM_TYPE, BUTTON_NAME, ICON, ACTION, TOOLTIP, TODO_BUTTON_LDESC, UTL_ID
   )
   SELECT 10059, 'ACTION_REMOVE_PLANNING_TYPE', 'SECURED_RESOURCE' , 'web.todobutton.REMOVE_PLANNING_TYPE_NAME', '/common/images/tracker/delete.gif', '/web/taskdefn/RemovePlanningType.jsp', 'web.todobutton.REMOVE_PLANNING_TYPE_TOOLTIP', 'web.todobutton.REMOVE_PLANNING_TYPE_LDESC', 0
   FROM 
      DUAL 
   WHERE NOT EXISTS (SELECT 1 FROM UTL_TODO_BUTTON WHERE TODO_BUTTON_ID = 10059);

--changeSet DEV-685_PPC_MasterMigr:294 stripComments:false
INSERT INTO 
   UTL_CONFIG_PARM 
   (
      PARM_VALUE, PARM_NAME, PARM_TYPE, PARM_DESC, CONFIG_TYPE, ALLOW_VALUE_DESC, DEFAULT_VALUE, MAND_CONFIG_BOOL, CATEGORY, MODIFIED_IN, UTL_ID
   )
   SELECT 'false', 'APP_PRODUCTION_PLAN_CONTROLLER', 'SECURED_RESOURCE', 'Permission to access the Production Planning and Control application', 'USER', 'TRUE/FALSE', 'FALSE', 1,'Maint - Production Planning and Control', '7.5',0
   FROM 
      DUAL 
   WHERE NOT EXISTS (SELECT 1 FROM UTL_CONFIG_PARM WHERE PARM_NAME = 'ACTION_REMOVE_PLANNING_TYPE' AND PARM_TYPE = 'SECURED_RESOURCE');

--changeSet DEV-685_PPC_MasterMigr:295 stripComments:false
UPDATE UTL_CONFIG_PARM SET PARM_DESC='Permission to access the Production Planning and Control application', DEFAULT_VALUE='FALSE', CATEGORY='Maint - Production Planning and Control', MODIFIED_IN='7.5' 
   WHERE PARM_NAME = 'APP_PRODUCTION_PLAN_CONTROLLER' AND PARM_TYPE = 'SECURED_RESOURCE';

--changeSet DEV-685_PPC_MasterMigr:296 stripComments:false
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
--
-- PPC SEQUENCES
--
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
INSERT INTO utl_sequence (sequence_cd , next_value , table_name , column_name , oracle_seq , utl_id)
   SELECT  'PPC_CREW_ID_SEQ', 1, 'PPC_CREW', 'PPC_CREW_ID', 1 , 0
   FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM UTL_SEQUENCE WHERE SEQUENCE_CD = 'PPC_CREW_ID_SEQ');   

--changeSet DEV-685_PPC_MasterMigr:297 stripComments:true endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
   UTL_MIGR_SCHEMA_PKG.SEQUENCE_CREATE('PPC_CREW_ID_SEQ', 1); 
END;
/

--changeSet DEV-685_PPC_MasterMigr:298 stripComments:false
INSERT INTO utl_sequence (sequence_cd , next_value , table_name , column_name , oracle_seq , utl_id)
   SELECT  'PPC_CAPACITY_ID_SEQ', 1, 'PPC_LOC_CAPACITY', 'PPC_CAPACITY_ID', 1 , 0
   FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM UTL_SEQUENCE WHERE SEQUENCE_CD = 'PPC_CAPACITY_ID_SEQ');    

--changeSet DEV-685_PPC_MasterMigr:299 stripComments:true endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
   UTL_MIGR_SCHEMA_PKG.SEQUENCE_CREATE('PPC_CAPACITY_ID_SEQ', 1);  
END;
/

--changeSet DEV-685_PPC_MasterMigr:300 stripComments:false
INSERT INTO utl_sequence (sequence_cd , next_value , table_name , column_name , oracle_seq , utl_id)
   SELECT  'PPC_HR_ID_SEQ', 1, 'PPC_HR', 'PPC_HR_ID', 1 , 0
   FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM UTL_SEQUENCE WHERE SEQUENCE_CD = 'PPC_HR_ID_SEQ');    

--changeSet DEV-685_PPC_MasterMigr:301 stripComments:true endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
   UTL_MIGR_SCHEMA_PKG.SEQUENCE_CREATE('PPC_HR_ID_SEQ', 1);
END;
/ 

--changeSet DEV-685_PPC_MasterMigr:302 stripComments:false
INSERT INTO utl_sequence (sequence_cd , next_value , table_name , column_name , oracle_seq , utl_id)
   SELECT  'PPC_HR_LIC_ID_SEQ', 1, 'PPC_HR_LIC', 'PPC_HR_LIC_ID', 1 , 0
   FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM UTL_SEQUENCE WHERE SEQUENCE_CD = 'PPC_HR_LIC_ID_SEQ');    

--changeSet DEV-685_PPC_MasterMigr:303 stripComments:true endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
   UTL_MIGR_SCHEMA_PKG.SEQUENCE_CREATE('PPC_HR_LIC_ID_SEQ', 1);
END;
/

--changeSet DEV-685_PPC_MasterMigr:304 stripComments:false
INSERT INTO utl_sequence (sequence_cd , next_value , table_name , column_name , oracle_seq , utl_id)
   SELECT  'PPC_HR_SHIFT_ID_SEQ', 1, 'PPC_HR_SHIFT_PLAN', 'PPC_HR_SHIFT_ID', 1 , 0
   FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM UTL_SEQUENCE WHERE SEQUENCE_CD = 'PPC_HR_SHIFT_ID_SEQ');  

--changeSet DEV-685_PPC_MasterMigr:305 stripComments:true endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
   UTL_MIGR_SCHEMA_PKG.SEQUENCE_CREATE('PPC_HR_SHIFT_ID_SEQ', 1);
END;
/

--changeSet DEV-685_PPC_MasterMigr:306 stripComments:false
INSERT INTO utl_sequence (sequence_cd , next_value , table_name , column_name , oracle_seq , utl_id)
   SELECT  'PPC_LABOUR_ID_SEQ', 1, 'PPC_LABOUR', 'LABOUR_ID', 1 , 0
   FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM UTL_SEQUENCE WHERE SEQUENCE_CD = 'PPC_LABOUR_ID_SEQ');  

--changeSet DEV-685_PPC_MasterMigr:307 stripComments:true endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
   UTL_MIGR_SCHEMA_PKG.SEQUENCE_CREATE('PPC_LABOUR_ID_SEQ', 1);
END;
/

--changeSet DEV-685_PPC_MasterMigr:308 stripComments:false
INSERT INTO utl_sequence (sequence_cd , next_value , table_name , column_name , oracle_seq , utl_id)
   SELECT  'PPC_LABOUR_ROLE_ID_SEQ', 1, 'PPC_LABOUR_ROLE', 'LABOUR_ROLE_ID', 1 , 0
   FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM UTL_SEQUENCE WHERE SEQUENCE_CD = 'PPC_LABOUR_ROLE_ID_SEQ');  

--changeSet DEV-685_PPC_MasterMigr:309 stripComments:true endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
   UTL_MIGR_SCHEMA_PKG.SEQUENCE_CREATE('PPC_LABOUR_ROLE_ID_SEQ', 1);
END;
/

--changeSet DEV-685_PPC_MasterMigr:310 stripComments:false
INSERT INTO utl_sequence (sequence_cd , next_value , table_name , column_name , oracle_seq , utl_id)
   SELECT  'PPC_HR_SLOT_ID_SEQ', 1, 'PPC_HR_SLOT', 'PPC_HR_SLOT_ID', 1 , 0
   FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM UTL_SEQUENCE WHERE SEQUENCE_CD = 'PPC_HR_SLOT_ID_SEQ');  

--changeSet DEV-685_PPC_MasterMigr:311 stripComments:true endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
   UTL_MIGR_SCHEMA_PKG.SEQUENCE_CREATE('PPC_HR_SLOT_ID_SEQ', 1);
END;
/

--changeSet DEV-685_PPC_MasterMigr:312 stripComments:false
INSERT INTO utl_sequence (sequence_cd , next_value , table_name , column_name , oracle_seq , utl_id)
   SELECT  'PPC_ACTIVITY_ID_SEQ', 1, 'PPC_ACTIVITY', 'PPC_ACTIVITY_ID', 1 , 0
   FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM UTL_SEQUENCE WHERE SEQUENCE_CD = 'PPC_ACTIVITY_ID_SEQ');  

--changeSet DEV-685_PPC_MasterMigr:313 stripComments:true endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
   UTL_MIGR_SCHEMA_PKG.SEQUENCE_CREATE('PPC_ACTIVITY_ID_SEQ', 1); 
END;
/   

--changeSet DEV-685_PPC_MasterMigr:314 stripComments:false
INSERT INTO utl_sequence (sequence_cd , next_value , table_name , column_name , oracle_seq , utl_id)
   SELECT  'PPC_PUBLISH_FAILURE_ID_SEQ', 1, 'PPC_PUBLISH_FAILURE', 'PPC_FAILURE_ID', 1 , 0
   FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM UTL_SEQUENCE WHERE SEQUENCE_CD = 'PPC_PUBLISH_FAILURE_ID_SEQ');    

--changeSet DEV-685_PPC_MasterMigr:315 stripComments:true endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
   UTL_MIGR_SCHEMA_PKG.SEQUENCE_CREATE('PPC_PUBLISH_FAILURE_ID_SEQ', 1); 
END;
/ 

--changeSet DEV-685_PPC_MasterMigr:316 stripComments:false
INSERT INTO utl_sequence (sequence_cd , next_value , table_name , column_name , oracle_seq , utl_id)
   SELECT  'PPC_WP_ID_SEQ' , 1 , 'PPC_WP' , 'PPC_WP_ID' , 1 ,0
   FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM UTL_SEQUENCE WHERE SEQUENCE_CD = 'PPC_WP_ID_SEQ');    

--changeSet DEV-685_PPC_MasterMigr:317 stripComments:true endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
   UTL_MIGR_SCHEMA_PKG.SEQUENCE_CREATE('PPC_WP_ID_SEQ', 1); 
END;
/  

--changeSet DEV-685_PPC_MasterMigr:318 stripComments:false
INSERT INTO utl_sequence (sequence_cd , next_value , table_name , column_name , oracle_seq , utl_id)
   SELECT  'PPC_LOC_ID_SEQ' , 1 , 'PPC_LOC' , 'PPC_LOC_ID' , 1 ,0
   FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM UTL_SEQUENCE WHERE SEQUENCE_CD = 'PPC_LOC_ID_SEQ');      

--changeSet DEV-685_PPC_MasterMigr:319 stripComments:true endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
   UTL_MIGR_SCHEMA_PKG.SEQUENCE_CREATE('PPC_LOC_ID_SEQ', 1); 
END;
/  

--changeSet DEV-685_PPC_MasterMigr:320 stripComments:false
INSERT INTO utl_sequence (sequence_cd , next_value , table_name , column_name , oracle_seq , utl_id)
   SELECT  'PPC_TASK_DEFN_ID_SEQ', 1, 'PPC_TASK_DEFN', 'PPC_TASK_DEFN_ID', 1 , 0
   FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM UTL_SEQUENCE WHERE SEQUENCE_CD = 'PPC_TASK_DEFN_ID_SEQ');

--changeSet DEV-685_PPC_MasterMigr:321 stripComments:true endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
   UTL_MIGR_SCHEMA_PKG.SEQUENCE_CREATE('PPC_TASK_DEFN_ID_SEQ', 1);   
END;
/

--changeSet DEV-685_PPC_MasterMigr:322 stripComments:false
INSERT INTO utl_sequence (sequence_cd , next_value , table_name , column_name , oracle_seq , utl_id)
   SELECT  'PPC_ID_SEQ', 1, 'PPC_PLAN', 'PPC_ID', 1 , 0
   FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM UTL_SEQUENCE WHERE SEQUENCE_CD = 'PPC_ID_SEQ');

--changeSet DEV-685_PPC_MasterMigr:323 stripComments:true endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
   UTL_MIGR_SCHEMA_PKG.SEQUENCE_CREATE('PPC_ID_SEQ', 1);
END;
/

--changeSet DEV-685_PPC_MasterMigr:324 stripComments:false
INSERT INTO utl_sequence (sequence_cd , next_value , table_name , column_name , oracle_seq , utl_id)
   SELECT  'PPC_PHASE_CLASS_ID_SEQ', 1, 'PPC_PHASE_CLASS', 'PPC_PHASE_CLASS_ID', 1 , 0
   FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM UTL_SEQUENCE WHERE SEQUENCE_CD = 'PPC_PHASE_CLASS_ID_SEQ');

--changeSet DEV-685_PPC_MasterMigr:325 stripComments:true endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
   UTL_MIGR_SCHEMA_PKG.SEQUENCE_CREATE('PPC_PHASE_CLASS_ID_SEQ', 1);
END;
/

--changeSet DEV-685_PPC_MasterMigr:326 stripComments:false
INSERT INTO utl_sequence (sequence_cd , next_value , table_name , column_name , oracle_seq , utl_id)
   SELECT  'PPC_WORK_AREA_ZONE_ID_SEQ', 1, 'PPC_WORK_AREA_ZONE', 'PPC_WORK_AREA_ZONE_ID', 1 , 0
   FROM DUAL WHERE NOT EXISTS (SELECT 1 FROM UTL_SEQUENCE WHERE SEQUENCE_CD = 'PPC_WORK_AREA_ZONE_ID_SEQ');

--changeSet DEV-685_PPC_MasterMigr:327 stripComments:true endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
BEGIN
   UTL_MIGR_SCHEMA_PKG.SEQUENCE_CREATE('PPC_WORK_AREA_ZONE_ID_SEQ', 1);
END;
/

--changeSet DEV-685_PPC_MasterMigr:328 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
--
-- PPC PLSQL PACKAGE
--
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
CREATE OR REPLACE PACKAGE PPC_PKG

IS

/********************************************************************************
*
* Package:     PPC_PKG
* Description: This package is used for Production Planning and Control
*
* Orig.Coder:   Jonathan R. Clarkin
* Recent Coder: edo
* Recent Date:  September 28, 2010
*
*********************************************************************************
*
* Copyright 1998-2010 Mxi Technologies Ltd.  All Rights Reversed.
* Any distribution of the Mxi source code by any other party than
* Mxi Technologies Ltd is prohibited.
*
*********************************************************************************/

/*------------------------------------ SUBTYPES ----------------------------*/
-- Define a subtype for return codes
SUBTYPE typn_RetCode IS NUMBER;

/*---------------------------------- Constants -----------------------------*/

-- Basic error handling codes
icn_Success CONSTANT typn_RetCode := 1;       -- Success
icn_NoProc  CONSTANT typn_RetCode := 0;       -- No processing done
icn_Error   CONSTANT typn_RetCode := -1;      -- Error

-- Sub procedure validation TRUE, FALSE
icn_True    CONSTANT typn_RetCode := 1;  -- True
icn_False   CONSTANT typn_RetCode := 0;  -- False

/*---------------------------------- Procedures -----------------------------*/

PROCEDURE DeletePlan (
      an_PpcDbId       IN ppc_plan.ppc_db_id%TYPE,
      an_PpcId         IN ppc_plan.ppc_id%TYPE,
      on_Return        OUT typn_RetCode
   );
PROCEDURE DeleteTask (
      an_PpcTaskDbId   IN ppc_task.ppc_task_db_id%TYPE,
      an_PpcTaskId     IN ppc_task.ppc_task_id%TYPE,
      on_Return        OUT typn_RetCode
   );
PROCEDURE DeleteWp (
      an_WpDbId        IN ppc_wp.ppc_wp_db_id%TYPE,
      an_WpId          IN ppc_wp.ppc_wp_id%TYPE,
      on_Return        OUT typn_RetCode
   );
PROCEDURE DeleteLocation (
      an_LocDbId       IN ppc_loc.ppc_loc_db_id%TYPE,
      an_LocId         IN ppc_loc.ppc_loc_id%TYPE,
      on_Return        OUT typn_RetCode
   );
PROCEDURE UpdateLabourRoleHr (
   an_LabourRoleDbId   IN    sched_labour_role_status.labour_role_db_id%TYPE,
   an_LabourRoleId     IN    sched_labour_role_status.labour_role_id%TYPE,
   an_HrDbId           IN    sched_labour_role_status.hr_db_id%TYPE,
   an_HrId             IN    sched_labour_role_status.hr_id%TYPE,
   on_RoleStatusDbId   OUT   sched_labour_role_status.labour_role_status_db_id%TYPE,
   on_RoleStatusCd     OUT   sched_labour_role_status.labour_role_status_cd%TYPE,
   on_Return           OUT   typn_RetCode
);
PROCEDURE DeleteTaskDefinition (
      an_TaskDefnDbId       IN ppc_task_defn.ppc_task_defn_db_id%TYPE,
      an_TaskDefnId         IN ppc_task_defn.ppc_task_defn_id%TYPE,
      on_Return             OUT typn_RetCode
   );
PROCEDURE DeleteLabour (
      an_PpcWpDbId       IN ppc_wp.ppc_wp_db_id%TYPE,
      an_PpcWpId         IN ppc_wp.ppc_wp_id%TYPE,
      on_Return             OUT typn_RetCode
   ); 
PROCEDURE DeleteCapacityPattern (
      an_PpcCapacityDbId       IN ppc_loc_capacity.ppc_capacity_db_id%TYPE,
      an_PpcCapacityId         IN ppc_loc_capacity.ppc_capacity_id%TYPE,
      on_Return             OUT typn_RetCode
   ); 
PROCEDURE RefreshPlanDates (
      an_PpcDbId       IN ppc_plan.ppc_db_id%TYPE,
      an_PpcId         IN ppc_plan.ppc_id%TYPE,
      on_Return        OUT typn_RetCode
   );
END PPC_PKG;
/

--changeSet DEV-685_PPC_MasterMigr:329 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
CREATE OR REPLACE PACKAGE BODY PPC_PKG IS


/********************************************************************************
*
* Procedure: DeletePlan
* Arguments:
*            an_PlanDbId production plan pk
*            an_PlanId   -- // --
*
* Return:
*            on_Return         1 is success
*
* Description: This procedure deletes all data related to a specific plan
*
*
* Orig.Coder:     Jonathan R. Clarkin
* Recent Coder:
* Recent Date:    April 28, 2010
*
*********************************************************************************
*
* Copyright 2000-2010 Mxi Technologies Ltd.  All Rights Reversed.
* Any distribution of the Mxi source code by any other party than
* Mxi Technologies Ltd is prohibited.
*
*********************************************************************************/

PROCEDURE DeletePlan (
      an_PpcDbId        IN ppc_plan.ppc_db_id%TYPE,
      an_PpcId          IN ppc_plan.ppc_id%TYPE,
      on_Return         OUT typn_RetCode
   ) IS

   /* *** DECLARE CURSORS *** */
   ln_RootLocDbId                ppc_loc.ppc_loc_db_id%TYPE;
   ln_RootLocId                  ppc_loc.ppc_loc_id%TYPE;

BEGIN
   on_Return := icn_NoProc;

   SELECT
      ppc_loc.ppc_loc_db_id,
      ppc_loc.ppc_loc_id
   INTO
      ln_RootLocDbId,
      ln_RootLocId
   FROM
      ppc_loc
   WHERE
      ppc_loc.ppc_db_id = an_PpcDbId AND
      ppc_loc.ppc_id = an_PpcId
      AND
      ppc_loc.nh_ppc_loc_db_id IS NULL AND
      ppc_loc.nh_ppc_loc_id IS NULL;

   /* *** Delete all the Locations of the Plan, starting at the Root ****/
   DeleteLocation( ln_RootLocDbId, ln_RootLocId, on_Return );

   /* *** Delete all Plan level data ****/
   -- Del: ppc_hr_lic
   DELETE FROM
   (
       SELECT
           ppc_hr_lic.ppc_hr_lic_db_id,
           ppc_hr_lic.ppc_hr_lic_id
       FROM
           ppc_hr_lic
           INNER JOIN ppc_hr ON
               ppc_hr.ppc_hr_db_id = ppc_hr_lic.ppc_hr_db_id AND
               ppc_hr.ppc_hr_id    = ppc_hr_lic.ppc_hr_id
       WHERE
           ppc_hr.ppc_db_id = an_PpcDbId AND
           ppc_hr.ppc_id    = an_PpcId
   );
   -- Del: ppc_hr
   DELETE ppc_hr
   WHERE
      ppc_hr.ppc_db_id = an_PpcDbId AND
      ppc_hr.ppc_id    = an_PpcId;

   -- Del: ppc_loc_exclude
   DELETE FROM ppc_loc_exclude
   WHERE
      ppc_loc_exclude.ppc_db_id = an_PpcDbId AND
      ppc_loc_exclude.ppc_id = an_PpcId;
   -- Del: ppc_opt_status
   DELETE FROM ppc_opt_status
   WHERE
      ppc_opt_status.ppc_db_id = an_PpcDbId AND
      ppc_opt_status.ppc_id = an_PpcId;
   -- Del: ppc_plan
   DELETE FROM ppc_plan
   WHERE
      ppc_plan.ppc_db_id = an_PpcDbId AND
      ppc_plan.ppc_id = an_PpcId;

   -- Return success
   on_Return := icn_Success;

EXCEPTION

   WHEN OTHERS THEN
      -- Unexpected error
      on_Return := icn_Error;
      APPLICATION_OBJECT_PKG.SetMxiError('DEV-99999','ppc_pkg@@@DeletePlan@@@'||SQLERRM);
      RETURN;

END DeletePlan;

/********************************************************************************
*
* Procedure: DeleteTask
* Arguments:
*            an_PpcTaskDbId ppc task pk
*            an_PpcTaskId   -- // --
*
* Return:
*            on_Return         1 is success
*
* Description: This procedure deletes all data related to a specific ppc task
*
*
* Orig.Coder:     Jonathan R. Clarkin
* Recent Coder:
* Recent Date:    April 28, 2010
*
*********************************************************************************
*
* Copyright 2000-2010 Mxi Technologies Ltd.  All Rights Reversed.
* Any distribution of the Mxi source code by any other party than
* Mxi Technologies Ltd is prohibited.
*
*********************************************************************************/

PROCEDURE DeleteTask (
      an_PpcTaskDbId      IN ppc_task.ppc_task_db_id%TYPE,
      an_PpcTaskId        IN ppc_task.ppc_task_id%TYPE,
      on_Return           OUT typn_RetCode
   ) IS

BEGIN
   on_Return := icn_NoProc;

   /* *** Delete a single Task from the PPC Work Package ****/

   -- Del: ppc_publish_failure
   DELETE FROM ppc_publish_failure
   WHERE 
      ppc_publish_failure.ppc_task_db_id = an_PpcTaskDbId AND
      ppc_publish_failure.ppc_task_id = an_PpcTaskId;
   -- Del: ppc_hr_slot
   DELETE FROM ppc_hr_slot
   WHERE
      ( ppc_hr_slot_db_id, ppc_hr_slot_id )
      IN
      (  SELECT ppc_hr_slot_db_id, ppc_hr_slot_id
         FROM
            ppc_hr_slot
            INNER JOIN ppc_labour_role ON
               ppc_labour_role.labour_role_db_id = ppc_hr_slot.labour_role_db_id AND
               ppc_labour_role.labour_role_id = ppc_hr_slot.labour_role_id
            INNER JOIN ppc_labour ON
               ppc_labour.labour_db_id = ppc_labour_role.labour_db_id AND
               ppc_labour.labour_id = ppc_labour_role.labour_id
         WHERE
            ppc_labour.ppc_task_db_id = an_PpcTaskDbId AND
            ppc_labour.ppc_task_id = an_PpcTaskId
      );
   -- Del: ppc_labour_role
   DELETE FROM ppc_labour_role
   WHERE
      (  labour_role_db_id, labour_role_id )
      IN
      (  SELECT labour_role_db_id, labour_role_id
         FROM
            ppc_labour_role
            INNER JOIN ppc_labour ON
               ppc_labour.labour_db_id = ppc_labour_role.labour_db_id AND
               ppc_labour.labour_id = ppc_labour_role.labour_id
         WHERE
            ppc_labour.ppc_task_db_id = an_PpcTaskDbId AND
            ppc_labour.ppc_task_id = an_PpcTaskId
      );
   -- Del: ppc_labour
   DELETE FROM ppc_labour
   WHERE
      ppc_labour.ppc_task_db_id = an_PpcTaskDbId AND
      ppc_labour.ppc_task_id = an_PpcTaskId;
   -- Del: ppc_task_defn_map
   DELETE FROM ppc_task_defn_map
   WHERE
      ppc_task_defn_map.ppc_task_db_id = an_PpcTaskDbId AND
      ppc_task_defn_map.ppc_task_id = an_PpcTaskId;
   -- Del: ppc_task
   DELETE FROM ppc_task
   WHERE
      ppc_task.ppc_task_db_id = an_PpcTaskDbId AND
      ppc_task.ppc_task_id = an_PpcTaskId;
   -- Del: ppc_dependency
   DELETE FROM ppc_dependency
   WHERE
      ppc_dependency.from_activity_db_id = an_PpcTaskDbId AND
      ppc_dependency.from_activity_id = an_PpcTaskId;
   DELETE FROM ppc_dependency
   WHERE
      ppc_dependency.to_activity_db_id = an_PpcTaskDbId AND
      ppc_dependency.to_activity_id = an_PpcTaskId;
   -- Del: ppc_activity
   DELETE FROM ppc_activity
   WHERE
      ppc_activity.ppc_activity_db_id = an_PpcTaskDbId AND
      ppc_activity.ppc_activity_id = an_PpcTaskId;

   -- Return success
   on_Return := icn_Success;

EXCEPTION

   WHEN OTHERS THEN
      -- Unexpected error
      on_Return := icn_Error;
      APPLICATION_OBJECT_PKG.SetMxiError('DEV-99999','ppc_pkg@@@DeleteTask@@@'||SQLERRM);
      RETURN;

END DeleteTask;

/********************************************************************************
*
* Procedure: DeleteWP
* Arguments:
*            an_PpcWpDbId ppc work package pk
*            an_PpcWpId   -- // --
*
* Return:
*            on_Return         1 is success
*
* Description: This procedure deletes all data related to a specific ppc work package
*
*
* Orig.Coder:     Jonathan R. Clarkin
* Recent Coder:
* Recent Date:    April 28, 2010
*
*********************************************************************************
*
* Copyright 2000-2010 Mxi Technologies Ltd.  All Rights Reversed.
* Any distribution of the Mxi source code by any other party than
* Mxi Technologies Ltd is prohibited.
*
*********************************************************************************/

PROCEDURE DeleteWp (
      an_WpDbId        IN ppc_wp.ppc_wp_db_id%TYPE,
      an_WpId          IN ppc_wp.ppc_wp_id%TYPE,
      on_Return        OUT typn_RetCode
   ) IS

   /* *** DECLARE CURSORS *** */

   CURSOR lcur_TaskList (
      an_WpDbId        ppc_wp.ppc_wp_db_id%TYPE,
      an_WpId          ppc_wp.ppc_wp_id%TYPE
   ) IS
      SELECT
         ppc_task.ppc_task_db_id,
         ppc_task.ppc_task_id
      FROM
         ppc_task
         INNER JOIN ppc_activity ON
            ppc_activity.ppc_activity_db_id = ppc_task.ppc_task_db_id AND
            ppc_activity.ppc_activity_id = ppc_task.ppc_task_id
      WHERE
         ppc_activity.ppc_wp_db_id = an_WpDbId AND
         ppc_activity.ppc_wp_id = an_WpId;
   lrec_TaskList  lcur_TaskList%ROWTYPE;

BEGIN

   on_Return := icn_NoProc;

   /* *** Delete all the Tasks of the Work Package ****/
   FOR lrec_TaskList IN lcur_TaskList( an_WpDbId, an_WpId )
   LOOP
      DeleteTask( lrec_TaskList.ppc_task_db_id, lrec_TaskList.ppc_task_id, on_Return );
   END LOOP;

   /* *** Delete all the Work Package data ****/

   -- Clear: ppc_phase Nullable FKs
   UPDATE ppc_phase
   SET
      nr_phase_db_id = NULL,
      nr_phase_id = NULL,
      nr_start_milestone_db_id = NULL,
      nr_start_milestone_id = NULL,
      nr_end_milestone_db_id = NULL,
      nr_end_milestone_id = NULL
   WHERE
      ( ppc_phase_db_id, ppc_phase_id )
      IN
      (  SELECT ppc_activity_db_id, ppc_activity_id
         FROM
            ppc_activity
         WHERE
            ppc_activity.ppc_wp_db_id = an_WpDbId AND
            ppc_activity.ppc_wp_id = an_WpId
      );
   -- Clear: ppc_wp Nullable FKs
   UPDATE ppc_wp
   SET
      nr_phase_db_id = NULL,
      nr_phase_id = NULL
   WHERE
      ppc_wp_db_id = an_WpDbId AND
      ppc_wp_id = an_WpDbId;

   -- Del: ppc_phase_class
   DELETE ppc_phase_class
   WHERE
      ( ppc_phase_class_db_id, ppc_phase_class_id )
      IN
      (  SELECT ppc_phase_class_db_id, ppc_phase_class_id
         FROM
            ppc_phase_class
            INNER JOIN ppc_activity ON
               ppc_activity.ppc_activity_db_id = ppc_phase_class.ppc_phase_db_id AND
               ppc_activity.ppc_activity_id = ppc_phase_class.ppc_phase_id
         WHERE
            ppc_activity.ppc_wp_db_id = an_WpDbId AND
            ppc_activity.ppc_wp_id = an_WpId
      );
   -- Del: ppc_phase
   DELETE ppc_phase
   WHERE
      ( ppc_phase_db_id, ppc_phase_id )
      IN
      (  SELECT ppc_activity_db_id, ppc_activity_id
         FROM
            ppc_activity
         WHERE
            ppc_activity.ppc_wp_db_id = an_WpDbId AND
            ppc_activity.ppc_wp_id = an_WpId
      );
   -- Del: ppc_work_area_zone
   DELETE ppc_work_area_zone
   WHERE
      ( ppc_work_area_zone_db_id, ppc_work_area_zone_id )
      IN
      (  SELECT ppc_work_area_zone_db_id, ppc_work_area_zone_id
         FROM
            ppc_work_area_zone
            INNER JOIN ppc_activity ON
               ppc_activity.ppc_activity_db_id = ppc_work_area_zone.ppc_work_area_db_id AND
               ppc_activity.ppc_activity_id = ppc_work_area_zone.ppc_work_area_id
         WHERE
            ppc_activity.ppc_wp_db_id = an_WpDbId AND
            ppc_activity.ppc_wp_id = an_WpId
      );
    -- Del: ppc_work_area_crew
    DELETE ppc_work_area_crew
    WHERE
       EXISTS
       (
           SELECT 1
           FROM
               ppc_work_area_crew
           INNER JOIN ppc_activity ON
               ppc_activity.ppc_activity_db_id = ppc_work_area_crew.ppc_work_area_db_id AND
               ppc_activity.ppc_activity_id    = ppc_work_area_crew.ppc_work_area_id
           WHERE
               ppc_activity.ppc_wp_db_id = an_WpDbId AND
               ppc_activity.ppc_wp_id    = an_WpId
       );
   -- Del: ppc_work_area
   DELETE ppc_work_area
   WHERE
      ( ppc_work_area_db_id, ppc_work_area_id )
      IN
      (  SELECT ppc_activity_db_id, ppc_activity_id
         FROM
            ppc_activity
         WHERE
            ppc_activity.ppc_wp_db_id = an_WpDbId AND
            ppc_activity.ppc_wp_id = an_WpId
      );

   -- Del: ppc_milestone_cond
   DELETE ppc_milestone_cond
   WHERE
      ( ppc_milestone_db_id, ppc_milestone_id )
      IN
      (  SELECT ppc_milestone_db_id, ppc_milestone_id
         FROM
            ppc_milestone_cond
            INNER JOIN ppc_activity ON
               ppc_activity.ppc_activity_db_id = ppc_milestone_cond.ppc_milestone_db_id AND
               ppc_activity.ppc_activity_id = ppc_milestone_cond.ppc_milestone_id
         WHERE
            ppc_activity.ppc_wp_db_id = an_WpDbId AND
            ppc_activity.ppc_wp_id = an_WpId
      );
   -- Del: ppc_milestone
   DELETE ppc_milestone
   WHERE
      ( ppc_milestone_db_id, ppc_milestone_id )
      IN
      (  SELECT ppc_activity_db_id, ppc_activity_id
         FROM
            ppc_activity
         WHERE
            ppc_activity.ppc_wp_db_id = an_WpDbId AND
            ppc_activity.ppc_wp_id = an_WpId
      );

   -- Del: ppc_task_defn_map
   DELETE ppc_task_defn_map
   WHERE
      ( ppc_task_defn_db_id, ppc_task_defn_id )
      IN
      (
        SELECT
            ppc_task_defn_db_id,
            ppc_task_defn_id
        FROM
            ppc_task_defn
        WHERE
            ppc_task_defn.ppc_wp_db_id = an_WpDbId AND
            ppc_task_defn.ppc_wp_id    = an_WpId
       );

   -- Del: ppc_task_defn
   DELETE ppc_task_defn
   WHERE
        ppc_task_defn.ppc_wp_db_id = an_WpDbId AND
        ppc_task_defn.ppc_wp_id    = an_WpId;

   -- Del: ppc_dependency
   DELETE FROM ppc_dependency
   WHERE
      ( from_activity_db_id, from_activity_id )
      IN
      (  SELECT ppc_activity_db_id, ppc_activity_id
         FROM
            ppc_activity
         WHERE
            ppc_activity.ppc_wp_db_id = an_WpDbId AND
            ppc_activity.ppc_wp_id = an_WpId
      );
   DELETE FROM ppc_dependency
   WHERE
      ( to_activity_db_id, to_activity_id )
      IN
      (  SELECT ppc_activity_db_id, ppc_activity_id
         FROM
            ppc_activity
         WHERE
            ppc_activity.ppc_wp_db_id = an_WpDbId AND
            ppc_activity.ppc_wp_id = an_WpId
      );
   -- Del: ppc_activity
   DELETE FROM ppc_activity
   WHERE
      ppc_activity.ppc_wp_db_id = an_WpDbId AND
      ppc_activity.ppc_wp_id = an_WpId;

   -- Del: ppc_publish_failure
   DELETE FROM ppc_publish_failure
   WHERE
      ppc_publish_failure.ppc_wp_db_id = an_WpDbId AND
      ppc_publish_failure.ppc_wp_id = an_WpId;
   -- Del: ppc_publish
   DELETE FROM ppc_publish
   WHERE
      ppc_publish.ppc_wp_db_id = an_WpDbId AND
      ppc_publish.ppc_wp_id = an_WpId;

   -- Del: ppc_planning_skill
   DELETE FROM ppc_planning_type_skill
   WHERE
      ppc_planning_type_skill.ppc_wp_db_id = an_WpDbId AND
      ppc_planning_type_skill.ppc_wp_id = an_WpId;
   -- Del: ppc_planning_type
   DELETE FROM ppc_planning_type
   WHERE
      ppc_planning_type.ppc_wp_db_id = an_WpDbId AND
      ppc_planning_type.ppc_wp_id = an_WpId;

   -- Del: ppc_wp
   DELETE FROM ppc_wp
   WHERE
      ppc_wp.ppc_wp_db_id = an_WpDbId AND
      ppc_wp.ppc_wp_id = an_WpId;

   -- Return success
   on_Return := icn_Success;

EXCEPTION

   WHEN OTHERS THEN
      -- Unexpected error
      on_Return := icn_Error;
      APPLICATION_OBJECT_PKG.SetMxiError('DEV-99999','ppc_pkg@@@DeleteWp@@@'||SQLERRM);
      RETURN;

END DeleteWp;

/********************************************************************************
*
* Procedure: DeleteLocation
* Arguments:
*            an_PpcLocDbId ppc location pk
*            an_PpcLocId   -- // --
*
* Return:
*            on_Return         1 is success
*
* Description: This procedure deletes all data related to a specific ppc location
*
*
* Orig.Coder:     Jonathan R. Clarkin
* Recent Coder:   Edo
* Recent Date:    November 10,2010
*
*********************************************************************************
*
* Copyright 2000-2010 Mxi Technologies Ltd.  All Rights Reversed.
* Any distribution of the Mxi source code by any other party than
* Mxi Technologies Ltd is prohibited.
*
*********************************************************************************/

PROCEDURE DeleteLocation (
      an_LocDbId    IN ppc_loc.ppc_loc_db_id%TYPE,
      an_LocId      IN ppc_loc.ppc_loc_id%TYPE,
      on_Return        OUT typn_RetCode
   ) IS

   ln_LocDbId                ppc_loc.ppc_loc_db_id%TYPE;
   ln_LocId                  ppc_loc.ppc_loc_id%TYPE;

   /* *** DECLARE CURSORS *** */

   CURSOR lcur_LocationList (
      an_LocDbId        ppc_loc.ppc_loc_db_id%TYPE,
      an_LocId          ppc_loc.ppc_loc_id%TYPE
   ) IS
      SELECT
         ppc_loc.ppc_loc_db_id,
         ppc_loc.ppc_loc_id
      FROM
         ppc_loc
      START WITH
         ppc_loc.ppc_loc_db_id = an_LocDbId AND
         ppc_loc.ppc_loc_id = an_LocId
      CONNECT BY
         ppc_loc.nh_ppc_loc_db_id = PRIOR ppc_loc.ppc_loc_db_id AND
         ppc_loc.nh_ppc_loc_id = PRIOR ppc_loc.ppc_loc_id
      ORDER BY LEVEL DESC;
   lrec_LocationList  lcur_LocationList%ROWTYPE;

   CURSOR lcur_WpList (
      an_LocDbId        ppc_loc.ppc_loc_db_id%TYPE,
      an_LocId          ppc_loc.ppc_loc_id%TYPE
   ) IS
      SELECT
         ppc_wp.ppc_wp_db_id,
         ppc_wp.ppc_wp_id
      FROM
         ppc_wp
      WHERE
         ppc_wp.ppc_loc_db_id = an_LocDbId AND
         ppc_wp.ppc_loc_id = an_LocId;
   lrec_WpList  lcur_WpList%ROWTYPE;

   CURSOR lcur_ShiftList (
      an_LocDbId        ppc_loc.ppc_loc_db_id%TYPE,
      an_LocId          ppc_loc.ppc_loc_id%TYPE
   ) IS
      SELECT
         ppc_hr_shift_plan.ppc_hr_shift_db_id,
         ppc_hr_shift_plan.ppc_hr_shift_id
      FROM
         ppc_hr_shift_plan
      WHERE
         ppc_hr_shift_plan.ppc_loc_db_id = an_LocDbId AND
         ppc_hr_shift_plan.ppc_loc_id = an_LocId;
   lrec_ShiftList  lcur_ShiftList%ROWTYPE;

BEGIN
   on_Return := icn_NoProc;

   /* *** Delete all the children locations and this location ****/
   FOR lrec_LocationList IN lcur_LocationList( an_LocDbId, an_LocId )
   LOOP
      ln_LocDbId := lrec_LocationList.ppc_loc_db_id;
      ln_LocId := lrec_LocationList.ppc_loc_id;

      /* *** Delete all the Work Packages of the Location ****/
      FOR lrec_WpList IN lcur_WpList( ln_LocDbId, ln_LocId )
      LOOP
         DeleteWp( lrec_WpList.ppc_wp_db_id, lrec_WpList.ppc_wp_id, on_Return );
      END LOOP;


     /* *** Delete all the Location data ****/
     
     -- Del: ppc_hr_lic
     DELETE ppc_hr_lic
     WHERE
       EXISTS
       (
           SELECT 1
           FROM
               ppc_hr_shift_plan
           WHERE
               ppc_hr_shift_plan.ppc_loc_db_id = ln_LocDbId AND
               ppc_hr_shift_plan.ppc_loc_id    = ln_LocId
               AND
               ppc_hr_lic.ppc_hr_shift_db_id = ppc_hr_shift_plan.ppc_hr_shift_db_id AND
               ppc_hr_lic.ppc_hr_shift_id    = ppc_hr_shift_plan.ppc_hr_shift_id
       );

     -- Del: ppc_hr_shift_plan 
     DELETE ppc_hr_shift_plan
     WHERE
          ppc_hr_shift_plan.ppc_loc_db_id = ln_LocDbId AND
          ppc_hr_shift_plan.ppc_loc_id    = ln_LocId;

      -- Del: ppc_loc_capacity
      DELETE ppc_loc_capacity
      WHERE
         ppc_loc_capacity.ppc_loc_db_id = ln_LocDbId AND
         ppc_loc_capacity.ppc_loc_id = ln_LocId;
      -- Del: ppc_crew
      DELETE ppc_crew
      WHERE
         ppc_crew.ppc_loc_db_id = ln_LocDbId AND
         ppc_crew.ppc_loc_id = ln_LocId;
      -- Del: ppc_loc
      DELETE ppc_loc
      WHERE
         ppc_loc.ppc_loc_db_id = ln_LocDbId AND
         ppc_loc.ppc_loc_id = ln_LocId;

   END LOOP;

    -- Del: ppc_hr
    DELETE ppc_hr
    WHERE
       (  
          SELECT COUNT(1)
          FROM
             ppc_hr_shift_plan
             WHERE
             ppc_hr_shift_plan.ppc_hr_db_id = ppc_hr.ppc_hr_db_id AND
             ppc_hr_shift_plan.ppc_hr_id    = ppc_hr.ppc_hr_id

       ) = 0;
   
   -- Return success
   on_Return := icn_Success;

EXCEPTION

   WHEN OTHERS THEN
      -- Unexpected error
      on_Return := icn_Error;
      APPLICATION_OBJECT_PKG.SetMxiError('DEV-99999','ppc_pkg@@@DeleteLocation@@@'||SQLERRM);
      RETURN;

END DeleteLocation;



/********************************************************************************
*
* Procedure: UpdateLabourRoleHr
* Arguments:
*            an_LabourRoleDbId   labour role key
*            an_LabourRoleId     -- // --
*            an_HrDbId           hr key
*            an_HrId             -- // --
*
* Return:
*            on_RoleStatusDbId   role status key (if COMPLETE or CANCEL)
*            on_RoleStatusCd     -- // --
*            on_Return           1 if record updated, otherwise 0
*
* Description: This procedure updates the hr key in the sched_labour_role_status
*              table provided the hr key has changed and the status is neither
*              COMPLETE or CANCEL.
*
* Orig.Coder:     ahogan
* Recent Coder:
* Recent Date:    May 05, 2010
*
*********************************************************************************
*
* Copyright 2000-2010 Mxi Technologies Ltd.  All Rights Reversed.
* Any distribution of the Mxi source code by any other party than
* Mxi Technologies Ltd is prohibited.
*
*********************************************************************************/

PROCEDURE UpdateLabourRoleHr (
   an_LabourRoleDbId   IN    sched_labour_role_status.labour_role_db_id%TYPE,
   an_LabourRoleId     IN    sched_labour_role_status.labour_role_id%TYPE,
   an_HrDbId           IN    sched_labour_role_status.hr_db_id%TYPE,
   an_HrId             IN    sched_labour_role_status.hr_id%TYPE,
   on_RoleStatusDbId   OUT   sched_labour_role_status.labour_role_status_db_id%TYPE,
   on_RoleStatusCd     OUT   sched_labour_role_status.labour_role_status_cd%TYPE,
   on_Return           OUT   typn_RetCode
)
IS
   ln_StatusDbId             sched_labour_role_status.status_db_id%TYPE;
   ln_StatusId               sched_labour_role_status.status_id%TYPE;
   ln_StatusOrd              sched_labour_role_status.status_ord%TYPE;
   ln_LabourRoleStatusDbId   sched_labour_role_status.labour_role_status_db_id%TYPE;
   ln_LabourRoleStatusCd     sched_labour_role_status.labour_role_status_cd%TYPE;
   ln_HrDbId                 sched_labour_role_status.hr_db_id%TYPE;
   ln_HrId                   sched_labour_role_status.hr_id%TYPE;

BEGIN

   on_Return := icn_False;

   -- get current sched_labour_role_status
   SELECT
      sched_labour_role_status.status_db_id,
      sched_labour_role_status.status_id,
      sched_labour_role_status.status_ord,
      sched_labour_role_status.labour_role_status_db_id,
      sched_labour_role_status.labour_role_status_cd,
      sched_labour_role_status.hr_db_id,
      sched_labour_role_status.hr_id
   INTO
      ln_StatusDbId,
      ln_StatusId,
      ln_StatusOrd,
      ln_LabourRoleStatusDbId,
      ln_LabourRoleStatusCd,
      ln_HrDbId,
      ln_HrId
   FROM
      sched_labour_role
   INNER JOIN sched_labour ON
      sched_labour.labour_db_id = sched_labour_role.labour_db_id AND
      sched_labour.labour_id    = sched_labour_role.labour_id
   INNER JOIN sched_labour_role_status ON
      sched_labour_role_status.labour_role_db_id = sched_labour_role.labour_role_db_id AND
      sched_labour_role_status.labour_role_id    = sched_labour_role.labour_role_id AND
      sched_labour_role_status.status_ord        = sched_labour.current_status_ord
   WHERE
      sched_labour_role.labour_role_db_id = an_LabourRoleDbId AND
      sched_labour_role.labour_role_id    = an_LabourRoleId;

   -- check if hr key is different, only update the hr if it has changed
   IF nvl(ln_HrDbId, -1) != nvl(an_HrDbId,-1) OR nvl(ln_HrId,-1) != nvl(an_HrId,-1) THEN

      IF ln_LabourRoleStatusDbId=0 THEN
         IF ln_LabourRoleStatusCd='COMPLETE' OR ln_LabourRoleStatusCd='CANCEL' THEN
            -- if complete or cancel then return the status key
            on_RoleStatusDbId := ln_LabourRoleStatusDbId;
            on_RoleStatusCd   := ln_LabourRoleStatusCd;

         ELSE
            -- otherwise, update the hr key for the current sched_labour_role_status
            UPDATE
               sched_labour_role_status
            SET
               hr_db_id = an_HrDbId,
               hr_id    = an_HrId
            WHERE
               status_db_id = ln_StatusDbId AND
               status_id    = ln_StatusId AND
               status_ord   = ln_StatusOrd;

            on_Return := icn_True;

         END IF;
      END IF;
   END IF;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      -- no data found
      on_Return := icn_Error;
      APPLICATION_OBJECT_PKG.SetMxiError('PPC-99998','ppc_pkg@@@UpdateLabourRoleHr@@@'||SQLERRM);
      RETURN;

   WHEN OTHERS THEN
      -- Unexpected error
      on_Return := icn_Error;
      APPLICATION_OBJECT_PKG.SetMxiError('DEV-99999','ppc_pkg@@@UpdateLabourRoleHr@@@'||SQLERRM);
      RETURN;

END UpdateLabourRoleHr;

/********************************************************************************
*
* Procedure: DeleteTaskDefinition
* Arguments:
*            an_TaskDefnDbId ppc task definition pk
*            an_TaskDefnId   -- // --
*
* Return:
*            on_Return         1 is success
*
* Description: This procedure deletes all data related to a specific ppc task definition
*
*
* Orig.Coder:     Elise Do
* Recent Coder:
* Recent Date:    July 7, 2010
*
*********************************************************************************
*
* Copyright 2000-2010 Mxi Technologies Ltd.  All Rights Reversed.
* Any distribution of the Mxi source code by any other party than
* Mxi Technologies Ltd is prohibited.
*
*********************************************************************************/

PROCEDURE DeleteTaskDefinition (
      an_TaskDefnDbId    IN ppc_task_defn.ppc_task_defn_db_id%TYPE,
      an_TaskDefnId      IN ppc_task_defn.ppc_task_defn_id%TYPE,
      on_Return        OUT typn_RetCode
   ) IS

   /* Determine if there are any tasks associate with this task definition only */
   CURSOR lcur_TaskList  IS
      SELECT
         ppc_task.ppc_task_db_id,
         ppc_task.ppc_task_id
      FROM
         ppc_task
         INNER JOIN ppc_task_defn_map ON
               ppc_task_defn_map.ppc_task_db_id = ppc_task.ppc_task_db_id AND
               ppc_task_defn_map.ppc_task_id    = ppc_task.ppc_task_id
      WHERE
         ppc_task_defn_map.ppc_task_defn_db_id = an_TaskDefnDbId AND
         ppc_task_defn_map.ppc_task_defn_id    = an_TaskDefnId
         AND
         ( ppc_task.ppc_task_db_id, ppc_task.ppc_task_id )
         NOT IN
         (
             SELECT
                 ppc_task_db_id,
                 ppc_task_id
             FROM
                 ppc_task_defn_map
             WHERE
                 NOT
                 (
                    ppc_task_defn_map.ppc_task_defn_db_id = an_TaskDefnDbId AND
                    ppc_task_defn_map.ppc_task_defn_id    = an_TaskDefnId
                 )
                 AND
                 (
                    ppc_task_defn_map.ppc_task_db_id = ppc_task.ppc_task_db_id AND
                    ppc_task_defn_map.ppc_task_id    = ppc_task.ppc_task_id
                 )
         );
 lrec_TaskList  lcur_TaskList%ROWTYPE;

BEGIN
   on_Return := icn_NoProc;

   OPEN lcur_TaskList;

    /* Del: ppc_task_defn_map */
   DELETE ppc_task_defn_map
   WHERE
        ppc_task_defn_db_id = an_TaskDefnDbId AND
        ppc_task_defn_id    = an_TaskDefnId;

   LOOP
        FETCH lcur_TaskList INTO lrec_TaskList;
        DeleteTask( lrec_TaskList.ppc_task_db_id, lrec_TaskList.ppc_task_id, on_Return );
        EXIT WHEN lcur_TaskList%NOTFOUND;
   END LOOP;

   /* Del: ppc_task_defn */
   DELETE ppc_task_defn
   WHERE
        ppc_task_defn_db_id = an_TaskDefnDbId AND
        ppc_task_defn_id    = an_TaskDefnId;

   CLOSE lcur_TaskList;

EXCEPTION

   WHEN OTHERS THEN
      -- Unexpected error
      on_Return := icn_Error;
      APPLICATION_OBJECT_PKG.SetMxiError('DEV-99999','ppc_pkg@@@DeleteTaskDefinition@@@'||SQLERRM);
      RETURN;

END DeleteTaskDefinition;


/********************************************************************************
*
* Procedure: DeleteLabour
* Arguments:
*            an_PpcWpDbId Work packge pk
*            an_PpcWpId   -- // --
*
* Return:
*            on_Return         1 is success
*
* Description: This procedure deletes all data related to a specific work package
*
*
* Orig.Coder:     Elise Do
* Recent Coder:
* Recent Date:    August 15, 2010
*
*********************************************************************************
*
* Copyright 2000-2010 Mxi Technologies Ltd.  All Rights Reversed.
* Any distribution of the Mxi source code by any other party than
* Mxi Technologies Ltd is prohibited.
*
*********************************************************************************/

PROCEDURE DeleteLabour (
      an_PpcWpDbId       IN ppc_wp.ppc_wp_db_id%TYPE,
      an_PpcWpId         IN ppc_wp.ppc_wp_id%TYPE,
      on_Return        OUT typn_RetCode
   ) IS

BEGIN

   on_Return := icn_NoProc;

   -- Del: ppc_hr_slot
   DELETE FROM
   (
      SELECT
         ppc_hr_slot.ppc_hr_slot_db_id,
         ppc_hr_slot.ppc_hr_slot_id
      FROM
         ppc_hr_slot
         INNER JOIN ppc_labour_role ON
               ppc_hr_slot.labour_role_db_id = ppc_labour_role.labour_role_db_id AND
               ppc_hr_slot.labour_role_id    = ppc_labour_role.labour_role_id
         INNER JOIN ppc_labour ON
               ppc_labour.labour_db_id = ppc_labour_role.labour_db_id AND
               ppc_labour.labour_id    = ppc_labour_role.labour_id
         INNER JOIN ppc_task ON
               ppc_task.ppc_task_db_id = ppc_labour.ppc_task_db_id AND
               ppc_task.ppc_task_id    = ppc_labour.ppc_task_id
         INNER JOIN ppc_activity ON
               ppc_activity.ppc_activity_db_id = ppc_task.ppc_task_db_id AND
               ppc_activity.ppc_activity_id    = ppc_task.ppc_task_id
      WHERE
         ppc_activity.ppc_wp_db_id = an_PpcWpDbId AND
         ppc_activity.ppc_wp_id    = an_PpcWpId
    );

    --Del: ppc_labour_role
    DELETE FROM
    (
       SELECT
           ppc_labour_role.labour_role_db_id,
           ppc_labour_role.labour_role_id
       FROM
           ppc_labour_role
           INNER JOIN ppc_labour ON
                 ppc_labour.labour_db_id = ppc_labour_role.labour_db_id AND
                 ppc_labour.labour_id    = ppc_labour_role.labour_id
           INNER JOIN ppc_task ON
                 ppc_task.ppc_task_db_id = ppc_labour.ppc_task_db_id AND
                 ppc_task.ppc_task_id    = ppc_labour.ppc_task_id
           INNER JOIN ppc_activity ON
                 ppc_activity.ppc_activity_db_id = ppc_task.ppc_task_db_id AND
                 ppc_activity.ppc_activity_id    = ppc_task.ppc_task_id
       WHERE
           ppc_activity.ppc_wp_db_id = an_PpcWpDbId AND
           ppc_activity.ppc_wp_id    = an_PpcWpId
    );

    --Del: ppc_labour
    DELETE FROM
    (
       SELECT
           ppc_labour.labour_db_id,
           ppc_labour.labour_id
       FROM
           ppc_labour
           INNER JOIN ppc_task ON
                 ppc_task.ppc_task_db_id = ppc_labour.ppc_task_db_id AND
                 ppc_task.ppc_task_id    = ppc_labour.ppc_task_id
           INNER JOIN ppc_activity ON
                 ppc_activity.ppc_activity_db_id = ppc_task.ppc_task_db_id AND
                 ppc_activity.ppc_activity_id    = ppc_task.ppc_task_id
       WHERE
           ppc_activity.ppc_wp_db_id = an_PpcWpDbId AND
           ppc_activity.ppc_wp_id    = an_PpcWpId
    );

EXCEPTION

   WHEN OTHERS THEN
      -- Unexpected error
      on_Return := icn_Error;
      APPLICATION_OBJECT_PKG.SetMxiError('DEV-99999','ppc_pkg@@@DeleteLabour@@@'||SQLERRM);
      RETURN;

END DeleteLabour;

/********************************************************************************
*
* Procedure: DeleteCapacityPattern
* Arguments:
*            an_PpcCapacityDbId ppc LOC_CAP pk
*            an_PpcCapacityId   -- // --
*
* Return:
*            on_Return         1 is success
*
* Description: This procedure deletes all data related to a specific ppc capacity pattern
*
*
* Orig.Coder:     Edo
* Recent Coder:   Edo
* Recent Date:    November 10, 2010
*
*********************************************************************************
*
* Copyright 2000-2010 Mxi Technologies Ltd.  All Rights Reversed.
* Any distribution of the Mxi source code by any other party than
* Mxi Technologies Ltd is prohibited.
*
*********************************************************************************/

PROCEDURE DeleteCapacityPattern (
      an_PpcCapacityDbId     IN ppc_loc_capacity.ppc_capacity_db_id%TYPE,
      an_PpcCapacityId       IN ppc_loc_capacity.ppc_capacity_id%TYPE,
      on_Return        OUT typn_RetCode
   ) IS

BEGIN
   on_Return := icn_NoProc;
   
   -- Update Slots first and set NULL to ppc HR shift if it belongs 
   --- to the Capacity pattern that will be deleted:
   UPDATE
    (
       SELECT ppc_hr_slot.ppc_hr_shift_db_id,
              ppc_hr_slot.ppc_hr_shift_id
       FROM ppc_hr_slot
            INNER JOIN ppc_hr_shift_plan ON
            ppc_hr_shift_plan.ppc_hr_shift_db_id  = ppc_hr_slot.ppc_hr_shift_db_id AND
            ppc_hr_shift_plan.ppc_hr_shift_id = ppc_hr_slot.ppc_hr_shift_id
       WHERE
        ppc_hr_shift_plan.ppc_capacity_db_id = an_PpcCapacityDbId AND
        ppc_hr_shift_plan.ppc_capacity_id    = an_PpcCapacityId
    ) 
    SET 
        ppc_hr_shift_db_id = null, 
        ppc_hr_shift_id    = null;	
   
   -- Del: ppc_hr_lic
   DELETE ppc_hr_lic
   WHERE
       EXISTS
       (
           SELECT 1 
           FROM 
               ppc_loc_capacity
               INNER JOIN ppc_hr_shift_plan ON
                     ppc_hr_shift_plan.ppc_capacity_db_id = ppc_loc_capacity.ppc_capacity_db_id AND
                     ppc_hr_shift_plan.ppc_capacity_id    = ppc_loc_capacity.ppc_capacity_id
           WHERE
               ppc_loc_capacity.ppc_capacity_db_id = an_PpcCapacityDbId AND
               ppc_loc_capacity.ppc_capacity_id    = an_PpcCapacityId
               AND
               ppc_hr_lic.ppc_hr_shift_db_id = ppc_hr_shift_plan.ppc_hr_shift_db_id AND
               ppc_hr_lic.ppc_hr_shift_id    = ppc_hr_shift_plan.ppc_hr_shift_id
       );
   
   -- Del: ppc_hr_shift_plan
   DELETE ppc_hr_shift_plan
   WHERE
      ppc_hr_shift_plan.ppc_capacity_db_id = an_PpcCapacityDbId AND
      ppc_hr_shift_plan.ppc_capacity_id    = an_PpcCapacityId;

    -- Del: ppc_hr
    DELETE ppc_hr
    WHERE
       (SELECT COUNT(1)
          FROM
             ppc_hr_shift_plan
             WHERE
             ppc_hr_shift_plan.ppc_hr_db_id = ppc_hr.ppc_hr_db_id AND
             ppc_hr_shift_plan.ppc_hr_id    = ppc_hr.ppc_hr_id

       ) = 0;

   -- Del: ppc_loc_cap
   DELETE ppc_loc_capacity
   WHERE
        ppc_loc_capacity.ppc_capacity_db_id = an_PpcCapacityDbId AND
        ppc_loc_capacity.ppc_capacity_id    = an_PpcCapacityId;

   -- Return success
   on_Return := icn_Success;

EXCEPTION

   WHEN OTHERS THEN
      -- Unexpected error
      on_Return := icn_Error;
      APPLICATION_OBJECT_PKG.SetMxiError('DEV-99999','ppc_pkg@@@DeleteCapacityPattern@@@'||SQLERRM);
      RETURN;

END DeleteCapacityPattern;


/********************************************************************************
*
* Procedure: RefreshPlanDates
* Arguments:
*            an_PpcDbId PPC PLAN pk
*            an_PpcId   -- // --
*
* Return:
*            on_Return         1 is success
*
* Description: This procedure refreshes work package, task and slot dates
*
* Orig.Coder:     Edo
* Recent Coder:   Edo
* Recent Date:    October 25, 2010
*
*********************************************************************************
*
* Copyright 2000-2010 Mxi Technologies Ltd.  All Rights Reversed.
* Any distribution of the Mxi source code by any other party than
* Mxi Technologies Ltd is prohibited.
*
*********************************************************************************/

PROCEDURE RefreshPlanDates (
      an_PpcDbId       IN ppc_plan.ppc_db_id%TYPE,
      an_PpcId         IN ppc_plan.ppc_id%TYPE,
      on_Return        OUT typn_RetCode
   ) IS

BEGIN

     on_Return := icn_NoProc;

     -- update slots: ppc_hr_slot
     UPDATE
      (
            SELECT
                 ppc_labour_role.start_dt,
                 ppc_labour_role.end_dt,
                 ppc_labour_role.labour_role_db_id AS role_db_id,
                 ppc_labour_role.labour_role_id   AS role_id
            FROM
                 ppc_wp
                 INNER JOIN ppc_activity ON
                      ppc_activity.ppc_wp_db_id = ppc_wp.ppc_wp_db_id AND
                      ppc_activity.ppc_wp_id    = ppc_wp.ppc_wp_id
                 INNER JOIN ppc_task ON
                      ppc_task.ppc_task_db_id = ppc_activity.ppc_activity_db_id AND
                      ppc_task.ppc_task_id    = ppc_activity.ppc_activity_id
                 INNER JOIN ppc_labour ON
                      ppc_labour.ppc_task_db_id = ppc_task.ppc_task_db_id AND
                      ppc_labour.ppc_task_id    = ppc_task.ppc_task_id
                 INNER JOIN ppc_labour_role ON
                      ppc_labour_role.labour_db_id = ppc_labour.labour_db_id AND
                      ppc_labour_role.labour_id    = ppc_labour.labour_id
             WHERE
                 ppc_wp.ppc_db_id = an_PpcDbId AND
                 ppc_wp.ppc_id    = an_PpcId
                 AND
                 ppc_wp.excluded_bool = 0
      )
     SET
        ( start_dt, end_dt ) = (
             SELECT
                  MIN( ppc_hr_slot.start_dt ),
                  MAX( ppc_hr_slot.end_dt )
             FROM
                  ppc_hr_slot
             WHERE
                  ppc_hr_slot.labour_role_db_id = role_db_id AND
                  ppc_hr_slot.labour_role_id    = role_id
        );

     -- update task
     UPDATE
      (
            SELECT
                 ppc_task.start_dt,
                 ppc_task.end_dt,
                 ppc_task.ppc_task_db_id AS task_db_id,
                 ppc_task.ppc_task_id AS task_id
            FROM
                 ppc_wp
                 INNER JOIN ppc_activity ON
                      ppc_activity.ppc_wp_db_id = ppc_wp.ppc_wp_db_id AND
                      ppc_activity.ppc_wp_id    = ppc_wp.ppc_wp_id
                 INNER JOIN ppc_task ON
                      ppc_task.ppc_task_db_id = ppc_activity.ppc_activity_db_id AND
                      ppc_task.ppc_task_id    = ppc_activity.ppc_activity_id
             WHERE
                 ppc_wp.ppc_db_id = an_PpcDbId AND
                 ppc_wp.ppc_id    = an_PpcId
                 AND
                 ppc_wp.excluded_bool = 0
      )
     SET
        ( start_dt, end_dt ) = (
             SELECT
                  MIN( ppc_labour_role.start_dt ),
                  MAX( ppc_labour_role.end_dt )
             FROM
                 ppc_labour 
                 INNER JOIN ppc_labour_role ON
                      ppc_labour_role.labour_db_id = ppc_labour.labour_db_id AND
                      ppc_labour_role.labour_id    = ppc_labour.labour_id
             WHERE
                  ppc_labour.ppc_task_db_id = task_db_id AND
                  ppc_labour.ppc_task_id    = task_id
        );
        
    -- update Work Packages
    UPDATE
        (
           SELECT
               ppc_wp.start_dt,
               ppc_wp.ppc_wp_db_id AS wp_db_id,
               ppc_wp.ppc_wp_id AS wp_id
           FROM
               ppc_wp
           WHERE
               ppc_wp.ppc_db_id = an_PpcDbId AND
               ppc_wp.ppc_id    = an_PpcId
               AND
               ppc_wp.excluded_bool = 0
        )
    SET
       start_dt = (
                     SELECT
                         MIN( ppc_task.start_dt ) AS ealiest_start_dt
                     FROM
                         ppc_activity
                         INNER JOIN ppc_task ON
                              ppc_task.ppc_task_db_id = ppc_activity.ppc_activity_db_id AND
                              ppc_task.ppc_task_id    = ppc_activity.ppc_activity_id                         
                     WHERE
                         ppc_activity.ppc_wp_db_id = wp_db_id AND
                         ppc_activity.ppc_wp_id    = wp_id
                  );
   
EXCEPTION
   WHEN OTHERS THEN
      on_Return := icn_Error;
      APPLICATION_OBJECT_PKG.SetMxiError('DEV-99999','ppc_pkg@@@RefreshPlanDates@@@'||SQLERRM);
      RETURN;

END RefreshPlanDates;

END PPC_PKG;
/

--changeSet DEV-685_PPC_MasterMigr:330 stripComments:false endDelimiter:\n\s*/\s*\n|\n\s*/\s*$
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
--
-- PPC PLSQL FUNCTIONS
--
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
/********************************************************************************
*
* Function:      getTaskDefnTotalManHours
* Arguments:     aTaskDefnDbId, aTaskDefnId - pk for the task definition
*
* Description:   This function will return the total labour assigned to the task definition
*
* Orig.Coder:    jclarkin
* Recent Coder:  jclarkin
* Recent Date:   2010-20-27
*
*********************************************************************************/
CREATE OR REPLACE FUNCTION getTaskDefnTotalManHours
(
    aTaskDefnDbId NUMBER,
    aTaskDefnId NUMBER
)   RETURN NUMBER
IS
    lTempManHours NUMBER;
    lManHours NUMBER;
    lTaskDbId task_task.task_db_id%TYPE;
    lTaskId task_task.task_db_id%TYPE;
    lWorkscope task_task.workscope_bool%TYPE;
    lClassModeCd ref_task_class.class_mode_cd%TYPE;
BEGIN
   lManHours := 0;

   SELECT
      task_task.task_db_id,
      task_task.task_id,
      task_task.workscope_bool,
      ref_task_class.class_mode_cd
   INTO
      lTaskDbId,
      lTaskId,
      lWorkscope,
      lClassModeCd
   FROM
      task_task
      INNER JOIN ref_task_class ON
         ref_task_class.task_class_db_id = task_task.task_class_db_id AND
         ref_task_class.task_class_cd = task_task.task_class_cd
   WHERE
      task_task.task_defn_db_id = aTaskDefnDbId AND
      task_task.task_defn_id = aTaskDefnId
      AND
      task_task.task_def_status_cd IN ( 'ACTV', 'BUILD');

   IF (lClassModeCd = 'BLOCK') THEN
      -- Get all labour on Executable REQs
      SELECT
         NVL(SUM((task_labour_list.work_perf_hr + task_labour_list.cert_hr + task_labour_list.insp_hr ) * task_labour_list.man_pwr_ct),0) AS manhrs
      INTO lTempManHours
      FROM
         task_task block_task
         INNER JOIN task_block_req_map ON
            task_block_req_map.block_task_db_id = block_task.task_db_id AND
            task_block_req_map.block_task_id    = block_task.task_id
         INNER JOIN task_task req_task ON
            req_task.task_defn_db_id = task_block_req_map.req_task_defn_db_id AND
            req_task.task_defn_id    = task_block_req_map.req_task_defn_id
         INNER JOIN task_labour_list ON
           task_labour_list.task_db_id = req_task.task_db_id AND
           task_labour_list.task_id    = req_task.task_id
      WHERE
         block_task.task_db_id = lTaskDbId AND
         block_task.task_id = lTaskId
         AND
         req_task.task_def_status_cd = 'ACTV'
         AND
         req_task.workscope_bool = 1;
      lManHours := lManHours + lTempManHours;

      -- Get all labour on JICs of non-Executable REQs
      SELECT
         NVL(SUM((task_labour_list.work_perf_hr + task_labour_list.cert_hr + task_labour_list.insp_hr ) * task_labour_list.man_pwr_ct),0) AS manhrs
      INTO lTempManHours
      FROM
         task_task block_task
         INNER JOIN task_block_req_map ON
            task_block_req_map.block_task_db_id = block_task.task_db_id AND
            task_block_req_map.block_task_id    = block_task.task_id
         INNER JOIN task_task req_task ON
            req_task.task_defn_db_id = task_block_req_map.req_task_defn_db_id AND
            req_task.task_defn_id    = task_block_req_map.req_task_defn_id
         INNER JOIN task_jic_req_map ON
           task_jic_req_map.req_task_defn_db_id = req_task.task_defn_db_id AND
           task_jic_req_map.req_task_defn_id    = req_task.task_defn_id
         INNER JOIN task_task jic_task ON
            jic_task.task_db_id = task_jic_req_map.jic_task_db_id AND
            jic_task.task_id    = task_jic_req_map.jic_task_id
         INNER JOIN task_labour_list ON
           task_labour_list.task_db_id = jic_task.task_db_id AND
           task_labour_list.task_id    = jic_task.task_id
      WHERE
         block_task.task_db_id = lTaskDbId AND
         block_task.task_id = lTaskId
         AND
         req_task.task_def_status_cd = 'ACTV'
         AND
         req_task.workscope_bool = 0
         AND
         jic_task.task_def_status_cd = 'ACTV';
      lManHours := lManHours + lTempManHours;

   ELSIF (lClassModeCd = 'REQ' AND lWorkscope = 0) THEN
      -- Get all labour on JICs of non-Executable REQ
      SELECT
         NVL(SUM((task_labour_list.work_perf_hr + task_labour_list.cert_hr + task_labour_list.insp_hr ) * task_labour_list.man_pwr_ct),0) AS manhrs
      INTO
         lManHours
      FROM
         task_task req_task
         INNER JOIN task_jic_req_map ON
           task_jic_req_map.req_task_defn_db_id = req_task.task_defn_db_id AND
           task_jic_req_map.req_task_defn_id    = req_task.task_defn_id
         INNER JOIN task_task jic_task ON
            jic_task.task_db_id = task_jic_req_map.jic_task_db_id AND
            jic_task.task_id    = task_jic_req_map.jic_task_id
         INNER JOIN task_labour_list ON
           task_labour_list.task_db_id = jic_task.task_db_id AND
           task_labour_list.task_id    = jic_task.task_id
      WHERE
         req_task.task_db_id = lTaskDbId AND
         req_task.task_id = lTaskId
         AND
         jic_task.task_def_status_cd = 'ACTV';
   ELSE
      -- Get all labour directly on this Task Definition
      SELECT
         NVL(SUM((task_labour_list.work_perf_hr + task_labour_list.cert_hr + task_labour_list.insp_hr ) * task_labour_list.man_pwr_ct),0) AS manhrs
      INTO
         lManHours
      FROM
         task_task
         INNER JOIN task_labour_list ON
           task_labour_list.task_db_id = task_task.task_db_id AND
           task_labour_list.task_id    = task_task.task_id
      WHERE
         task_task.task_db_id = lTaskDbId AND
         task_task.task_id = lTaskId;
   END IF;

   RETURN lManHours;
EXCEPTION
   WHEN NO_DATA_FOUND THEN RETURN 0;

END getTaskDefnTotalManHours;
/