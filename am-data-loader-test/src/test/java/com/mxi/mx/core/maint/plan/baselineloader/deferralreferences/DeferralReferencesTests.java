package com.mxi.mx.core.maint.plan.baselineloader.deferralreferences;

import static org.hamcrest.MatcherAssert.assertThat;

import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.junit.Assert;

import com.mxi.mx.core.maint.plan.datamodels.simpleIDs;
import com.mxi.mx.util.BaselineLoaderTest;
import com.mxi.mx.util.TableUtil;
import com.mxi.mx.util.ValidationAndImport;
import com.mxi.mx.util.WhereClause;


/**
 * This class manages any call to deferral references tests
 *
 * @author Alicia Qian
 */
public class DeferralReferencesTests extends BaselineLoaderTest {

   public ValidationAndImport ivalidationandimport;
   // ====Table BL_FAIL_DEFER_REF============
   // assmbl_cd
   public String iACFT_ASSMBLCD = "ACFT_CD1";
   public String iENG_ASSMBLCD = "ENG_CD1";
   public String iAPU_ASSMBLCD = "APU_CD1";

   // defer name
   public String iDEFER_REF_NAME_ACFT = "DEFERACFT";
   public String iDEFER_REF_NAME_ACFT_CONFLICT = "DEFERACFTCONFLICT";
   public String iDEFER_REF_NAME_ACFT_CONFLICT_MANIX = "ATDFRACFTCONFLICT";
   public String iDEFER_REF_NAME_ACFT_RELATED = "DEFERACFTRELATED";
   public String iDEFER_REF_NAME_ACFT_RELATED_MANIX = "ATDFRACFTRELATED";
   public String iDEFER_REF_NAME_ENG = "DEFERENG";
   public String iDEFER_REF_NAME_ENG_CONFLICT = "DEFERENGCONFLICT";
   public String iDEFER_REF_NAME_ENG__MANIX = "ATDFRENGCONFLICT";
   public String iDEFER_REF_NAME_ENG_RELATED = "DEFERENGRELATED";
   public String iDEFER_REF_NAME_ENG_RELATED_MANIX = "ATDFRENGRELATED";
   public String iDEFER_REF_NAME_APU = "DEFERAPU";
   public String iDEFER_REF_NAME_APU_CONFLICT = "DEFEAPUCONFLICT";
   public String iDEFER_REF_NAME_APU_CONFLICT_MANIX = "ATDFRAPUCONFLICT";
   public String iDEFER_REF_NAME_APU_RELATED = "DEFEAPURELATED";
   public String iDEFER_REF_NAME_APU_RELATED_MANIX = "ATDFRAPURELATED";

   public String iDEFER_REF_NAME_ACFT_EXISTED = "ATDFRACFT";
   public String iDEFER_REF_NAME_ENG_EXISTED = "ATDFRENG";

   // config slot cd
   public String iACFT_CONFIG_SLOT_CD = "SYS-1";
   public String iACFT_CONFIG_SLOT_CD_2 = "SYS-2";
   public String iENG_CONFIG_SLOT_CD = "ENG-SYS-1";
   public String iAPU_CONFIG_SLOT_CD = "APU-SYS-1";

   // operator cd list
   public String iOPERATOR_CD_LIST = "MXI,ATLD";
   public String iOPERATOR_CD_LIST_1 = "MXI";
   public String iOPERATOR_CD_LIST_2 = "ATLD";
   public String iOPERATOR_CD_LIST_3 = "MXI,MXI";
   public String iOPERATOR_CD_LIST_4 = "MXI,ATLD,MXI";
   // fail sev cd
   public String iFAIL_SEV_CD = "MEL";
   // fail defer cd
   public String iFAIL_DEFER_CD = "MEL A";
   // defer ref lsesc
   public String iDEFER_REF_LDESC = "AUTO DEFER TEST";
   // defer ref status cd
   public String iDEFER_REF_STATUS_CD = "ACTV";
   // inst sys qt
   public String iINST_SYSTEMS_QT = "100";
   // diapatch sys qt
   public String iDISPATCH_SYSTEMS_QT = "10";
   // appl ldesc
   public String iAPPL_LDESC = "0001,0200";
   public String iAPPL_LDESC_2 = "010-200,500";
   public String iAPPL_LDESC_3 = "10";
   public String iAPPL_LDESC_4 = "367, 0001-0200,600,1000-3000";
   public String iAPPL_LDESC_5 = "0A01,020B";
   // oper restriction ldesc
   public String iOPER_RESTRICTIONS_LDESC = "AUTO RESTRICTION TEST";
   // perf penalties ldesc
   public String iPERF_PENALTIES_LDESC = "AUTO PERF TEST";
   // maint actions ldesc
   public String iMAINT_ACTIONS_LDESC = "AUTO ACTION TEST";

   // table bl_fail_defer_insp;
   public String iACFT_INSP_REQ_TASK_CD_1 = "REQ1";
   public String iACFT_INSP_REQ_TASK_CD_2 = "REQ-DEFER1";
   public String iACFT_INSP_JIC_TASK_CD_1 = "TRK-SOFTWARE-JIC-4";
   public String iACFT_INSP_REQ_TASK_CD_EXIST = "AL_MANUF_DT_COMP";
   public String iENG_INSP_REQ_TASK_CD = "ENG-ROOT-AL-TASK";
   public String iAPU_INSP_REQ_TASK_CD = "APU-DEFER";
   public String iACFT_INSP_REQ_CONFIG_SLOT_1 = "ACFT-SYS-1-1-TRK-P1";
   public String iACFT_INSP_REQ_CONFIG_SLOT_2 = "ACFT-SYS-1-1-TRK-SER-PARENT";

   // table bl_fail_defer_dead
   public String iACFT_DATA_TYPE_CD_HOURS = "HOURS";
   public String iACFT_DATA_TYPE_CD_CYCLES = "CYCLES";
   public String iACFT_DATA_TYPE_CD_CDY = "CDY";
   public String iDATA_TYPE_CD_CDY = "CDY";
   public String iACFT_DEAD_QT = "10";
   public String iENG_DATA_TYPE_CD_HOURS = "HOURS";
   public String iENG_DEAD_QT = "10";
   public String iAPU_DATA_TYPE_CD_HOURS = "HOURS";
   public String iAPU_DEAD_QT = "10";

   // table bl_fail_defer_cap_level
   public String iACFT_CAP_CD = "ETOPS";
   public String iACFT_CAP_LEVEL_CD = "ETOPS_90";
   public String ALT_ASSMBL_BOM_ID = null;

   // Ids which are generated by test cases
   protected simpleIDs ID_REF = null;
   protected simpleIDs ID_REF_CONFLICT = null;
   protected simpleIDs ID_REF_RELATED = null;
   protected String ID_ALT = null;
   protected String ID_ALT_CONFLICT = null;
   protected String ID_ALT_RELATED = null;


   /**
    * This function is to set all ALT to be null
    *
    *
    */
   public void setIDsNull() {
      ID_REF = null;
      ID_REF_CONFLICT = null;
      ID_REF_RELATED = null;

      ID_ALT = null;
      ID_ALT_CONFLICT = null;
      ID_ALT_RELATED = null;
   }


   /**
    * This function is to verify fail_defer_ref table after data is imported.
    *
    *
    */
   public simpleIDs check_fail_defer_ref_table( String aDEFER_REF_LDESC, String aDEFER_REF_SDESC,
         String aASSMBL_CD, String aFAIL_SEV_CD, String aFAIL_DEFER_CD, String aDEFER_REF_STATUS_CD,
         String aINST_SYSTEMS_QT, String aOP_SYSTEMS_QT, String aAPPL_LDESC,
         String aOPER_RESTRICTIONS_LDESC, String aMAINT_ACTIONS_LDESC, String aPERF_PENALTIES_LDESC,
         String ASSMBL_BOM_ID, String aMOC_APPROVAL_BOOL ) {
      String[] iIds = { "FAIL_DEFER_REF_DB_ID", "FAIL_DEFER_REF_ID", "ASSMBL_CD", "FAIL_SEV_CD",
            "FAIL_DEFER_CD", "DEFER_REF_STATUS_CD", "INST_SYSTEMS_QT", "OP_SYSTEMS_QT",
            "APPL_LDESC", "OPER_RESTRICTIONS_LDESC", "MAINT_ACTIONS_LDESC", "PERF_PENALTIES_LDESC",
            "ASSMBL_BOM_ID", "MOC_APPROVAL_BOOL" };
      List<String> lfields = new ArrayList<String>( Arrays.asList( iIds ) );
      WhereClause lArgs = new WhereClause();
      lArgs.addArguments( "DEFER_REF_SDESC", aDEFER_REF_SDESC );
      lArgs.addArguments( "DEFER_REF_LDESC", aDEFER_REF_LDESC );

      String iQueryString = TableUtil.buildTableQuery( TableUtil.FAIL_DEFER_REF, lfields, lArgs );
      List<ArrayList<String>> llists = execute( iQueryString, lfields );

      // Get IDs
      simpleIDs lIds = new simpleIDs( llists.get( 0 ).get( 0 ), llists.get( 0 ).get( 1 ) );

      Assert.assertTrue( "ASSMBL_CD", llists.get( 0 ).get( 2 ).equals( aASSMBL_CD ) );
      Assert.assertTrue( "FAIL_SEV_CD", llists.get( 0 ).get( 3 ).equals( aFAIL_SEV_CD ) );
      Assert.assertTrue( "FAIL_DEFER_CD", llists.get( 0 ).get( 4 ).equals( aFAIL_DEFER_CD ) );
      Assert.assertTrue( "DEFER_REF_STATUS_CD",
            llists.get( 0 ).get( 5 ).equals( aDEFER_REF_STATUS_CD ) );
      Assert.assertTrue( "INST_SYSTEMS_QT", llists.get( 0 ).get( 6 ).equals( aINST_SYSTEMS_QT ) );
      Assert.assertTrue( "OP_SYSTEMS_QT", llists.get( 0 ).get( 7 ).equals( aOP_SYSTEMS_QT ) );
      Assert.assertTrue( "APPL_LDESC", llists.get( 0 ).get( 8 ).equals( aAPPL_LDESC ) );
      Assert.assertTrue( "OPER_RESTRICTIONS_LDESC",
            llists.get( 0 ).get( 9 ).equals( aOPER_RESTRICTIONS_LDESC ) );
      Assert.assertTrue( "MAINT_ACTIONS_LDESC",
            llists.get( 0 ).get( 10 ).equals( aMAINT_ACTIONS_LDESC ) );
      Assert.assertTrue( "PERF_PENALTIES_LDESC",
            llists.get( 0 ).get( 11 ).equals( aPERF_PENALTIES_LDESC ) );
      Assert.assertTrue( "ASSMBL_BOM_ID", llists.get( 0 ).get( 12 ).equals( ASSMBL_BOM_ID ) );
      Assert.assertTrue( "MOC_APPROVAL_BOOL",
            llists.get( 0 ).get( 13 ).equals( aMOC_APPROVAL_BOOL ) );

      return lIds;

   }


   /**
    * This function is to verify fail_defer_ref_dead table after data is imported.
    *
    *
    */

   public void check_fail_defer_ref_dead( String aFail_DEFER_REF_ID, simpleIDs aDATA_TYPE_IDs,
         String aDEAD_QT ) {

      String[] iIds = { "DATA_TYPE_DB_ID", "DATA_TYPE_ID", "DEAD_QT" };
      List<String> lfields = new ArrayList<String>( Arrays.asList( iIds ) );
      WhereClause lArgs = new WhereClause();
      lArgs.addArguments( "FAIL_DEFER_REF_ID", aFail_DEFER_REF_ID );

      String iQueryString =
            TableUtil.buildTableQuery( TableUtil.FAIL_DEFER_REF_DEAD, lfields, lArgs );
      List<ArrayList<String>> llists = execute( iQueryString, lfields );

      Assert.assertTrue( "DATA_TYPE_DB_ID",
            llists.get( 0 ).get( 0 ).equals( aDATA_TYPE_IDs.getNO_DB_ID() ) );
      Assert.assertTrue( "DATA_TYPE_ID",
            llists.get( 0 ).get( 1 ).equals( aDATA_TYPE_IDs.getNO_ID() ) );
      Assert.assertTrue( "DEAD_QT", llists.get( 0 ).get( 2 ).equals( aDEAD_QT ) );

   }


   /**
    * This function is to verify fail_defer_ref_degrad_cap table after data is imported.
    *
    *
    */

   public void check_fail_defer_ref_degrad_cap( String aFail_DEFER_REF_ID, String aCAP_CD,
         String aCAP_LEVEL_CD ) {

      String[] iIds = { "CAP_CD", "CAP_LEVEL_CD", "ALT_ID" };
      List<String> lfields = new ArrayList<String>( Arrays.asList( iIds ) );
      WhereClause lArgs = new WhereClause();
      lArgs.addArguments( "FAIL_DEFER_REF_ID", aFail_DEFER_REF_ID );

      String iQueryString =
            TableUtil.buildTableQuery( TableUtil.FAIL_DEFER_REF_DEGRAD_CAP, lfields, lArgs );
      List<ArrayList<String>> llists = execute( iQueryString, lfields );

      Assert.assertTrue( "CAP_CD", llists.get( 0 ).get( 0 ).equals( aCAP_CD ) );
      Assert.assertTrue( "CAP_LEVEL_CD", llists.get( 0 ).get( 1 ).equals( aCAP_LEVEL_CD ) );
      Assert.assertFalse( "ALT_ID", StringUtils.isBlank( llists.get( 0 ).get( 2 ) ) );

   }


   /**
    * This function is to verify expected error code is generated.
    *
    *
    */
   public void CheckErrorCode( String aValidationCode ) {

      int lErrorCount = getCount( TableUtil.BL_PROC_RESULT );

      String lTestResultErrorList = "";

      // if there are any errors query for results
      if ( lErrorCount > 0 ) {
         lTestResultErrorList = getDeferralErrors();
      }

      // compare result to expectation
      if ( aValidationCode.equalsIgnoreCase( "PASS" ) ) { // expecting no errors

         // assert that no errors are found
         assertThat( "Expected PASS, but instead found validation errors: " + lTestResultErrorList,
               lErrorCount == 0 );
      } else { // expecting error

         // asserting that expected error was found
         assertThat( "Unexpected validation results. Expected: " + aValidationCode + ". Found: "
               + lTestResultErrorList, lTestResultErrorList.contains( aValidationCode ) );
      }

   }


   /**
    * This function is to retrieve ALT ID from faik_defer_ref table.
    *
    *
    */
   public String getALT_ID( simpleIDs aID_REF ) {
      String[] iIds = { "ALT_ID" };
      List<String> lfields = new ArrayList<String>( Arrays.asList( iIds ) );
      WhereClause lArgs = new WhereClause();
      lArgs.addArguments( "FAIL_DEFER_REF_DB_ID", aID_REF.getNO_DB_ID() );
      lArgs.addArguments( "FAIL_DEFER_REF_ID", aID_REF.getNO_ID() );

      String iQueryString = TableUtil.buildTableQuery( TableUtil.FAIL_DEFER_REF, lfields, lArgs );
      List<ArrayList<String>> llists = execute( iQueryString, lfields );

      // Get ID
      return llists.get( 0 ).get( 0 );

   }


   /**
    * This function is to retrieve all the error from proc table
    *
    *
    */
   protected String getDeferralErrors() {
      StringBuilder lQueryErrorList = new StringBuilder();
      lQueryErrorList
            .append( "SELECT distinct (BL_PROC_RESULT.result_cd), DL_REF_MESSAGE.user_desc From " );
      lQueryErrorList.append( TableUtil.BL_PROC_RESULT );
      lQueryErrorList.append( " JOIN " );
      lQueryErrorList.append( TableUtil.DL_REF_MESSAGE );
      lQueryErrorList.append( " ON BL_PROC_RESULT.result_cd = DL_REF_MESSAGE.result_cd " );
      lQueryErrorList.append( "WHERE BL_PROC_RESULT.result_cd IS NOT NULL" );

      ResultSet lQueryResults = null;
      String lResults = "";
      try {
         lQueryResults = runQuery( lQueryErrorList.toString() );

         while ( lQueryResults.next() ) {

            lResults += "[" + lQueryResults.getString( "result_cd" );
            lResults += "-" + lQueryResults.getString( "user_desc" );
            lResults += "]";
            if ( !lQueryResults.isLast() ) {
               lResults += ", ";
            }
         }

      } catch ( SQLException e ) {
         e.printStackTrace();
         Assert.assertTrue( "Failed on getDeferralErrors.", false );

      }

      return lResults;
   }


   /**
    * This function is to retrieve data carrier IDs from ORG_CARRIER table.
    *
    *
    */

   public simpleIDs getCarrierIds( String aCARRIER_CD, String aIATA_CD, String aICAO_CD ) {
      String[] iIds = { "CARRIER_DB_ID", "CARRIER_ID" };
      List<String> lfields = new ArrayList<String>( Arrays.asList( iIds ) );
      WhereClause lArgs = new WhereClause();
      lArgs.addArguments( "CARRIER_CD", aCARRIER_CD );
      lArgs.addArguments( "IATA_CD", aIATA_CD );
      lArgs.addArguments( "ICAO_CD", aICAO_CD );

      String iQueryString = TableUtil.buildTableQuery( TableUtil.ORG_CARRIER, lfields, lArgs );
      List<ArrayList<String>> llists = execute( iQueryString, lfields );

      // Get IDs
      simpleIDs lIds = new simpleIDs( llists.get( 0 ).get( 0 ), llists.get( 0 ).get( 1 ) );
      return lIds;

   }


   /**
    * This function is to retrieve ALT ID from EQP_ASSMBL_BOM table.
    *
    *
    */
   public String getAltBomID( String aASSMBL_CD, String aASSMBL_BOM_CD ) {
      String[] iIds = { "ALT_ID" };
      List<String> lfields = new ArrayList<String>( Arrays.asList( iIds ) );
      WhereClause lArgs = new WhereClause();
      lArgs.addArguments( "ASSMBL_CD", aASSMBL_CD );
      lArgs.addArguments( "ASSMBL_BOM_CD", aASSMBL_BOM_CD );

      String iQueryString = TableUtil.buildTableQuery( TableUtil.EQP_ASSMBL_BOM, lfields, lArgs );
      List<ArrayList<String>> llists = execute( iQueryString, lfields );

      // Get ID
      return llists.get( 0 ).get( 0 );

   }


   /**
    * This function is to retrieve data type ids by giving domain type cd and ENG Unit CD
    *
    *
    */
   @Override
   public simpleIDs getDataTypeIDs( String aDomainTypeCd, String aEngUntiCd, String aDataTypeCd ) {

      String[] iIds = { "DATA_TYPE_DB_ID", "DATA_TYPE_ID" };
      List<String> lfields = new ArrayList<String>( Arrays.asList( iIds ) );
      WhereClause lArgs = new WhereClause();
      lArgs.addArguments( "DOMAIN_TYPE_CD", aDomainTypeCd );
      lArgs.addArguments( "ENG_UNIT_CD", aEngUntiCd );
      lArgs.addArguments( "DATA_TYPE_CD", aDataTypeCd );

      String iQueryString = TableUtil.buildTableQuery( TableUtil.MIM_DATA_TYPE, lfields, lArgs );
      List<ArrayList<String>> llists = execute( iQueryString, lfields );

      // Get IDs
      simpleIDs lIds = new simpleIDs( llists.get( 0 ).get( 0 ), llists.get( 0 ).get( 1 ) );

      return lIds;
   }


   /**
    * This function is to retrieve ALT ID from task_task table.
    *
    *
    */
   public String getAltTASKID( String aTASK_CD ) {
      String lquery = "select task_defn.alt_id from task_defn " + "inner join task_task on "
            + "task_defn.task_defn_db_id=task_task.task_defn_db_id and "
            + "task_defn.task_defn_id=task_task.task_defn_id " + "where task_task.task_cd='"
            + aTASK_CD + "'";

      return getStringValueFromQuery( lquery, "ALT_ID" );

   }


   /**
    * This function is called by after test method to restore data which has been modified by tests.
    *
    *
    */

   public void RestoreData() {

      String lStrDelete = null;

      if ( ID_REF != null ) {

         // delete FAIL_DEFER_REF
         lStrDelete = "delete from " + TableUtil.FAIL_DEFER_REF + "  where FAIL_DEFER_REF_DB_ID="
               + ID_REF.getNO_DB_ID() + " and FAIL_DEFER_REF_ID=" + ID_REF.getNO_ID();
         executeSQL( lStrDelete );

         // delete fail_defer_carrier
         lStrDelete =
               "delete from " + TableUtil.FAIL_DEFER_CARRIER + "  where FAIL_DEFER_REF_DB_ID="
                     + ID_REF.getNO_DB_ID() + " and FAIL_DEFER_REF_ID=" + ID_REF.getNO_ID();
         executeSQL( lStrDelete );

      }

      if ( ID_REF_CONFLICT != null ) {

         // delete FAIL_DEFER_REF
         lStrDelete = "delete from " + TableUtil.FAIL_DEFER_REF + "  where FAIL_DEFER_REF_DB_ID="
               + ID_REF_CONFLICT.getNO_DB_ID() + " and FAIL_DEFER_REF_ID="
               + ID_REF_CONFLICT.getNO_ID();
         executeSQL( lStrDelete );

         // delete fail_defer_carrier
         lStrDelete = "delete from " + TableUtil.FAIL_DEFER_CARRIER
               + "  where FAIL_DEFER_REF_DB_ID=" + ID_REF_CONFLICT.getNO_DB_ID()
               + " and FAIL_DEFER_REF_ID=" + ID_REF_CONFLICT.getNO_ID();
         executeSQL( lStrDelete );

      }

      if ( ID_REF_RELATED != null ) {

         // delete FAIL_DEFER_REF
         lStrDelete = "delete from " + TableUtil.FAIL_DEFER_REF + "  where FAIL_DEFER_REF_DB_ID="
               + ID_REF_RELATED.getNO_DB_ID() + " and FAIL_DEFER_REF_ID="
               + ID_REF_RELATED.getNO_ID();
         executeSQL( lStrDelete );

         // delete fail_defer_carrier
         lStrDelete = "delete from " + TableUtil.FAIL_DEFER_CARRIER
               + "  where FAIL_DEFER_REF_DB_ID=" + ID_REF_RELATED.getNO_DB_ID()
               + " and FAIL_DEFER_REF_ID=" + ID_REF_RELATED.getNO_ID();
         executeSQL( lStrDelete );

      }

      if ( ID_ALT != null ) {

         // delete FAIL_DEFER_REF_REL_DEF
         lStrDelete = "delete from " + TableUtil.FAIL_DEFER_REF_REL_DEF
               + "  where FAIL_DEFER_REF_ID='" + ID_ALT + "'";
         executeSQL( lStrDelete );

         // delete FAIL_DEFER_REF_CONFLICT_DEF
         lStrDelete = "delete from " + TableUtil.FAIL_DEFER_REF_CONFLICT_DEF
               + "  where FAIL_DEFER_REF_ID='" + ID_ALT + "'";
         executeSQL( lStrDelete );

         // delete FAIL_DEFER_REF_DEAD
         lStrDelete = "delete from " + TableUtil.FAIL_DEFER_REF_DEAD + "  where FAIL_DEFER_REF_ID='"
               + ID_ALT + "'";
         executeSQL( lStrDelete );

         // delete FAIL_DEFER_REF_TASK_DEFN
         lStrDelete = "delete from " + TableUtil.FAIL_DEFER_REF_TASK_DEFN
               + "  where FAIL_DEFER_REF_ID='" + ID_ALT + "'";
         executeSQL( lStrDelete );

         // delete FAIL_DEFER_REF_DEGRAD_CAP
         lStrDelete = "delete from " + TableUtil.FAIL_DEFER_REF_DEGRAD_CAP
               + "  where FAIL_DEFER_REF_ID='" + ID_ALT + "'";
         executeSQL( lStrDelete );

      }
   }


   /**
    * This function is to implement interface ValidationAndImport
    *
    * @param: blnOnlyValidation
    * @param: allornone
    *
    * @return: return code of Int
    *
    */
   public int runValidationAndImport( boolean ablnOnlyValidation, boolean allornone ) {
      int lrtValue = 0;
      ivalidationandimport = new ValidationAndImport() {

         @Override
         public int runValidation( boolean allornone ) {
            int lReturn = 0;
            CallableStatement lPrepareCallDeferral;

            try {
               if ( allornone ) {

                  lPrepareCallDeferral = getConnection().prepareCall(
                        "BEGIN  bl_deferral_references_import.validate(aiv_exist_in_mx =>'STRICT',"
                              + " aib_allornone =>true," + " aon_retcode =>?,"
                              + " aov_retmsg =>?); END;" );
               } else {
                  lPrepareCallDeferral = getConnection().prepareCall(
                        "BEGIN  bl_deferral_references_import.validate(aiv_exist_in_mx =>'STRICT',"
                              + " aib_allornone =>false," + " aon_retcode =>?,"
                              + " aov_retmsg =>?); END;" );

               }

               lPrepareCallDeferral.registerOutParameter( 1, Types.INTEGER );
               lPrepareCallDeferral.registerOutParameter( 2, Types.VARCHAR );
               lPrepareCallDeferral.execute();
               commit();
               lReturn = lPrepareCallDeferral.getInt( 1 );
            } catch ( SQLException e ) {
               e.printStackTrace();
            }
            return lReturn;

         }


         @Override
         public int runImport( boolean allornone ) {
            int lReturn = 0;
            CallableStatement lPrepareCallDeferral;

            try {

               if ( allornone ) {

                  lPrepareCallDeferral = getConnection().prepareCall(
                        "BEGIN  bl_deferral_references_import.import(aiv_exist_in_mx =>'STRICT',"
                              + " aib_allornone =>true," + " aon_retcode =>?,"
                              + " aov_retmsg =>?); END;" );
               } else {
                  lPrepareCallDeferral = getConnection().prepareCall(
                        "BEGIN  bl_deferral_references_import.import(aiv_exist_in_mx =>'STRICT',"
                              + " aib_allornone =>false," + " aon_retcode =>?,"
                              + " aov_retmsg =>?); END;" );

               }
               lPrepareCallDeferral.registerOutParameter( 1, Types.INTEGER );
               lPrepareCallDeferral.registerOutParameter( 2, Types.VARCHAR );
               lPrepareCallDeferral.execute();
               commit();
               lReturn = lPrepareCallDeferral.getInt( 1 );
            } catch ( SQLException e ) {
               e.printStackTrace();
            }
            return lReturn;
         }

      };

      lrtValue = ablnOnlyValidation ? ivalidationandimport.runValidation( allornone )
            : ivalidationandimport.runImport( allornone );

      return lrtValue;
   }


   /**
    * This function is to produce error code 00010
    *
    * @return: return code of Int
    */

   public int runValidation_00010() {
      int lReturn = 0;
      CallableStatement lPrepareCallDeferral;

      try {
         lPrepareCallDeferral = getConnection().prepareCall(
               "BEGIN  bl_deferral_references_import.validate(aiv_exist_in_mx =>'test',"
                     + " aib_allornone =>true," + " aon_retcode =>?," + " aov_retmsg =>?); END;" );

         lPrepareCallDeferral.registerOutParameter( 1, Types.INTEGER );
         lPrepareCallDeferral.registerOutParameter( 2, Types.VARCHAR );
         lPrepareCallDeferral.execute();
         commit();
         lReturn = lPrepareCallDeferral.getInt( 1 );
      } catch ( SQLException e ) {
         e.printStackTrace();
      }

      return lReturn;

   }

}
