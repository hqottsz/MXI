package com.mxi.mx.core.ejb.stask.staskbean;

import java.util.Calendar;
import java.util.Date;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;

import com.mxi.am.db.connection.DatabaseConnectionRule;
import com.mxi.am.domain.Domain;
import com.mxi.am.domain.Domain.DomainConfiguration;
import com.mxi.am.domain.WorkPackage;
import com.mxi.am.domain.builder.HumanResourceDomainBuilder;
import com.mxi.am.domain.builder.InventoryBuilder;
import com.mxi.am.domain.builder.TaskBuilder;
import com.mxi.am.ee.FakeJavaEeDependenciesRule;
import com.mxi.mx.common.config.GlobalParameters;
import com.mxi.mx.common.config.GlobalParametersFake;
import com.mxi.mx.common.config.ParmTypeEnum;
import com.mxi.mx.common.ejb.DAOLocalStub;
import com.mxi.mx.common.ejb.EjbFactory;
import com.mxi.mx.common.ejb.EjbFactoryStub;
import com.mxi.mx.common.ejb.security.SecurityIdentityStub;
import com.mxi.mx.common.table.InjectionOverrideRule;
import com.mxi.mx.common.validation.Messages;
import com.mxi.mx.common.validation.ValidationException;
import com.mxi.mx.core.ejb.stask.STaskBean;
import com.mxi.mx.core.key.HumanResourceKey;
import com.mxi.mx.core.key.RefEventStatusKey;
import com.mxi.mx.core.key.RefInvClassKey;
import com.mxi.mx.core.key.TaskKey;
import com.mxi.mx.core.services.stask.complete.CompleteService;


/**
 *
 * Integration test for
 * {@linkplain STaskBean#complete(TaskKey, TaskKey[], Date, HumanResourceKey, boolean, javax.transaction.UserTransaction)}
 *
 */
public class CompleteTest {

   @Rule
   public DatabaseConnectionRule iDatabaseConnectionRule = new DatabaseConnectionRule();

   @Rule
   public FakeJavaEeDependenciesRule iFakeJavaEeDependenciesRule = new FakeJavaEeDependenciesRule();

   @Rule
   public InjectionOverrideRule iInjectionOverrideRule = new InjectionOverrideRule();

   // Test Data
   private HumanResourceKey iAuthorizingHr;
   private TaskKey iTask;
   private TaskKey iTaskAlt;
   private TaskKey iWorkPackage;
   private Date iBatchCompletionDate;

   // Object under test
   private STaskBean iSTaskBean;

   private GlobalParametersFake iConfigParms;


   @Before
   public void setUp() {

      iConfigParms = new GlobalParametersFake( ParmTypeEnum.LOGIC.name() );
      iConfigParms.setString( "END_DATE_COMPLETION_THRESHOLD", "-1" );
      GlobalParameters.setInstance( iConfigParms );

      Calendar lCalendar = Calendar.getInstance();
      lCalendar.setTime( new Date() );
      lCalendar.add( Calendar.HOUR_OF_DAY, -10 );
      iBatchCompletionDate = lCalendar.getTime();

      iAuthorizingHr = new HumanResourceDomainBuilder().build();
      iTask = new TaskBuilder().build();
      iTaskAlt = new TaskBuilder().build();
      iWorkPackage = Domain.createWorkPackage( new DomainConfiguration<WorkPackage>() {

         @Override
         public void configure( WorkPackage aWorkPackage ) {
            aWorkPackage
                  .setAircraft( new InventoryBuilder().withClass( RefInvClassKey.ACFT ).build() );
            aWorkPackage.setActualStartDate( new Date() );
            aWorkPackage.setActualEndDate( new Date() );
            aWorkPackage.setStatus( RefEventStatusKey.IN_WORK );
         }
      } );

      EjbFactory
            .setSingleton( new EjbFactoryStub( new SecurityIdentityStub(), new DAOLocalStub() ) );

      iSTaskBean = new STaskBean();
   }


   @After
   public void tearDown() {
      EjbFactory.setSingleton( null );
      GlobalParameters.setInstance( "LOGIC", null );
   }


   @Test
   public void complete_selected_asyncActionAddedToQueue() throws Throwable {

      CompleteService.batchCompleteBackground( iWorkPackage, new Date(), new TaskKey[] { iTask },
            iAuthorizingHr );
   }


   @Test
   public void complete_all_asyncActionAddedToQueue() throws Throwable {
      CompleteService.batchCompleteWorkPackageBackground( iWorkPackage, new Date(),
            iAuthorizingHr );

   }


   /**
    * Tests when batch complete tasks with a completion date earlier than the work package actual
    * start date, and user hasn't approved the warning which generated by @link
    * BatchCompleteTasksCompletionDateValidator yet. Then a @link ValidationException(Warning page)
    * will be thrown. (Batch Complete Tasks button with selected tasks)
    */
   @Test( expected = ValidationException.class )
   public void
         complete_selected_completionDateEarlierThanWorkPackageActualStartDate_configParmIsWarmAndNotApproveYet()
               throws Throwable {
      iConfigParms.setString( "ALLOW_BATCH_COMPLETE_BEFORE_WORK_PACKAGE_ACTUAL_START_DT", "WARN" );

      Messages lMessages = new Messages( false );
      CompleteService.complete( iWorkPackage, new TaskKey[] { iTask, iTaskAlt },
            iBatchCompletionDate, iAuthorizingHr, false, null, lMessages );
      lMessages.validate();
   }


   /**
    * Tests when batch complete tasks with a completion date earlier than the work package actual
    * start date, but user has already approved the warning which generated by @link
    * BatchCompleteTasksCompletionDateValidator. Then a batch completion of selected tasks will
    * happen. (Batch Complete Tasks button with selected tasks)
    */
   @Test
   public void
         complete_selected_completionDateEarlierThanWorkPackageActualStartDate_configParmIsWarmAndApproved()
               throws Throwable {
      iConfigParms.setString( "ALLOW_BATCH_COMPLETE_BEFORE_WORK_PACKAGE_ACTUAL_START_DT", "WARN" );
      Messages lMessages = new Messages( false );
      CompleteService.complete( iWorkPackage, new TaskKey[] { iTask, iTaskAlt }, new Date(),
            iAuthorizingHr, false, null, lMessages );
      lMessages.validate();
   }


   /**
    * Tests when batch complete tasks with a completion date earlier than the work package actual
    * start date, and an error message will be generated by @link
    * BatchCompleteTasksCompletionDateValidator. Then a @link ValidationException(Error page) will
    * be thrown. (Batch Complete Tasks button with selected tasks)
    */
   @Test( expected = ValidationException.class )
   public void
         complete_selected_completionDateEarlierThanWorkPackageActualStartDate_configParmIsError()
               throws Throwable {
      iConfigParms.setString( "ALLOW_BATCH_COMPLETE_BEFORE_WORK_PACKAGE_ACTUAL_START_DT", "ERROR" );
      Messages lMessages = new Messages( false );
      CompleteService.complete( iWorkPackage, null, iBatchCompletionDate, iAuthorizingHr, false,
            null, lMessages );
      lMessages.validate();

   }


   /**
    * Tests when batch complete tasks with a completion date earlier than the work package actual
    * start date, and user hasn't approved the warning which generated by @link
    * BatchCompleteTasksCompletionDateValidator yet. Then a @link ValidationException(Warning page)
    * will be thrown. (Batch Complete All Tasks button)
    */
   @Test( expected = ValidationException.class )
   public void
         complete_all_completionDateEarlierThanWorkPackageActualStartDate_configParmIsWarmAndNotApproveYet()
               throws Throwable {
      iConfigParms.setString( "ALLOW_BATCH_COMPLETE_BEFORE_WORK_PACKAGE_ACTUAL_START_DT", "WARN" );
      Messages lMessages = new Messages( false );
      CompleteService.complete( iWorkPackage, null, iBatchCompletionDate, iAuthorizingHr, false,
            null, lMessages );
      lMessages.validate();

   }


   /**
    * Tests when batch complete tasks with a completion date earlier than the work package actual
    * start date, but user has already approved the warning which generated by @link
    * BatchCompleteTasksCompletionDateValidator. Then a batch completion of selected tasks will
    * happen. (Batch Complete All Tasks button)
    */
   @Test
   public void
         complete_all_completionDateEarlierThanWorkPackageActualStartDate_configParmIsWarmAndApproved()
               throws Throwable {
      iConfigParms.setString( "ALLOW_BATCH_COMPLETE_BEFORE_WORK_PACKAGE_ACTUAL_START_DT", "WARN" );

      Messages lMessages = new Messages( true );
      CompleteService.complete( iWorkPackage, null, iBatchCompletionDate, iAuthorizingHr, false,
            null, lMessages );
      lMessages.validate();

   }


   /**
    * Tests when batch complete tasks with a completion date earlier than the work package actual
    * start date, and an error message will be generated by @link
    * BatchCompleteTasksCompletionDateValidator. Then a @link ValidationException(Error page) will
    * be thrown. (Batch Complete All Tasks button)
    */
   @Test( expected = ValidationException.class )
   public void complete_all_completionDateEarlierThanWorkPackageActualStartDate_configParmIsError()
         throws Throwable {
      iConfigParms.setString( "ALLOW_BATCH_COMPLETE_BEFORE_WORK_PACKAGE_ACTUAL_START_DT", "ERROR" );

      Messages lMessages = new Messages( false );
      CompleteService.complete( iWorkPackage, null, iBatchCompletionDate, iAuthorizingHr, false,
            null, lMessages );
      lMessages.validate();
   }

}
